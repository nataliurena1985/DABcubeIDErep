
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b880  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002598  0801ba20  0801ba20  0002ba20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dfb8  0801dfb8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  0801dfb8  0801dfb8  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801dfb8  0801dfb8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dfb8  0801dfb8  0002dfb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dfbc  0801dfbc  0002dfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801dfc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca34  200001f0  0801e1b0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cc24  0801e1b0  0003cc24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002acb2  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000677e  00000000  00000000  0005af15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002220  00000000  00000000  00061698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a39  00000000  00000000  000638b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6f5  00000000  00000000  000652f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035792  00000000  00000000  0008f9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e06bb  00000000  00000000  000c5178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000959c  00000000  00000000  001a5834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001aedd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ba08 	.word	0x0801ba08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801ba08 	.word	0x0801ba08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <AppInit>:
unsigned int m_FREC=100;
unsigned int ValorPista1;
unsigned int ValorPista2;

void AppInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b093      	sub	sp, #76	; 0x4c
 8000c70:	af00      	add	r7, sp, #0
	int NroPIC=0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
	int NroBOT=0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	643b      	str	r3, [r7, #64]	; 0x40
	int NroBTX=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int NroPEL=0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
	int i;
	char a,b,c,d,e,ch;
	char File[50];

	m_ActivarPWM=0;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <AppInit+0x30>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
	m_Pantalla=0;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <AppInit+0x34>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
	//ApagoCanales();
}
 8000c8e:	bf00      	nop
 8000c90:	374c      	adds	r7, #76	; 0x4c
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200047a4 	.word	0x200047a4
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <AppLoop>:

void AppLoop(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09e      	sub	sp, #120	; 0x78
 8000cac:	af04      	add	r7, sp, #16
		MODIFY_REG(SD_SPI_HANDLE.Instance->CR1,SPI_BAUDRATEPRESCALER_256,SPI_BAUDRATEPRESCALER_2);
		SPI3->CR1 |= SPI_CR1_SPE;
	}
*/

	if(m_Pantalla == 0)
 8000cae:	4baf      	ldr	r3, [pc, #700]	; (8000f6c <AppLoop+0x2c4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d139      	bne.n	8000d2a <AppLoop+0x82>
	{
		SPI3->CR1  &= ~ SPI_CR1_SPE;
 8000cb6:	4bae      	ldr	r3, [pc, #696]	; (8000f70 <AppLoop+0x2c8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4aad      	ldr	r2, [pc, #692]	; (8000f70 <AppLoop+0x2c8>)
 8000cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cc0:	6013      	str	r3, [r2, #0]
		MODIFY_REG(SD_SPI_HANDLE.Instance->CR1,SPI_BAUDRATEPRESCALER_256,SPI_BAUDRATEPRESCALER_2);
 8000cc2:	4bac      	ldr	r3, [pc, #688]	; (8000f74 <AppLoop+0x2cc>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4baa      	ldr	r3, [pc, #680]	; (8000f74 <AppLoop+0x2cc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000cd0:	601a      	str	r2, [r3, #0]
		SPI3->CR1 |= SPI_CR1_SPE;
 8000cd2:	4ba7      	ldr	r3, [pc, #668]	; (8000f70 <AppLoop+0x2c8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4aa6      	ldr	r2, [pc, #664]	; (8000f70 <AppLoop+0x2c8>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	6013      	str	r3, [r2, #0]
		//PIC(LOGO_MM,0,0,0);
		f_BMP("REC/LOGO/PIC LOGO_WCH.bmp",0,0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	48a5      	ldr	r0, [pc, #660]	; (8000f78 <AppLoop+0x2d0>)
 8000ce4:	f017 fb60 	bl	80183a8 <f_BMP>
		sprintf(str,"%d %d",m_Pantalla,ERROR_SD);
 8000ce8:	4ba0      	ldr	r3, [pc, #640]	; (8000f6c <AppLoop+0x2c4>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4ba3      	ldr	r3, [pc, #652]	; (8000f7c <AppLoop+0x2d4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	49a3      	ldr	r1, [pc, #652]	; (8000f80 <AppLoop+0x2d8>)
 8000cf4:	f019 f9a2 	bl	801a03c <siprintf>
		ILI9341_Draw_String(10,10, WHITE, 0xf800,str,2);
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d08:	210a      	movs	r1, #10
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f010 fd92 	bl	8011834 <ILI9341_Draw_String>
        BOW(34,200,0,18,INGRESAR);
 8000d10:	4b9c      	ldr	r3, [pc, #624]	; (8000f84 <AppLoop+0x2dc>)
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2312      	movs	r3, #18
 8000d16:	2200      	movs	r2, #0
 8000d18:	21c8      	movs	r1, #200	; 0xc8
 8000d1a:	2022      	movs	r0, #34	; 0x22
 8000d1c:	f016 ff40 	bl	8017ba0 <BOW>
        m_Pantalla++;
 8000d20:	4b92      	ldr	r3, [pc, #584]	; (8000f6c <AppLoop+0x2c4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a91      	ldr	r2, [pc, #580]	; (8000f6c <AppLoop+0x2c4>)
 8000d28:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == 2)
 8000d2a:	4b90      	ldr	r3, [pc, #576]	; (8000f6c <AppLoop+0x2c4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d139      	bne.n	8000da6 <AppLoop+0xfe>
	{
		SPI3->CR1  &= ~ SPI_CR1_SPE;
 8000d32:	4b8f      	ldr	r3, [pc, #572]	; (8000f70 <AppLoop+0x2c8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a8e      	ldr	r2, [pc, #568]	; (8000f70 <AppLoop+0x2c8>)
 8000d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d3c:	6013      	str	r3, [r2, #0]
		MODIFY_REG(SD_SPI_HANDLE.Instance->CR1,SPI_BAUDRATEPRESCALER_256,SPI_BAUDRATEPRESCALER_2);
 8000d3e:	4b8d      	ldr	r3, [pc, #564]	; (8000f74 <AppLoop+0x2cc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b8b      	ldr	r3, [pc, #556]	; (8000f74 <AppLoop+0x2cc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000d4c:	601a      	str	r2, [r3, #0]
		SPI3->CR1 |= SPI_CR1_SPE;
 8000d4e:	4b88      	ldr	r3, [pc, #544]	; (8000f70 <AppLoop+0x2c8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a87      	ldr	r2, [pc, #540]	; (8000f70 <AppLoop+0x2c8>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6013      	str	r3, [r2, #0]
		f_BMP("REC/LOGO/PIC LOGO_ROT.bmp",0,0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	488a      	ldr	r0, [pc, #552]	; (8000f88 <AppLoop+0x2e0>)
 8000d60:	f017 fb22 	bl	80183a8 <f_BMP>
		sprintf(str,"%d %d",m_Pantalla,ERROR_SD);
 8000d64:	4b81      	ldr	r3, [pc, #516]	; (8000f6c <AppLoop+0x2c4>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b84      	ldr	r3, [pc, #528]	; (8000f7c <AppLoop+0x2d4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	4984      	ldr	r1, [pc, #528]	; (8000f80 <AppLoop+0x2d8>)
 8000d70:	f019 f964 	bl	801a03c <siprintf>
		ILI9341_Draw_String(10,10, WHITE, 0xf800,str,2);
 8000d74:	2302      	movs	r3, #2
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	463b      	mov	r3, r7
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d84:	210a      	movs	r1, #10
 8000d86:	200a      	movs	r0, #10
 8000d88:	f010 fd54 	bl	8011834 <ILI9341_Draw_String>
        BOW(34,200,0,18,INGRESAR);
 8000d8c:	4b7d      	ldr	r3, [pc, #500]	; (8000f84 <AppLoop+0x2dc>)
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2312      	movs	r3, #18
 8000d92:	2200      	movs	r2, #0
 8000d94:	21c8      	movs	r1, #200	; 0xc8
 8000d96:	2022      	movs	r0, #34	; 0x22
 8000d98:	f016 ff02 	bl	8017ba0 <BOW>
        m_Pantalla++;
 8000d9c:	4b73      	ldr	r3, [pc, #460]	; (8000f6c <AppLoop+0x2c4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a72      	ldr	r2, [pc, #456]	; (8000f6c <AppLoop+0x2c4>)
 8000da4:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == MENU_PRINCIPAL)
 8000da6:	4b71      	ldr	r3, [pc, #452]	; (8000f6c <AppLoop+0x2c4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d129      	bne.n	8000e02 <AppLoop+0x15a>
	{
		FondoCompletoAzul();
 8000dae:	f018 f911 	bl	8018fd4 <FondoCompletoAzul>
    	Encabezamiento3("MENU PRINCIPAL");
 8000db2:	4876      	ldr	r0, [pc, #472]	; (8000f8c <AppLoop+0x2e4>)
 8000db4:	f017 fd92 	bl	80188dc <Encabezamiento3>
    	MenuSet( 0,"ARRANCAR            ",VISOR);
 8000db8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dbc:	4974      	ldr	r1, [pc, #464]	; (8000f90 <AppLoop+0x2e8>)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f018 fa30 	bl	8019224 <MenuSet>
    	MenuSet( 1,"DESARROLLO DAB      ",DES_DAB);
 8000dc4:	f640 0234 	movw	r2, #2100	; 0x834
 8000dc8:	4972      	ldr	r1, [pc, #456]	; (8000f94 <AppLoop+0x2ec>)
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f018 fa2a 	bl	8019224 <MenuSet>
    	MenuSet( 2,"DESARROLLO MPPT     ",DES_MPPT);
 8000dd0:	f640 0298 	movw	r2, #2200	; 0x898
 8000dd4:	4970      	ldr	r1, [pc, #448]	; (8000f98 <AppLoop+0x2f0>)
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f018 fa24 	bl	8019224 <MenuSet>
    	MenuSet( 3,"DESARROLLO INVERTER ",DES_INVERTER);
 8000ddc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000de0:	496e      	ldr	r1, [pc, #440]	; (8000f9c <AppLoop+0x2f4>)
 8000de2:	2003      	movs	r0, #3
 8000de4:	f018 fa1e 	bl	8019224 <MenuSet>
    	MenuSet( 4,"CONFIGURAR          ",CONFIGURAR);
 8000de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dec:	496c      	ldr	r1, [pc, #432]	; (8000fa0 <AppLoop+0x2f8>)
 8000dee:	2004      	movs	r0, #4
 8000df0:	f018 fa18 	bl	8019224 <MenuSet>

    	MenuPrint();
 8000df4:	f018 fa74 	bl	80192e0 <MenuPrint>
    	m_Pantalla++;
 8000df8:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <AppLoop+0x2c4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <AppLoop+0x2c4>)
 8000e00:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == CONFIGURAR)
 8000e02:	4b5a      	ldr	r3, [pc, #360]	; (8000f6c <AppLoop+0x2c4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d117      	bne.n	8000e3e <AppLoop+0x196>
	{
		FondoCompletoAzul();
 8000e0e:	f018 f8e1 	bl	8018fd4 <FondoCompletoAzul>
    	Encabezamiento3("CONFIGURACION");
 8000e12:	4864      	ldr	r0, [pc, #400]	; (8000fa4 <AppLoop+0x2fc>)
 8000e14:	f017 fd62 	bl	80188dc <Encabezamiento3>
    	MenuSet( 0,"WIFI                ",WIFI);
 8000e18:	f241 4250 	movw	r2, #5200	; 0x1450
 8000e1c:	4962      	ldr	r1, [pc, #392]	; (8000fa8 <AppLoop+0x300>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f018 fa00 	bl	8019224 <MenuSet>
    	MenuSet( 1,"HARDWARE            ",HARDWARE_PASS);
 8000e24:	f241 32f6 	movw	r2, #5110	; 0x13f6
 8000e28:	4960      	ldr	r1, [pc, #384]	; (8000fac <AppLoop+0x304>)
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f018 f9fa 	bl	8019224 <MenuSet>
    	MenuPrint();
 8000e30:	f018 fa56 	bl	80192e0 <MenuPrint>
    	m_Pantalla++;
 8000e34:	4b4d      	ldr	r3, [pc, #308]	; (8000f6c <AppLoop+0x2c4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a4c      	ldr	r2, [pc, #304]	; (8000f6c <AppLoop+0x2c4>)
 8000e3c:	6013      	str	r3, [r2, #0]
	}
	////////////////////////////////////////////////////////////////////////
	// CONFIGURAR WIFI
	////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == WIFI)
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <AppLoop+0x2c4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f241 4250 	movw	r2, #5200	; 0x1450
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d123      	bne.n	8000e92 <AppLoop+0x1ea>
	{
		FondoCompletoAzul();
 8000e4a:	f018 f8c3 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("CONFIGURAR WIFI");
 8000e4e:	4858      	ldr	r0, [pc, #352]	; (8000fb0 <AppLoop+0x308>)
 8000e50:	f017 fd44 	bl	80188dc <Encabezamiento3>

	   	MenuSet( 0,"SSID                ",WIFI_SSID);
 8000e54:	f241 425a 	movw	r2, #5210	; 0x145a
 8000e58:	4956      	ldr	r1, [pc, #344]	; (8000fb4 <AppLoop+0x30c>)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f018 f9e2 	bl	8019224 <MenuSet>
	   	MenuSet( 1,"CLAVE               ",WIFI_PASS);
 8000e60:	f241 4264 	movw	r2, #5220	; 0x1464
 8000e64:	4954      	ldr	r1, [pc, #336]	; (8000fb8 <AppLoop+0x310>)
 8000e66:	2001      	movs	r0, #1
 8000e68:	f018 f9dc 	bl	8019224 <MenuSet>
	   	MenuSet( 2,"CONECTAR            ",WIFI_CONNECT);
 8000e6c:	f241 426e 	movw	r2, #5230	; 0x146e
 8000e70:	4952      	ldr	r1, [pc, #328]	; (8000fbc <AppLoop+0x314>)
 8000e72:	2002      	movs	r0, #2
 8000e74:	f018 f9d6 	bl	8019224 <MenuSet>
	   	MenuSet( 3,"BORRAR CONFIGURACION",WIFI_CLR_CONF);
 8000e78:	f241 4278 	movw	r2, #5240	; 0x1478
 8000e7c:	4950      	ldr	r1, [pc, #320]	; (8000fc0 <AppLoop+0x318>)
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f018 f9d0 	bl	8019224 <MenuSet>
	   	MenuPrint();
 8000e84:	f018 fa2c 	bl	80192e0 <MenuPrint>
	   	m_Pantalla++;
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <AppLoop+0x2c4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a37      	ldr	r2, [pc, #220]	; (8000f6c <AppLoop+0x2c4>)
 8000e90:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == WIFI_SSID)
 8000e92:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <AppLoop+0x2c4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f241 425a 	movw	r2, #5210	; 0x145a
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10c      	bne.n	8000eb8 <AppLoop+0x210>
	{
		FondoCompletoAzul();
 8000e9e:	f018 f899 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("SSID WIFI");
 8000ea2:	4848      	ldr	r0, [pc, #288]	; (8000fc4 <AppLoop+0x31c>)
 8000ea4:	f017 fd1a 	bl	80188dc <Encabezamiento3>
		f_TECLADO_ALFA_open(fBOT);
 8000ea8:	4847      	ldr	r0, [pc, #284]	; (8000fc8 <AppLoop+0x320>)
 8000eaa:	f016 f8d3 	bl	8017054 <f_TECLADO_ALFA_open>
		m_Pantalla++;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <AppLoop+0x2c4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <AppLoop+0x2c4>)
 8000eb6:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == WIFI_PASS)
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <AppLoop+0x2c4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f241 4264 	movw	r2, #5220	; 0x1464
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d10c      	bne.n	8000ede <AppLoop+0x236>
	{
		FondoCompletoAzul();
 8000ec4:	f018 f886 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("CLAVE WIFI");
 8000ec8:	4840      	ldr	r0, [pc, #256]	; (8000fcc <AppLoop+0x324>)
 8000eca:	f017 fd07 	bl	80188dc <Encabezamiento3>
		f_TECLADO_ALFA_open(fBOT);
 8000ece:	483e      	ldr	r0, [pc, #248]	; (8000fc8 <AppLoop+0x320>)
 8000ed0:	f016 f8c0 	bl	8017054 <f_TECLADO_ALFA_open>
		m_Pantalla++;
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <AppLoop+0x2c4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <AppLoop+0x2c4>)
 8000edc:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla==WIFI_MANDAR_SSID)
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <AppLoop+0x2c4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f241 4282 	movw	r2, #5250	; 0x1482
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10d      	bne.n	8000f06 <AppLoop+0x25e>
	{
		m_TecladoStr[44]=0;
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <AppLoop+0x328>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		sprintf(str,"SSI%s;",m_TecladoStr);
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4a36      	ldr	r2, [pc, #216]	; (8000fd0 <AppLoop+0x328>)
 8000ef6:	4937      	ldr	r1, [pc, #220]	; (8000fd4 <AppLoop+0x32c>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f019 f89f 	bl	801a03c <siprintf>
		//mandarWifi(str);
		m_Pantalla=WIFI;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <AppLoop+0x2c4>)
 8000f00:	f241 4250 	movw	r2, #5200	; 0x1450
 8000f04:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla==WIFI_MANDAR_PASS)
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <AppLoop+0x2c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f241 428c 	movw	r2, #5260	; 0x148c
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10d      	bne.n	8000f2e <AppLoop+0x286>
	{
		m_TecladoStr[44]=0;
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <AppLoop+0x328>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		sprintf(str,"PAS%s;",m_TecladoStr);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <AppLoop+0x328>)
 8000f1e:	492e      	ldr	r1, [pc, #184]	; (8000fd8 <AppLoop+0x330>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f019 f88b 	bl	801a03c <siprintf>
		//mandarWifi(str);
		m_Pantalla=WIFI;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <AppLoop+0x2c4>)
 8000f28:	f241 4250 	movw	r2, #5200	; 0x1450
 8000f2c:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla == WIFI_CONNECT)
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <AppLoop+0x2c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f241 426e 	movw	r2, #5230	; 0x146e
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d108      	bne.n	8000f4c <AppLoop+0x2a4>
	{
		sprintf(str,"HIG;");
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4927      	ldr	r1, [pc, #156]	; (8000fdc <AppLoop+0x334>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f019 f87c 	bl	801a03c <siprintf>
		//mandarWifi(str);
		m_Pantalla=WIFI;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <AppLoop+0x2c4>)
 8000f46:	f241 4250 	movw	r2, #5200	; 0x1450
 8000f4a:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla == WIFI_CLR_CONF)
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <AppLoop+0x2c4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f241 4278 	movw	r2, #5240	; 0x1478
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d145      	bne.n	8000fe4 <AppLoop+0x33c>
	{
		sprintf(str,"CLR;");
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4921      	ldr	r1, [pc, #132]	; (8000fe0 <AppLoop+0x338>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f019 f86d 	bl	801a03c <siprintf>
		//mandarWifi(str);*/
		m_Pantalla=WIFI;
 8000f62:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <AppLoop+0x2c4>)
 8000f64:	f241 4250 	movw	r2, #5200	; 0x1450
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e03b      	b.n	8000fe4 <AppLoop+0x33c>
 8000f6c:	200047a4 	.word	0x200047a4
 8000f70:	40003c00 	.word	0x40003c00
 8000f74:	20008bc0 	.word	0x20008bc0
 8000f78:	0801ba20 	.word	0x0801ba20
 8000f7c:	200093d0 	.word	0x200093d0
 8000f80:	0801ba3c 	.word	0x0801ba3c
 8000f84:	0801c240 	.word	0x0801c240
 8000f88:	0801ba44 	.word	0x0801ba44
 8000f8c:	0801ba60 	.word	0x0801ba60
 8000f90:	0801ba70 	.word	0x0801ba70
 8000f94:	0801ba88 	.word	0x0801ba88
 8000f98:	0801baa0 	.word	0x0801baa0
 8000f9c:	0801bab8 	.word	0x0801bab8
 8000fa0:	0801bad0 	.word	0x0801bad0
 8000fa4:	0801bae8 	.word	0x0801bae8
 8000fa8:	0801baf8 	.word	0x0801baf8
 8000fac:	0801bb10 	.word	0x0801bb10
 8000fb0:	0801bb28 	.word	0x0801bb28
 8000fb4:	0801bb38 	.word	0x0801bb38
 8000fb8:	0801bb50 	.word	0x0801bb50
 8000fbc:	0801bb68 	.word	0x0801bb68
 8000fc0:	0801bb80 	.word	0x0801bb80
 8000fc4:	0801bb98 	.word	0x0801bb98
 8000fc8:	20003644 	.word	0x20003644
 8000fcc:	0801bba4 	.word	0x0801bba4
 8000fd0:	20009d60 	.word	0x20009d60
 8000fd4:	0801bbb0 	.word	0x0801bbb0
 8000fd8:	0801bbb8 	.word	0x0801bbb8
 8000fdc:	0801bbc0 	.word	0x0801bbc0
 8000fe0:	0801bbc8 	.word	0x0801bbc8
	}
	////////////////////////////////////////////////////////////////////////
	// CONFIGURAR HARDWARE
	////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == HARDWARE_PASS)
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <AppLoop+0x390>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f241 32f6 	movw	r2, #5110	; 0x13f6
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d10c      	bne.n	800100a <AppLoop+0x362>
	{
		FondoCompletoAzul();
 8000ff0:	f017 fff0 	bl	8018fd4 <FondoCompletoAzul>
       	Encabezamiento3("INGRESE CLAVE SOPORTE");
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <AppLoop+0x394>)
 8000ff6:	f017 fc71 	bl	80188dc <Encabezamiento3>
		f_TECLADO_ALFA_open(fBOT);
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <AppLoop+0x398>)
 8000ffc:	f016 f82a 	bl	8017054 <f_TECLADO_ALFA_open>
		m_Pantalla++;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <AppLoop+0x390>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <AppLoop+0x390>)
 8001008:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == HARDWARE_VERIF_PASS)
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <AppLoop+0x390>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001012:	d11c      	bne.n	800104e <AppLoop+0x3a6>
	{
		if(m_TecladoStr[0]=='1' && m_TecladoStr[1]=='2' && m_TecladoStr[2]=='3') m_Pantalla=HARDWARE;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <AppLoop+0x39c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b31      	cmp	r3, #49	; 0x31
 800101a:	d115      	bne.n	8001048 <AppLoop+0x3a0>
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <AppLoop+0x39c>)
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	2b32      	cmp	r3, #50	; 0x32
 8001022:	d111      	bne.n	8001048 <AppLoop+0x3a0>
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <AppLoop+0x39c>)
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	2b33      	cmp	r3, #51	; 0x33
 800102a:	d10d      	bne.n	8001048 <AppLoop+0x3a0>
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <AppLoop+0x390>)
 800102e:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e00b      	b.n	800104e <AppLoop+0x3a6>
 8001036:	bf00      	nop
 8001038:	200047a4 	.word	0x200047a4
 800103c:	0801bbd0 	.word	0x0801bbd0
 8001040:	20003644 	.word	0x20003644
 8001044:	20009d60 	.word	0x20009d60
		else m_Pantalla=MENU_PRINCIPAL;
 8001048:	4bba      	ldr	r3, [pc, #744]	; (8001334 <AppLoop+0x68c>)
 800104a:	2204      	movs	r2, #4
 800104c:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla == HARDWARE)
 800104e:	4bb9      	ldr	r3, [pc, #740]	; (8001334 <AppLoop+0x68c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001056:	4293      	cmp	r3, r2
 8001058:	d123      	bne.n	80010a2 <AppLoop+0x3fa>
	{
		FondoCompletoAzul();
 800105a:	f017 ffbb 	bl	8018fd4 <FondoCompletoAzul>
    	Encabezamiento3("CONFIGURACION HARDWARE");
 800105e:	48b6      	ldr	r0, [pc, #728]	; (8001338 <AppLoop+0x690>)
 8001060:	f017 fc3c 	bl	80188dc <Encabezamiento3>
    	MenuSet( 0,"CONFIGURACION SISTEMA ",HARDWARE_SET_SISTEMA);
 8001064:	f241 420a 	movw	r2, #5130	; 0x140a
 8001068:	49b4      	ldr	r1, [pc, #720]	; (800133c <AppLoop+0x694>)
 800106a:	2000      	movs	r0, #0
 800106c:	f018 f8da 	bl	8019224 <MenuSet>
    	MenuSet( 1,"PRESET INVERTER       ",HARDWARE_PRESET_INVERTER);
 8001070:	f241 4228 	movw	r2, #5160	; 0x1428
 8001074:	49b2      	ldr	r1, [pc, #712]	; (8001340 <AppLoop+0x698>)
 8001076:	2001      	movs	r0, #1
 8001078:	f018 f8d4 	bl	8019224 <MenuSet>
    	MenuSet( 2,"PRESET MPPT           ",HARDWARE_PRESET_MPPT);
 800107c:	f241 4232 	movw	r2, #5170	; 0x1432
 8001080:	49b0      	ldr	r1, [pc, #704]	; (8001344 <AppLoop+0x69c>)
 8001082:	2002      	movs	r0, #2
 8001084:	f018 f8ce 	bl	8019224 <MenuSet>
    	MenuSet( 3,"PRESET DAB            ",HARDWARE_PRESET_DAB);
 8001088:	f241 423c 	movw	r2, #5180	; 0x143c
 800108c:	49ae      	ldr	r1, [pc, #696]	; (8001348 <AppLoop+0x6a0>)
 800108e:	2003      	movs	r0, #3
 8001090:	f018 f8c8 	bl	8019224 <MenuSet>
    	MenuPrint();
 8001094:	f018 f924 	bl	80192e0 <MenuPrint>
    	m_Pantalla++;
 8001098:	4ba6      	ldr	r3, [pc, #664]	; (8001334 <AppLoop+0x68c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4aa5      	ldr	r2, [pc, #660]	; (8001334 <AppLoop+0x68c>)
 80010a0:	6013      	str	r3, [r2, #0]
	}
   	if(m_Pantalla == HARDWARE_SET_SISTEMA)
 80010a2:	4ba4      	ldr	r3, [pc, #656]	; (8001334 <AppLoop+0x68c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f241 420a 	movw	r2, #5130	; 0x140a
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d161      	bne.n	8001172 <AppLoop+0x4ca>
   	{
		FondoCompletoAzul();
 80010ae:	f017 ff91 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("CONFIGURACION SISTEMA");
 80010b2:	48a6      	ldr	r0, [pc, #664]	; (800134c <AppLoop+0x6a4>)
 80010b4:	f017 fc12 	bl	80188dc <Encabezamiento3>

	   	ILI9341_Draw_String(4,37,WHITE,0x0010,"POTENCIA",2);
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	4ba4      	ldr	r3, [pc, #656]	; (8001350 <AppLoop+0x6a8>)
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2310      	movs	r3, #16
 80010c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c6:	2125      	movs	r1, #37	; 0x25
 80010c8:	2004      	movs	r0, #4
 80010ca:	f010 fbb3 	bl	8011834 <ILI9341_Draw_String>
		BCO(CORREDERA,4,55,0,4,3,"1K 3K 4K 5K");
 80010ce:	4ba1      	ldr	r3, [pc, #644]	; (8001354 <AppLoop+0x6ac>)
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	2303      	movs	r3, #3
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	2304      	movs	r3, #4
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	2237      	movs	r2, #55	; 0x37
 80010de:	2104      	movs	r1, #4
 80010e0:	489d      	ldr	r0, [pc, #628]	; (8001358 <AppLoop+0x6b0>)
 80010e2:	f016 fa93 	bl	801760c <BCO>

		ILI9341_Draw_String(200,37,WHITE,0x0010,"ON-GRID",2);
 80010e6:	2302      	movs	r3, #2
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	4b9c      	ldr	r3, [pc, #624]	; (800135c <AppLoop+0x6b4>)
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2310      	movs	r3, #16
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	2125      	movs	r1, #37	; 0x25
 80010f6:	20c8      	movs	r0, #200	; 0xc8
 80010f8:	f010 fb9c 	bl	8011834 <ILI9341_Draw_String>
		BCO(CORREDERA,200,55,0,2,1,"SI  NO");
 80010fc:	4b98      	ldr	r3, [pc, #608]	; (8001360 <AppLoop+0x6b8>)
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	2237      	movs	r2, #55	; 0x37
 800110c:	21c8      	movs	r1, #200	; 0xc8
 800110e:	4892      	ldr	r0, [pc, #584]	; (8001358 <AppLoop+0x6b0>)
 8001110:	f016 fa7c 	bl	801760c <BCO>

		CHECK_CIRC(4,160,"GRUPO","ELECTR.",m_GrupoElectr);
 8001114:	4b93      	ldr	r3, [pc, #588]	; (8001364 <AppLoop+0x6bc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4b93      	ldr	r3, [pc, #588]	; (8001368 <AppLoop+0x6c0>)
 800111c:	4a93      	ldr	r2, [pc, #588]	; (800136c <AppLoop+0x6c4>)
 800111e:	21a0      	movs	r1, #160	; 0xa0
 8001120:	2004      	movs	r0, #4
 8001122:	f016 fcb4 	bl	8017a8e <CHECK_CIRC>
		CHECK_CIRC(114,160,"GENER.","EOLICO",m_GenEolico);
 8001126:	4b92      	ldr	r3, [pc, #584]	; (8001370 <AppLoop+0x6c8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4b91      	ldr	r3, [pc, #580]	; (8001374 <AppLoop+0x6cc>)
 800112e:	4a92      	ldr	r2, [pc, #584]	; (8001378 <AppLoop+0x6d0>)
 8001130:	21a0      	movs	r1, #160	; 0xa0
 8001132:	2072      	movs	r0, #114	; 0x72
 8001134:	f016 fcab 	bl	8017a8e <CHECK_CIRC>
		CHECK_CIRC(224,160,"RESERV.","",0);
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <AppLoop+0x6d4>)
 800113e:	4a90      	ldr	r2, [pc, #576]	; (8001380 <AppLoop+0x6d8>)
 8001140:	21a0      	movs	r1, #160	; 0xa0
 8001142:	20e0      	movs	r0, #224	; 0xe0
 8001144:	f016 fca3 	bl	8017a8e <CHECK_CIRC>

		BOW(3,202,0,11,"OK");
 8001148:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <AppLoop+0x6dc>)
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	230b      	movs	r3, #11
 800114e:	2200      	movs	r2, #0
 8001150:	21ca      	movs	r1, #202	; 0xca
 8001152:	2003      	movs	r0, #3
 8001154:	f016 fd24 	bl	8017ba0 <BOW>
		BOW(162,202,0,11,"SALIR");
 8001158:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <AppLoop+0x6e0>)
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230b      	movs	r3, #11
 800115e:	2200      	movs	r2, #0
 8001160:	21ca      	movs	r1, #202	; 0xca
 8001162:	20a2      	movs	r0, #162	; 0xa2
 8001164:	f016 fd1c 	bl	8017ba0 <BOW>
		m_Pantalla++;
 8001168:	4b72      	ldr	r3, [pc, #456]	; (8001334 <AppLoop+0x68c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	4a71      	ldr	r2, [pc, #452]	; (8001334 <AppLoop+0x68c>)
 8001170:	6013      	str	r3, [r2, #0]
   	}
   	if(m_Pantalla == HARDWARE_PRESET_INVERTER)
 8001172:	4b70      	ldr	r3, [pc, #448]	; (8001334 <AppLoop+0x68c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f241 4228 	movw	r2, #5160	; 0x1428
 800117a:	4293      	cmp	r3, r2
 800117c:	d111      	bne.n	80011a2 <AppLoop+0x4fa>
	{
   		FondoCompletoAzul();
 800117e:	f017 ff29 	bl	8018fd4 <FondoCompletoAzul>
		Encabezamiento3("PRESET INVERTER");
 8001182:	4882      	ldr	r0, [pc, #520]	; (800138c <AppLoop+0x6e4>)
 8001184:	f017 fbaa 	bl	80188dc <Encabezamiento3>
    	MenuSet( 0,"VCA e ICA DE LINEA    ",HARDWARE_PRESET_INVERTER0);
 8001188:	f241 422a 	movw	r2, #5162	; 0x142a
 800118c:	4980      	ldr	r1, [pc, #512]	; (8001390 <AppLoop+0x6e8>)
 800118e:	2000      	movs	r0, #0
 8001190:	f018 f848 	bl	8019224 <MenuSet>
    	MenuPrint();
 8001194:	f018 f8a4 	bl	80192e0 <MenuPrint>
    	m_Pantalla++;
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <AppLoop+0x68c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a65      	ldr	r2, [pc, #404]	; (8001334 <AppLoop+0x68c>)
 80011a0:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == HARDWARE_PRESET_MPPT)
 80011a2:	4b64      	ldr	r3, [pc, #400]	; (8001334 <AppLoop+0x68c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f241 4232 	movw	r2, #5170	; 0x1432
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d111      	bne.n	80011d2 <AppLoop+0x52a>
	{
		FondoCompletoAzul();
 80011ae:	f017 ff11 	bl	8018fd4 <FondoCompletoAzul>
		Encabezamiento3("PRESET MPPT");
 80011b2:	4878      	ldr	r0, [pc, #480]	; (8001394 <AppLoop+0x6ec>)
 80011b4:	f017 fb92 	bl	80188dc <Encabezamiento3>
    	MenuSet( 0,"VCC e ICC PANELES     ",HARDWARE_PRESET_MPPT0);
 80011b8:	f241 4234 	movw	r2, #5172	; 0x1434
 80011bc:	4976      	ldr	r1, [pc, #472]	; (8001398 <AppLoop+0x6f0>)
 80011be:	2000      	movs	r0, #0
 80011c0:	f018 f830 	bl	8019224 <MenuSet>
    	MenuPrint();
 80011c4:	f018 f88c 	bl	80192e0 <MenuPrint>
    	m_Pantalla++;
 80011c8:	4b5a      	ldr	r3, [pc, #360]	; (8001334 <AppLoop+0x68c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a59      	ldr	r2, [pc, #356]	; (8001334 <AppLoop+0x68c>)
 80011d0:	6013      	str	r3, [r2, #0]

	}
	if(m_Pantalla == HARDWARE_PRESET_DAB)
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <AppLoop+0x68c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f241 423c 	movw	r2, #5180	; 0x143c
 80011da:	4293      	cmp	r3, r2
 80011dc:	d117      	bne.n	800120e <AppLoop+0x566>
	{
		FondoCompletoAzul();
 80011de:	f017 fef9 	bl	8018fd4 <FondoCompletoAzul>
		Encabezamiento3("PRESET DAB");
 80011e2:	486e      	ldr	r0, [pc, #440]	; (800139c <AppLoop+0x6f4>)
 80011e4:	f017 fb7a 	bl	80188dc <Encabezamiento3>
    	MenuSet( 0,"VCC e ICC DE BATERIA",HARDWARE_PRESET_DAB0);
 80011e8:	f241 423e 	movw	r2, #5182	; 0x143e
 80011ec:	496c      	ldr	r1, [pc, #432]	; (80013a0 <AppLoop+0x6f8>)
 80011ee:	2000      	movs	r0, #0
 80011f0:	f018 f818 	bl	8019224 <MenuSet>
    	MenuSet( 1,"VCC del BUS         ",HARDWARE_PRESET_DAB1);
 80011f4:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 80011f8:	496a      	ldr	r1, [pc, #424]	; (80013a4 <AppLoop+0x6fc>)
 80011fa:	2001      	movs	r0, #1
 80011fc:	f018 f812 	bl	8019224 <MenuSet>
    	MenuPrint();
 8001200:	f018 f86e 	bl	80192e0 <MenuPrint>
    	m_Pantalla++;
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <AppLoop+0x68c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4a4a      	ldr	r2, [pc, #296]	; (8001334 <AppLoop+0x68c>)
 800120c:	6013      	str	r3, [r2, #0]
	}
   	if(m_Pantalla == HARDWARE_PRESET_INVERTER0)
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <AppLoop+0x68c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f241 422a 	movw	r2, #5162	; 0x142a
 8001216:	4293      	cmp	r3, r2
 8001218:	f040 80e9 	bne.w	80013ee <AppLoop+0x746>
	{
		FondoCompletoAzul();
 800121c:	f017 feda 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("INVERTER VCA/ICA RED");
 8001220:	4861      	ldr	r0, [pc, #388]	; (80013a8 <AppLoop+0x700>)
 8001222:	f017 fb5b 	bl	80188dc <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001226:	2312      	movs	r3, #18
 8001228:	4a60      	ldr	r2, [pc, #384]	; (80013ac <AppLoop+0x704>)
 800122a:	4961      	ldr	r1, [pc, #388]	; (80013b0 <AppLoop+0x708>)
 800122c:	4861      	ldr	r0, [pc, #388]	; (80013b4 <AppLoop+0x70c>)
 800122e:	f015 fc69 	bl	8016b04 <f_PEL_open>

		i=0;
 8001232:	2300      	movs	r3, #0
 8001234:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(27,35,WHITE, 0x0010,"TENSION RED",2);
 8001236:	2302      	movs	r3, #2
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <AppLoop+0x710>)
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2310      	movs	r3, #16
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001244:	2123      	movs	r1, #35	; 0x23
 8001246:	201b      	movs	r0, #27
 8001248:	f010 faf4 	bl	8011834 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"220V");
 800124c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800124e:	3325      	adds	r3, #37	; 0x25
 8001250:	4618      	mov	r0, r3
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <AppLoop+0x714>)
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001260:	2206      	movs	r2, #6
 8001262:	2137      	movs	r1, #55	; 0x37
 8001264:	f017 fec6 	bl	8018ff4 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 8001268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800126a:	3302      	adds	r3, #2
 800126c:	4619      	mov	r1, r3
 800126e:	2300      	movs	r3, #0
 8001270:	2253      	movs	r2, #83	; 0x53
 8001272:	4853      	ldr	r0, [pc, #332]	; (80013c0 <AppLoop+0x718>)
 8001274:	f016 fbd8 	bl	8017a28 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 8001278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800127a:	337f      	adds	r3, #127	; 0x7f
 800127c:	4619      	mov	r1, r3
 800127e:	2300      	movs	r3, #0
 8001280:	2253      	movs	r2, #83	; 0x53
 8001282:	4850      	ldr	r0, [pc, #320]	; (80013c4 <AppLoop+0x71c>)
 8001284:	f016 fbd0 	bl	8017a28 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 8001288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800128a:	3323      	adds	r3, #35	; 0x23
 800128c:	4619      	mov	r1, r3
 800128e:	2300      	movs	r3, #0
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	2300      	movs	r3, #0
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	225f      	movs	r2, #95	; 0x5f
 800129a:	4846      	ldr	r0, [pc, #280]	; (80013b4 <AppLoop+0x70c>)
 800129c:	f015 fc7a 	bl	8016b94 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 80012a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012a2:	3333      	adds	r3, #51	; 0x33
 80012a4:	4618      	mov	r0, r3
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <AppLoop+0x6dc>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2304      	movs	r3, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	21ca      	movs	r1, #202	; 0xca
 80012b0:	f016 fc76 	bl	8017ba0 <BOW>

		i=160;
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(178,35,WHITE, 0x0010,"CORRIENTE RED",2);
 80012b8:	2302      	movs	r3, #2
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <AppLoop+0x720>)
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2310      	movs	r3, #16
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	2123      	movs	r1, #35	; 0x23
 80012c8:	20b2      	movs	r0, #178	; 0xb2
 80012ca:	f010 fab3 	bl	8011834 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"12.4A");
 80012ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012d0:	3325      	adds	r3, #37	; 0x25
 80012d2:	4618      	mov	r0, r3
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <AppLoop+0x724>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e2:	2206      	movs	r2, #6
 80012e4:	2137      	movs	r1, #55	; 0x37
 80012e6:	f017 fe85 	bl	8018ff4 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 80012ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ec:	3302      	adds	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	2300      	movs	r3, #0
 80012f2:	2253      	movs	r2, #83	; 0x53
 80012f4:	4832      	ldr	r0, [pc, #200]	; (80013c0 <AppLoop+0x718>)
 80012f6:	f016 fb97 	bl	8017a28 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 80012fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012fc:	337f      	adds	r3, #127	; 0x7f
 80012fe:	4619      	mov	r1, r3
 8001300:	2300      	movs	r3, #0
 8001302:	2253      	movs	r2, #83	; 0x53
 8001304:	482f      	ldr	r0, [pc, #188]	; (80013c4 <AppLoop+0x71c>)
 8001306:	f016 fb8f 	bl	8017a28 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 800130a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800130c:	3323      	adds	r3, #35	; 0x23
 800130e:	4619      	mov	r1, r3
 8001310:	2300      	movs	r3, #0
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	225f      	movs	r2, #95	; 0x5f
 800131c:	4825      	ldr	r0, [pc, #148]	; (80013b4 <AppLoop+0x70c>)
 800131e:	f015 fc39 	bl	8016b94 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 8001322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001324:	3333      	adds	r3, #51	; 0x33
 8001326:	4618      	mov	r0, r3
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <AppLoop+0x6dc>)
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2304      	movs	r3, #4
 800132e:	2200      	movs	r2, #0
 8001330:	21ca      	movs	r1, #202	; 0xca
 8001332:	e04d      	b.n	80013d0 <AppLoop+0x728>
 8001334:	200047a4 	.word	0x200047a4
 8001338:	0801bbe8 	.word	0x0801bbe8
 800133c:	0801bc00 	.word	0x0801bc00
 8001340:	0801bc18 	.word	0x0801bc18
 8001344:	0801bc30 	.word	0x0801bc30
 8001348:	0801bc48 	.word	0x0801bc48
 800134c:	0801bc60 	.word	0x0801bc60
 8001350:	0801bc78 	.word	0x0801bc78
 8001354:	0801bc84 	.word	0x0801bc84
 8001358:	0801cf3c 	.word	0x0801cf3c
 800135c:	0801bc90 	.word	0x0801bc90
 8001360:	0801bc98 	.word	0x0801bc98
 8001364:	20004861 	.word	0x20004861
 8001368:	0801bca0 	.word	0x0801bca0
 800136c:	0801bca8 	.word	0x0801bca8
 8001370:	20004860 	.word	0x20004860
 8001374:	0801bcb0 	.word	0x0801bcb0
 8001378:	0801bcb8 	.word	0x0801bcb8
 800137c:	0801bcc0 	.word	0x0801bcc0
 8001380:	0801bcc4 	.word	0x0801bcc4
 8001384:	0801bccc 	.word	0x0801bccc
 8001388:	0801bcd0 	.word	0x0801bcd0
 800138c:	0801bcd8 	.word	0x0801bcd8
 8001390:	0801bce8 	.word	0x0801bce8
 8001394:	0801bd00 	.word	0x0801bd00
 8001398:	0801bd0c 	.word	0x0801bd0c
 800139c:	0801bd24 	.word	0x0801bd24
 80013a0:	0801bd30 	.word	0x0801bd30
 80013a4:	0801bd48 	.word	0x0801bd48
 80013a8:	0801bd60 	.word	0x0801bd60
 80013ac:	0801bd78 	.word	0x0801bd78
 80013b0:	0801bd80 	.word	0x0801bd80
 80013b4:	20000224 	.word	0x20000224
 80013b8:	0801bd8c 	.word	0x0801bd8c
 80013bc:	0801bd98 	.word	0x0801bd98
 80013c0:	0801d298 	.word	0x0801d298
 80013c4:	0801d574 	.word	0x0801d574
 80013c8:	0801bda0 	.word	0x0801bda0
 80013cc:	0801bdb0 	.word	0x0801bdb0
 80013d0:	f016 fbe6 	bl	8017ba0 <BOW>

		BOW(117,202,0,6,"SALIR");
 80013d4:	4bbf      	ldr	r3, [pc, #764]	; (80016d4 <AppLoop+0xa2c>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2306      	movs	r3, #6
 80013da:	2200      	movs	r2, #0
 80013dc:	21ca      	movs	r1, #202	; 0xca
 80013de:	2075      	movs	r0, #117	; 0x75
 80013e0:	f016 fbde 	bl	8017ba0 <BOW>
		m_Pantalla++;
 80013e4:	4bbc      	ldr	r3, [pc, #752]	; (80016d8 <AppLoop+0xa30>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4abb      	ldr	r2, [pc, #748]	; (80016d8 <AppLoop+0xa30>)
 80013ec:	6013      	str	r3, [r2, #0]
	}
   	if(m_Pantalla == HARDWARE_PRESET_MPPT0)
 80013ee:	4bba      	ldr	r3, [pc, #744]	; (80016d8 <AppLoop+0xa30>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f241 4234 	movw	r2, #5172	; 0x1434
 80013f6:	4293      	cmp	r3, r2
 80013f8:	f040 809a 	bne.w	8001530 <AppLoop+0x888>
	{
		FondoCompletoAzul();
 80013fc:	f017 fdea 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("MPPT VCC-ICC PANELES");
 8001400:	48b6      	ldr	r0, [pc, #728]	; (80016dc <AppLoop+0xa34>)
 8001402:	f017 fa6b 	bl	80188dc <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001406:	2312      	movs	r3, #18
 8001408:	4ab5      	ldr	r2, [pc, #724]	; (80016e0 <AppLoop+0xa38>)
 800140a:	49b6      	ldr	r1, [pc, #728]	; (80016e4 <AppLoop+0xa3c>)
 800140c:	48b6      	ldr	r0, [pc, #728]	; (80016e8 <AppLoop+0xa40>)
 800140e:	f015 fb79 	bl	8016b04 <f_PEL_open>

		i=0;
 8001412:	2300      	movs	r3, #0
 8001414:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(27,35,WHITE, 0x0010,"TENSION PANEL",2);
 8001416:	2302      	movs	r3, #2
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	4bb4      	ldr	r3, [pc, #720]	; (80016ec <AppLoop+0xa44>)
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2310      	movs	r3, #16
 8001420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001424:	2123      	movs	r1, #35	; 0x23
 8001426:	201b      	movs	r0, #27
 8001428:	f010 fa04 	bl	8011834 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"168V");
 800142c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800142e:	3325      	adds	r3, #37	; 0x25
 8001430:	4618      	mov	r0, r3
 8001432:	4baf      	ldr	r3, [pc, #700]	; (80016f0 <AppLoop+0xa48>)
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001440:	2206      	movs	r2, #6
 8001442:	2137      	movs	r1, #55	; 0x37
 8001444:	f017 fdd6 	bl	8018ff4 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 8001448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800144a:	3302      	adds	r3, #2
 800144c:	4619      	mov	r1, r3
 800144e:	2300      	movs	r3, #0
 8001450:	2253      	movs	r2, #83	; 0x53
 8001452:	48a8      	ldr	r0, [pc, #672]	; (80016f4 <AppLoop+0xa4c>)
 8001454:	f016 fae8 	bl	8017a28 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 8001458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800145a:	337f      	adds	r3, #127	; 0x7f
 800145c:	4619      	mov	r1, r3
 800145e:	2300      	movs	r3, #0
 8001460:	2253      	movs	r2, #83	; 0x53
 8001462:	48a5      	ldr	r0, [pc, #660]	; (80016f8 <AppLoop+0xa50>)
 8001464:	f016 fae0 	bl	8017a28 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 8001468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800146a:	3323      	adds	r3, #35	; 0x23
 800146c:	4619      	mov	r1, r3
 800146e:	2300      	movs	r3, #0
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	225f      	movs	r2, #95	; 0x5f
 800147a:	489b      	ldr	r0, [pc, #620]	; (80016e8 <AppLoop+0xa40>)
 800147c:	f015 fb8a 	bl	8016b94 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 8001480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001482:	3333      	adds	r3, #51	; 0x33
 8001484:	4618      	mov	r0, r3
 8001486:	4b9d      	ldr	r3, [pc, #628]	; (80016fc <AppLoop+0xa54>)
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2304      	movs	r3, #4
 800148c:	2200      	movs	r2, #0
 800148e:	21ca      	movs	r1, #202	; 0xca
 8001490:	f016 fb86 	bl	8017ba0 <BOW>

		i=160;
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(178,35,WHITE, 0x0010,"CORRIENTE PANEL",2);
 8001498:	2302      	movs	r3, #2
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	4b98      	ldr	r3, [pc, #608]	; (8001700 <AppLoop+0xa58>)
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2310      	movs	r3, #16
 80014a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a6:	2123      	movs	r1, #35	; 0x23
 80014a8:	20b2      	movs	r0, #178	; 0xb2
 80014aa:	f010 f9c3 	bl	8011834 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"35.5A");
 80014ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b0:	3325      	adds	r3, #37	; 0x25
 80014b2:	4618      	mov	r0, r3
 80014b4:	4b93      	ldr	r3, [pc, #588]	; (8001704 <AppLoop+0xa5c>)
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c2:	2206      	movs	r2, #6
 80014c4:	2137      	movs	r1, #55	; 0x37
 80014c6:	f017 fd95 	bl	8018ff4 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 80014ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014cc:	3302      	adds	r3, #2
 80014ce:	4619      	mov	r1, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	2253      	movs	r2, #83	; 0x53
 80014d4:	4887      	ldr	r0, [pc, #540]	; (80016f4 <AppLoop+0xa4c>)
 80014d6:	f016 faa7 	bl	8017a28 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 80014da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014dc:	337f      	adds	r3, #127	; 0x7f
 80014de:	4619      	mov	r1, r3
 80014e0:	2300      	movs	r3, #0
 80014e2:	2253      	movs	r2, #83	; 0x53
 80014e4:	4884      	ldr	r0, [pc, #528]	; (80016f8 <AppLoop+0xa50>)
 80014e6:	f016 fa9f 	bl	8017a28 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 80014ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ec:	3323      	adds	r3, #35	; 0x23
 80014ee:	4619      	mov	r1, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2300      	movs	r3, #0
 80014fa:	225f      	movs	r2, #95	; 0x5f
 80014fc:	487a      	ldr	r0, [pc, #488]	; (80016e8 <AppLoop+0xa40>)
 80014fe:	f015 fb49 	bl	8016b94 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 8001502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001504:	3333      	adds	r3, #51	; 0x33
 8001506:	4618      	mov	r0, r3
 8001508:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <AppLoop+0xa54>)
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2304      	movs	r3, #4
 800150e:	2200      	movs	r2, #0
 8001510:	21ca      	movs	r1, #202	; 0xca
 8001512:	f016 fb45 	bl	8017ba0 <BOW>

		BOW(117,202,0,6,"SALIR");
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <AppLoop+0xa2c>)
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2306      	movs	r3, #6
 800151c:	2200      	movs	r2, #0
 800151e:	21ca      	movs	r1, #202	; 0xca
 8001520:	2075      	movs	r0, #117	; 0x75
 8001522:	f016 fb3d 	bl	8017ba0 <BOW>
   		m_Pantalla++;
 8001526:	4b6c      	ldr	r3, [pc, #432]	; (80016d8 <AppLoop+0xa30>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a6a      	ldr	r2, [pc, #424]	; (80016d8 <AppLoop+0xa30>)
 800152e:	6013      	str	r3, [r2, #0]
   	}
   	if(m_Pantalla == HARDWARE_PRESET_DAB0)
 8001530:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <AppLoop+0xa30>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f241 423e 	movw	r2, #5182	; 0x143e
 8001538:	4293      	cmp	r3, r2
 800153a:	f040 809a 	bne.w	8001672 <AppLoop+0x9ca>
	{
		FondoCompletoAzul();
 800153e:	f017 fd49 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("VCC-ICC BATERIAS");
 8001542:	4871      	ldr	r0, [pc, #452]	; (8001708 <AppLoop+0xa60>)
 8001544:	f017 f9ca 	bl	80188dc <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001548:	2312      	movs	r3, #18
 800154a:	4a65      	ldr	r2, [pc, #404]	; (80016e0 <AppLoop+0xa38>)
 800154c:	4965      	ldr	r1, [pc, #404]	; (80016e4 <AppLoop+0xa3c>)
 800154e:	4866      	ldr	r0, [pc, #408]	; (80016e8 <AppLoop+0xa40>)
 8001550:	f015 fad8 	bl	8016b04 <f_PEL_open>

		i=0;
 8001554:	2300      	movs	r3, #0
 8001556:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(17,35,WHITE, 0x0010,"TENSION BATERIA",2);
 8001558:	2302      	movs	r3, #2
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <AppLoop+0xa64>)
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2310      	movs	r3, #16
 8001562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001566:	2123      	movs	r1, #35	; 0x23
 8001568:	2011      	movs	r0, #17
 800156a:	f010 f963 	bl	8011834 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"53.4V");
 800156e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001570:	3325      	adds	r3, #37	; 0x25
 8001572:	4618      	mov	r0, r3
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <AppLoop+0xa68>)
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001582:	2206      	movs	r2, #6
 8001584:	2137      	movs	r1, #55	; 0x37
 8001586:	f017 fd35 	bl	8018ff4 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 800158a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800158c:	3302      	adds	r3, #2
 800158e:	4619      	mov	r1, r3
 8001590:	2300      	movs	r3, #0
 8001592:	2253      	movs	r2, #83	; 0x53
 8001594:	4857      	ldr	r0, [pc, #348]	; (80016f4 <AppLoop+0xa4c>)
 8001596:	f016 fa47 	bl	8017a28 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 800159a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800159c:	337f      	adds	r3, #127	; 0x7f
 800159e:	4619      	mov	r1, r3
 80015a0:	2300      	movs	r3, #0
 80015a2:	2253      	movs	r2, #83	; 0x53
 80015a4:	4854      	ldr	r0, [pc, #336]	; (80016f8 <AppLoop+0xa50>)
 80015a6:	f016 fa3f 	bl	8017a28 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 80015aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015ac:	3323      	adds	r3, #35	; 0x23
 80015ae:	4619      	mov	r1, r3
 80015b0:	2300      	movs	r3, #0
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	225f      	movs	r2, #95	; 0x5f
 80015bc:	484a      	ldr	r0, [pc, #296]	; (80016e8 <AppLoop+0xa40>)
 80015be:	f015 fae9 	bl	8016b94 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 80015c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015c4:	3333      	adds	r3, #51	; 0x33
 80015c6:	4618      	mov	r0, r3
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <AppLoop+0xa54>)
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2304      	movs	r3, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	21ca      	movs	r1, #202	; 0xca
 80015d2:	f016 fae5 	bl	8017ba0 <BOW>

		i=160;
 80015d6:	23a0      	movs	r3, #160	; 0xa0
 80015d8:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(168,35,WHITE, 0x0010,"CORRIENTE BATERIAS",2);
 80015da:	2302      	movs	r3, #2
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <AppLoop+0xa6c>)
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2310      	movs	r3, #16
 80015e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e8:	2123      	movs	r1, #35	; 0x23
 80015ea:	20a8      	movs	r0, #168	; 0xa8
 80015ec:	f010 f922 	bl	8011834 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"12.1A");
 80015f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015f2:	3325      	adds	r3, #37	; 0x25
 80015f4:	4618      	mov	r0, r3
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <AppLoop+0xa70>)
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001604:	2206      	movs	r2, #6
 8001606:	2137      	movs	r1, #55	; 0x37
 8001608:	f017 fcf4 	bl	8018ff4 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 800160c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800160e:	3302      	adds	r3, #2
 8001610:	4619      	mov	r1, r3
 8001612:	2300      	movs	r3, #0
 8001614:	2253      	movs	r2, #83	; 0x53
 8001616:	4837      	ldr	r0, [pc, #220]	; (80016f4 <AppLoop+0xa4c>)
 8001618:	f016 fa06 	bl	8017a28 <BOT>
   		BOT(BOT_ADER,127+i,83,0);
 800161c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161e:	337f      	adds	r3, #127	; 0x7f
 8001620:	4619      	mov	r1, r3
 8001622:	2300      	movs	r3, #0
 8001624:	2253      	movs	r2, #83	; 0x53
 8001626:	4834      	ldr	r0, [pc, #208]	; (80016f8 <AppLoop+0xa50>)
 8001628:	f016 f9fe 	bl	8017a28 <BOT>
   		f_PEL(fPEL1,35+i,95,0,0,0);
 800162c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162e:	3323      	adds	r3, #35	; 0x23
 8001630:	4619      	mov	r1, r3
 8001632:	2300      	movs	r3, #0
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	225f      	movs	r2, #95	; 0x5f
 800163e:	482a      	ldr	r0, [pc, #168]	; (80016e8 <AppLoop+0xa40>)
 8001640:	f015 faa8 	bl	8016b94 <f_PEL>
   		BOW(51+i,202,0,4,"OK");
 8001644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001646:	3333      	adds	r3, #51	; 0x33
 8001648:	4618      	mov	r0, r3
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <AppLoop+0xa54>)
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2304      	movs	r3, #4
 8001650:	2200      	movs	r2, #0
 8001652:	21ca      	movs	r1, #202	; 0xca
 8001654:	f016 faa4 	bl	8017ba0 <BOW>

   		BOW(117,202,0,6,"SALIR");
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <AppLoop+0xa2c>)
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2306      	movs	r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	21ca      	movs	r1, #202	; 0xca
 8001662:	2075      	movs	r0, #117	; 0x75
 8001664:	f016 fa9c 	bl	8017ba0 <BOW>
   	   	m_Pantalla++;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <AppLoop+0xa30>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <AppLoop+0xa30>)
 8001670:	6013      	str	r3, [r2, #0]
   	}

   	if(m_Pantalla == HARDWARE_PRESET_DAB1)
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <AppLoop+0xa30>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 800167a:	f040 80c4 	bne.w	8001806 <AppLoop+0xb5e>
	{
		FondoCompletoAzul();
 800167e:	f017 fca9 	bl	8018fd4 <FondoCompletoAzul>
	   	Encabezamiento3("VCC-ICC BUS");
 8001682:	4826      	ldr	r0, [pc, #152]	; (800171c <AppLoop+0xa74>)
 8001684:	f017 f92a 	bl	80188dc <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001688:	2312      	movs	r3, #18
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <AppLoop+0xa38>)
 800168c:	4915      	ldr	r1, [pc, #84]	; (80016e4 <AppLoop+0xa3c>)
 800168e:	4816      	ldr	r0, [pc, #88]	; (80016e8 <AppLoop+0xa40>)
 8001690:	f015 fa38 	bl	8016b04 <f_PEL_open>

		i=0;
 8001694:	2300      	movs	r3, #0
 8001696:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(33,35,WHITE, 0x0010,"TENSION BUS",2);
 8001698:	2302      	movs	r3, #2
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <AppLoop+0xa78>)
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2310      	movs	r3, #16
 80016a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a6:	2123      	movs	r1, #35	; 0x23
 80016a8:	2021      	movs	r0, #33	; 0x21
 80016aa:	f010 f8c3 	bl	8011834 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"53.4V");
 80016ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016b0:	3325      	adds	r3, #37	; 0x25
 80016b2:	4618      	mov	r0, r3
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <AppLoop+0xa68>)
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c2:	2206      	movs	r2, #6
 80016c4:	2137      	movs	r1, #55	; 0x37
 80016c6:	f017 fc95 	bl	8018ff4 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 80016ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016cc:	3302      	adds	r3, #2
 80016ce:	4619      	mov	r1, r3
 80016d0:	e028      	b.n	8001724 <AppLoop+0xa7c>
 80016d2:	bf00      	nop
 80016d4:	0801bcd0 	.word	0x0801bcd0
 80016d8:	200047a4 	.word	0x200047a4
 80016dc:	0801bdb8 	.word	0x0801bdb8
 80016e0:	0801bd78 	.word	0x0801bd78
 80016e4:	0801bd80 	.word	0x0801bd80
 80016e8:	20000224 	.word	0x20000224
 80016ec:	0801bdd0 	.word	0x0801bdd0
 80016f0:	0801bde0 	.word	0x0801bde0
 80016f4:	0801d298 	.word	0x0801d298
 80016f8:	0801d574 	.word	0x0801d574
 80016fc:	0801bccc 	.word	0x0801bccc
 8001700:	0801bde8 	.word	0x0801bde8
 8001704:	0801bdf8 	.word	0x0801bdf8
 8001708:	0801be00 	.word	0x0801be00
 800170c:	0801be14 	.word	0x0801be14
 8001710:	0801be24 	.word	0x0801be24
 8001714:	0801be2c 	.word	0x0801be2c
 8001718:	0801be40 	.word	0x0801be40
 800171c:	0801be48 	.word	0x0801be48
 8001720:	0801be54 	.word	0x0801be54
 8001724:	2300      	movs	r3, #0
 8001726:	2253      	movs	r2, #83	; 0x53
 8001728:	48af      	ldr	r0, [pc, #700]	; (80019e8 <AppLoop+0xd40>)
 800172a:	f016 f97d 	bl	8017a28 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 800172e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001730:	337f      	adds	r3, #127	; 0x7f
 8001732:	4619      	mov	r1, r3
 8001734:	2300      	movs	r3, #0
 8001736:	2253      	movs	r2, #83	; 0x53
 8001738:	48ac      	ldr	r0, [pc, #688]	; (80019ec <AppLoop+0xd44>)
 800173a:	f016 f975 	bl	8017a28 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 800173e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001740:	3323      	adds	r3, #35	; 0x23
 8001742:	4619      	mov	r1, r3
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	225f      	movs	r2, #95	; 0x5f
 8001750:	48a7      	ldr	r0, [pc, #668]	; (80019f0 <AppLoop+0xd48>)
 8001752:	f015 fa1f 	bl	8016b94 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 8001756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001758:	3333      	adds	r3, #51	; 0x33
 800175a:	4618      	mov	r0, r3
 800175c:	4ba5      	ldr	r3, [pc, #660]	; (80019f4 <AppLoop+0xd4c>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2304      	movs	r3, #4
 8001762:	2200      	movs	r2, #0
 8001764:	21ca      	movs	r1, #202	; 0xca
 8001766:	f016 fa1b 	bl	8017ba0 <BOW>

		i=160;
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(187,35,WHITE, 0x0010,"CORRIENTE BUS",2);
 800176e:	2302      	movs	r3, #2
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	4ba1      	ldr	r3, [pc, #644]	; (80019f8 <AppLoop+0xd50>)
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2310      	movs	r3, #16
 8001778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177c:	2123      	movs	r1, #35	; 0x23
 800177e:	20bb      	movs	r0, #187	; 0xbb
 8001780:	f010 f858 	bl	8011834 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"12.1A");
 8001784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001786:	3325      	adds	r3, #37	; 0x25
 8001788:	4618      	mov	r0, r3
 800178a:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <AppLoop+0xd54>)
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001798:	2206      	movs	r2, #6
 800179a:	2137      	movs	r1, #55	; 0x37
 800179c:	f017 fc2a 	bl	8018ff4 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 80017a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017a2:	3302      	adds	r3, #2
 80017a4:	4619      	mov	r1, r3
 80017a6:	2300      	movs	r3, #0
 80017a8:	2253      	movs	r2, #83	; 0x53
 80017aa:	488f      	ldr	r0, [pc, #572]	; (80019e8 <AppLoop+0xd40>)
 80017ac:	f016 f93c 	bl	8017a28 <BOT>
   		BOT(BOT_ADER,127+i,83,0);
 80017b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017b2:	337f      	adds	r3, #127	; 0x7f
 80017b4:	4619      	mov	r1, r3
 80017b6:	2300      	movs	r3, #0
 80017b8:	2253      	movs	r2, #83	; 0x53
 80017ba:	488c      	ldr	r0, [pc, #560]	; (80019ec <AppLoop+0xd44>)
 80017bc:	f016 f934 	bl	8017a28 <BOT>
   		f_PEL(fPEL1,35+i,95,0,0,0);
 80017c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017c2:	3323      	adds	r3, #35	; 0x23
 80017c4:	4619      	mov	r1, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	225f      	movs	r2, #95	; 0x5f
 80017d2:	4887      	ldr	r0, [pc, #540]	; (80019f0 <AppLoop+0xd48>)
 80017d4:	f015 f9de 	bl	8016b94 <f_PEL>
   		BOW(51+i,202,0,4,"OK");
 80017d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017da:	3333      	adds	r3, #51	; 0x33
 80017dc:	4618      	mov	r0, r3
 80017de:	4b85      	ldr	r3, [pc, #532]	; (80019f4 <AppLoop+0xd4c>)
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2304      	movs	r3, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	21ca      	movs	r1, #202	; 0xca
 80017e8:	f016 f9da 	bl	8017ba0 <BOW>

   		BOW(117,202,0,6,"SALIR");
 80017ec:	4b84      	ldr	r3, [pc, #528]	; (8001a00 <AppLoop+0xd58>)
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2306      	movs	r3, #6
 80017f2:	2200      	movs	r2, #0
 80017f4:	21ca      	movs	r1, #202	; 0xca
 80017f6:	2075      	movs	r0, #117	; 0x75
 80017f8:	f016 f9d2 	bl	8017ba0 <BOW>
   	   	m_Pantalla++;
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <AppLoop+0xd5c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <AppLoop+0xd5c>)
 8001804:	6013      	str	r3, [r2, #0]

	///////////////////////////////////////////////////////////
	// VISORES
	///////////////////////////////////////////////////////////

	if(m_Pantalla == VISOR)//Pantalla PAR inicializa los fondos y variables, pasa la primera vez y luego va a la pantalla impar
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <AppLoop+0xd5c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800180e:	d126      	bne.n	800185e <AppLoop+0xbb6>
	{
		m_IndicePel=1;
 8001810:	4b7d      	ldr	r3, [pc, #500]	; (8001a08 <AppLoop+0xd60>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
		FondoCompletoAzul();
 8001816:	f017 fbdd 	bl	8018fd4 <FondoCompletoAzul>
		f_BMP("INVERTER/PIC/PIC VISOR1.bmp",0,0);//Dibujo fondo de pantalla
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	487b      	ldr	r0, [pc, #492]	; (8001a0c <AppLoop+0xd64>)
 8001820:	f016 fdc2 	bl	80183a8 <f_BMP>
		f_PEL_open(fPEL1,"INVERTER","EOLICO",12);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001824:	230c      	movs	r3, #12
 8001826:	4a7a      	ldr	r2, [pc, #488]	; (8001a10 <AppLoop+0xd68>)
 8001828:	497a      	ldr	r1, [pc, #488]	; (8001a14 <AppLoop+0xd6c>)
 800182a:	4871      	ldr	r0, [pc, #452]	; (80019f0 <AppLoop+0xd48>)
 800182c:	f015 f96a 	bl	8016b04 <f_PEL_open>
		f_PEL(fPEL1,204,0,96,33,0);//Dibujo fondo del eólico en la posición 204,0
 8001830:	2300      	movs	r3, #0
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2321      	movs	r3, #33	; 0x21
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	2200      	movs	r2, #0
 800183c:	21cc      	movs	r1, #204	; 0xcc
 800183e:	486c      	ldr	r0, [pc, #432]	; (80019f0 <AppLoop+0xd48>)
 8001840:	f015 f9a8 	bl	8016b94 <f_PEL>
		BOW(118,03,0,6,SALIR);
 8001844:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <AppLoop+0xd70>)
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2306      	movs	r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	2103      	movs	r1, #3
 800184e:	2076      	movs	r0, #118	; 0x76
 8001850:	f016 f9a6 	bl	8017ba0 <BOW>
		m_Pantalla++;
 8001854:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <AppLoop+0xd5c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a6a      	ldr	r2, [pc, #424]	; (8001a04 <AppLoop+0xd5c>)
 800185c:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == VISOR+1)//Pantallas IMPAR solo actualiza
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <AppLoop+0xd5c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8001866:	4293      	cmp	r3, r2
 8001868:	d174      	bne.n	8001954 <AppLoop+0xcac>
	{
		m_IndicePel++;
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <AppLoop+0xd60>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <AppLoop+0xd60>)
 8001872:	6013      	str	r3, [r2, #0]
		if(m_IndicePel>12) m_IndicePel=1;
 8001874:	4b64      	ldr	r3, [pc, #400]	; (8001a08 <AppLoop+0xd60>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d902      	bls.n	8001882 <AppLoop+0xbda>
 800187c:	4b62      	ldr	r3, [pc, #392]	; (8001a08 <AppLoop+0xd60>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
		f_PEL(fPEL1,204,0,0,0,m_IndicePel);
 8001882:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <AppLoop+0xd60>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	2300      	movs	r3, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	2200      	movs	r2, #0
 8001892:	21cc      	movs	r1, #204	; 0xcc
 8001894:	4856      	ldr	r0, [pc, #344]	; (80019f0 <AppLoop+0xd48>)
 8001896:	f015 f97d 	bl	8016b94 <f_PEL>

		m_IndiceGel++;
 800189a:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <AppLoop+0xd74>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <AppLoop+0xd74>)
 80018a2:	6013      	str	r3, [r2, #0]
		if(m_IndiceGel==10) f_BMP("INVERTER/PIC/PIC GEL_PREN.bmp",230,188);
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <AppLoop+0xd74>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b0a      	cmp	r3, #10
 80018aa:	d104      	bne.n	80018b6 <AppLoop+0xc0e>
 80018ac:	22bc      	movs	r2, #188	; 0xbc
 80018ae:	21e6      	movs	r1, #230	; 0xe6
 80018b0:	485b      	ldr	r0, [pc, #364]	; (8001a20 <AppLoop+0xd78>)
 80018b2:	f016 fd79 	bl	80183a8 <f_BMP>
		if(m_IndiceGel==20) f_BMP("INVERTER/PIC/PIC GEL_APAG.bmp",230,188),m_IndiceGel=0;
 80018b6:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <AppLoop+0xd74>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b14      	cmp	r3, #20
 80018bc:	d107      	bne.n	80018ce <AppLoop+0xc26>
 80018be:	22bc      	movs	r2, #188	; 0xbc
 80018c0:	21e6      	movs	r1, #230	; 0xe6
 80018c2:	4858      	ldr	r0, [pc, #352]	; (8001a24 <AppLoop+0xd7c>)
 80018c4:	f016 fd70 	bl	80183a8 <f_BMP>
 80018c8:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <AppLoop+0xd74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

		m_IndiceSol++;
 80018ce:	4b56      	ldr	r3, [pc, #344]	; (8001a28 <AppLoop+0xd80>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a54      	ldr	r2, [pc, #336]	; (8001a28 <AppLoop+0xd80>)
 80018d6:	6013      	str	r3, [r2, #0]
		if(m_IndiceSol==100) f_BMP("INVERTER/PIC/PIC SOL_PREN.bmp",57,0);
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <AppLoop+0xd80>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d104      	bne.n	80018ea <AppLoop+0xc42>
 80018e0:	2200      	movs	r2, #0
 80018e2:	2139      	movs	r1, #57	; 0x39
 80018e4:	4851      	ldr	r0, [pc, #324]	; (8001a2c <AppLoop+0xd84>)
 80018e6:	f016 fd5f 	bl	80183a8 <f_BMP>
		if(m_IndiceSol==200) f_BMP("INVERTER/PIC/PIC SOL_APAG.bmp",57,0),m_IndiceSol=0;
 80018ea:	4b4f      	ldr	r3, [pc, #316]	; (8001a28 <AppLoop+0xd80>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2bc8      	cmp	r3, #200	; 0xc8
 80018f0:	d107      	bne.n	8001902 <AppLoop+0xc5a>
 80018f2:	2200      	movs	r2, #0
 80018f4:	2139      	movs	r1, #57	; 0x39
 80018f6:	484e      	ldr	r0, [pc, #312]	; (8001a30 <AppLoop+0xd88>)
 80018f8:	f016 fd56 	bl	80183a8 <f_BMP>
 80018fc:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <AppLoop+0xd80>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

		m_IndiceBat++;
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <AppLoop+0xd8c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <AppLoop+0xd8c>)
 800190a:	6013      	str	r3, [r2, #0]
		if(m_IndiceBat==34) m_IndiceBat=0;
 800190c:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <AppLoop+0xd8c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b22      	cmp	r3, #34	; 0x22
 8001912:	d102      	bne.n	800191a <AppLoop+0xc72>
 8001914:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <AppLoop+0xd8c>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
		FillReg(23,200,55,34-m_IndiceBat,0x0000);
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <AppLoop+0xd8c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f1c3 0322 	rsb	r3, r3, #34	; 0x22
 8001922:	461a      	mov	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	2237      	movs	r2, #55	; 0x37
 800192c:	21c8      	movs	r1, #200	; 0xc8
 800192e:	2017      	movs	r0, #23
 8001930:	f016 fefc 	bl	801872c <FillReg>
		FillReg(23,235-m_IndiceBat,55,m_IndiceBat,0xffff);
 8001934:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <AppLoop+0xd8c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1c3 03eb 	rsb	r3, r3, #235	; 0xeb
 800193c:	4619      	mov	r1, r3
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <AppLoop+0xd8c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	2237      	movs	r2, #55	; 0x37
 800194e:	2017      	movs	r0, #23
 8001950:	f016 feec 	bl	801872c <FillReg>

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	// DESARROLLO DAB
	/////////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == DES_DAB)
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <AppLoop+0xd5c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f640 0234 	movw	r2, #2100	; 0x834
 800195c:	4293      	cmp	r3, r2
 800195e:	d11d      	bne.n	800199c <AppLoop+0xcf4>
	{
		InverterInit();
 8001960:	f000 fa4a 	bl	8001df8 <InverterInit>

		m_BTO=0;
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <AppLoop+0xd90>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

		FondoCompletoAzul();
 800196a:	f017 fb33 	bl	8018fd4 <FondoCompletoAzul>

		OSCCanal1=&OSCCanal[0];
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <AppLoop+0xd94>)
 8001970:	4a33      	ldr	r2, [pc, #204]	; (8001a40 <AppLoop+0xd98>)
 8001972:	601a      	str	r2, [r3, #0]
		OSCCanal2=&OSCCanal[1024];
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <AppLoop+0xd9c>)
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <AppLoop+0xda0>)
 8001978:	601a      	str	r2, [r3, #0]
		OSCCanal3=&OSCCanal[2048];
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <AppLoop+0xda4>)
 800197c:	4a34      	ldr	r2, [pc, #208]	; (8001a50 <AppLoop+0xda8>)
 800197e:	601a      	str	r2, [r3, #0]
		OSCCanal4=&OSCCanal[3072];
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <AppLoop+0xdac>)
 8001982:	4a35      	ldr	r2, [pc, #212]	; (8001a58 <AppLoop+0xdb0>)
 8001984:	601a      	str	r2, [r3, #0]

		SetBT();
 8001986:	f000 fc09 	bl	800219c <SetBT>
	    TomarCanales();
 800198a:	f000 fac5 	bl	8001f18 <TomarCanales>
	    GraficarOSC();
 800198e:	f016 ffd3 	bl	8018938 <GraficarOSC>

	    m_Pantalla++;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <AppLoop+0xd5c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <AppLoop+0xd5c>)
 800199a:	6013      	str	r3, [r2, #0]

	}
	if(m_Pantalla == DES_DAB+1)
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <AppLoop+0xd5c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f640 0235 	movw	r2, #2101	; 0x835
 80019a4:	4293      	cmp	r3, r2
 80019a6:	f040 80c0 	bne.w	8001b2a <AppLoop+0xe82>
	{
		InverterLoop();
 80019aa:	f000 fa45 	bl	8001e38 <InverterLoop>

		d_Fase=d_Fase+.01;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <AppLoop+0xdb4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	a309      	add	r3, pc, #36	; (adr r3, 80019e0 <AppLoop+0xd38>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fc6d 	bl	800029c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f8ff 	bl	8000bcc <__aeabi_d2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <AppLoop+0xdb4>)
 80019d2:	6013      	str	r3, [r2, #0]
    	if(d_Fase>1) d_Fase=0;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <AppLoop+0xdb4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	e041      	b.n	8001a60 <AppLoop+0xdb8>
 80019dc:	f3af 8000 	nop.w
 80019e0:	47ae147b 	.word	0x47ae147b
 80019e4:	3f847ae1 	.word	0x3f847ae1
 80019e8:	0801d298 	.word	0x0801d298
 80019ec:	0801d574 	.word	0x0801d574
 80019f0:	20000224 	.word	0x20000224
 80019f4:	0801bccc 	.word	0x0801bccc
 80019f8:	0801be60 	.word	0x0801be60
 80019fc:	0801be40 	.word	0x0801be40
 8001a00:	0801bcd0 	.word	0x0801bcd0
 8001a04:	200047a4 	.word	0x200047a4
 8001a08:	20009d98 	.word	0x20009d98
 8001a0c:	0801be70 	.word	0x0801be70
 8001a10:	0801bcb0 	.word	0x0801bcb0
 8001a14:	0801bd80 	.word	0x0801bd80
 8001a18:	0801c24c 	.word	0x0801c24c
 8001a1c:	2000484c 	.word	0x2000484c
 8001a20:	0801be8c 	.word	0x0801be8c
 8001a24:	0801beac 	.word	0x0801beac
 8001a28:	20004850 	.word	0x20004850
 8001a2c:	0801becc 	.word	0x0801becc
 8001a30:	0801beec 	.word	0x0801beec
 8001a34:	20004854 	.word	0x20004854
 8001a38:	2000890c 	.word	0x2000890c
 8001a3c:	200088fc 	.word	0x200088fc
 8001a40:	200048ec 	.word	0x200048ec
 8001a44:	20008900 	.word	0x20008900
 8001a48:	200058ec 	.word	0x200058ec
 8001a4c:	20008904 	.word	0x20008904
 8001a50:	200068ec 	.word	0x200068ec
 8001a54:	20008908 	.word	0x20008908
 8001a58:	200078ec 	.word	0x200078ec
 8001a5c:	20004864 	.word	0x20004864
 8001a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	dd03      	ble.n	8001a76 <AppLoop+0xdce>
 8001a6e:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <AppLoop+0x1018>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

    	TIM8->CCR1=TIM8->ARR-d_Fase*TIM8->ARR;
 8001a76:	4b93      	ldr	r3, [pc, #588]	; (8001cc4 <AppLoop+0x101c>)
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a82:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <AppLoop+0x101c>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <AppLoop+0x1018>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9c:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <AppLoop+0x101c>)
 8001a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa2:	ee17 2a90 	vmov	r2, s15
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
    	TIM8->CCR2=d_Fase*TIM8->ARR;
 8001aa8:	4b86      	ldr	r3, [pc, #536]	; (8001cc4 <AppLoop+0x101c>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab4:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <AppLoop+0x1018>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	4b81      	ldr	r3, [pc, #516]	; (8001cc4 <AppLoop+0x101c>)
 8001ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac4:	ee17 2a90 	vmov	r2, s15
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38

    	TIM8->CCR3=d_Fase*TIM8->ARR;
 8001aca:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <AppLoop+0x101c>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <AppLoop+0x1018>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae0:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <AppLoop+0x101c>)
 8001ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae6:	ee17 2a90 	vmov	r2, s15
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM8->CCR4=TIM8->ARR-d_Fase*TIM8->ARR;
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <AppLoop+0x101c>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af8:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <AppLoop+0x101c>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b04:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <AppLoop+0x1018>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b12:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <AppLoop+0x101c>)
 8001b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b18:	ee17 2a90 	vmov	r2, s15
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40

    	SetBT();
 8001b1e:	f000 fb3d 	bl	800219c <SetBT>
		TomarCanales();
 8001b22:	f000 f9f9 	bl	8001f18 <TomarCanales>
		GraficarOSC();
 8001b26:	f016 ff07 	bl	8018938 <GraficarOSC>

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	// DESARROLLO MPPT
	/////////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == DES_MPPT)
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <AppLoop+0x1020>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f640 0298 	movw	r2, #2200	; 0x898
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d120      	bne.n	8001b78 <AppLoop+0xed0>
	{
		MpptInit();
 8001b36:	f000 f9a9 	bl	8001e8c <MpptInit>

		m_BTO=0;
 8001b3a:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <AppLoop+0x1024>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
		m_BTG=0;
 8001b40:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <AppLoop+0x1028>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

		FondoCompletoAzul();
 8001b46:	f017 fa45 	bl	8018fd4 <FondoCompletoAzul>

		OSCCanal1=&OSCCanal[0];
 8001b4a:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <AppLoop+0x102c>)
 8001b4c:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <AppLoop+0x1030>)
 8001b4e:	601a      	str	r2, [r3, #0]
		OSCCanal2=&OSCCanal[1024];
 8001b50:	4b62      	ldr	r3, [pc, #392]	; (8001cdc <AppLoop+0x1034>)
 8001b52:	4a63      	ldr	r2, [pc, #396]	; (8001ce0 <AppLoop+0x1038>)
 8001b54:	601a      	str	r2, [r3, #0]
		OSCCanal3=&OSCCanal[2048];
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <AppLoop+0x103c>)
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <AppLoop+0x1040>)
 8001b5a:	601a      	str	r2, [r3, #0]
		OSCCanal4=&OSCCanal[3072];
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <AppLoop+0x1044>)
 8001b5e:	4a64      	ldr	r2, [pc, #400]	; (8001cf0 <AppLoop+0x1048>)
 8001b60:	601a      	str	r2, [r3, #0]

		SetBT();
 8001b62:	f000 fb1b 	bl	800219c <SetBT>
	    TomarCanales();
 8001b66:	f000 f9d7 	bl	8001f18 <TomarCanales>
	    GraficarOSC();
 8001b6a:	f016 fee5 	bl	8018938 <GraficarOSC>
	    m_Pantalla++;
 8001b6e:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <AppLoop+0x1020>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a54      	ldr	r2, [pc, #336]	; (8001cc8 <AppLoop+0x1020>)
 8001b76:	6013      	str	r3, [r2, #0]

	}
	if(m_Pantalla == DES_MPPT+1)
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <AppLoop+0x1020>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f640 0299 	movw	r2, #2201	; 0x899
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d139      	bne.n	8001bf8 <AppLoop+0xf50>
	{
		MpptLoop();
 8001b84:	f000 f99c 	bl	8001ec0 <MpptLoop>

		m_dPWM=m_dPWM+.01;
 8001b88:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <AppLoop+0x104c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fce3 	bl	8000558 <__aeabi_f2d>
 8001b92:	a349      	add	r3, pc, #292	; (adr r3, 8001cb8 <AppLoop+0x1010>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fb80 	bl	800029c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7ff f812 	bl	8000bcc <__aeabi_d2f>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <AppLoop+0x104c>)
 8001bac:	6013      	str	r3, [r2, #0]
    	if(m_dPWM>1) m_dPWM=0;
 8001bae:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <AppLoop+0x104c>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	dd03      	ble.n	8001bca <AppLoop+0xf22>
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <AppLoop+0x104c>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

		TIM4->CCR1=(uint32_t)(m_dPWM*(float)TIM4->ARR);
 8001bca:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <AppLoop+0x1050>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <AppLoop+0x104c>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be0:	4b45      	ldr	r3, [pc, #276]	; (8001cf8 <AppLoop+0x1050>)
 8001be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be6:	ee17 2a90 	vmov	r2, s15
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

    	SetBT();
 8001bec:	f000 fad6 	bl	800219c <SetBT>
		TomarCanales();
 8001bf0:	f000 f992 	bl	8001f18 <TomarCanales>
		GraficarOSC();
 8001bf4:	f016 fea0 	bl	8018938 <GraficarOSC>
	}
	/////////////////////////////////////////////////////////////////////////////
	// DESARROLLO INVERTER
	/////////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == DES_INVERTER)
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <AppLoop+0x1020>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d146      	bne.n	8001c92 <AppLoop+0xfea>
	{
		InverterInit();
 8001c04:	f000 f8f8 	bl	8001df8 <InverterInit>

		i_PMod=0.5;
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <AppLoop+0x1054>)
 8001c0a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c0e:	601a      	str	r2, [r3, #0]

		for(i=0;i<250;i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	667b      	str	r3, [r7, #100]	; 0x64
 8001c14:	e01e      	b.n	8001c54 <AppLoop+0xfac>
		{
			SPWM1[i] = (uint32_t)(SPWM[i]*i_PMod*(float)TIM2->ARR);
 8001c16:	4a3a      	ldr	r2, [pc, #232]	; (8001d00 <AppLoop+0x1058>)
 8001c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	ed93 7a00 	vldr	s14, [r3]
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <AppLoop+0x1054>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c42:	ee17 1a90 	vmov	r1, s15
 8001c46:	4a2f      	ldr	r2, [pc, #188]	; (8001d04 <AppLoop+0x105c>)
 8001c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0;i<250;i++)
 8001c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c50:	3301      	adds	r3, #1
 8001c52:	667b      	str	r3, [r7, #100]	; 0x64
 8001c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c56:	2bf9      	cmp	r3, #249	; 0xf9
 8001c58:	dddd      	ble.n	8001c16 <AppLoop+0xf6e>
		}

		m_BTO=3;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <AppLoop+0x1024>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	601a      	str	r2, [r3, #0]

		FondoCompletoAzul();
 8001c60:	f017 f9b8 	bl	8018fd4 <FondoCompletoAzul>
		OSCCanal1=&OSCCanal[0];
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <AppLoop+0x102c>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <AppLoop+0x1030>)
 8001c68:	601a      	str	r2, [r3, #0]
		OSCCanal2=&OSCCanal[1024];
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <AppLoop+0x1034>)
 8001c6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <AppLoop+0x1038>)
 8001c6e:	601a      	str	r2, [r3, #0]
		OSCCanal3=&OSCCanal[2048];
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <AppLoop+0x103c>)
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <AppLoop+0x1040>)
 8001c74:	601a      	str	r2, [r3, #0]
		OSCCanal4=&OSCCanal[3072];
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <AppLoop+0x1044>)
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <AppLoop+0x1048>)
 8001c7a:	601a      	str	r2, [r3, #0]

		SetBT();
 8001c7c:	f000 fa8e 	bl	800219c <SetBT>
	    TomarCanales();
 8001c80:	f000 f94a 	bl	8001f18 <TomarCanales>
	    GraficarOSC();
 8001c84:	f016 fe58 	bl	8018938 <GraficarOSC>
	    m_Pantalla++;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <AppLoop+0x1020>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <AppLoop+0x1020>)
 8001c90:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == DES_INVERTER+1)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <AppLoop+0x1020>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f640 02fd 	movw	r2, #2301	; 0x8fd
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d107      	bne.n	8001cae <AppLoop+0x1006>
	{
		InverterLoop();
 8001c9e:	f000 f8cb 	bl	8001e38 <InverterLoop>

    	SetBT();
 8001ca2:	f000 fa7b 	bl	800219c <SetBT>
		TomarCanales();
 8001ca6:	f000 f937 	bl	8001f18 <TomarCanales>
		GraficarOSC();
 8001caa:	f016 fe45 	bl	8018938 <GraficarOSC>
	}
}
 8001cae:	bf00      	nop
 8001cb0:	3768      	adds	r7, #104	; 0x68
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	47ae147b 	.word	0x47ae147b
 8001cbc:	3f847ae1 	.word	0x3f847ae1
 8001cc0:	20004864 	.word	0x20004864
 8001cc4:	40013400 	.word	0x40013400
 8001cc8:	200047a4 	.word	0x200047a4
 8001ccc:	2000890c 	.word	0x2000890c
 8001cd0:	20008910 	.word	0x20008910
 8001cd4:	200088fc 	.word	0x200088fc
 8001cd8:	200048ec 	.word	0x200048ec
 8001cdc:	20008900 	.word	0x20008900
 8001ce0:	200058ec 	.word	0x200058ec
 8001ce4:	20008904 	.word	0x20008904
 8001ce8:	200068ec 	.word	0x200068ec
 8001cec:	20008908 	.word	0x20008908
 8001cf0:	200078ec 	.word	0x200078ec
 8001cf4:	20004884 	.word	0x20004884
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	20004874 	.word	0x20004874
 8001d00:	0801c254 	.word	0x0801c254
 8001d04:	200093d4 	.word	0x200093d4

08001d08 <LeerVBus>:
{
	if(LeerModo==0) return VBatDes;
	else return 0;
}
float LeerVBus(unsigned int LeerModo)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	if(LeerModo==0) return VBusDes;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <LeerVBus+0x14>
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <LeerVBus+0x2c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	e001      	b.n	8001d20 <LeerVBus+0x18>
	else return 0;
 8001d1c:	f04f 0300 	mov.w	r3, #0
}
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eeb0 0a67 	vmov.f32	s0, s15
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000210 	.word	0x20000210

08001d38 <LeerVac>:
float LeerVac(unsigned int LeerModo)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if(LeerModo==0) return VacDes;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <LeerVac+0x14>
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <LeerVac+0x2c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e001      	b.n	8001d50 <LeerVac+0x18>
	else return 0;
 8001d4c:	f04f 0300 	mov.w	r3, #0
}
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000214 	.word	0x20000214

08001d68 <LeerIac>:
float LeerIac(unsigned int LeerModo)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	if(LeerModo==0) return IacDes;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <LeerIac+0x14>
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <LeerIac+0x2c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e001      	b.n	8001d80 <LeerIac+0x18>
	else return 0;
 8001d7c:	f04f 0300 	mov.w	r3, #0
}
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000218 	.word	0x20000218

08001d98 <LeerVPanel>:
float LeerVPanel(unsigned int LeerModo)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	if(LeerModo==0) return VPanelDes;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <LeerVPanel+0x14>
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <LeerVPanel+0x2c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e001      	b.n	8001db0 <LeerVPanel+0x18>
	else return 0;
 8001dac:	f04f 0300 	mov.w	r3, #0

}
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eeb0 0a67 	vmov.f32	s0, s15
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	2000021c 	.word	0x2000021c

08001dc8 <LeerIPanel>:
float LeerIPanel(unsigned int LeerModo)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	if(LeerModo==0) return IPanelDes;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <LeerIPanel+0x14>
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <LeerIPanel+0x2c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e001      	b.n	8001de0 <LeerIPanel+0x18>
	else return 0;
 8001ddc:	f04f 0300 	mov.w	r3, #0
}
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000220 	.word	0x20000220

08001df8 <InverterInit>:
float i_Iac=0;
float i_VBus=0;
float i_PMod=0;

void InverterInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
	//Aca se inicializan las variables.
	i_Vac=0;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <InverterInit+0x30>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	i_Iac=0;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <InverterInit+0x34>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
	i_VBus=0;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <InverterInit+0x38>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	i_PMod=0;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <InverterInit+0x3c>)
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20004868 	.word	0x20004868
 8001e2c:	2000486c 	.word	0x2000486c
 8001e30:	20004870 	.word	0x20004870
 8001e34:	20004874 	.word	0x20004874

08001e38 <InverterLoop>:

void InverterLoop(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	//Por acá paso regularmente cada x tiempo,
	//y decido que cargar en i_PMod;
	i_Vac=LeerVac(g_LeerModo);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <InverterLoop+0x44>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff79 	bl	8001d38 <LeerVac>
 8001e46:	eef0 7a40 	vmov.f32	s15, s0
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <InverterLoop+0x48>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
	i_Iac=LeerIac(g_LeerModo);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <InverterLoop+0x44>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff87 	bl	8001d68 <LeerIac>
 8001e5a:	eef0 7a40 	vmov.f32	s15, s0
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <InverterLoop+0x4c>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]
	i_VBus=LeerVBus(g_LeerModo);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <InverterLoop+0x44>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff4d 	bl	8001d08 <LeerVBus>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <InverterLoop+0x50>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000020c 	.word	0x2000020c
 8001e80:	20004868 	.word	0x20004868
 8001e84:	2000486c 	.word	0x2000486c
 8001e88:	20004870 	.word	0x20004870

08001e8c <MpptInit>:
float m_IPanel=0;
float m_VBus=0;
float m_dPWM=0;

void MpptInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	//Aca se inicializan las variables.

	m_VPanel=0;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <MpptInit+0x28>)
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
	m_IPanel=0;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MpptInit+0x2c>)
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
	m_VBus=0;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MpptInit+0x30>)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20004878 	.word	0x20004878
 8001eb8:	2000487c 	.word	0x2000487c
 8001ebc:	20004880 	.word	0x20004880

08001ec0 <MpptLoop>:

void MpptLoop(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	//Por acá paso regularmente cada x tiempo,
	//y decido que cargar en m_dPWM;

	m_VPanel=LeerVPanel(g_LeerModo);
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MpptLoop+0x44>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff65 	bl	8001d98 <LeerVPanel>
 8001ece:	eef0 7a40 	vmov.f32	s15, s0
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MpptLoop+0x48>)
 8001ed4:	edc3 7a00 	vstr	s15, [r3]
	m_IPanel=LeerIPanel(g_LeerModo);
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <MpptLoop+0x44>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff73 	bl	8001dc8 <LeerIPanel>
 8001ee2:	eef0 7a40 	vmov.f32	s15, s0
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MpptLoop+0x4c>)
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
	m_VBus=LeerVBus(g_LeerModo);
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <MpptLoop+0x44>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff09 	bl	8001d08 <LeerVBus>
 8001ef6:	eef0 7a40 	vmov.f32	s15, s0
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <MpptLoop+0x50>)
 8001efc:	edc3 7a00 	vstr	s15, [r3]

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000020c 	.word	0x2000020c
 8001f08:	20004878 	.word	0x20004878
 8001f0c:	2000487c 	.word	0x2000487c
 8001f10:	20004880 	.word	0x20004880
 8001f14:	00000000 	.word	0x00000000

08001f18 <TomarCanales>:
void TomarCanales(void);



void TomarCanales(void)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
	unsigned int i;

	//uint8_t CAN_data[8]={0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55};
    //Can_TxMessage(0,0x555,8,CAN_data);

	HAL_ADC_Start_DMA(&hadc1,OSCCanal1,1024);
 8001f1e:	4b96      	ldr	r3, [pc, #600]	; (8002178 <TomarCanales+0x260>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f26:	4619      	mov	r1, r3
 8001f28:	4894      	ldr	r0, [pc, #592]	; (800217c <TomarCanales+0x264>)
 8001f2a:	f003 fbc9 	bl	80056c0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,OSCCanal2,1024);
 8001f2e:	4b94      	ldr	r3, [pc, #592]	; (8002180 <TomarCanales+0x268>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f36:	4619      	mov	r1, r3
 8001f38:	4892      	ldr	r0, [pc, #584]	; (8002184 <TomarCanales+0x26c>)
 8001f3a:	f003 fbc1 	bl	80056c0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3,OSCCanal3,1024);
 8001f3e:	4b92      	ldr	r3, [pc, #584]	; (8002188 <TomarCanales+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	4619      	mov	r1, r3
 8001f48:	4890      	ldr	r0, [pc, #576]	; (800218c <TomarCanales+0x274>)
 8001f4a:	f003 fbb9 	bl	80056c0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc4,OSCCanal4,1024);
 8001f4e:	4b90      	ldr	r3, [pc, #576]	; (8002190 <TomarCanales+0x278>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f56:	4619      	mov	r1, r3
 8001f58:	488e      	ldr	r0, [pc, #568]	; (8002194 <TomarCanales+0x27c>)
 8001f5a:	f003 fbb1 	bl	80056c0 <HAL_ADC_Start_DMA>

    while(hadc2.Instance->DR>1500);
 8001f5e:	bf00      	nop
 8001f60:	4b88      	ldr	r3, [pc, #544]	; (8002184 <TomarCanales+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d8f8      	bhi.n	8001f60 <TomarCanales+0x48>
    while(hadc2.Instance->DR<1500);
 8001f6e:	bf00      	nop
 8001f70:	4b84      	ldr	r3, [pc, #528]	; (8002184 <TomarCanales+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f240 52db 	movw	r2, #1499	; 0x5db
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d9f8      	bls.n	8001f70 <TomarCanales+0x58>

    //__disable_irq();

    (hadc1.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <TomarCanales+0x264>)
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b7d      	ldr	r3, [pc, #500]	; (800217c <TomarCanales+0x264>)
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
	(hadc2.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001f92:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <TomarCanales+0x26c>)
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <TomarCanales+0x26c>)
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
	(hadc3.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001fa6:	4b79      	ldr	r3, [pc, #484]	; (800218c <TomarCanales+0x274>)
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b77      	ldr	r3, [pc, #476]	; (800218c <TomarCanales+0x274>)
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
	(hadc4.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <TomarCanales+0x27c>)
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b74      	ldr	r3, [pc, #464]	; (8002194 <TomarCanales+0x27c>)
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

	(hadc1.DMA_Handle)->Instance->CNDTR=1024;
 8001fce:	4b6b      	ldr	r3, [pc, #428]	; (800217c <TomarCanales+0x264>)
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd8:	605a      	str	r2, [r3, #4]
	(hadc2.DMA_Handle)->Instance->CNDTR=1024;
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <TomarCanales+0x26c>)
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe4:	605a      	str	r2, [r3, #4]
	(hadc3.DMA_Handle)->Instance->CNDTR=1024;
 8001fe6:	4b69      	ldr	r3, [pc, #420]	; (800218c <TomarCanales+0x274>)
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	605a      	str	r2, [r3, #4]
	(hadc4.DMA_Handle)->Instance->CNDTR=1024;
 8001ff2:	4b68      	ldr	r3, [pc, #416]	; (8002194 <TomarCanales+0x27c>)
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffc:	605a      	str	r2, [r3, #4]

	(hadc1.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <TomarCanales+0x264>)
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <TomarCanales+0x264>)
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
	(hadc2.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <TomarCanales+0x26c>)
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <TomarCanales+0x26c>)
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
	(hadc3.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <TomarCanales+0x274>)
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <TomarCanales+0x274>)
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
	(hadc4.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 800203a:	4b56      	ldr	r3, [pc, #344]	; (8002194 <TomarCanales+0x27c>)
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <TomarCanales+0x27c>)
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

	//__enable_irq();

	do
	{
		i=__HAL_DMA_GET_COUNTER(hadc4.DMA_Handle);
 800204e:	4b51      	ldr	r3, [pc, #324]	; (8002194 <TomarCanales+0x27c>)
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	607b      	str	r3, [r7, #4]

 	}while(i>1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d8f7      	bhi.n	800204e <TomarCanales+0x136>
 	HAL_Delay(10);
 800205e:	200a      	movs	r0, #10
 8002060:	f003 f8f2 	bl	8005248 <HAL_Delay>

 	HAL_ADC_Stop_DMA(&hadc1);
 8002064:	4845      	ldr	r0, [pc, #276]	; (800217c <TomarCanales+0x264>)
 8002066:	f003 fc47 	bl	80058f8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800206a:	4846      	ldr	r0, [pc, #280]	; (8002184 <TomarCanales+0x26c>)
 800206c:	f003 fc44 	bl	80058f8 <HAL_ADC_Stop_DMA>
 	HAL_ADC_Stop_DMA(&hadc3);
 8002070:	4846      	ldr	r0, [pc, #280]	; (800218c <TomarCanales+0x274>)
 8002072:	f003 fc41 	bl	80058f8 <HAL_ADC_Stop_DMA>
 	HAL_ADC_Stop_DMA(&hadc4);
 8002076:	4847      	ldr	r0, [pc, #284]	; (8002194 <TomarCanales+0x27c>)
 8002078:	f003 fc3e 	bl	80058f8 <HAL_ADC_Stop_DMA>

 	if(m_BTO<3)
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <TomarCanales+0x280>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d871      	bhi.n	8002168 <TomarCanales+0x250>
 	for(i=0;i<1000;i++)
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	e06a      	b.n	8002160 <TomarCanales+0x248>
    {
		OSCCanal1[i]=OSCCanal1[(int)(i*1.024)];
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <TomarCanales+0x260>)
 800208c:	681c      	ldr	r4, [r3, #0]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fa40 	bl	8000514 <__aeabi_ui2d>
 8002094:	a336      	add	r3, pc, #216	; (adr r3, 8002170 <TomarCanales+0x258>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fab5 	bl	8000608 <__aeabi_dmul>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fd49 	bl	8000b3c <__aeabi_d2iz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	18e2      	adds	r2, r4, r3
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <TomarCanales+0x260>)
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	601a      	str	r2, [r3, #0]
		OSCCanal2[i]=OSCCanal2[(int)(i*1.024)];
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <TomarCanales+0x268>)
 80020c0:	681c      	ldr	r4, [r3, #0]
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fa26 	bl	8000514 <__aeabi_ui2d>
 80020c8:	a329      	add	r3, pc, #164	; (adr r3, 8002170 <TomarCanales+0x258>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fa9b 	bl	8000608 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fd2f 	bl	8000b3c <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	18e2      	adds	r2, r4, r3
 80020e4:	4b26      	ldr	r3, [pc, #152]	; (8002180 <TomarCanales+0x268>)
 80020e6:	6819      	ldr	r1, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	601a      	str	r2, [r3, #0]
	    OSCCanal3[i]=OSCCanal3[(int)(i*1.024)];
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <TomarCanales+0x270>)
 80020f4:	681c      	ldr	r4, [r3, #0]
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fa0c 	bl	8000514 <__aeabi_ui2d>
 80020fc:	a31c      	add	r3, pc, #112	; (adr r3, 8002170 <TomarCanales+0x258>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fa81 	bl	8000608 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd15 	bl	8000b3c <__aeabi_d2iz>
 8002112:	4603      	mov	r3, r0
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	18e2      	adds	r2, r4, r3
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <TomarCanales+0x270>)
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	601a      	str	r2, [r3, #0]
	    OSCCanal4[i]=OSCCanal4[(int)(i*1.024)];
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <TomarCanales+0x278>)
 8002128:	681c      	ldr	r4, [r3, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe f9f2 	bl	8000514 <__aeabi_ui2d>
 8002130:	a30f      	add	r3, pc, #60	; (adr r3, 8002170 <TomarCanales+0x258>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa67 	bl	8000608 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fcfb 	bl	8000b3c <__aeabi_d2iz>
 8002146:	4603      	mov	r3, r0
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	18e2      	adds	r2, r4, r3
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <TomarCanales+0x278>)
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	601a      	str	r2, [r3, #0]
 	for(i=0;i<1000;i++)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3301      	adds	r3, #1
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	d390      	bcc.n	800208a <TomarCanales+0x172>
    }
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	d2f1a9fc 	.word	0xd2f1a9fc
 8002174:	3ff0624d 	.word	0x3ff0624d
 8002178:	200088fc 	.word	0x200088fc
 800217c:	20008918 	.word	0x20008918
 8002180:	20008900 	.word	0x20008900
 8002184:	20008968 	.word	0x20008968
 8002188:	20008904 	.word	0x20008904
 800218c:	200089b8 	.word	0x200089b8
 8002190:	20008908 	.word	0x20008908
 8002194:	20008a08 	.word	0x20008a08
 8002198:	2000890c 	.word	0x2000890c

0800219c <SetBT>:

void SetBT()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	switch(m_BTO)
 80021a0:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <SetBT+0x23c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b0e      	cmp	r3, #14
 80021a6:	f200 8676 	bhi.w	8002e96 <SetBT+0xcfa>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <SetBT+0x14>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021ed 	.word	0x080021ed
 80021b4:	08002291 	.word	0x08002291
 80021b8:	08002335 	.word	0x08002335
 80021bc:	080023ed 	.word	0x080023ed
 80021c0:	080024cb 	.word	0x080024cb
 80021c4:	080025a9 	.word	0x080025a9
 80021c8:	080026a1 	.word	0x080026a1
 80021cc:	0800277d 	.word	0x0800277d
 80021d0:	08002859 	.word	0x08002859
 80021d4:	0800294d 	.word	0x0800294d
 80021d8:	08002a29 	.word	0x08002a29
 80021dc:	08002b05 	.word	0x08002b05
 80021e0:	08002bfd 	.word	0x08002bfd
 80021e4:	08002cdb 	.word	0x08002cdb
 80021e8:	08002db9 	.word	0x08002db9
  	{
		  	  		case 0://5us
			  		hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80021ec:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <SetBT+0x240>)
 80021ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021f2:	605a      	str	r2, [r3, #4]
			  		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f4:	4b79      	ldr	r3, [pc, #484]	; (80023dc <SetBT+0x240>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
			  		hadc1.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 80021fa:	4b78      	ldr	r3, [pc, #480]	; (80023dc <SetBT+0x240>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
			  		hadc1.Init.ContinuousConvMode = ENABLE;
 8002200:	4b76      	ldr	r3, [pc, #472]	; (80023dc <SetBT+0x240>)
 8002202:	2201      	movs	r2, #1
 8002204:	765a      	strb	r2, [r3, #25]
			  		hadc1.Init.DMAContinuousRequests = ENABLE;
 8002206:	4b75      	ldr	r3, [pc, #468]	; (80023dc <SetBT+0x240>)
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc1);
 800220e:	4873      	ldr	r0, [pc, #460]	; (80023dc <SetBT+0x240>)
 8002210:	f003 f85c 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002214:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <SetBT+0x244>)
 8002216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221a:	605a      	str	r2, [r3, #4]
		  	  		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800221c:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <SetBT+0x244>)
 800221e:	2200      	movs	r2, #0
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc2.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8002222:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <SetBT+0x244>)
 8002224:	2201      	movs	r2, #1
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc2.Init.ContinuousConvMode = ENABLE;
 8002228:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <SetBT+0x244>)
 800222a:	2201      	movs	r2, #1
 800222c:	765a      	strb	r2, [r3, #25]
		  	  		hadc2.Init.DMAContinuousRequests = ENABLE;
 800222e:	4b6c      	ldr	r3, [pc, #432]	; (80023e0 <SetBT+0x244>)
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc2);
 8002236:	486a      	ldr	r0, [pc, #424]	; (80023e0 <SetBT+0x244>)
 8002238:	f003 f848 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <SetBT+0x248>)
 800223e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002242:	605a      	str	r2, [r3, #4]
		  	  		hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002244:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <SetBT+0x248>)
 8002246:	2200      	movs	r2, #0
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc3.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 800224a:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <SetBT+0x248>)
 800224c:	2201      	movs	r2, #1
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc3.Init.ContinuousConvMode = ENABLE;
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <SetBT+0x248>)
 8002252:	2201      	movs	r2, #1
 8002254:	765a      	strb	r2, [r3, #25]
		  	  		hadc3.Init.DMAContinuousRequests = ENABLE;
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <SetBT+0x248>)
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc3);
 800225e:	4861      	ldr	r0, [pc, #388]	; (80023e4 <SetBT+0x248>)
 8002260:	f003 f834 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002264:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <SetBT+0x24c>)
 8002266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800226a:	605a      	str	r2, [r3, #4]
		  	  		hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800226c:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <SetBT+0x24c>)
 800226e:	2200      	movs	r2, #0
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc4.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <SetBT+0x24c>)
 8002274:	2201      	movs	r2, #1
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc4.Init.ContinuousConvMode = ENABLE;
 8002278:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <SetBT+0x24c>)
 800227a:	2201      	movs	r2, #1
 800227c:	765a      	strb	r2, [r3, #25]
		  	  		hadc4.Init.DMAContinuousRequests = ENABLE;
 800227e:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <SetBT+0x24c>)
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc4);
 8002286:	4858      	ldr	r0, [pc, #352]	; (80023e8 <SetBT+0x24c>)
 8002288:	f003 f820 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 800228c:	f000 be03 	b.w	8002e96 <SetBT+0xcfa>

		  	  		case 1://10us
			  		hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <SetBT+0x240>)
 8002292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002296:	605a      	str	r2, [r3, #4]
			  		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <SetBT+0x240>)
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
			  		hadc1.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 800229e:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <SetBT+0x240>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
			  		hadc1.Init.ContinuousConvMode = ENABLE;
 80022a4:	4b4d      	ldr	r3, [pc, #308]	; (80023dc <SetBT+0x240>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	765a      	strb	r2, [r3, #25]
			  		hadc1.Init.DMAContinuousRequests = ENABLE;
 80022aa:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <SetBT+0x240>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc1);
 80022b2:	484a      	ldr	r0, [pc, #296]	; (80023dc <SetBT+0x240>)
 80022b4:	f003 f80a 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022b8:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <SetBT+0x244>)
 80022ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022be:	605a      	str	r2, [r3, #4]
		  	  		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c0:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <SetBT+0x244>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc2.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <SetBT+0x244>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc2.Init.ContinuousConvMode = ENABLE;
 80022cc:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <SetBT+0x244>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	765a      	strb	r2, [r3, #25]
		  	  		hadc2.Init.DMAContinuousRequests = ENABLE;
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <SetBT+0x244>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc2);
 80022da:	4841      	ldr	r0, [pc, #260]	; (80023e0 <SetBT+0x244>)
 80022dc:	f002 fff6 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <SetBT+0x248>)
 80022e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022e6:	605a      	str	r2, [r3, #4]
		  	  		hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022e8:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <SetBT+0x248>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc3.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <SetBT+0x248>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc3.Init.ContinuousConvMode = ENABLE;
 80022f4:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <SetBT+0x248>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	765a      	strb	r2, [r3, #25]
		  	  		hadc3.Init.DMAContinuousRequests = ENABLE;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <SetBT+0x248>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc3);
 8002302:	4838      	ldr	r0, [pc, #224]	; (80023e4 <SetBT+0x248>)
 8002304:	f002 ffe2 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <SetBT+0x24c>)
 800230a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230e:	605a      	str	r2, [r3, #4]
		  	  		hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <SetBT+0x24c>)
 8002312:	2200      	movs	r2, #0
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc4.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <SetBT+0x24c>)
 8002318:	2201      	movs	r2, #1
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc4.Init.ContinuousConvMode = ENABLE;
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <SetBT+0x24c>)
 800231e:	2201      	movs	r2, #1
 8002320:	765a      	strb	r2, [r3, #25]
		  	  		hadc4.Init.DMAContinuousRequests = ENABLE;
 8002322:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <SetBT+0x24c>)
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc4);
 800232a:	482f      	ldr	r0, [pc, #188]	; (80023e8 <SetBT+0x24c>)
 800232c:	f002 ffce 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002330:	f000 bdb1 	b.w	8002e96 <SetBT+0xcfa>

		  	  		case 2://20us
			  		hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <SetBT+0x240>)
 8002336:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800233a:	605a      	str	r2, [r3, #4]
			  		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <SetBT+0x240>)
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
			  		hadc1.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <SetBT+0x240>)
 8002344:	2201      	movs	r2, #1
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
			  		hadc1.Init.ContinuousConvMode = ENABLE;
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <SetBT+0x240>)
 800234a:	2201      	movs	r2, #1
 800234c:	765a      	strb	r2, [r3, #25]
			  		hadc1.Init.DMAContinuousRequests = ENABLE;
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <SetBT+0x240>)
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc1);
 8002356:	4821      	ldr	r0, [pc, #132]	; (80023dc <SetBT+0x240>)
 8002358:	f002 ffb8 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <SetBT+0x244>)
 800235e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002362:	605a      	str	r2, [r3, #4]
		  	  		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <SetBT+0x244>)
 8002366:	2200      	movs	r2, #0
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc2.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <SetBT+0x244>)
 800236c:	2201      	movs	r2, #1
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc2.Init.ContinuousConvMode = ENABLE;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <SetBT+0x244>)
 8002372:	2201      	movs	r2, #1
 8002374:	765a      	strb	r2, [r3, #25]
		  	  		hadc2.Init.DMAContinuousRequests = ENABLE;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <SetBT+0x244>)
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc2);
 800237e:	4818      	ldr	r0, [pc, #96]	; (80023e0 <SetBT+0x244>)
 8002380:	f002 ffa4 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <SetBT+0x248>)
 8002386:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800238a:	605a      	str	r2, [r3, #4]
		  	  		hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <SetBT+0x248>)
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc3.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <SetBT+0x248>)
 8002394:	2201      	movs	r2, #1
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc3.Init.ContinuousConvMode = ENABLE;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <SetBT+0x248>)
 800239a:	2201      	movs	r2, #1
 800239c:	765a      	strb	r2, [r3, #25]
		  	  		hadc3.Init.DMAContinuousRequests = ENABLE;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <SetBT+0x248>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc3);
 80023a6:	480f      	ldr	r0, [pc, #60]	; (80023e4 <SetBT+0x248>)
 80023a8:	f002 ff90 	bl	80052cc <HAL_ADC_Init>
		  	  		hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <SetBT+0x24c>)
 80023ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023b2:	605a      	str	r2, [r3, #4]
		  	  		hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <SetBT+0x24c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc4.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <SetBT+0x24c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc4.Init.ContinuousConvMode = ENABLE;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <SetBT+0x24c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	765a      	strb	r2, [r3, #25]
		  	  		hadc4.Init.DMAContinuousRequests = ENABLE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <SetBT+0x24c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc4);
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <SetBT+0x24c>)
 80023d0:	f002 ff7c 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 80023d4:	f000 bd5f 	b.w	8002e96 <SetBT+0xcfa>
 80023d8:	2000890c 	.word	0x2000890c
 80023dc:	20008918 	.word	0x20008918
 80023e0:	20008968 	.word	0x20008968
 80023e4:	200089b8 	.word	0x200089b8
 80023e8:	20008a08 	.word	0x20008a08

		  	  	    case 3://50us
	    	  	   	htim3.Instance = TIM3;
 80023ec:	4ba6      	ldr	r3, [pc, #664]	; (8002688 <SetBT+0x4ec>)
 80023ee:	4aa7      	ldr	r2, [pc, #668]	; (800268c <SetBT+0x4f0>)
 80023f0:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 0;
 80023f2:	4ba5      	ldr	r3, [pc, #660]	; (8002688 <SetBT+0x4ec>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f8:	4ba3      	ldr	r3, [pc, #652]	; (8002688 <SetBT+0x4ec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 72-1;
 80023fe:	4ba2      	ldr	r3, [pc, #648]	; (8002688 <SetBT+0x4ec>)
 8002400:	2247      	movs	r2, #71	; 0x47
 8002402:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	4ba0      	ldr	r3, [pc, #640]	; (8002688 <SetBT+0x4ec>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800240a:	4b9f      	ldr	r3, [pc, #636]	; (8002688 <SetBT+0x4ec>)
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002410:	489d      	ldr	r0, [pc, #628]	; (8002688 <SetBT+0x4ec>)
 8002412:	f008 fe4d 	bl	800b0b0 <HAL_TIM_Base_Init>
		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002416:	4b9e      	ldr	r3, [pc, #632]	; (8002690 <SetBT+0x4f4>)
 8002418:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800241c:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800241e:	4b9c      	ldr	r3, [pc, #624]	; (8002690 <SetBT+0x4f4>)
 8002420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002426:	4b9a      	ldr	r3, [pc, #616]	; (8002690 <SetBT+0x4f4>)
 8002428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 800242e:	4b98      	ldr	r3, [pc, #608]	; (8002690 <SetBT+0x4f4>)
 8002430:	2200      	movs	r2, #0
 8002432:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <SetBT+0x4f4>)
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 800243c:	4894      	ldr	r0, [pc, #592]	; (8002690 <SetBT+0x4f4>)
 800243e:	f002 ff45 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002442:	4b94      	ldr	r3, [pc, #592]	; (8002694 <SetBT+0x4f8>)
 8002444:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002448:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800244a:	4b92      	ldr	r3, [pc, #584]	; (8002694 <SetBT+0x4f8>)
 800244c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002452:	4b90      	ldr	r3, [pc, #576]	; (8002694 <SetBT+0x4f8>)
 8002454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 800245a:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <SetBT+0x4f8>)
 800245c:	2200      	movs	r2, #0
 800245e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <SetBT+0x4f8>)
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002468:	488a      	ldr	r0, [pc, #552]	; (8002694 <SetBT+0x4f8>)
 800246a:	f002 ff2f 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <SetBT+0x4fc>)
 8002470:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002474:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <SetBT+0x4fc>)
 8002478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800247e:	4b86      	ldr	r3, [pc, #536]	; (8002698 <SetBT+0x4fc>)
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002486:	4b84      	ldr	r3, [pc, #528]	; (8002698 <SetBT+0x4fc>)
 8002488:	2200      	movs	r2, #0
 800248a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 800248c:	4b82      	ldr	r3, [pc, #520]	; (8002698 <SetBT+0x4fc>)
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002494:	4880      	ldr	r0, [pc, #512]	; (8002698 <SetBT+0x4fc>)
 8002496:	f002 ff19 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800249a:	4b80      	ldr	r3, [pc, #512]	; (800269c <SetBT+0x500>)
 800249c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024a0:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80024a2:	4b7e      	ldr	r3, [pc, #504]	; (800269c <SetBT+0x500>)
 80024a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80024aa:	4b7c      	ldr	r3, [pc, #496]	; (800269c <SetBT+0x500>)
 80024ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 80024b2:	4b7a      	ldr	r3, [pc, #488]	; (800269c <SetBT+0x500>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <SetBT+0x500>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 80024c0:	4876      	ldr	r0, [pc, #472]	; (800269c <SetBT+0x500>)
 80024c2:	f002 ff03 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 80024c6:	f000 bce6 	b.w	8002e96 <SetBT+0xcfa>

		  	  	    case 4://100us
	    	  	   	htim3.Instance = TIM3;
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <SetBT+0x4ec>)
 80024cc:	4a6f      	ldr	r2, [pc, #444]	; (800268c <SetBT+0x4f0>)
 80024ce:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 0;
 80024d0:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <SetBT+0x4ec>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <SetBT+0x4ec>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 144-1;
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <SetBT+0x4ec>)
 80024de:	228f      	movs	r2, #143	; 0x8f
 80024e0:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b69      	ldr	r3, [pc, #420]	; (8002688 <SetBT+0x4ec>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024e8:	4b67      	ldr	r3, [pc, #412]	; (8002688 <SetBT+0x4ec>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80024ee:	4866      	ldr	r0, [pc, #408]	; (8002688 <SetBT+0x4ec>)
 80024f0:	f008 fdde 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80024f4:	4b66      	ldr	r3, [pc, #408]	; (8002690 <SetBT+0x4f4>)
 80024f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024fa:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <SetBT+0x4f4>)
 80024fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <SetBT+0x4f4>)
 8002506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 800250c:	4b60      	ldr	r3, [pc, #384]	; (8002690 <SetBT+0x4f4>)
 800250e:	2200      	movs	r2, #0
 8002510:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <SetBT+0x4f4>)
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 800251a:	485d      	ldr	r0, [pc, #372]	; (8002690 <SetBT+0x4f4>)
 800251c:	f002 fed6 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <SetBT+0x4f8>)
 8002522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002526:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002528:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <SetBT+0x4f8>)
 800252a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <SetBT+0x4f8>)
 8002532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <SetBT+0x4f8>)
 800253a:	2200      	movs	r2, #0
 800253c:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 800253e:	4b55      	ldr	r3, [pc, #340]	; (8002694 <SetBT+0x4f8>)
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002546:	4853      	ldr	r0, [pc, #332]	; (8002694 <SetBT+0x4f8>)
 8002548:	f002 fec0 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800254c:	4b52      	ldr	r3, [pc, #328]	; (8002698 <SetBT+0x4fc>)
 800254e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002552:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <SetBT+0x4fc>)
 8002556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800255c:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <SetBT+0x4fc>)
 800255e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002564:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <SetBT+0x4fc>)
 8002566:	2200      	movs	r2, #0
 8002568:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests =ENABLE;
 800256a:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <SetBT+0x4fc>)
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002572:	4849      	ldr	r0, [pc, #292]	; (8002698 <SetBT+0x4fc>)
 8002574:	f002 feaa 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002578:	4b48      	ldr	r3, [pc, #288]	; (800269c <SetBT+0x500>)
 800257a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800257e:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <SetBT+0x500>)
 8002582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002588:	4b44      	ldr	r3, [pc, #272]	; (800269c <SetBT+0x500>)
 800258a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <SetBT+0x500>)
 8002592:	2200      	movs	r2, #0
 8002594:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <SetBT+0x500>)
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 800259e:	483f      	ldr	r0, [pc, #252]	; (800269c <SetBT+0x500>)
 80025a0:	f002 fe94 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 80025a4:	f000 bc77 	b.w	8002e96 <SetBT+0xcfa>

		  	  	    case 5://200us
	    	  	   	htim3.Instance = TIM3;
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <SetBT+0x4ec>)
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <SetBT+0x4f0>)
 80025ac:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 0;
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <SetBT+0x4ec>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <SetBT+0x4ec>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 288-1;
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <SetBT+0x4ec>)
 80025bc:	f240 121f 	movw	r2, #287	; 0x11f
 80025c0:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <SetBT+0x4ec>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <SetBT+0x4ec>)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80025ce:	482e      	ldr	r0, [pc, #184]	; (8002688 <SetBT+0x4ec>)
 80025d0:	f008 fd6e 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <SetBT+0x4f4>)
 80025d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025da:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <SetBT+0x4f4>)
 80025de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <SetBT+0x4f4>)
 80025e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <SetBT+0x4f4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests =ENABLE;
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <SetBT+0x4f4>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80025fa:	4825      	ldr	r0, [pc, #148]	; (8002690 <SetBT+0x4f4>)
 80025fc:	f002 fe66 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <SetBT+0x4f8>)
 8002602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002606:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <SetBT+0x4f8>)
 800260a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <SetBT+0x4f8>)
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <SetBT+0x4f8>)
 800261a:	2200      	movs	r2, #0
 800261c:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <SetBT+0x4f8>)
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002626:	481b      	ldr	r0, [pc, #108]	; (8002694 <SetBT+0x4f8>)
 8002628:	f002 fe50 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <SetBT+0x4fc>)
 800262e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002632:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <SetBT+0x4fc>)
 8002636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <SetBT+0x4fc>)
 800263e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <SetBT+0x4fc>)
 8002646:	2200      	movs	r2, #0
 8002648:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <SetBT+0x4fc>)
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002652:	4811      	ldr	r0, [pc, #68]	; (8002698 <SetBT+0x4fc>)
 8002654:	f002 fe3a 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <SetBT+0x500>)
 800265a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800265e:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <SetBT+0x500>)
 8002662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <SetBT+0x500>)
 800266a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <SetBT+0x500>)
 8002672:	2200      	movs	r2, #0
 8002674:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests =ENABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <SetBT+0x500>)
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <SetBT+0x500>)
 8002680:	f002 fe24 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002684:	f000 bc07 	b.w	8002e96 <SetBT+0xcfa>
 8002688:	20008d9c 	.word	0x20008d9c
 800268c:	40000400 	.word	0x40000400
 8002690:	20008918 	.word	0x20008918
 8002694:	20008968 	.word	0x20008968
 8002698:	200089b8 	.word	0x200089b8
 800269c:	20008a08 	.word	0x20008a08

		  	  	    case 6://.5ms
	    	  	   	htim3.Instance = TIM3;
 80026a0:	4ba4      	ldr	r3, [pc, #656]	; (8002934 <SetBT+0x798>)
 80026a2:	4aa5      	ldr	r2, [pc, #660]	; (8002938 <SetBT+0x79c>)
 80026a4:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 80026a6:	4ba3      	ldr	r3, [pc, #652]	; (8002934 <SetBT+0x798>)
 80026a8:	2247      	movs	r2, #71	; 0x47
 80026aa:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ac:	4ba1      	ldr	r3, [pc, #644]	; (8002934 <SetBT+0x798>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 10-1;
 80026b2:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <SetBT+0x798>)
 80026b4:	2209      	movs	r2, #9
 80026b6:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b8:	4b9e      	ldr	r3, [pc, #632]	; (8002934 <SetBT+0x798>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026be:	4b9d      	ldr	r3, [pc, #628]	; (8002934 <SetBT+0x798>)
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80026c4:	489b      	ldr	r0, [pc, #620]	; (8002934 <SetBT+0x798>)
 80026c6:	f008 fcf3 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80026ca:	4b9c      	ldr	r3, [pc, #624]	; (800293c <SetBT+0x7a0>)
 80026cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026d0:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026d2:	4b9a      	ldr	r3, [pc, #616]	; (800293c <SetBT+0x7a0>)
 80026d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80026da:	4b98      	ldr	r3, [pc, #608]	; (800293c <SetBT+0x7a0>)
 80026dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 80026e2:	4b96      	ldr	r3, [pc, #600]	; (800293c <SetBT+0x7a0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 80026e8:	4b94      	ldr	r3, [pc, #592]	; (800293c <SetBT+0x7a0>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80026f0:	4892      	ldr	r0, [pc, #584]	; (800293c <SetBT+0x7a0>)
 80026f2:	f002 fdeb 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80026f6:	4b92      	ldr	r3, [pc, #584]	; (8002940 <SetBT+0x7a4>)
 80026f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026fc:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026fe:	4b90      	ldr	r3, [pc, #576]	; (8002940 <SetBT+0x7a4>)
 8002700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002706:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <SetBT+0x7a4>)
 8002708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 800270e:	4b8c      	ldr	r3, [pc, #560]	; (8002940 <SetBT+0x7a4>)
 8002710:	2200      	movs	r2, #0
 8002712:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002714:	4b8a      	ldr	r3, [pc, #552]	; (8002940 <SetBT+0x7a4>)
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 800271c:	4888      	ldr	r0, [pc, #544]	; (8002940 <SetBT+0x7a4>)
 800271e:	f002 fdd5 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002722:	4b88      	ldr	r3, [pc, #544]	; (8002944 <SetBT+0x7a8>)
 8002724:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002728:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800272a:	4b86      	ldr	r3, [pc, #536]	; (8002944 <SetBT+0x7a8>)
 800272c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002732:	4b84      	ldr	r3, [pc, #528]	; (8002944 <SetBT+0x7a8>)
 8002734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <SetBT+0x7a8>)
 800273c:	2200      	movs	r2, #0
 800273e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002740:	4b80      	ldr	r3, [pc, #512]	; (8002944 <SetBT+0x7a8>)
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002748:	487e      	ldr	r0, [pc, #504]	; (8002944 <SetBT+0x7a8>)
 800274a:	f002 fdbf 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800274e:	4b7e      	ldr	r3, [pc, #504]	; (8002948 <SetBT+0x7ac>)
 8002750:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002754:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002756:	4b7c      	ldr	r3, [pc, #496]	; (8002948 <SetBT+0x7ac>)
 8002758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800275e:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <SetBT+0x7ac>)
 8002760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002766:	4b78      	ldr	r3, [pc, #480]	; (8002948 <SetBT+0x7ac>)
 8002768:	2200      	movs	r2, #0
 800276a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 800276c:	4b76      	ldr	r3, [pc, #472]	; (8002948 <SetBT+0x7ac>)
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002774:	4874      	ldr	r0, [pc, #464]	; (8002948 <SetBT+0x7ac>)
 8002776:	f002 fda9 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 800277a:	e38c      	b.n	8002e96 <SetBT+0xcfa>

		  	  	    case 7://1ms
	    	  	   	htim3.Instance = TIM3;
 800277c:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <SetBT+0x798>)
 800277e:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <SetBT+0x79c>)
 8002780:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002782:	4b6c      	ldr	r3, [pc, #432]	; (8002934 <SetBT+0x798>)
 8002784:	2247      	movs	r2, #71	; 0x47
 8002786:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <SetBT+0x798>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 20-1;
 800278e:	4b69      	ldr	r3, [pc, #420]	; (8002934 <SetBT+0x798>)
 8002790:	2213      	movs	r2, #19
 8002792:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b67      	ldr	r3, [pc, #412]	; (8002934 <SetBT+0x798>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800279a:	4b66      	ldr	r3, [pc, #408]	; (8002934 <SetBT+0x798>)
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80027a0:	4864      	ldr	r0, [pc, #400]	; (8002934 <SetBT+0x798>)
 80027a2:	f008 fc85 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <SetBT+0x7a0>)
 80027a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027ac:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <SetBT+0x7a0>)
 80027b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <SetBT+0x7a0>)
 80027b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <SetBT+0x7a0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 80027c4:	4b5d      	ldr	r3, [pc, #372]	; (800293c <SetBT+0x7a0>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80027cc:	485b      	ldr	r0, [pc, #364]	; (800293c <SetBT+0x7a0>)
 80027ce:	f002 fd7d 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <SetBT+0x7a4>)
 80027d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027d8:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027da:	4b59      	ldr	r3, [pc, #356]	; (8002940 <SetBT+0x7a4>)
 80027dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e0:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <SetBT+0x7a4>)
 80027e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80027ea:	4b55      	ldr	r3, [pc, #340]	; (8002940 <SetBT+0x7a4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <SetBT+0x7a4>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80027f8:	4851      	ldr	r0, [pc, #324]	; (8002940 <SetBT+0x7a4>)
 80027fa:	f002 fd67 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027fe:	4b51      	ldr	r3, [pc, #324]	; (8002944 <SetBT+0x7a8>)
 8002800:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002804:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <SetBT+0x7a8>)
 8002808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <SetBT+0x7a8>)
 8002810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <SetBT+0x7a8>)
 8002818:	2200      	movs	r2, #0
 800281a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 800281c:	4b49      	ldr	r3, [pc, #292]	; (8002944 <SetBT+0x7a8>)
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002824:	4847      	ldr	r0, [pc, #284]	; (8002944 <SetBT+0x7a8>)
 8002826:	f002 fd51 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <SetBT+0x7ac>)
 800282c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002830:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002832:	4b45      	ldr	r3, [pc, #276]	; (8002948 <SetBT+0x7ac>)
 8002834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <SetBT+0x7ac>)
 800283c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <SetBT+0x7ac>)
 8002844:	2200      	movs	r2, #0
 8002846:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <SetBT+0x7ac>)
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002850:	483d      	ldr	r0, [pc, #244]	; (8002948 <SetBT+0x7ac>)
 8002852:	f002 fd3b 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002856:	e31e      	b.n	8002e96 <SetBT+0xcfa>

		  	  	    case 8://2ms
	    	  	   	htim3.Instance = TIM3;
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <SetBT+0x798>)
 800285a:	4a37      	ldr	r2, [pc, #220]	; (8002938 <SetBT+0x79c>)
 800285c:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <SetBT+0x798>)
 8002860:	2247      	movs	r2, #71	; 0x47
 8002862:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b33      	ldr	r3, [pc, #204]	; (8002934 <SetBT+0x798>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 40-1;
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <SetBT+0x798>)
 800286c:	2227      	movs	r2, #39	; 0x27
 800286e:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <SetBT+0x798>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <SetBT+0x798>)
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 800287c:	482d      	ldr	r0, [pc, #180]	; (8002934 <SetBT+0x798>)
 800287e:	f008 fc17 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <SetBT+0x7a0>)
 8002884:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002888:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <SetBT+0x7a0>)
 800288c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <SetBT+0x7a0>)
 8002894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <SetBT+0x7a0>)
 800289c:	2200      	movs	r2, #0
 800289e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 80028a0:	4b26      	ldr	r3, [pc, #152]	; (800293c <SetBT+0x7a0>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80028a8:	4824      	ldr	r0, [pc, #144]	; (800293c <SetBT+0x7a0>)
 80028aa:	f002 fd0f 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <SetBT+0x7a4>)
 80028b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028b4:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <SetBT+0x7a4>)
 80028b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <SetBT+0x7a4>)
 80028c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <SetBT+0x7a4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <SetBT+0x7a4>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80028d4:	481a      	ldr	r0, [pc, #104]	; (8002940 <SetBT+0x7a4>)
 80028d6:	f002 fcf9 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <SetBT+0x7a8>)
 80028dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e0:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <SetBT+0x7a8>)
 80028e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <SetBT+0x7a8>)
 80028ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <SetBT+0x7a8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <SetBT+0x7a8>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002900:	4810      	ldr	r0, [pc, #64]	; (8002944 <SetBT+0x7a8>)
 8002902:	f002 fce3 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <SetBT+0x7ac>)
 8002908:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800290c:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <SetBT+0x7ac>)
 8002910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <SetBT+0x7ac>)
 8002918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <SetBT+0x7ac>)
 8002920:	2200      	movs	r2, #0
 8002922:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <SetBT+0x7ac>)
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <SetBT+0x7ac>)
 800292e:	f002 fccd 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002932:	e2b0      	b.n	8002e96 <SetBT+0xcfa>
 8002934:	20008d9c 	.word	0x20008d9c
 8002938:	40000400 	.word	0x40000400
 800293c:	20008918 	.word	0x20008918
 8002940:	20008968 	.word	0x20008968
 8002944:	200089b8 	.word	0x200089b8
 8002948:	20008a08 	.word	0x20008a08

		  	  	    case 9://5ms
	    	  	   	htim3.Instance = TIM3;
 800294c:	4ba5      	ldr	r3, [pc, #660]	; (8002be4 <SetBT+0xa48>)
 800294e:	4aa6      	ldr	r2, [pc, #664]	; (8002be8 <SetBT+0xa4c>)
 8002950:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002952:	4ba4      	ldr	r3, [pc, #656]	; (8002be4 <SetBT+0xa48>)
 8002954:	2247      	movs	r2, #71	; 0x47
 8002956:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4ba2      	ldr	r3, [pc, #648]	; (8002be4 <SetBT+0xa48>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 100-1;
 800295e:	4ba1      	ldr	r3, [pc, #644]	; (8002be4 <SetBT+0xa48>)
 8002960:	2263      	movs	r2, #99	; 0x63
 8002962:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002964:	4b9f      	ldr	r3, [pc, #636]	; (8002be4 <SetBT+0xa48>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800296a:	4b9e      	ldr	r3, [pc, #632]	; (8002be4 <SetBT+0xa48>)
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002970:	489c      	ldr	r0, [pc, #624]	; (8002be4 <SetBT+0xa48>)
 8002972:	f008 fb9d 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002976:	4b9d      	ldr	r3, [pc, #628]	; (8002bec <SetBT+0xa50>)
 8002978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800297c:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800297e:	4b9b      	ldr	r3, [pc, #620]	; (8002bec <SetBT+0xa50>)
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002986:	4b99      	ldr	r3, [pc, #612]	; (8002bec <SetBT+0xa50>)
 8002988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 800298e:	4b97      	ldr	r3, [pc, #604]	; (8002bec <SetBT+0xa50>)
 8002990:	2200      	movs	r2, #0
 8002992:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002994:	4b95      	ldr	r3, [pc, #596]	; (8002bec <SetBT+0xa50>)
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 800299c:	4893      	ldr	r0, [pc, #588]	; (8002bec <SetBT+0xa50>)
 800299e:	f002 fc95 	bl	80052cc <HAL_ADC_Init>

		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80029a2:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <SetBT+0xa54>)
 80029a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029a8:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029aa:	4b91      	ldr	r3, [pc, #580]	; (8002bf0 <SetBT+0xa54>)
 80029ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80029b2:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <SetBT+0xa54>)
 80029b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80029ba:	4b8d      	ldr	r3, [pc, #564]	; (8002bf0 <SetBT+0xa54>)
 80029bc:	2200      	movs	r2, #0
 80029be:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80029c0:	4b8b      	ldr	r3, [pc, #556]	; (8002bf0 <SetBT+0xa54>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80029c8:	4889      	ldr	r0, [pc, #548]	; (8002bf0 <SetBT+0xa54>)
 80029ca:	f002 fc7f 	bl	80052cc <HAL_ADC_Init>

		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <SetBT+0xa58>)
 80029d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029d4:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029d6:	4b87      	ldr	r3, [pc, #540]	; (8002bf4 <SetBT+0xa58>)
 80029d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80029de:	4b85      	ldr	r3, [pc, #532]	; (8002bf4 <SetBT+0xa58>)
 80029e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80029e6:	4b83      	ldr	r3, [pc, #524]	; (8002bf4 <SetBT+0xa58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <SetBT+0xa58>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 80029f4:	487f      	ldr	r0, [pc, #508]	; (8002bf4 <SetBT+0xa58>)
 80029f6:	f002 fc69 	bl	80052cc <HAL_ADC_Init>

		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80029fa:	4b7f      	ldr	r3, [pc, #508]	; (8002bf8 <SetBT+0xa5c>)
 80029fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a00:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a02:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <SetBT+0xa5c>)
 8002a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <SetBT+0xa5c>)
 8002a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002a12:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <SetBT+0xa5c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002a18:	4b77      	ldr	r3, [pc, #476]	; (8002bf8 <SetBT+0xa5c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002a20:	4875      	ldr	r0, [pc, #468]	; (8002bf8 <SetBT+0xa5c>)
 8002a22:	f002 fc53 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002a26:	e236      	b.n	8002e96 <SetBT+0xcfa>

		  	  	    case 10://10ms
	    	  	   	htim3.Instance = TIM3;
 8002a28:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <SetBT+0xa48>)
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <SetBT+0xa4c>)
 8002a2c:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <SetBT+0xa48>)
 8002a30:	2247      	movs	r2, #71	; 0x47
 8002a32:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <SetBT+0xa48>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 200-1;
 8002a3a:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <SetBT+0xa48>)
 8002a3c:	22c7      	movs	r2, #199	; 0xc7
 8002a3e:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <SetBT+0xa48>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a46:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <SetBT+0xa48>)
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002a4c:	4865      	ldr	r0, [pc, #404]	; (8002be4 <SetBT+0xa48>)
 8002a4e:	f008 fb2f 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a52:	4b66      	ldr	r3, [pc, #408]	; (8002bec <SetBT+0xa50>)
 8002a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a58:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a5a:	4b64      	ldr	r3, [pc, #400]	; (8002bec <SetBT+0xa50>)
 8002a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a62:	4b62      	ldr	r3, [pc, #392]	; (8002bec <SetBT+0xa50>)
 8002a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002a6a:	4b60      	ldr	r3, [pc, #384]	; (8002bec <SetBT+0xa50>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a70:	4b5e      	ldr	r3, [pc, #376]	; (8002bec <SetBT+0xa50>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002a78:	485c      	ldr	r0, [pc, #368]	; (8002bec <SetBT+0xa50>)
 8002a7a:	f002 fc27 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <SetBT+0xa54>)
 8002a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a84:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <SetBT+0xa54>)
 8002a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a8e:	4b58      	ldr	r3, [pc, #352]	; (8002bf0 <SetBT+0xa54>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002a96:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <SetBT+0xa54>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a9c:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <SetBT+0xa54>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002aa4:	4852      	ldr	r0, [pc, #328]	; (8002bf0 <SetBT+0xa54>)
 8002aa6:	f002 fc11 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002aaa:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <SetBT+0xa58>)
 8002aac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ab0:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <SetBT+0xa58>)
 8002ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002aba:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <SetBT+0xa58>)
 8002abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <SetBT+0xa58>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <SetBT+0xa58>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002ad0:	4848      	ldr	r0, [pc, #288]	; (8002bf4 <SetBT+0xa58>)
 8002ad2:	f002 fbfb 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <SetBT+0xa5c>)
 8002ad8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002adc:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002ade:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <SetBT+0xa5c>)
 8002ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002ae6:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <SetBT+0xa5c>)
 8002ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002aee:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <SetBT+0xa5c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <SetBT+0xa5c>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002afc:	483e      	ldr	r0, [pc, #248]	; (8002bf8 <SetBT+0xa5c>)
 8002afe:	f002 fbe5 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002b02:	e1c8      	b.n	8002e96 <SetBT+0xcfa>

		  	  	    case 11://20ms
	    	  	   	htim3.Instance = TIM3;
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <SetBT+0xa48>)
 8002b06:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <SetBT+0xa4c>)
 8002b08:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <SetBT+0xa48>)
 8002b0c:	2247      	movs	r2, #71	; 0x47
 8002b0e:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <SetBT+0xa48>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 400-1;
 8002b16:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <SetBT+0xa48>)
 8002b18:	f240 128f 	movw	r2, #399	; 0x18f
 8002b1c:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <SetBT+0xa48>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <SetBT+0xa48>)
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002b2a:	482e      	ldr	r0, [pc, #184]	; (8002be4 <SetBT+0xa48>)
 8002b2c:	f008 fac0 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002b30:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <SetBT+0xa50>)
 8002b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b36:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <SetBT+0xa50>)
 8002b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <SetBT+0xa50>)
 8002b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <SetBT+0xa50>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <SetBT+0xa50>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002b56:	4825      	ldr	r0, [pc, #148]	; (8002bec <SetBT+0xa50>)
 8002b58:	f002 fbb8 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <SetBT+0xa54>)
 8002b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b62:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <SetBT+0xa54>)
 8002b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002b6c:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <SetBT+0xa54>)
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <SetBT+0xa54>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <SetBT+0xa54>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002b82:	481b      	ldr	r0, [pc, #108]	; (8002bf0 <SetBT+0xa54>)
 8002b84:	f002 fba2 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <SetBT+0xa58>)
 8002b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b8e:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <SetBT+0xa58>)
 8002b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <SetBT+0xa58>)
 8002b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <SetBT+0xa58>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <SetBT+0xa58>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002bae:	4811      	ldr	r0, [pc, #68]	; (8002bf4 <SetBT+0xa58>)
 8002bb0:	f002 fb8c 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <SetBT+0xa5c>)
 8002bb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bba:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <SetBT+0xa5c>)
 8002bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <SetBT+0xa5c>)
 8002bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <SetBT+0xa5c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <SetBT+0xa5c>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002bda:	4807      	ldr	r0, [pc, #28]	; (8002bf8 <SetBT+0xa5c>)
 8002bdc:	f002 fb76 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002be0:	e159      	b.n	8002e96 <SetBT+0xcfa>
 8002be2:	bf00      	nop
 8002be4:	20008d9c 	.word	0x20008d9c
 8002be8:	40000400 	.word	0x40000400
 8002bec:	20008918 	.word	0x20008918
 8002bf0:	20008968 	.word	0x20008968
 8002bf4:	200089b8 	.word	0x200089b8
 8002bf8:	20008a08 	.word	0x20008a08

		  	  	    case 12://50ms
	    	  	   	htim3.Instance = TIM3;
 8002bfc:	4ba7      	ldr	r3, [pc, #668]	; (8002e9c <SetBT+0xd00>)
 8002bfe:	4aa8      	ldr	r2, [pc, #672]	; (8002ea0 <SetBT+0xd04>)
 8002c00:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002c02:	4ba6      	ldr	r3, [pc, #664]	; (8002e9c <SetBT+0xd00>)
 8002c04:	2247      	movs	r2, #71	; 0x47
 8002c06:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4ba4      	ldr	r3, [pc, #656]	; (8002e9c <SetBT+0xd00>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 1000-1;
 8002c0e:	4ba3      	ldr	r3, [pc, #652]	; (8002e9c <SetBT+0xd00>)
 8002c10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c14:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c16:	4ba1      	ldr	r3, [pc, #644]	; (8002e9c <SetBT+0xd00>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c1c:	4b9f      	ldr	r3, [pc, #636]	; (8002e9c <SetBT+0xd00>)
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002c22:	489e      	ldr	r0, [pc, #632]	; (8002e9c <SetBT+0xd00>)
 8002c24:	f008 fa44 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <SetBT+0xd08>)
 8002c2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c2e:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c30:	4b9c      	ldr	r3, [pc, #624]	; (8002ea4 <SetBT+0xd08>)
 8002c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002c38:	4b9a      	ldr	r3, [pc, #616]	; (8002ea4 <SetBT+0xd08>)
 8002c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002c40:	4b98      	ldr	r3, [pc, #608]	; (8002ea4 <SetBT+0xd08>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c46:	4b97      	ldr	r3, [pc, #604]	; (8002ea4 <SetBT+0xd08>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002c4e:	4895      	ldr	r0, [pc, #596]	; (8002ea4 <SetBT+0xd08>)
 8002c50:	f002 fb3c 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002c54:	4b94      	ldr	r3, [pc, #592]	; (8002ea8 <SetBT+0xd0c>)
 8002c56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c5a:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c5c:	4b92      	ldr	r3, [pc, #584]	; (8002ea8 <SetBT+0xd0c>)
 8002c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002c64:	4b90      	ldr	r3, [pc, #576]	; (8002ea8 <SetBT+0xd0c>)
 8002c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002c6c:	4b8e      	ldr	r3, [pc, #568]	; (8002ea8 <SetBT+0xd0c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002c72:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <SetBT+0xd0c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002c7a:	488b      	ldr	r0, [pc, #556]	; (8002ea8 <SetBT+0xd0c>)
 8002c7c:	f002 fb26 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002c80:	4b8a      	ldr	r3, [pc, #552]	; (8002eac <SetBT+0xd10>)
 8002c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c86:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c88:	4b88      	ldr	r3, [pc, #544]	; (8002eac <SetBT+0xd10>)
 8002c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002c90:	4b86      	ldr	r3, [pc, #536]	; (8002eac <SetBT+0xd10>)
 8002c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002c98:	4b84      	ldr	r3, [pc, #528]	; (8002eac <SetBT+0xd10>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002c9e:	4b83      	ldr	r3, [pc, #524]	; (8002eac <SetBT+0xd10>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002ca6:	4881      	ldr	r0, [pc, #516]	; (8002eac <SetBT+0xd10>)
 8002ca8:	f002 fb10 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002cac:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <SetBT+0xd14>)
 8002cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cb2:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <SetBT+0xd14>)
 8002cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002cbc:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <SetBT+0xd14>)
 8002cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002cc4:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <SetBT+0xd14>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <SetBT+0xd14>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002cd2:	4877      	ldr	r0, [pc, #476]	; (8002eb0 <SetBT+0xd14>)
 8002cd4:	f002 fafa 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002cd8:	e0dd      	b.n	8002e96 <SetBT+0xcfa>

		  	  	    case 13://100ms
	    	  	   	htim3.Instance = TIM3;
 8002cda:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <SetBT+0xd00>)
 8002cdc:	4a70      	ldr	r2, [pc, #448]	; (8002ea0 <SetBT+0xd04>)
 8002cde:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002ce0:	4b6e      	ldr	r3, [pc, #440]	; (8002e9c <SetBT+0xd00>)
 8002ce2:	2247      	movs	r2, #71	; 0x47
 8002ce4:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <SetBT+0xd00>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 2000-1;
 8002cec:	4b6b      	ldr	r3, [pc, #428]	; (8002e9c <SetBT+0xd00>)
 8002cee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002cf2:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf4:	4b69      	ldr	r3, [pc, #420]	; (8002e9c <SetBT+0xd00>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cfa:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <SetBT+0xd00>)
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002d00:	4866      	ldr	r0, [pc, #408]	; (8002e9c <SetBT+0xd00>)
 8002d02:	f008 f9d5 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <SetBT+0xd08>)
 8002d08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d0c:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <SetBT+0xd08>)
 8002d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <SetBT+0xd08>)
 8002d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002d1e:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <SetBT+0xd08>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d24:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <SetBT+0xd08>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002d2c:	485d      	ldr	r0, [pc, #372]	; (8002ea4 <SetBT+0xd08>)
 8002d2e:	f002 facd 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <SetBT+0xd0c>)
 8002d34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d38:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <SetBT+0xd0c>)
 8002d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <SetBT+0xd0c>)
 8002d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002d4a:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <SetBT+0xd0c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002d50:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <SetBT+0xd0c>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002d58:	4853      	ldr	r0, [pc, #332]	; (8002ea8 <SetBT+0xd0c>)
 8002d5a:	f002 fab7 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <SetBT+0xd10>)
 8002d60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d64:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d66:	4b51      	ldr	r3, [pc, #324]	; (8002eac <SetBT+0xd10>)
 8002d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <SetBT+0xd10>)
 8002d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002d76:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <SetBT+0xd10>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002d7c:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <SetBT+0xd10>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002d84:	4849      	ldr	r0, [pc, #292]	; (8002eac <SetBT+0xd10>)
 8002d86:	f002 faa1 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <SetBT+0xd14>)
 8002d8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d90:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <SetBT+0xd14>)
 8002d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <SetBT+0xd14>)
 8002d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <SetBT+0xd14>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <SetBT+0xd14>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002db0:	483f      	ldr	r0, [pc, #252]	; (8002eb0 <SetBT+0xd14>)
 8002db2:	f002 fa8b 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002db6:	e06e      	b.n	8002e96 <SetBT+0xcfa>

		  	  	    case 14://200ms
	    	  	   	htim3.Instance = TIM3;
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <SetBT+0xd00>)
 8002dba:	4a39      	ldr	r2, [pc, #228]	; (8002ea0 <SetBT+0xd04>)
 8002dbc:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <SetBT+0xd00>)
 8002dc0:	2247      	movs	r2, #71	; 0x47
 8002dc2:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <SetBT+0xd00>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 4000-1;
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <SetBT+0xd00>)
 8002dcc:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002dd0:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd2:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <SetBT+0xd00>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <SetBT+0xd00>)
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002dde:	482f      	ldr	r0, [pc, #188]	; (8002e9c <SetBT+0xd00>)
 8002de0:	f008 f966 	bl	800b0b0 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002de4:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <SetBT+0xd08>)
 8002de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dea:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <SetBT+0xd08>)
 8002dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <SetBT+0xd08>)
 8002df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <SetBT+0xd08>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <SetBT+0xd08>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002e0a:	4826      	ldr	r0, [pc, #152]	; (8002ea4 <SetBT+0xd08>)
 8002e0c:	f002 fa5e 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <SetBT+0xd0c>)
 8002e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e16:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <SetBT+0xd0c>)
 8002e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <SetBT+0xd0c>)
 8002e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <SetBT+0xd0c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <SetBT+0xd0c>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002e36:	481c      	ldr	r0, [pc, #112]	; (8002ea8 <SetBT+0xd0c>)
 8002e38:	f002 fa48 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <SetBT+0xd10>)
 8002e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e42:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <SetBT+0xd10>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <SetBT+0xd10>)
 8002e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <SetBT+0xd10>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <SetBT+0xd10>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002e62:	4812      	ldr	r0, [pc, #72]	; (8002eac <SetBT+0xd10>)
 8002e64:	f002 fa32 	bl	80052cc <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <SetBT+0xd14>)
 8002e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e6e:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <SetBT+0xd14>)
 8002e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <SetBT+0xd14>)
 8002e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <SetBT+0xd14>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <SetBT+0xd14>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002e8e:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <SetBT+0xd14>)
 8002e90:	f002 fa1c 	bl	80052cc <HAL_ADC_Init>
		  	  	    break;
 8002e94:	bf00      	nop

  	}
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20008d9c 	.word	0x20008d9c
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	20008918 	.word	0x20008918
 8002ea8:	20008968 	.word	0x20008968
 8002eac:	200089b8 	.word	0x200089b8
 8002eb0:	20008a08 	.word	0x20008a08

08002eb4 <AtencionTecla>:
//*********************************************************************************************
// TOUCH
//*********************************************************************************************

void AtencionTecla()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af04      	add	r7, sp, #16
	char str[23],i;

	unsigned char l_m_Pantalla=m_Pantalla;
 8002eba:	4ba5      	ldr	r3, [pc, #660]	; (8003150 <AtencionTecla+0x29c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	75fb      	strb	r3, [r7, #23]
	unsigned int ValorPista1,ValorPista2;

	XPT2046_TouchGetCoordinates();
 8002ec0:	f016 facc 	bl	801945c <XPT2046_TouchGetCoordinates>

	if(m_Pantalla==1 || m_Pantalla==3)
 8002ec4:	4ba2      	ldr	r3, [pc, #648]	; (8003150 <AtencionTecla+0x29c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <AtencionTecla+0x20>
 8002ecc:	4ba0      	ldr	r3, [pc, #640]	; (8003150 <AtencionTecla+0x29c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d116      	bne.n	8002f02 <AtencionTecla+0x4e>
	{
		if(BOW_Activo(34,200,18) )
 8002ed4:	2212      	movs	r2, #18
 8002ed6:	21c8      	movs	r1, #200	; 0xc8
 8002ed8:	2022      	movs	r0, #34	; 0x22
 8002eda:	f016 f8ff 	bl	80190dc <BOW_Activo>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <AtencionTecla+0x4e>
		{ 
			BOW(34,200,2,18,INGRESAR);									
 8002ee4:	4b9b      	ldr	r3, [pc, #620]	; (8003154 <AtencionTecla+0x2a0>)
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2312      	movs	r3, #18
 8002eea:	2202      	movs	r2, #2
 8002eec:	21c8      	movs	r1, #200	; 0xc8
 8002eee:	2022      	movs	r0, #34	; 0x22
 8002ef0:	f014 fe56 	bl	8017ba0 <BOW>
			FondoTeclas();
 8002ef4:	f016 f85e 	bl	8018fb4 <FondoTeclas>
			m_Pantalla++;
 8002ef8:	4b95      	ldr	r3, [pc, #596]	; (8003150 <AtencionTecla+0x29c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	4a94      	ldr	r2, [pc, #592]	; (8003150 <AtencionTecla+0x29c>)
 8002f00:	6013      	str	r3, [r2, #0]
		}	 
	}
	if(m_Pantalla== MENU_PRINCIPAL+1)
 8002f02:	4b93      	ldr	r3, [pc, #588]	; (8003150 <AtencionTecla+0x29c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d101      	bne.n	8002f0e <AtencionTecla+0x5a>
	{
		MenuAtencion();
 8002f0a:	f016 fa33 	bl	8019374 <MenuAtencion>
	}
	if(m_Pantalla==CONFIGURAR+1)
 8002f0e:	4b90      	ldr	r3, [pc, #576]	; (8003150 <AtencionTecla+0x29c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f241 3289 	movw	r2, #5001	; 0x1389
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <AtencionTecla+0x6a>
	{
		MenuAtencion();
 8002f1a:	f016 fa2b 	bl	8019374 <MenuAtencion>
	}
	if(m_Pantalla==WIFI+1)
 8002f1e:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <AtencionTecla+0x29c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f241 4251 	movw	r2, #5201	; 0x1451
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <AtencionTecla+0x7a>
	{
		MenuAtencion();
 8002f2a:	f016 fa23 	bl	8019374 <MenuAtencion>
	}

	if(m_Pantalla==WIFI_SSID+1)
 8002f2e:	4b88      	ldr	r3, [pc, #544]	; (8003150 <AtencionTecla+0x29c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f241 425b 	movw	r2, #5211	; 0x145b
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d106      	bne.n	8002f48 <AtencionTecla+0x94>
	{
		f_TECLADO_ALFA_Input(fBOT,WIFI_MANDAR_SSID,WIFI);
 8002f3a:	f241 4250 	movw	r2, #5200	; 0x1450
 8002f3e:	f241 4182 	movw	r1, #5250	; 0x1482
 8002f42:	4885      	ldr	r0, [pc, #532]	; (8003158 <AtencionTecla+0x2a4>)
 8002f44:	f013 fe50 	bl	8016be8 <f_TECLADO_ALFA_Input>
	}
	if(m_Pantalla==WIFI_PASS+1 )
 8002f48:	4b81      	ldr	r3, [pc, #516]	; (8003150 <AtencionTecla+0x29c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f241 4265 	movw	r2, #5221	; 0x1465
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d106      	bne.n	8002f62 <AtencionTecla+0xae>
	{
		f_TECLADO_ALFA_Input(fBOT,WIFI_MANDAR_PASS,WIFI);
 8002f54:	f241 4250 	movw	r2, #5200	; 0x1450
 8002f58:	f241 418c 	movw	r1, #5260	; 0x148c
 8002f5c:	487e      	ldr	r0, [pc, #504]	; (8003158 <AtencionTecla+0x2a4>)
 8002f5e:	f013 fe43 	bl	8016be8 <f_TECLADO_ALFA_Input>





	if(m_Pantalla==HARDWARE_PASS+1)
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <AtencionTecla+0x29c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d105      	bne.n	8002f7a <AtencionTecla+0xc6>
	{
		f_TECLADO_ALFA_Input(fBOT,HARDWARE_VERIF_PASS,MENU_PRINCIPAL);
 8002f6e:	2204      	movs	r2, #4
 8002f70:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002f74:	4878      	ldr	r0, [pc, #480]	; (8003158 <AtencionTecla+0x2a4>)
 8002f76:	f013 fe37 	bl	8016be8 <f_TECLADO_ALFA_Input>
	}
	if(m_Pantalla==HARDWARE+1)
 8002f7a:	4b75      	ldr	r3, [pc, #468]	; (8003150 <AtencionTecla+0x29c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f241 32ed 	movw	r2, #5101	; 0x13ed
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <AtencionTecla+0xd6>
	{
		MenuAtencion();
 8002f86:	f016 f9f5 	bl	8019374 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_PRESET_INVERTER+1)
 8002f8a:	4b71      	ldr	r3, [pc, #452]	; (8003150 <AtencionTecla+0x29c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f241 4229 	movw	r2, #5161	; 0x1429
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <AtencionTecla+0xe6>
	{
		MenuAtencion();
 8002f96:	f016 f9ed 	bl	8019374 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_PRESET_MPPT+1)
 8002f9a:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <AtencionTecla+0x29c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f241 4233 	movw	r2, #5171	; 0x1433
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <AtencionTecla+0xf6>
	{
		MenuAtencion();
 8002fa6:	f016 f9e5 	bl	8019374 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_PRESET_DAB+1)
 8002faa:	4b69      	ldr	r3, [pc, #420]	; (8003150 <AtencionTecla+0x29c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f241 423d 	movw	r2, #5181	; 0x143d
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <AtencionTecla+0x106>
	{
		MenuAtencion();
 8002fb6:	f016 f9dd 	bl	8019374 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_SET_SISTEMA+1)
 8002fba:	4b65      	ldr	r3, [pc, #404]	; (8003150 <AtencionTecla+0x29c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f241 420b 	movw	r2, #5131	; 0x140b
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f040 810b 	bne.w	80031de <AtencionTecla+0x32a>
	{
		//CONFIGURACION VERTICAL CANAL X

		if(BCO_Activo(4,55,0,4)==1)
 8002fc8:	2304      	movs	r3, #4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2137      	movs	r1, #55	; 0x37
 8002fce:	2004      	movs	r0, #4
 8002fd0:	f014 fca4 	bl	801791c <BCO_Activo>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10b      	bne.n	8002ff2 <AtencionTecla+0x13e>
			BCO(CORREDERA,4,55,1,4,1,"NO DC AC GND");
 8002fda:	4b60      	ldr	r3, [pc, #384]	; (800315c <AtencionTecla+0x2a8>)
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	2237      	movs	r2, #55	; 0x37
 8002fea:	2104      	movs	r1, #4
 8002fec:	485c      	ldr	r0, [pc, #368]	; (8003160 <AtencionTecla+0x2ac>)
 8002fee:	f014 fb0d 	bl	801760c <BCO>
		if(BCO_Activo(4,55,0,4)==2)
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2137      	movs	r1, #55	; 0x37
 8002ff8:	2004      	movs	r0, #4
 8002ffa:	f014 fc8f 	bl	801791c <BCO_Activo>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b02      	cmp	r3, #2
 8003002:	d10b      	bne.n	800301c <AtencionTecla+0x168>
			BCO(CORREDERA,4,55,1,4,2,"NO DC AC GND");
 8003004:	4b55      	ldr	r3, [pc, #340]	; (800315c <AtencionTecla+0x2a8>)
 8003006:	9302      	str	r3, [sp, #8]
 8003008:	2302      	movs	r3, #2
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2304      	movs	r3, #4
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2301      	movs	r3, #1
 8003012:	2237      	movs	r2, #55	; 0x37
 8003014:	2104      	movs	r1, #4
 8003016:	4852      	ldr	r0, [pc, #328]	; (8003160 <AtencionTecla+0x2ac>)
 8003018:	f014 faf8 	bl	801760c <BCO>
		if(BCO_Activo(4,55,0,4)==3)
 800301c:	2304      	movs	r3, #4
 800301e:	2200      	movs	r2, #0
 8003020:	2137      	movs	r1, #55	; 0x37
 8003022:	2004      	movs	r0, #4
 8003024:	f014 fc7a 	bl	801791c <BCO_Activo>
 8003028:	4603      	mov	r3, r0
 800302a:	2b03      	cmp	r3, #3
 800302c:	d10b      	bne.n	8003046 <AtencionTecla+0x192>
			BCO(CORREDERA,4,55,1,4,3,"NO DC AC GND");
 800302e:	4b4b      	ldr	r3, [pc, #300]	; (800315c <AtencionTecla+0x2a8>)
 8003030:	9302      	str	r3, [sp, #8]
 8003032:	2303      	movs	r3, #3
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2304      	movs	r3, #4
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2301      	movs	r3, #1
 800303c:	2237      	movs	r2, #55	; 0x37
 800303e:	2104      	movs	r1, #4
 8003040:	4847      	ldr	r0, [pc, #284]	; (8003160 <AtencionTecla+0x2ac>)
 8003042:	f014 fae3 	bl	801760c <BCO>
		if(BCO_Activo(4,55,0,4)==4)
 8003046:	2304      	movs	r3, #4
 8003048:	2200      	movs	r2, #0
 800304a:	2137      	movs	r1, #55	; 0x37
 800304c:	2004      	movs	r0, #4
 800304e:	f014 fc65 	bl	801791c <BCO_Activo>
 8003052:	4603      	mov	r3, r0
 8003054:	2b04      	cmp	r3, #4
 8003056:	d10b      	bne.n	8003070 <AtencionTecla+0x1bc>
			BCO(CORREDERA,4,55,1,4,4,"NO DC AC GND");
 8003058:	4b40      	ldr	r3, [pc, #256]	; (800315c <AtencionTecla+0x2a8>)
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	2304      	movs	r3, #4
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	2304      	movs	r3, #4
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2301      	movs	r3, #1
 8003066:	2237      	movs	r2, #55	; 0x37
 8003068:	2104      	movs	r1, #4
 800306a:	483d      	ldr	r0, [pc, #244]	; (8003160 <AtencionTecla+0x2ac>)
 800306c:	f014 face 	bl	801760c <BCO>
		if(BCO_Activo(210,55,0,2)==1)
 8003070:	2302      	movs	r3, #2
 8003072:	2200      	movs	r2, #0
 8003074:	2137      	movs	r1, #55	; 0x37
 8003076:	20d2      	movs	r0, #210	; 0xd2
 8003078:	f014 fc50 	bl	801791c <BCO_Activo>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10b      	bne.n	800309a <AtencionTecla+0x1e6>
			BCO(CORREDERA,200,55,1,2,1,"SI  NO");
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <AtencionTecla+0x2b0>)
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	2301      	movs	r3, #1
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2302      	movs	r3, #2
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2301      	movs	r3, #1
 8003090:	2237      	movs	r2, #55	; 0x37
 8003092:	21c8      	movs	r1, #200	; 0xc8
 8003094:	4832      	ldr	r0, [pc, #200]	; (8003160 <AtencionTecla+0x2ac>)
 8003096:	f014 fab9 	bl	801760c <BCO>
		if(BCO_Activo(210,55,0,2)==2)
 800309a:	2302      	movs	r3, #2
 800309c:	2200      	movs	r2, #0
 800309e:	2137      	movs	r1, #55	; 0x37
 80030a0:	20d2      	movs	r0, #210	; 0xd2
 80030a2:	f014 fc3b 	bl	801791c <BCO_Activo>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d10b      	bne.n	80030c4 <AtencionTecla+0x210>
			BCO(CORREDERA,200,55,1,2,2,"SI  NO");
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <AtencionTecla+0x2b0>)
 80030ae:	9302      	str	r3, [sp, #8]
 80030b0:	2302      	movs	r3, #2
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	2302      	movs	r3, #2
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	2237      	movs	r2, #55	; 0x37
 80030bc:	21c8      	movs	r1, #200	; 0xc8
 80030be:	4828      	ldr	r0, [pc, #160]	; (8003160 <AtencionTecla+0x2ac>)
 80030c0:	f014 faa4 	bl	801760c <BCO>

		if(CHECK_CIRC_Activo(4,160))
 80030c4:	21a0      	movs	r1, #160	; 0xa0
 80030c6:	2004      	movs	r0, #4
 80030c8:	f014 fd3c 	bl	8017b44 <CHECK_CIRC_Activo>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d013      	beq.n	80030fa <AtencionTecla+0x246>
		{
			if(m_GrupoElectr==0) m_GrupoElectr=1;
 80030d2:	4b25      	ldr	r3, [pc, #148]	; (8003168 <AtencionTecla+0x2b4>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <AtencionTecla+0x22e>
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <AtencionTecla+0x2b4>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e002      	b.n	80030e8 <AtencionTecla+0x234>
			else				 m_GrupoElectr=0;
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <AtencionTecla+0x2b4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			CHECK_CIRC(4,160,"GRUPO","ELECTR.",m_GrupoElectr);
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <AtencionTecla+0x2b4>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <AtencionTecla+0x2b8>)
 80030f0:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <AtencionTecla+0x2bc>)
 80030f2:	21a0      	movs	r1, #160	; 0xa0
 80030f4:	2004      	movs	r0, #4
 80030f6:	f014 fcca 	bl	8017a8e <CHECK_CIRC>
		}
		if(CHECK_CIRC_Activo(114,160))
 80030fa:	21a0      	movs	r1, #160	; 0xa0
 80030fc:	2072      	movs	r0, #114	; 0x72
 80030fe:	f014 fd21 	bl	8017b44 <CHECK_CIRC_Activo>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <AtencionTecla+0x27c>
		{
			if(m_GenEolico==0) 	m_GenEolico=1;
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <AtencionTecla+0x2c0>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <AtencionTecla+0x264>
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <AtencionTecla+0x2c0>)
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e002      	b.n	800311e <AtencionTecla+0x26a>
			else				m_GenEolico=0;
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <AtencionTecla+0x2c0>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
			CHECK_CIRC(114,160,"GENER.","EOLICO",m_GenEolico);
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <AtencionTecla+0x2c0>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <AtencionTecla+0x2c4>)
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <AtencionTecla+0x2c8>)
 8003128:	21a0      	movs	r1, #160	; 0xa0
 800312a:	2072      	movs	r0, #114	; 0x72
 800312c:	f014 fcaf 	bl	8017a8e <CHECK_CIRC>
		}
		if(CHECK_CIRC_Activo(224,160))
 8003130:	21a0      	movs	r1, #160	; 0xa0
 8003132:	20e0      	movs	r0, #224	; 0xe0
 8003134:	f014 fd06 	bl	8017b44 <CHECK_CIRC_Activo>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02b      	beq.n	8003196 <AtencionTecla+0x2e2>
		{
			if(m_GrupoElectr==0) m_GrupoElectr=1;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <AtencionTecla+0x2b4>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d11c      	bne.n	8003180 <AtencionTecla+0x2cc>
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <AtencionTecla+0x2b4>)
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e01b      	b.n	8003186 <AtencionTecla+0x2d2>
 800314e:	bf00      	nop
 8003150:	200047a4 	.word	0x200047a4
 8003154:	0801c240 	.word	0x0801c240
 8003158:	20003644 	.word	0x20003644
 800315c:	0801bf0c 	.word	0x0801bf0c
 8003160:	0801cf3c 	.word	0x0801cf3c
 8003164:	0801bf1c 	.word	0x0801bf1c
 8003168:	20004861 	.word	0x20004861
 800316c:	0801bf24 	.word	0x0801bf24
 8003170:	0801bf2c 	.word	0x0801bf2c
 8003174:	20004860 	.word	0x20004860
 8003178:	0801bf34 	.word	0x0801bf34
 800317c:	0801bf3c 	.word	0x0801bf3c
			else				 m_GrupoElectr=0;
 8003180:	4bb5      	ldr	r3, [pc, #724]	; (8003458 <AtencionTecla+0x5a4>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
			CHECK_CIRC(224,160,"RESERV.","",0);
 8003186:	2300      	movs	r3, #0
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4bb4      	ldr	r3, [pc, #720]	; (800345c <AtencionTecla+0x5a8>)
 800318c:	4ab4      	ldr	r2, [pc, #720]	; (8003460 <AtencionTecla+0x5ac>)
 800318e:	21a0      	movs	r1, #160	; 0xa0
 8003190:	20e0      	movs	r0, #224	; 0xe0
 8003192:	f014 fc7c 	bl	8017a8e <CHECK_CIRC>
		}
		if(BOW_Activo(3,202,11) )
 8003196:	220b      	movs	r2, #11
 8003198:	21ca      	movs	r1, #202	; 0xca
 800319a:	2003      	movs	r0, #3
 800319c:	f015 ff9e 	bl	80190dc <BOW_Activo>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <AtencionTecla+0x302>
		{
			BOW(3,202,2,11,"OK");
 80031a6:	4baf      	ldr	r3, [pc, #700]	; (8003464 <AtencionTecla+0x5b0>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	230b      	movs	r3, #11
 80031ac:	2202      	movs	r2, #2
 80031ae:	21ca      	movs	r1, #202	; 0xca
 80031b0:	2003      	movs	r0, #3
 80031b2:	f014 fcf5 	bl	8017ba0 <BOW>
			//Grabar Datos en SD
		}

		if(BOW_Activo(162,202,11) )
 80031b6:	220b      	movs	r2, #11
 80031b8:	21ca      	movs	r1, #202	; 0xca
 80031ba:	20a2      	movs	r0, #162	; 0xa2
 80031bc:	f015 ff8e 	bl	80190dc <BOW_Activo>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <AtencionTecla+0x32a>
		{
			BOW(162,202,2,11,SALIR);
 80031c6:	4ba8      	ldr	r3, [pc, #672]	; (8003468 <AtencionTecla+0x5b4>)
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	230b      	movs	r3, #11
 80031cc:	2202      	movs	r2, #2
 80031ce:	21ca      	movs	r1, #202	; 0xca
 80031d0:	20a2      	movs	r0, #162	; 0xa2
 80031d2:	f014 fce5 	bl	8017ba0 <BOW>
			m_Pantalla=HARDWARE;
 80031d6:	4ba5      	ldr	r3, [pc, #660]	; (800346c <AtencionTecla+0x5b8>)
 80031d8:	f241 32ec 	movw	r2, #5100	; 0x13ec
 80031dc:	601a      	str	r2, [r3, #0]

	}

	if
	(
		m_Pantalla == HARDWARE_PRESET_INVERTER0+1 	||
 80031de:	4ba3      	ldr	r3, [pc, #652]	; (800346c <AtencionTecla+0x5b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
	(
 80031e2:	f241 422b 	movw	r2, #5163	; 0x142b
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d012      	beq.n	8003210 <AtencionTecla+0x35c>
		m_Pantalla == HARDWARE_PRESET_MPPT0+1  		||
 80031ea:	4ba0      	ldr	r3, [pc, #640]	; (800346c <AtencionTecla+0x5b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
		m_Pantalla == HARDWARE_PRESET_INVERTER0+1 	||
 80031ee:	f241 4235 	movw	r2, #5173	; 0x1435
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00c      	beq.n	8003210 <AtencionTecla+0x35c>
		m_Pantalla == HARDWARE_PRESET_DAB0+1 		||
 80031f6:	4b9d      	ldr	r3, [pc, #628]	; (800346c <AtencionTecla+0x5b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
		m_Pantalla == HARDWARE_PRESET_MPPT0+1  		||
 80031fa:	f241 423f 	movw	r2, #5183	; 0x143f
 80031fe:	4293      	cmp	r3, r2
 8003200:	d006      	beq.n	8003210 <AtencionTecla+0x35c>
		m_Pantalla == HARDWARE_PRESET_DAB1+1
 8003202:	4b9a      	ldr	r3, [pc, #616]	; (800346c <AtencionTecla+0x5b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
		m_Pantalla == HARDWARE_PRESET_DAB0+1 		||
 8003206:	f241 4241 	movw	r2, #5185	; 0x1441
 800320a:	4293      	cmp	r3, r2
 800320c:	f040 8104 	bne.w	8003418 <AtencionTecla+0x564>
	)
	{
		if( BOT_Activo(BOT_AIZQ,2,83))
 8003210:	2253      	movs	r2, #83	; 0x53
 8003212:	2102      	movs	r1, #2
 8003214:	4896      	ldr	r0, [pc, #600]	; (8003470 <AtencionTecla+0x5bc>)
 8003216:	f015 ff93 	bl	8019140 <BOT_Activo>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02a      	beq.n	8003276 <AtencionTecla+0x3c2>
		{
			BOT(BOT_AIZQ,2,83,1);
 8003220:	2301      	movs	r3, #1
 8003222:	2253      	movs	r2, #83	; 0x53
 8003224:	2102      	movs	r1, #2
 8003226:	4892      	ldr	r0, [pc, #584]	; (8003470 <AtencionTecla+0x5bc>)
 8003228:	f014 fbfe 	bl	8017a28 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 800322c:	f016 f916 	bl	801945c <XPT2046_TouchGetCoordinates>
				if(m_IndicePot1>1) m_IndicePot1--;
 8003230:	4b90      	ldr	r3, [pc, #576]	; (8003474 <AtencionTecla+0x5c0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	dd04      	ble.n	8003242 <AtencionTecla+0x38e>
 8003238:	4b8e      	ldr	r3, [pc, #568]	; (8003474 <AtencionTecla+0x5c0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	4a8d      	ldr	r2, [pc, #564]	; (8003474 <AtencionTecla+0x5c0>)
 8003240:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,35,95,2,0,m_IndicePot1);
 8003242:	4b8c      	ldr	r3, [pc, #560]	; (8003474 <AtencionTecla+0x5c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2302      	movs	r3, #2
 8003250:	225f      	movs	r2, #95	; 0x5f
 8003252:	2123      	movs	r1, #35	; 0x23
 8003254:	4888      	ldr	r0, [pc, #544]	; (8003478 <AtencionTecla+0x5c4>)
 8003256:	f013 fc9d 	bl	8016b94 <f_PEL>

			}while(BOT_Activo(BOT_AIZQ,2,83) );
 800325a:	2253      	movs	r2, #83	; 0x53
 800325c:	2102      	movs	r1, #2
 800325e:	4884      	ldr	r0, [pc, #528]	; (8003470 <AtencionTecla+0x5bc>)
 8003260:	f015 ff6e 	bl	8019140 <BOT_Activo>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e0      	bne.n	800322c <AtencionTecla+0x378>
	        BOT(BOT_AIZQ,2,83,0);
 800326a:	2300      	movs	r3, #0
 800326c:	2253      	movs	r2, #83	; 0x53
 800326e:	2102      	movs	r1, #2
 8003270:	487f      	ldr	r0, [pc, #508]	; (8003470 <AtencionTecla+0x5bc>)
 8003272:	f014 fbd9 	bl	8017a28 <BOT>
		}
		if( BOT_Activo(BOT_ADER,127,83))
 8003276:	2253      	movs	r2, #83	; 0x53
 8003278:	217f      	movs	r1, #127	; 0x7f
 800327a:	4880      	ldr	r0, [pc, #512]	; (800347c <AtencionTecla+0x5c8>)
 800327c:	f015 ff60 	bl	8019140 <BOT_Activo>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02a      	beq.n	80032dc <AtencionTecla+0x428>
		{
			BOT(BOT_ADER,127,83,1);
 8003286:	2301      	movs	r3, #1
 8003288:	2253      	movs	r2, #83	; 0x53
 800328a:	217f      	movs	r1, #127	; 0x7f
 800328c:	487b      	ldr	r0, [pc, #492]	; (800347c <AtencionTecla+0x5c8>)
 800328e:	f014 fbcb 	bl	8017a28 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 8003292:	f016 f8e3 	bl	801945c <XPT2046_TouchGetCoordinates>
				if(m_IndicePot1<18) m_IndicePot1++;
 8003296:	4b77      	ldr	r3, [pc, #476]	; (8003474 <AtencionTecla+0x5c0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b11      	cmp	r3, #17
 800329c:	dc04      	bgt.n	80032a8 <AtencionTecla+0x3f4>
 800329e:	4b75      	ldr	r3, [pc, #468]	; (8003474 <AtencionTecla+0x5c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a73      	ldr	r2, [pc, #460]	; (8003474 <AtencionTecla+0x5c0>)
 80032a6:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,35,95,2,0,m_IndicePot1);
 80032a8:	4b72      	ldr	r3, [pc, #456]	; (8003474 <AtencionTecla+0x5c0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2300      	movs	r3, #0
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2302      	movs	r3, #2
 80032b6:	225f      	movs	r2, #95	; 0x5f
 80032b8:	2123      	movs	r1, #35	; 0x23
 80032ba:	486f      	ldr	r0, [pc, #444]	; (8003478 <AtencionTecla+0x5c4>)
 80032bc:	f013 fc6a 	bl	8016b94 <f_PEL>

			}while(BOT_Activo(BOT_ADER,127,83) );
 80032c0:	2253      	movs	r2, #83	; 0x53
 80032c2:	217f      	movs	r1, #127	; 0x7f
 80032c4:	486d      	ldr	r0, [pc, #436]	; (800347c <AtencionTecla+0x5c8>)
 80032c6:	f015 ff3b 	bl	8019140 <BOT_Activo>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e0      	bne.n	8003292 <AtencionTecla+0x3de>
	        BOT(BOT_ADER,127,83,0);
 80032d0:	2300      	movs	r3, #0
 80032d2:	2253      	movs	r2, #83	; 0x53
 80032d4:	217f      	movs	r1, #127	; 0x7f
 80032d6:	4869      	ldr	r0, [pc, #420]	; (800347c <AtencionTecla+0x5c8>)
 80032d8:	f014 fba6 	bl	8017a28 <BOT>
		}
		if( BOT_Activo(BOT_AIZQ,162,83))
 80032dc:	2253      	movs	r2, #83	; 0x53
 80032de:	21a2      	movs	r1, #162	; 0xa2
 80032e0:	4863      	ldr	r0, [pc, #396]	; (8003470 <AtencionTecla+0x5bc>)
 80032e2:	f015 ff2d 	bl	8019140 <BOT_Activo>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d02a      	beq.n	8003342 <AtencionTecla+0x48e>
		{
			BOT(BOT_AIZQ,162,83,1);
 80032ec:	2301      	movs	r3, #1
 80032ee:	2253      	movs	r2, #83	; 0x53
 80032f0:	21a2      	movs	r1, #162	; 0xa2
 80032f2:	485f      	ldr	r0, [pc, #380]	; (8003470 <AtencionTecla+0x5bc>)
 80032f4:	f014 fb98 	bl	8017a28 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 80032f8:	f016 f8b0 	bl	801945c <XPT2046_TouchGetCoordinates>
				if(m_IndicePot2>1) m_IndicePot2--;
 80032fc:	4b60      	ldr	r3, [pc, #384]	; (8003480 <AtencionTecla+0x5cc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	dd04      	ble.n	800330e <AtencionTecla+0x45a>
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <AtencionTecla+0x5cc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <AtencionTecla+0x5cc>)
 800330c:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,195,95,2,0,m_IndicePot2);
 800330e:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <AtencionTecla+0x5cc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2302      	movs	r3, #2
 800331c:	225f      	movs	r2, #95	; 0x5f
 800331e:	21c3      	movs	r1, #195	; 0xc3
 8003320:	4855      	ldr	r0, [pc, #340]	; (8003478 <AtencionTecla+0x5c4>)
 8003322:	f013 fc37 	bl	8016b94 <f_PEL>

			}while(BOT_Activo(BOT_AIZQ,162,83) );
 8003326:	2253      	movs	r2, #83	; 0x53
 8003328:	21a2      	movs	r1, #162	; 0xa2
 800332a:	4851      	ldr	r0, [pc, #324]	; (8003470 <AtencionTecla+0x5bc>)
 800332c:	f015 ff08 	bl	8019140 <BOT_Activo>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e0      	bne.n	80032f8 <AtencionTecla+0x444>
	        BOT(BOT_AIZQ,162,83,0);
 8003336:	2300      	movs	r3, #0
 8003338:	2253      	movs	r2, #83	; 0x53
 800333a:	21a2      	movs	r1, #162	; 0xa2
 800333c:	484c      	ldr	r0, [pc, #304]	; (8003470 <AtencionTecla+0x5bc>)
 800333e:	f014 fb73 	bl	8017a28 <BOT>
		}
		if( BOT_Activo(BOT_ADER,287,83))
 8003342:	2253      	movs	r2, #83	; 0x53
 8003344:	f240 111f 	movw	r1, #287	; 0x11f
 8003348:	484c      	ldr	r0, [pc, #304]	; (800347c <AtencionTecla+0x5c8>)
 800334a:	f015 fef9 	bl	8019140 <BOT_Activo>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02d      	beq.n	80033b0 <AtencionTecla+0x4fc>
		{
			BOT(BOT_ADER,287,83,1);
 8003354:	2301      	movs	r3, #1
 8003356:	2253      	movs	r2, #83	; 0x53
 8003358:	f240 111f 	movw	r1, #287	; 0x11f
 800335c:	4847      	ldr	r0, [pc, #284]	; (800347c <AtencionTecla+0x5c8>)
 800335e:	f014 fb63 	bl	8017a28 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 8003362:	f016 f87b 	bl	801945c <XPT2046_TouchGetCoordinates>
				if(m_IndicePot2<18) m_IndicePot2++;
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <AtencionTecla+0x5cc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b11      	cmp	r3, #17
 800336c:	dc04      	bgt.n	8003378 <AtencionTecla+0x4c4>
 800336e:	4b44      	ldr	r3, [pc, #272]	; (8003480 <AtencionTecla+0x5cc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	4a42      	ldr	r2, [pc, #264]	; (8003480 <AtencionTecla+0x5cc>)
 8003376:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,195,95,2,0,m_IndicePot2);
 8003378:	4b41      	ldr	r3, [pc, #260]	; (8003480 <AtencionTecla+0x5cc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2302      	movs	r3, #2
 8003386:	225f      	movs	r2, #95	; 0x5f
 8003388:	21c3      	movs	r1, #195	; 0xc3
 800338a:	483b      	ldr	r0, [pc, #236]	; (8003478 <AtencionTecla+0x5c4>)
 800338c:	f013 fc02 	bl	8016b94 <f_PEL>

			}while(BOT_Activo(BOT_ADER,287,83) );
 8003390:	2253      	movs	r2, #83	; 0x53
 8003392:	f240 111f 	movw	r1, #287	; 0x11f
 8003396:	4839      	ldr	r0, [pc, #228]	; (800347c <AtencionTecla+0x5c8>)
 8003398:	f015 fed2 	bl	8019140 <BOT_Activo>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1df      	bne.n	8003362 <AtencionTecla+0x4ae>
			BOT(BOT_ADER,287,83,0);
 80033a2:	2300      	movs	r3, #0
 80033a4:	2253      	movs	r2, #83	; 0x53
 80033a6:	f240 111f 	movw	r1, #287	; 0x11f
 80033aa:	4834      	ldr	r0, [pc, #208]	; (800347c <AtencionTecla+0x5c8>)
 80033ac:	f014 fb3c 	bl	8017a28 <BOT>
		}

		if(BOW_Activo(51,202,4) )
 80033b0:	2204      	movs	r2, #4
 80033b2:	21ca      	movs	r1, #202	; 0xca
 80033b4:	2033      	movs	r0, #51	; 0x33
 80033b6:	f015 fe91 	bl	80190dc <BOW_Activo>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <AtencionTecla+0x51c>
		{
			BOW(51,202,2,4,"OK");
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <AtencionTecla+0x5b0>)
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2304      	movs	r3, #4
 80033c6:	2202      	movs	r2, #2
 80033c8:	21ca      	movs	r1, #202	; 0xca
 80033ca:	2033      	movs	r0, #51	; 0x33
 80033cc:	f014 fbe8 	bl	8017ba0 <BOW>
		}
		if(BOW_Activo(211,202,4) )
 80033d0:	2204      	movs	r2, #4
 80033d2:	21ca      	movs	r1, #202	; 0xca
 80033d4:	20d3      	movs	r0, #211	; 0xd3
 80033d6:	f015 fe81 	bl	80190dc <BOW_Activo>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <AtencionTecla+0x53c>
		{
			BOW(211,202,2,4,"OK");
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <AtencionTecla+0x5b0>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2304      	movs	r3, #4
 80033e6:	2202      	movs	r2, #2
 80033e8:	21ca      	movs	r1, #202	; 0xca
 80033ea:	20d3      	movs	r0, #211	; 0xd3
 80033ec:	f014 fbd8 	bl	8017ba0 <BOW>
		}

		if(BOW_Activo(117,202,6) )
 80033f0:	2206      	movs	r2, #6
 80033f2:	21ca      	movs	r1, #202	; 0xca
 80033f4:	2075      	movs	r0, #117	; 0x75
 80033f6:	f015 fe71 	bl	80190dc <BOW_Activo>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <AtencionTecla+0x564>
		{
			BOW(117,202,2,6,SALIR);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <AtencionTecla+0x5b4>)
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2306      	movs	r3, #6
 8003406:	2202      	movs	r2, #2
 8003408:	21ca      	movs	r1, #202	; 0xca
 800340a:	2075      	movs	r0, #117	; 0x75
 800340c:	f014 fbc8 	bl	8017ba0 <BOW>
			m_Pantalla=HARDWARE;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <AtencionTecla+0x5b8>)
 8003412:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8003416:	601a      	str	r2, [r3, #0]
		}
	}
	if(	m_Pantalla == VISOR+1)
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <AtencionTecla+0x5b8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8003420:	4293      	cmp	r3, r2
 8003422:	d112      	bne.n	800344a <AtencionTecla+0x596>
	{
		if(BOW_Activo(118,3,6) )
 8003424:	2206      	movs	r2, #6
 8003426:	2103      	movs	r1, #3
 8003428:	2076      	movs	r0, #118	; 0x76
 800342a:	f015 fe57 	bl	80190dc <BOW_Activo>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <AtencionTecla+0x596>
		{
			BOW(118,3,2,6,SALIR);
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <AtencionTecla+0x5b4>)
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2306      	movs	r3, #6
 800343a:	2202      	movs	r2, #2
 800343c:	2103      	movs	r1, #3
 800343e:	2076      	movs	r0, #118	; 0x76
 8003440:	f014 fbae 	bl	8017ba0 <BOW>
			m_Pantalla=MENU_PRINCIPAL;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <AtencionTecla+0x5b8>)
 8003446:	2204      	movs	r2, #4
 8003448:	601a      	str	r2, [r3, #0]
		}
	}

	if(	m_Pantalla == DES_DAB+1)
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <AtencionTecla+0x5b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f640 0235 	movw	r2, #2101	; 0x835
 8003452:	4293      	cmp	r3, r2
 8003454:	d119      	bne.n	800348a <AtencionTecla+0x5d6>
 8003456:	e015      	b.n	8003484 <AtencionTecla+0x5d0>
 8003458:	20004861 	.word	0x20004861
 800345c:	0801bf44 	.word	0x0801bf44
 8003460:	0801bf48 	.word	0x0801bf48
 8003464:	0801bf50 	.word	0x0801bf50
 8003468:	0801c24c 	.word	0x0801c24c
 800346c:	200047a4 	.word	0x200047a4
 8003470:	0801d298 	.word	0x0801d298
 8003474:	20004858 	.word	0x20004858
 8003478:	20000224 	.word	0x20000224
 800347c:	0801d574 	.word	0x0801d574
 8003480:	2000485c 	.word	0x2000485c
	{
		m_Pantalla=MENU_PRINCIPAL;
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <AtencionTecla+0x65c>)
 8003486:	2204      	movs	r2, #4
 8003488:	601a      	str	r2, [r3, #0]
	}

	if(	m_Pantalla == DES_MPPT+1)
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <AtencionTecla+0x65c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f640 0299 	movw	r2, #2201	; 0x899
 8003492:	4293      	cmp	r3, r2
 8003494:	d102      	bne.n	800349c <AtencionTecla+0x5e8>
	{
		m_Pantalla=MENU_PRINCIPAL;
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <AtencionTecla+0x65c>)
 8003498:	2204      	movs	r2, #4
 800349a:	601a      	str	r2, [r3, #0]
	}

	if(	m_Pantalla == DES_INVERTER+1)
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <AtencionTecla+0x65c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f640 02fd 	movw	r2, #2301	; 0x8fd
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d12c      	bne.n	8003502 <AtencionTecla+0x64e>
	{
		if(m_XPanel<100 && m_BTO>0 ) m_BTO--;
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <AtencionTecla+0x660>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b63      	cmp	r3, #99	; 0x63
 80034ae:	d808      	bhi.n	80034c2 <AtencionTecla+0x60e>
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <AtencionTecla+0x664>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <AtencionTecla+0x60e>
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <AtencionTecla+0x664>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3b01      	subs	r3, #1
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <AtencionTecla+0x664>)
 80034c0:	6013      	str	r3, [r2, #0]
		if(m_XPanel>210 && m_BTO<14) m_BTO++;
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <AtencionTecla+0x660>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2bd2      	cmp	r3, #210	; 0xd2
 80034c8:	d908      	bls.n	80034dc <AtencionTecla+0x628>
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <AtencionTecla+0x664>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b0d      	cmp	r3, #13
 80034d0:	d804      	bhi.n	80034dc <AtencionTecla+0x628>
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <AtencionTecla+0x664>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <AtencionTecla+0x664>)
 80034da:	6013      	str	r3, [r2, #0]
		if(m_XPanel>100 && m_XPanel<210  ) m_Pantalla=MENU_PRINCIPAL;
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <AtencionTecla+0x660>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b64      	cmp	r3, #100	; 0x64
 80034e2:	d906      	bls.n	80034f2 <AtencionTecla+0x63e>
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <AtencionTecla+0x660>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2bd1      	cmp	r3, #209	; 0xd1
 80034ea:	d802      	bhi.n	80034f2 <AtencionTecla+0x63e>
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <AtencionTecla+0x65c>)
 80034ee:	2204      	movs	r2, #4
 80034f0:	601a      	str	r2, [r3, #0]
		while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 80034f2:	bf00      	nop
 80034f4:	2102      	movs	r1, #2
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <AtencionTecla+0x668>)
 80034f8:	f003 fe7e 	bl	80071f8 <HAL_GPIO_ReadPin>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f8      	beq.n	80034f4 <AtencionTecla+0x640>
	 }
*/



	PedidoPanel=0;
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <AtencionTecla+0x66c>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200047a4 	.word	0x200047a4
 8003514:	2000a098 	.word	0x2000a098
 8003518:	2000890c 	.word	0x2000890c
 800351c:	48000400 	.word	0x48000400
 8003520:	20008914 	.word	0x20008914
 8003524:	00000000 	.word	0x00000000

08003528 <GenOnda>:

//uint8_t BufferRX[100];
//uint8_t Canal=1;

void GenOnda()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
	int i;

	for(i=0;i<100;i++)
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e038      	b.n	80035a6 <GenOnda+0x7e>
	{
		Seno[i]=(sin(2*PI*i/100)*1000+2048);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7fc fffd 	bl	8000534 <__aeabi_i2d>
 800353a:	a323      	add	r3, pc, #140	; (adr r3, 80035c8 <GenOnda+0xa0>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fd f862 	bl	8000608 <__aeabi_dmul>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <GenOnda+0x90>)
 8003552:	f7fd f983 	bl	800085c <__aeabi_ddiv>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	ec43 2b17 	vmov	d7, r2, r3
 800355e:	eeb0 0a47 	vmov.f32	s0, s14
 8003562:	eef0 0a67 	vmov.f32	s1, s15
 8003566:	f017 fa0f 	bl	801a988 <sin>
 800356a:	ec51 0b10 	vmov	r0, r1, d0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <GenOnda+0x94>)
 8003574:	f7fd f848 	bl	8000608 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <GenOnda+0x98>)
 8003586:	f7fc fe89 	bl	800029c <__adddf3>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f7fd fafb 	bl	8000b8c <__aeabi_d2uiz>
 8003596:	4602      	mov	r2, r0
 8003598:	490a      	ldr	r1, [pc, #40]	; (80035c4 <GenOnda+0x9c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<100;i++)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b63      	cmp	r3, #99	; 0x63
 80035aa:	ddc3      	ble.n	8003534 <GenOnda+0xc>
	}
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40590000 	.word	0x40590000
 80035bc:	408f4000 	.word	0x408f4000
 80035c0:	40a00000 	.word	0x40a00000
 80035c4:	200097bc 	.word	0x200097bc
 80035c8:	1569f490 	.word	0x1569f490
 80035cc:	401921fd 	.word	0x401921fd

080035d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d6:	f001 fdd1 	bl	800517c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035da:	f000 f8bf 	bl	800375c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035de:	f000 ff19 	bl	8004414 <MX_GPIO_Init>
  MX_DMA_Init();
 80035e2:	f000 fe9d 	bl	8004320 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80035e6:	f000 fe6b 	bl	80042c0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80035ea:	f016 f887 	bl	80196fc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80035ee:	f000 fbe7 	bl	8003dc0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80035f2:	f000 f91f 	bl	8003834 <MX_ADC1_Init>
  MX_ADC3_Init();
 80035f6:	f000 f9eb 	bl	80039d0 <MX_ADC3_Init>
  MX_ADC4_Init();
 80035fa:	f000 fa5b 	bl	8003ab4 <MX_ADC4_Init>
  MX_ADC2_Init();
 80035fe:	f000 f989 	bl	8003914 <MX_ADC2_Init>
  MX_TIM1_Init();
 8003602:	f000 fb1d 	bl	8003c40 <MX_TIM1_Init>
  MX_DAC1_Init();
 8003606:	f000 fab3 	bl	8003b70 <MX_DAC1_Init>
  MX_TIM3_Init();
 800360a:	f000 fc57 	bl	8003ebc <MX_TIM3_Init>
  MX_SPI3_Init();
 800360e:	f000 fad9 	bl	8003bc4 <MX_SPI3_Init>
  MX_FATFS_Init();
 8003612:	f00c fe53 	bl	80102bc <MX_FATFS_Init>
  MX_TIM7_Init();
 8003616:	f000 fd1f 	bl	8004058 <MX_TIM7_Init>
  MX_TIM8_Init();
 800361a:	f000 fd53 	bl	80040c4 <MX_TIM8_Init>
  MX_TIM4_Init();
 800361e:	f000 fc9b 	bl	8003f58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  SD_CS_OFF;
 8003622:	2201      	movs	r2, #1
 8003624:	2108      	movs	r1, #8
 8003626:	4840      	ldr	r0, [pc, #256]	; (8003728 <main+0x158>)
 8003628:	f003 fdfe 	bl	8007228 <HAL_GPIO_WritePin>
  TFT_CS_OFF;
 800362c:	2201      	movs	r2, #1
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	483d      	ldr	r0, [pc, #244]	; (8003728 <main+0x158>)
 8003632:	f003 fdf9 	bl	8007228 <HAL_GPIO_WritePin>
  TP_CS_OFF;
 8003636:	2201      	movs	r2, #1
 8003638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800363c:	483b      	ldr	r0, [pc, #236]	; (800372c <main+0x15c>)
 800363e:	f003 fdf3 	bl	8007228 <HAL_GPIO_WritePin>

  ILI9341_Init();
 8003642:	f00d fc3f 	bl	8010ec4 <ILI9341_Init>
  ERROR_SD=0;
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <main+0x160>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
  TFT_CS_OFF;
 800364c:	2201      	movs	r2, #1
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	4835      	ldr	r0, [pc, #212]	; (8003728 <main+0x158>)
 8003652:	f003 fde9 	bl	8007228 <HAL_GPIO_WritePin>
  // Mount SD Card
  SD_CS_ON;
 8003656:	2200      	movs	r2, #0
 8003658:	2108      	movs	r1, #8
 800365a:	4833      	ldr	r0, [pc, #204]	; (8003728 <main+0x158>)
 800365c:	f003 fde4 	bl	8007228 <HAL_GPIO_WritePin>
  if(f_mount(&fs, "",1) != FR_OK) ERROR_SD=0x01;// _Error_Handler(__FILE__, __LINE__);
 8003660:	2201      	movs	r2, #1
 8003662:	4934      	ldr	r1, [pc, #208]	; (8003734 <main+0x164>)
 8003664:	4834      	ldr	r0, [pc, #208]	; (8003738 <main+0x168>)
 8003666:	f012 fa11 	bl	8015a8c <f_mount>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <main+0xa6>
 8003670:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <main+0x160>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

  /* =============Initialization=============== */
  ILI9341_Init();
 8003676:	f00d fc25 	bl	8010ec4 <ILI9341_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_CAN_Start(&hcan);
  //CAN1_Config();

  HAL_TIM_Base_Start_IT(&htim1);
 800367a:	4830      	ldr	r0, [pc, #192]	; (800373c <main+0x16c>)
 800367c:	f007 fde4 	bl	800b248 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8003680:	2100      	movs	r1, #0
 8003682:	482e      	ldr	r0, [pc, #184]	; (800373c <main+0x16c>)
 8003684:	f007 ffca 	bl	800b61c <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8003688:	2100      	movs	r1, #0
 800368a:	482c      	ldr	r0, [pc, #176]	; (800373c <main+0x16c>)
 800368c:	f009 fc54 	bl	800cf38 <HAL_TIMEx_PWMN_Start>

  //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //Inverter
  //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2); //Inverter

  HAL_TIM_Base_Start(&htim2);
 8003690:	482b      	ldr	r0, [pc, #172]	; (8003740 <main+0x170>)
 8003692:	f007 fd71 	bl	800b178 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_1,SPWM1,250);
 8003696:	23fa      	movs	r3, #250	; 0xfa
 8003698:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <main+0x174>)
 800369a:	2100      	movs	r1, #0
 800369c:	4828      	ldr	r0, [pc, #160]	; (8003740 <main+0x170>)
 800369e:	f008 f915 	bl	800b8cc <HAL_TIM_PWM_Start_DMA>

  HAL_TIM_Base_Start(&htim3);// OSC
 80036a2:	4829      	ldr	r0, [pc, #164]	; (8003748 <main+0x178>)
 80036a4:	f007 fd68 	bl	800b178 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim4);
 80036a8:	4828      	ldr	r0, [pc, #160]	; (800374c <main+0x17c>)
 80036aa:	f007 fd65 	bl	800b178 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80036ae:	2100      	movs	r1, #0
 80036b0:	4826      	ldr	r0, [pc, #152]	; (800374c <main+0x17c>)
 80036b2:	f007 fea7 	bl	800b404 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start(&htim8);
 80036b6:	4826      	ldr	r0, [pc, #152]	; (8003750 <main+0x180>)
 80036b8:	f007 fd5e 	bl	800b178 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80036bc:	2100      	movs	r1, #0
 80036be:	4824      	ldr	r0, [pc, #144]	; (8003750 <main+0x180>)
 80036c0:	f007 fea0 	bl	800b404 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_1);
 80036c4:	2100      	movs	r1, #0
 80036c6:	4822      	ldr	r0, [pc, #136]	; (8003750 <main+0x180>)
 80036c8:	f009 fc36 	bl	800cf38 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80036cc:	2104      	movs	r1, #4
 80036ce:	4820      	ldr	r0, [pc, #128]	; (8003750 <main+0x180>)
 80036d0:	f007 fe98 	bl	800b404 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_2);
 80036d4:	2104      	movs	r1, #4
 80036d6:	481e      	ldr	r0, [pc, #120]	; (8003750 <main+0x180>)
 80036d8:	f009 fc2e 	bl	800cf38 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80036dc:	2108      	movs	r1, #8
 80036de:	481c      	ldr	r0, [pc, #112]	; (8003750 <main+0x180>)
 80036e0:	f007 fe90 	bl	800b404 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_3);
 80036e4:	2108      	movs	r1, #8
 80036e6:	481a      	ldr	r0, [pc, #104]	; (8003750 <main+0x180>)
 80036e8:	f009 fc26 	bl	800cf38 <HAL_TIMEx_PWMN_Start>

  GenOnda();
 80036ec:	f7ff ff1c 	bl	8003528 <GenOnda>
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, Seno, 100, DAC_ALIGN_12B_R);
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2364      	movs	r3, #100	; 0x64
 80036f6:	4a17      	ldr	r2, [pc, #92]	; (8003754 <main+0x184>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	4817      	ldr	r0, [pc, #92]	; (8003758 <main+0x188>)
 80036fc:	f003 f872 	bl	80067e4 <HAL_DAC_Start_DMA>

  AppInit();
 8003700:	f7fd fab4 	bl	8000c6c <AppInit>

  while(1)
  {
	  if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0)
 8003704:	2102      	movs	r1, #2
 8003706:	4809      	ldr	r0, [pc, #36]	; (800372c <main+0x15c>)
 8003708:	f003 fd76 	bl	80071f8 <HAL_GPIO_ReadPin>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <main+0x148>
	  {
       	  AtencionTecla();
 8003712:	f7ff fbcf 	bl	8002eb4 <AtencionTecla>
 8003716:	e001      	b.n	800371c <main+0x14c>
	  }
	  else
	  {
		  AppLoop();
 8003718:	f7fd fac6 	bl	8000ca8 <AppLoop>
	  }

	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800371c:	2120      	movs	r1, #32
 800371e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003722:	f003 fd99 	bl	8007258 <HAL_GPIO_TogglePin>
	  if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0)
 8003726:	e7ed      	b.n	8003704 <main+0x134>
 8003728:	48000800 	.word	0x48000800
 800372c:	48000400 	.word	0x48000400
 8003730:	200093d0 	.word	0x200093d0
 8003734:	0801bf54 	.word	0x0801bf54
 8003738:	200091a0 	.word	0x200091a0
 800373c:	20008c24 	.word	0x20008c24
 8003740:	20008ce0 	.word	0x20008ce0
 8003744:	200093d4 	.word	0x200093d4
 8003748:	20008d9c 	.word	0x20008d9c
 800374c:	20008e58 	.word	0x20008e58
 8003750:	20008fd0 	.word	0x20008fd0
 8003754:	200097bc 	.word	0x200097bc
 8003758:	20008b68 	.word	0x20008b68

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b0a6      	sub	sp, #152	; 0x98
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003766:	2228      	movs	r2, #40	; 0x28
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f016 fc86 	bl	801a07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003770:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	2258      	movs	r2, #88	; 0x58
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f016 fc78 	bl	801a07c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800378c:	2301      	movs	r3, #1
 800378e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003796:	2301      	movs	r3, #1
 8003798:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379a:	2302      	movs	r3, #2
 800379c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80037ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 fa2a 	bl	8008c14 <HAL_RCC_OscConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80037c6:	f000 fee5 	bl	8004594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ca:	230f      	movs	r3, #15
 80037cc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ce:	2302      	movs	r3, #2
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d2:	2300      	movs	r3, #0
 80037d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f006 fa68 	bl	8009cbc <HAL_RCC_ClockConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037f2:	f000 fecf 	bl	8004594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <SystemClock_Config+0xd4>)
 80037f8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80037fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037fe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003800:	2300      	movs	r3, #0
 8003802:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003804:	2300      	movs	r3, #0
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8003808:	2300      	movs	r3, #0
 800380a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8003810:	2300      	movs	r3, #0
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f006 fc86 	bl	800a128 <HAL_RCCEx_PeriphCLKConfig>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003822:	f000 feb7 	bl	8004594 <Error_Handler>
  }
}
 8003826:	bf00      	nop
 8003828:	3798      	adds	r7, #152	; 0x98
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	00323002 	.word	0x00323002

08003834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800383a:	f107 031c 	add.w	r3, r7, #28
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
 8003854:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003858:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800385c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003860:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003864:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <MX_ADC1_Init+0xdc>)
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003874:	2201      	movs	r2, #1
 8003876:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <MX_ADC1_Init+0xdc>)
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003882:	2200      	movs	r2, #0
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003888:	2201      	movs	r2, #1
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <MX_ADC1_Init+0xdc>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <MX_ADC1_Init+0xdc>)
 8003894:	2201      	movs	r2, #1
 8003896:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <MX_ADC1_Init+0xdc>)
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <MX_ADC1_Init+0xdc>)
 80038a2:	2208      	movs	r2, #8
 80038a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <MX_ADC1_Init+0xdc>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <MX_ADC1_Init+0xdc>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038b2:	4817      	ldr	r0, [pc, #92]	; (8003910 <MX_ADC1_Init+0xdc>)
 80038b4:	f001 fd0a 	bl	80052cc <HAL_ADC_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80038be:	f000 fe69 	bl	8004594 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4619      	mov	r1, r3
 80038cc:	4810      	ldr	r0, [pc, #64]	; (8003910 <MX_ADC1_Init+0xdc>)
 80038ce:	f002 fb5f 	bl	8005f90 <HAL_ADCEx_MultiModeConfigChannel>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80038d8:	f000 fe5c 	bl	8004594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80038dc:	230e      	movs	r3, #14
 80038de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4805      	ldr	r0, [pc, #20]	; (8003910 <MX_ADC1_Init+0xdc>)
 80038fa:	f002 f85f 	bl	80059bc <HAL_ADC_ConfigChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8003904:	f000 fe46 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003908:	bf00      	nop
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20008918 	.word	0x20008918

08003914 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800391a:	463b      	mov	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
 8003928:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <MX_ADC2_Init+0xb4>)
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <MX_ADC2_Init+0xb8>)
 800392e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003932:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003936:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <MX_ADC2_Init+0xb4>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003946:	2201      	movs	r2, #1
 8003948:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800394a:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <MX_ADC2_Init+0xb4>)
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003954:	2200      	movs	r2, #0
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <MX_ADC2_Init+0xb4>)
 800395a:	2201      	movs	r2, #1
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003966:	2201      	movs	r2, #1
 8003968:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <MX_ADC2_Init+0xb4>)
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003974:	2204      	movs	r2, #4
 8003976:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <MX_ADC2_Init+0xb4>)
 800397a:	2200      	movs	r2, #0
 800397c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003980:	2200      	movs	r2, #0
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003984:	4810      	ldr	r0, [pc, #64]	; (80039c8 <MX_ADC2_Init+0xb4>)
 8003986:	f001 fca1 	bl	80052cc <HAL_ADC_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8003990:	f000 fe00 	bl	8004594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003994:	230b      	movs	r3, #11
 8003996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003998:	2301      	movs	r3, #1
 800399a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039ac:	463b      	mov	r3, r7
 80039ae:	4619      	mov	r1, r3
 80039b0:	4805      	ldr	r0, [pc, #20]	; (80039c8 <MX_ADC2_Init+0xb4>)
 80039b2:	f002 f803 	bl	80059bc <HAL_ADC_ConfigChannel>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80039bc:	f000 fdea 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20008968 	.word	0x20008968
 80039cc:	50000100 	.word	0x50000100

080039d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <MX_ADC3_Init+0xdc>)
 80039f4:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <MX_ADC3_Init+0xe0>)
 80039f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <MX_ADC3_Init+0xdc>)
 80039fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a06:	4b29      	ldr	r3, [pc, #164]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003a46:	4b19      	ldr	r3, [pc, #100]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003a4c:	4817      	ldr	r0, [pc, #92]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a4e:	f001 fc3d 	bl	80052cc <HAL_ADC_Init>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8003a58:	f000 fd9c 	bl	8004594 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003a60:	f107 031c 	add.w	r3, r7, #28
 8003a64:	4619      	mov	r1, r3
 8003a66:	4811      	ldr	r0, [pc, #68]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a68:	f002 fa92 	bl	8005f90 <HAL_ADCEx_MultiModeConfigChannel>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8003a72:	f000 fd8f 	bl	8004594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003a76:	230c      	movs	r3, #12
 8003a78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4806      	ldr	r0, [pc, #24]	; (8003aac <MX_ADC3_Init+0xdc>)
 8003a94:	f001 ff92 	bl	80059bc <HAL_ADC_ConfigChannel>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8003a9e:	f000 fd79 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003aa2:	bf00      	nop
 8003aa4:	3728      	adds	r7, #40	; 0x28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200089b8 	.word	0x200089b8
 8003ab0:	50000400 	.word	0x50000400

08003ab4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003aba:	463b      	mov	r3, r7
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
 8003ac8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003acc:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <MX_ADC4_Init+0xb8>)
 8003ace:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003ad2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ad6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b14:	2204      	movs	r2, #4
 8003b16:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003b24:	4810      	ldr	r0, [pc, #64]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b26:	f001 fbd1 	bl	80052cc <HAL_ADC_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8003b30:	f000 fd30 	bl	8004594 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b34:	2303      	movs	r3, #3
 8003b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4805      	ldr	r0, [pc, #20]	; (8003b68 <MX_ADC4_Init+0xb4>)
 8003b52:	f001 ff33 	bl	80059bc <HAL_ADC_ConfigChannel>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8003b5c:	f000 fd1a 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20008a08 	.word	0x20008a08
 8003b6c:	50000500 	.word	0x50000500

08003b70 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <MX_DAC1_Init+0x4c>)
 8003b82:	4a0f      	ldr	r2, [pc, #60]	; (8003bc0 <MX_DAC1_Init+0x50>)
 8003b84:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003b86:	480d      	ldr	r0, [pc, #52]	; (8003bbc <MX_DAC1_Init+0x4c>)
 8003b88:	f002 fdeb 	bl	8006762 <HAL_DAC_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8003b92:	f000 fcff 	bl	8004594 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003b96:	2324      	movs	r3, #36	; 0x24
 8003b98:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4805      	ldr	r0, [pc, #20]	; (8003bbc <MX_DAC1_Init+0x4c>)
 8003ba6:	f002 fed9 	bl	800695c <HAL_DAC_ConfigChannel>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8003bb0:	f000 fcf0 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20008b68 	.word	0x20008b68
 8003bc0:	40007400 	.word	0x40007400

08003bc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bca:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <MX_SPI3_Init+0x78>)
 8003bcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bdc:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003be2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c12:	2207      	movs	r2, #7
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c1e:	2208      	movs	r2, #8
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c22:	4805      	ldr	r0, [pc, #20]	; (8003c38 <MX_SPI3_Init+0x74>)
 8003c24:	f006 fc9e 	bl	800a564 <HAL_SPI_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003c2e:	f000 fcb1 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20008bc0 	.word	0x20008bc0
 8003c3c:	40003c00 	.word	0x40003c00

08003c40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b09a      	sub	sp, #104	; 0x68
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	615a      	str	r2, [r3, #20]
 8003c72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	222c      	movs	r2, #44	; 0x2c
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f016 f9fe 	bl	801a07c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003c82:	4a4e      	ldr	r2, [pc, #312]	; (8003dbc <MX_TIM1_Init+0x17c>)
 8003c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8003c86:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003c88:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003c8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8003c94:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003c96:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ca2:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cae:	4842      	ldr	r0, [pc, #264]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003cb0:	f007 f9fe 	bl	800b0b0 <HAL_TIM_Base_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003cba:	f000 fc6b 	bl	8004594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cc8:	4619      	mov	r1, r3
 8003cca:	483b      	ldr	r0, [pc, #236]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003ccc:	f008 fa78 	bl	800c1c0 <HAL_TIM_ConfigClockSource>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003cd6:	f000 fc5d 	bl	8004594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cda:	4837      	ldr	r0, [pc, #220]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003cdc:	f007 fb24 	bl	800b328 <HAL_TIM_PWM_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8003ce6:	f000 fc55 	bl	8004594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cf6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	482e      	ldr	r0, [pc, #184]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003cfe:	f009 f9d5 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003d08:	f000 fc44 	bl	8004594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d0c:	2360      	movs	r3, #96	; 0x60
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000-1;
 8003d10:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d16:	2300      	movs	r3, #0
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003d1e:	2304      	movs	r3, #4
 8003d20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4619      	mov	r1, r3
 8003d32:	4821      	ldr	r0, [pc, #132]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003d34:	f008 f930 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8003d3e:	f000 fc29 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8003d5e:	23ff      	movs	r3, #255	; 0xff
 8003d60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	4619      	mov	r1, r3
 8003d88:	480b      	ldr	r0, [pc, #44]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003d8a:	f009 fa1b 	bl	800d1c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8003d94:	f000 fbfe 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003da8:	4803      	ldr	r0, [pc, #12]	; (8003db8 <MX_TIM1_Init+0x178>)
 8003daa:	f000 ff41 	bl	8004c30 <HAL_TIM_MspPostInit>

}
 8003dae:	bf00      	nop
 8003db0:	3768      	adds	r7, #104	; 0x68
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20008c24 	.word	0x20008c24
 8003dbc:	40012c00 	.word	0x40012c00

08003dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08e      	sub	sp, #56	; 0x38
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de0:	463b      	mov	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	611a      	str	r2, [r3, #16]
 8003dee:	615a      	str	r2, [r3, #20]
 8003df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2880-1;
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e08:	f640 323f 	movw	r2, #2879	; 0xb3f
 8003e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e14:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e1a:	4827      	ldr	r0, [pc, #156]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e1c:	f007 f948 	bl	800b0b0 <HAL_TIM_Base_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003e26:	f000 fbb5 	bl	8004594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e34:	4619      	mov	r1, r3
 8003e36:	4820      	ldr	r0, [pc, #128]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e38:	f008 f9c2 	bl	800c1c0 <HAL_TIM_ConfigClockSource>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003e42:	f000 fba7 	bl	8004594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e46:	481c      	ldr	r0, [pc, #112]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e48:	f007 fa6e 	bl	800b328 <HAL_TIM_PWM_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003e52:	f000 fb9f 	bl	8004594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e5e:	f107 031c 	add.w	r3, r7, #28
 8003e62:	4619      	mov	r1, r3
 8003e64:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e66:	f009 f921 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003e70:	f000 fb90 	bl	8004594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e74:	2360      	movs	r3, #96	; 0x60
 8003e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	2200      	movs	r2, #0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	480b      	ldr	r0, [pc, #44]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e8c:	f008 f884 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003e96:	f000 fb7d 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003eaa:	4803      	ldr	r0, [pc, #12]	; (8003eb8 <MX_TIM2_Init+0xf8>)
 8003eac:	f000 fec0 	bl	8004c30 <HAL_TIM_MspPostInit>

}
 8003eb0:	bf00      	nop
 8003eb2:	3738      	adds	r7, #56	; 0x38
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20008ce0 	.word	0x20008ce0

08003ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <MX_TIM3_Init+0x98>)
 8003ede:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003ee2:	2248      	movs	r2, #72	; 0x48
 8003ee4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003eee:	220a      	movs	r2, #10
 8003ef0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003efe:	4814      	ldr	r0, [pc, #80]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003f00:	f007 f8d6 	bl	800b0b0 <HAL_TIM_Base_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003f0a:	f000 fb43 	bl	8004594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	4619      	mov	r1, r3
 8003f1a:	480d      	ldr	r0, [pc, #52]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003f1c:	f008 f950 	bl	800c1c0 <HAL_TIM_ConfigClockSource>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003f26:	f000 fb35 	bl	8004594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4806      	ldr	r0, [pc, #24]	; (8003f50 <MX_TIM3_Init+0x94>)
 8003f38:	f009 f8b8 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003f42:	f000 fb27 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f46:	bf00      	nop
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20008d9c 	.word	0x20008d9c
 8003f54:	40000400 	.word	0x40000400

08003f58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08e      	sub	sp, #56	; 0x38
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6c:	f107 031c 	add.w	r3, r7, #28
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f78:	463b      	mov	r3, r7
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	615a      	str	r2, [r3, #20]
 8003f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003f8c:	4a31      	ldr	r2, [pc, #196]	; (8004054 <MX_TIM4_Init+0xfc>)
 8003f8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f90:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f96:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 8003f9c:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003f9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003fb0:	4827      	ldr	r0, [pc, #156]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003fb2:	f007 f87d 	bl	800b0b0 <HAL_TIM_Base_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003fbc:	f000 faea 	bl	8004594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4820      	ldr	r0, [pc, #128]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003fce:	f008 f8f7 	bl	800c1c0 <HAL_TIM_ConfigClockSource>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003fd8:	f000 fadc 	bl	8004594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003fdc:	481c      	ldr	r0, [pc, #112]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003fde:	f007 f9a3 	bl	800b328 <HAL_TIM_PWM_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003fe8:	f000 fad4 	bl	8004594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ff4:	f107 031c 	add.w	r3, r7, #28
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4815      	ldr	r0, [pc, #84]	; (8004050 <MX_TIM4_Init+0xf8>)
 8003ffc:	f009 f856 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004006:	f000 fac5 	bl	8004594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800400a:	2360      	movs	r3, #96	; 0x60
 800400c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800400e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004012:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800401c:	463b      	mov	r3, r7
 800401e:	2200      	movs	r2, #0
 8004020:	4619      	mov	r1, r3
 8004022:	480b      	ldr	r0, [pc, #44]	; (8004050 <MX_TIM4_Init+0xf8>)
 8004024:	f007 ffb8 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800402e:	f000 fab1 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <MX_TIM4_Init+0xf8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <MX_TIM4_Init+0xf8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0208 	bic.w	r2, r2, #8
 8004040:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004042:	4803      	ldr	r0, [pc, #12]	; (8004050 <MX_TIM4_Init+0xf8>)
 8004044:	f000 fdf4 	bl	8004c30 <HAL_TIM_MspPostInit>

}
 8004048:	bf00      	nop
 800404a:	3738      	adds	r7, #56	; 0x38
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20008e58 	.word	0x20008e58
 8004054:	40000800 	.word	0x40000800

08004058 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MX_TIM7_Init+0x64>)
 800406a:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <MX_TIM7_Init+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <MX_TIM7_Init+0x64>)
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <MX_TIM7_Init+0x64>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 300;
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <MX_TIM7_Init+0x64>)
 800407c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004080:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <MX_TIM7_Init+0x64>)
 8004084:	2200      	movs	r2, #0
 8004086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004088:	480c      	ldr	r0, [pc, #48]	; (80040bc <MX_TIM7_Init+0x64>)
 800408a:	f007 f811 	bl	800b0b0 <HAL_TIM_Base_Init>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004094:	f000 fa7e 	bl	8004594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004098:	2300      	movs	r3, #0
 800409a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4805      	ldr	r0, [pc, #20]	; (80040bc <MX_TIM7_Init+0x64>)
 80040a6:	f009 f801 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80040b0:	f000 fa70 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20008f14 	.word	0x20008f14
 80040c0:	40001400 	.word	0x40001400

080040c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b09a      	sub	sp, #104	; 0x68
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	605a      	str	r2, [r3, #4]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	611a      	str	r2, [r3, #16]
 80040f4:	615a      	str	r2, [r3, #20]
 80040f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	222c      	movs	r2, #44	; 0x2c
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f015 ffbc 	bl	801a07c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004104:	4b6b      	ldr	r3, [pc, #428]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004106:	4a6c      	ldr	r2, [pc, #432]	; (80042b8 <MX_TIM8_Init+0x1f4>)
 8004108:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800410a:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 800410c:	2201      	movs	r2, #1
 800410e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004110:	4b68      	ldr	r3, [pc, #416]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004112:	2220      	movs	r2, #32
 8004114:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 800;
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004118:	f44f 7248 	mov.w	r2, #800	; 0x320
 800411c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411e:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004124:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004126:	2200      	movs	r2, #0
 8004128:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412a:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004130:	4860      	ldr	r0, [pc, #384]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004132:	f006 ffbd 	bl	800b0b0 <HAL_TIM_Base_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800413c:	f000 fa2a 	bl	8004594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004144:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800414a:	4619      	mov	r1, r3
 800414c:	4859      	ldr	r0, [pc, #356]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 800414e:	f008 f837 	bl	800c1c0 <HAL_TIM_ConfigClockSource>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8004158:	f000 fa1c 	bl	8004594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800415c:	4855      	ldr	r0, [pc, #340]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 800415e:	f007 f8e3 	bl	800b328 <HAL_TIM_PWM_Init>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8004168:	f000 fa14 	bl	8004594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8004170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004174:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800417a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800417e:	4619      	mov	r1, r3
 8004180:	484c      	ldr	r0, [pc, #304]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004182:	f008 ff93 	bl	800d0ac <HAL_TIMEx_MasterConfigSynchronization>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800418c:	f000 fa02 	bl	8004594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8004190:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <MX_TIM8_Init+0x1f8>)
 8004192:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8004194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800419a:	2300      	movs	r3, #0
 800419c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800419e:	2300      	movs	r3, #0
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80041a2:	2304      	movs	r3, #4
 80041a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	4619      	mov	r1, r3
 80041b6:	483f      	ldr	r0, [pc, #252]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80041b8:	f007 feee 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 80041c2:	f000 f9e7 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 80041c6:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0208 	bic.w	r2, r2, #8
 80041d4:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041de:	2204      	movs	r2, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4834      	ldr	r0, [pc, #208]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80041e4:	f007 fed8 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80041ee:	f000 f9d1 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 500;
 8004202:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800420c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004210:	2208      	movs	r2, #8
 8004212:	4619      	mov	r1, r3
 8004214:	4827      	ldr	r0, [pc, #156]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004216:	f007 febf 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 8004220:	f000 f9b8 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_3);
 8004224:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0208 	bic.w	r2, r2, #8
 8004232:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800423c:	220c      	movs	r2, #12
 800423e:	4619      	mov	r1, r3
 8004240:	481c      	ldr	r0, [pc, #112]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004242:	f007 fea9 	bl	800bf98 <HAL_TIM_PWM_ConfigChannel>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 800424c:	f000 f9a2 	bl	8004594 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_4);
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800426c:	2364      	movs	r3, #100	; 0x64
 800426e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004278:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4807      	ldr	r0, [pc, #28]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 8004296:	f008 ff95 	bl	800d1c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM8_Init+0x1e0>
  {
    Error_Handler();
 80042a0:	f000 f978 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <MX_TIM8_Init+0x1f0>)
 80042a6:	f000 fcc3 	bl	8004c30 <HAL_TIM_MspPostInit>

}
 80042aa:	bf00      	nop
 80042ac:	3768      	adds	r7, #104	; 0x68
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20008fd0 	.word	0x20008fd0
 80042b8:	40013400 	.word	0x40013400
 80042bc:	00010060 	.word	0x00010060

080042c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <MX_USART2_UART_Init+0x5c>)
 80042c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80042d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042d8:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042e6:	220c      	movs	r2, #12
 80042e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f6:	4b08      	ldr	r3, [pc, #32]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <MX_USART2_UART_Init+0x58>)
 80042fe:	2200      	movs	r2, #0
 8004300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004302:	4805      	ldr	r0, [pc, #20]	; (8004318 <MX_USART2_UART_Init+0x58>)
 8004304:	f009 f831 	bl	800d36a <HAL_UART_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800430e:	f000 f941 	bl	8004594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200090d0 	.word	0x200090d0
 800431c:	40004400 	.word	0x40004400

08004320 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel4
  */
static void MX_DMA_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004326:	4b38      	ldr	r3, [pc, #224]	; (8004408 <MX_DMA_Init+0xe8>)
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4a37      	ldr	r2, [pc, #220]	; (8004408 <MX_DMA_Init+0xe8>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6153      	str	r3, [r2, #20]
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <MX_DMA_Init+0xe8>)
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800433e:	4b32      	ldr	r3, [pc, #200]	; (8004408 <MX_DMA_Init+0xe8>)
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4a31      	ldr	r2, [pc, #196]	; (8004408 <MX_DMA_Init+0xe8>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6153      	str	r3, [r2, #20]
 800434a:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <MX_DMA_Init+0xe8>)
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <MX_DMA_Init+0xec>)
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <MX_DMA_Init+0xf0>)
 800435a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <MX_DMA_Init+0xec>)
 800435e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004362:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <MX_DMA_Init+0xec>)
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 800436a:	4b28      	ldr	r3, [pc, #160]	; (800440c <MX_DMA_Init+0xec>)
 800436c:	2280      	movs	r2, #128	; 0x80
 800436e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004370:	4b26      	ldr	r3, [pc, #152]	; (800440c <MX_DMA_Init+0xec>)
 8004372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004376:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <MX_DMA_Init+0xec>)
 800437a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800437e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <MX_DMA_Init+0xec>)
 8004382:	2200      	movs	r2, #0
 8004384:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_HIGH;
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <MX_DMA_Init+0xec>)
 8004388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800438c:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 800438e:	481f      	ldr	r0, [pc, #124]	; (800440c <MX_DMA_Init+0xec>)
 8004390:	f002 fbbb 	bl	8006b0a <HAL_DMA_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 800439a:	f000 f8fb 	bl	8004594 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2100      	movs	r1, #0
 80043a2:	200b      	movs	r0, #11
 80043a4:	f002 f9a7 	bl	80066f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80043a8:	200b      	movs	r0, #11
 80043aa:	f002 f9c0 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2100      	movs	r1, #0
 80043b2:	200d      	movs	r0, #13
 80043b4:	f002 f99f 	bl	80066f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80043b8:	200d      	movs	r0, #13
 80043ba:	f002 f9b8 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80043be:	2200      	movs	r2, #0
 80043c0:	2100      	movs	r1, #0
 80043c2:	200f      	movs	r0, #15
 80043c4:	f002 f997 	bl	80066f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80043c8:	200f      	movs	r0, #15
 80043ca:	f002 f9b0 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2100      	movs	r1, #0
 80043d2:	2038      	movs	r0, #56	; 0x38
 80043d4:	f002 f98f 	bl	80066f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80043d8:	2038      	movs	r0, #56	; 0x38
 80043da:	f002 f9a8 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	2039      	movs	r0, #57	; 0x39
 80043e4:	f002 f987 	bl	80066f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80043e8:	2039      	movs	r0, #57	; 0x39
 80043ea:	f002 f9a0 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	203c      	movs	r0, #60	; 0x3c
 80043f4:	f002 f97f 	bl	80066f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80043f8:	203c      	movs	r0, #60	; 0x3c
 80043fa:	f002 f998 	bl	800672e <HAL_NVIC_EnableIRQ>

}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	20009158 	.word	0x20009158
 8004410:	40020044 	.word	0x40020044

08004414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441a:	f107 0314 	add.w	r3, r7, #20
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	60da      	str	r2, [r3, #12]
 8004428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800442a:	4b46      	ldr	r3, [pc, #280]	; (8004544 <MX_GPIO_Init+0x130>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	4a45      	ldr	r2, [pc, #276]	; (8004544 <MX_GPIO_Init+0x130>)
 8004430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004434:	6153      	str	r3, [r2, #20]
 8004436:	4b43      	ldr	r3, [pc, #268]	; (8004544 <MX_GPIO_Init+0x130>)
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004442:	4b40      	ldr	r3, [pc, #256]	; (8004544 <MX_GPIO_Init+0x130>)
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	4a3f      	ldr	r2, [pc, #252]	; (8004544 <MX_GPIO_Init+0x130>)
 8004448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800444c:	6153      	str	r3, [r2, #20]
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <MX_GPIO_Init+0x130>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <MX_GPIO_Init+0x130>)
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4a39      	ldr	r2, [pc, #228]	; (8004544 <MX_GPIO_Init+0x130>)
 8004460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004464:	6153      	str	r3, [r2, #20]
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <MX_GPIO_Init+0x130>)
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004472:	4b34      	ldr	r3, [pc, #208]	; (8004544 <MX_GPIO_Init+0x130>)
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4a33      	ldr	r2, [pc, #204]	; (8004544 <MX_GPIO_Init+0x130>)
 8004478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800447c:	6153      	str	r3, [r2, #20]
 800447e:	4b31      	ldr	r3, [pc, #196]	; (8004544 <MX_GPIO_Init+0x130>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 800448a:	2200      	movs	r2, #0
 800448c:	f44f 7166 	mov.w	r1, #920	; 0x398
 8004490:	482d      	ldr	r0, [pc, #180]	; (8004548 <MX_GPIO_Init+0x134>)
 8004492:	f002 fec9 	bl	8007228 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004496:	2200      	movs	r2, #0
 8004498:	2120      	movs	r1, #32
 800449a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800449e:	f002 fec3 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80044a2:	2200      	movs	r2, #0
 80044a4:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 80044a8:	4828      	ldr	r0, [pc, #160]	; (800454c <MX_GPIO_Init+0x138>)
 80044aa:	f002 febd 	bl	8007228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 80044ae:	f44f 7366 	mov.w	r3, #920	; 0x398
 80044b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b4:	2301      	movs	r3, #1
 80044b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	4619      	mov	r1, r3
 80044c6:	4820      	ldr	r0, [pc, #128]	; (8004548 <MX_GPIO_Init+0x134>)
 80044c8:	f002 fd0c 	bl	8006ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044cc:	2320      	movs	r3, #32
 80044ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d0:	2301      	movs	r3, #1
 80044d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d8:	2300      	movs	r3, #0
 80044da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	4619      	mov	r1, r3
 80044e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e6:	f002 fcfd 	bl	8006ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80044ea:	f248 0302 	movw	r3, #32770	; 0x8002
 80044ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4619      	mov	r1, r3
 80044fe:	4813      	ldr	r0, [pc, #76]	; (800454c <MX_GPIO_Init+0x138>)
 8004500:	f002 fcf0 	bl	8006ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004504:	2304      	movs	r3, #4
 8004506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004508:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800450c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4619      	mov	r1, r3
 8004518:	480c      	ldr	r0, [pc, #48]	; (800454c <MX_GPIO_Init+0x138>)
 800451a:	f002 fce3 	bl	8006ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 800451e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004524:	2301      	movs	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	4619      	mov	r1, r3
 8004536:	4805      	ldr	r0, [pc, #20]	; (800454c <MX_GPIO_Init+0x138>)
 8004538:	f002 fcd4 	bl	8006ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800453c:	bf00      	nop
 800453e:	3728      	adds	r7, #40	; 0x28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	48000800 	.word	0x48000800
 800454c:	48000400 	.word	0x48000400

08004550 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0b      	ldr	r2, [pc, #44]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10e      	bne.n	8004580 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  DMA1_Channel5->CCR &= ~DMA_CCR_EN;// disable
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6013      	str	r3, [r2, #0]
	  DMA1_Channel5->CNDTR = 249;
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004570:	22f9      	movs	r2, #249	; 0xf9
 8004572:	605a      	str	r2, [r3, #4]
	  DMA1_Channel5->CCR |= DMA_CCR_EN; // re-enable
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a05      	ldr	r2, [pc, #20]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6013      	str	r3, [r2, #0]
  }
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40020058 	.word	0x40020058

08004594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_MspInit+0x44>)
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <HAL_MspInit+0x44>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6193      	str	r3, [r2, #24]
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_MspInit+0x44>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_MspInit+0x44>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <HAL_MspInit+0x44>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	61d3      	str	r3, [r2, #28]
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_MspInit+0x44>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045da:	2007      	movs	r0, #7
 80045dc:	f002 f880 	bl	80066e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021000 	.word	0x40021000

080045ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b090      	sub	sp, #64	; 0x40
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800460c:	d157      	bne.n	80046be <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_ADC_MspInit+0x244>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a86      	ldr	r2, [pc, #536]	; (8004830 <HAL_ADC_MspInit+0x244>)
 8004616:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004618:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_ADC_MspInit+0x244>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10b      	bne.n	8004638 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004620:	4b84      	ldr	r3, [pc, #528]	; (8004834 <HAL_ADC_MspInit+0x248>)
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	4a83      	ldr	r2, [pc, #524]	; (8004834 <HAL_ADC_MspInit+0x248>)
 8004626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462a:	6153      	str	r3, [r2, #20]
 800462c:	4b81      	ldr	r3, [pc, #516]	; (8004834 <HAL_ADC_MspInit+0x248>)
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004638:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_ADC_MspInit+0x248>)
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4a7d      	ldr	r2, [pc, #500]	; (8004834 <HAL_ADC_MspInit+0x248>)
 800463e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004642:	6153      	str	r3, [r2, #20]
 8004644:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <HAL_ADC_MspInit+0x248>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004656:	2303      	movs	r3, #3
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004662:	4619      	mov	r1, r3
 8004664:	4874      	ldr	r0, [pc, #464]	; (8004838 <HAL_ADC_MspInit+0x24c>)
 8004666:	f002 fc3d 	bl	8006ee4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800466a:	4b74      	ldr	r3, [pc, #464]	; (800483c <HAL_ADC_MspInit+0x250>)
 800466c:	4a74      	ldr	r2, [pc, #464]	; (8004840 <HAL_ADC_MspInit+0x254>)
 800466e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004670:	4b72      	ldr	r3, [pc, #456]	; (800483c <HAL_ADC_MspInit+0x250>)
 8004672:	2200      	movs	r2, #0
 8004674:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004676:	4b71      	ldr	r3, [pc, #452]	; (800483c <HAL_ADC_MspInit+0x250>)
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800467c:	4b6f      	ldr	r3, [pc, #444]	; (800483c <HAL_ADC_MspInit+0x250>)
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004682:	4b6e      	ldr	r3, [pc, #440]	; (800483c <HAL_ADC_MspInit+0x250>)
 8004684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004688:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800468a:	4b6c      	ldr	r3, [pc, #432]	; (800483c <HAL_ADC_MspInit+0x250>)
 800468c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004690:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004692:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_ADC_MspInit+0x250>)
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <HAL_ADC_MspInit+0x250>)
 800469a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800469e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80046a0:	4866      	ldr	r0, [pc, #408]	; (800483c <HAL_ADC_MspInit+0x250>)
 80046a2:	f002 fa32 	bl	8006b0a <HAL_DMA_Init>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80046ac:	f7ff ff72 	bl	8004594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a62      	ldr	r2, [pc, #392]	; (800483c <HAL_ADC_MspInit+0x250>)
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
 80046b6:	4a61      	ldr	r2, [pc, #388]	; (800483c <HAL_ADC_MspInit+0x250>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80046bc:	e12e      	b.n	800491c <HAL_ADC_MspInit+0x330>
  else if(hadc->Instance==ADC2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a60      	ldr	r2, [pc, #384]	; (8004844 <HAL_ADC_MspInit+0x258>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d156      	bne.n	8004776 <HAL_ADC_MspInit+0x18a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80046c8:	4b59      	ldr	r3, [pc, #356]	; (8004830 <HAL_ADC_MspInit+0x244>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_ADC_MspInit+0x244>)
 80046d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <HAL_ADC_MspInit+0x244>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10b      	bne.n	80046f2 <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80046da:	4b56      	ldr	r3, [pc, #344]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a55      	ldr	r2, [pc, #340]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6153      	str	r3, [r2, #20]
 80046e6:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f2:	4b50      	ldr	r3, [pc, #320]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	4a4f      	ldr	r2, [pc, #316]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80046f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046fc:	6153      	str	r3, [r2, #20]
 80046fe:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <HAL_ADC_MspInit+0x248>)
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800470a:	2320      	movs	r3, #32
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800470e:	2303      	movs	r3, #3
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800471a:	4619      	mov	r1, r3
 800471c:	484a      	ldr	r0, [pc, #296]	; (8004848 <HAL_ADC_MspInit+0x25c>)
 800471e:	f002 fbe1 	bl	8006ee4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_ADC_MspInit+0x260>)
 8004724:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <HAL_ADC_MspInit+0x264>)
 8004726:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004728:	4b48      	ldr	r3, [pc, #288]	; (800484c <HAL_ADC_MspInit+0x260>)
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_ADC_MspInit+0x260>)
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004734:	4b45      	ldr	r3, [pc, #276]	; (800484c <HAL_ADC_MspInit+0x260>)
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800473a:	4b44      	ldr	r3, [pc, #272]	; (800484c <HAL_ADC_MspInit+0x260>)
 800473c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004740:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <HAL_ADC_MspInit+0x260>)
 8004744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004748:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800474a:	4b40      	ldr	r3, [pc, #256]	; (800484c <HAL_ADC_MspInit+0x260>)
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004750:	4b3e      	ldr	r3, [pc, #248]	; (800484c <HAL_ADC_MspInit+0x260>)
 8004752:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004756:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004758:	483c      	ldr	r0, [pc, #240]	; (800484c <HAL_ADC_MspInit+0x260>)
 800475a:	f002 f9d6 	bl	8006b0a <HAL_DMA_Init>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_ADC_MspInit+0x17c>
      Error_Handler();
 8004764:	f7ff ff16 	bl	8004594 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a38      	ldr	r2, [pc, #224]	; (800484c <HAL_ADC_MspInit+0x260>)
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <HAL_ADC_MspInit+0x260>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004774:	e0d2      	b.n	800491c <HAL_ADC_MspInit+0x330>
  else if(hadc->Instance==ADC3)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a36      	ldr	r2, [pc, #216]	; (8004854 <HAL_ADC_MspInit+0x268>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d171      	bne.n	8004864 <HAL_ADC_MspInit+0x278>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8004780:	4b35      	ldr	r3, [pc, #212]	; (8004858 <HAL_ADC_MspInit+0x26c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	4a34      	ldr	r2, [pc, #208]	; (8004858 <HAL_ADC_MspInit+0x26c>)
 8004788:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800478a:	4b33      	ldr	r3, [pc, #204]	; (8004858 <HAL_ADC_MspInit+0x26c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d10b      	bne.n	80047aa <HAL_ADC_MspInit+0x1be>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_ADC_MspInit+0x248>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4a27      	ldr	r2, [pc, #156]	; (8004834 <HAL_ADC_MspInit+0x248>)
 8004798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800479c:	6153      	str	r3, [r2, #20]
 800479e:	4b25      	ldr	r3, [pc, #148]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047aa:	4b22      	ldr	r3, [pc, #136]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	4a21      	ldr	r2, [pc, #132]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b4:	6153      	str	r3, [r2, #20]
 80047b6:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <HAL_ADC_MspInit+0x248>)
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047c2:	2301      	movs	r3, #1
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047c6:	2303      	movs	r3, #3
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047d2:	4619      	mov	r1, r3
 80047d4:	4818      	ldr	r0, [pc, #96]	; (8004838 <HAL_ADC_MspInit+0x24c>)
 80047d6:	f002 fb85 	bl	8006ee4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80047da:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_ADC_MspInit+0x270>)
 80047dc:	4a20      	ldr	r2, [pc, #128]	; (8004860 <HAL_ADC_MspInit+0x274>)
 80047de:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047e0:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_ADC_MspInit+0x270>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_ADC_MspInit+0x270>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_ADC_MspInit+0x270>)
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_ADC_MspInit+0x270>)
 80047f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <HAL_ADC_MspInit+0x270>)
 80047fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004800:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8004802:	4b16      	ldr	r3, [pc, #88]	; (800485c <HAL_ADC_MspInit+0x270>)
 8004804:	2200      	movs	r2, #0
 8004806:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004808:	4b14      	ldr	r3, [pc, #80]	; (800485c <HAL_ADC_MspInit+0x270>)
 800480a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800480e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004810:	4812      	ldr	r0, [pc, #72]	; (800485c <HAL_ADC_MspInit+0x270>)
 8004812:	f002 f97a 	bl	8006b0a <HAL_DMA_Init>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_ADC_MspInit+0x234>
      Error_Handler();
 800481c:	f7ff feba 	bl	8004594 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <HAL_ADC_MspInit+0x270>)
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
 8004826:	4a0d      	ldr	r2, [pc, #52]	; (800485c <HAL_ADC_MspInit+0x270>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800482c:	e076      	b.n	800491c <HAL_ADC_MspInit+0x330>
 800482e:	bf00      	nop
 8004830:	2000994c 	.word	0x2000994c
 8004834:	40021000 	.word	0x40021000
 8004838:	48000400 	.word	0x48000400
 800483c:	20008a58 	.word	0x20008a58
 8004840:	40020008 	.word	0x40020008
 8004844:	50000100 	.word	0x50000100
 8004848:	48000800 	.word	0x48000800
 800484c:	20008a9c 	.word	0x20008a9c
 8004850:	40020408 	.word	0x40020408
 8004854:	50000400 	.word	0x50000400
 8004858:	20009950 	.word	0x20009950
 800485c:	20008ae0 	.word	0x20008ae0
 8004860:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2e      	ldr	r2, [pc, #184]	; (8004924 <HAL_ADC_MspInit+0x338>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d156      	bne.n	800491c <HAL_ADC_MspInit+0x330>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800486e:	4b2e      	ldr	r3, [pc, #184]	; (8004928 <HAL_ADC_MspInit+0x33c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <HAL_ADC_MspInit+0x33c>)
 8004876:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8004878:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <HAL_ADC_MspInit+0x33c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10b      	bne.n	8004898 <HAL_ADC_MspInit+0x2ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8004880:	4b2a      	ldr	r3, [pc, #168]	; (800492c <HAL_ADC_MspInit+0x340>)
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <HAL_ADC_MspInit+0x340>)
 8004886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800488a:	6153      	str	r3, [r2, #20]
 800488c:	4b27      	ldr	r3, [pc, #156]	; (800492c <HAL_ADC_MspInit+0x340>)
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004898:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_ADC_MspInit+0x340>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <HAL_ADC_MspInit+0x340>)
 800489e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a2:	6153      	str	r3, [r2, #20]
 80048a4:	4b21      	ldr	r3, [pc, #132]	; (800492c <HAL_ADC_MspInit+0x340>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80048b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b6:	2303      	movs	r3, #3
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c2:	4619      	mov	r1, r3
 80048c4:	481a      	ldr	r0, [pc, #104]	; (8004930 <HAL_ADC_MspInit+0x344>)
 80048c6:	f002 fb0d 	bl	8006ee4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80048ca:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_ADC_MspInit+0x34c>)
 80048ce:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d6:	4b17      	ldr	r3, [pc, #92]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80048dc:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e8:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048f0:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_ADC_MspInit+0x348>)
 80048fa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80048fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8004900:	480c      	ldr	r0, [pc, #48]	; (8004934 <HAL_ADC_MspInit+0x348>)
 8004902:	f002 f902 	bl	8006b0a <HAL_DMA_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_ADC_MspInit+0x324>
      Error_Handler();
 800490c:	f7ff fe42 	bl	8004594 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <HAL_ADC_MspInit+0x348>)
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
 8004916:	4a07      	ldr	r2, [pc, #28]	; (8004934 <HAL_ADC_MspInit+0x348>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800491c:	bf00      	nop
 800491e:	3740      	adds	r7, #64	; 0x40
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	50000500 	.word	0x50000500
 8004928:	20009950 	.word	0x20009950
 800492c:	40021000 	.word	0x40021000
 8004930:	48000400 	.word	0x48000400
 8004934:	20008b24 	.word	0x20008b24
 8004938:	4002041c 	.word	0x4002041c

0800493c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <HAL_DAC_MspInit+0xd0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d152      	bne.n	8004a04 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <HAL_DAC_MspInit+0xd4>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <HAL_DAC_MspInit+0xd4>)
 8004964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004968:	61d3      	str	r3, [r2, #28]
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <HAL_DAC_MspInit+0xd4>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004976:	4b26      	ldr	r3, [pc, #152]	; (8004a10 <HAL_DAC_MspInit+0xd4>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <HAL_DAC_MspInit+0xd4>)
 800497c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004980:	6153      	str	r3, [r2, #20]
 8004982:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <HAL_DAC_MspInit+0xd4>)
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800498e:	2310      	movs	r3, #16
 8004990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004992:	2303      	movs	r3, #3
 8004994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	4619      	mov	r1, r3
 80049a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a4:	f002 fa9e 	bl	8006ee4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049aa:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_DAC_MspInit+0xdc>)
 80049ac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049b0:	2210      	movs	r2, #16
 80049b2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049c8:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ce:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049d2:	2220      	movs	r2, #32
 80049d4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80049dc:	480d      	ldr	r0, [pc, #52]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049de:	f002 f894 	bl	8006b0a <HAL_DMA_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80049e8:	f7ff fdd4 	bl	8004594 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_DAC_MspInit+0xe0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <HAL_DAC_MspInit+0xe0>)
 80049f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049f6:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a06      	ldr	r2, [pc, #24]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <HAL_DAC_MspInit+0xd8>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004a04:	bf00      	nop
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40007400 	.word	0x40007400
 8004a10:	40021000 	.word	0x40021000
 8004a14:	20008b7c 	.word	0x20008b7c
 8004a18:	40020030 	.word	0x40020030
 8004a1c:	40010000 	.word	0x40010000

08004a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_SPI_MspInit+0x7c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d128      	bne.n	8004a94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_SPI_MspInit+0x80>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <HAL_SPI_MspInit+0x80>)
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	61d3      	str	r3, [r2, #28]
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_SPI_MspInit+0x80>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_SPI_MspInit+0x80>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4a10      	ldr	r2, [pc, #64]	; (8004aa0 <HAL_SPI_MspInit+0x80>)
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	6153      	str	r3, [r2, #20]
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_SPI_MspInit+0x80>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004a72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a80:	2303      	movs	r3, #3
 8004a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a84:	2306      	movs	r3, #6
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <HAL_SPI_MspInit+0x84>)
 8004a90:	f002 fa28 	bl	8006ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004a94:	bf00      	nop
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40003c00 	.word	0x40003c00
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	48000800 	.word	0x48000800

08004aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <HAL_TIM_Base_MspInit+0x168>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d114      	bne.n	8004ae4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004aba:	4b56      	ldr	r3, [pc, #344]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	4a55      	ldr	r2, [pc, #340]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ac4:	6193      	str	r3, [r2, #24]
 8004ac6:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	2019      	movs	r0, #25
 8004ad8:	f001 fe0d 	bl	80066f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004adc:	2019      	movs	r0, #25
 8004ade:	f001 fe26 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004ae2:	e091      	b.n	8004c08 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d135      	bne.n	8004b5a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004aee:	4b49      	ldr	r3, [pc, #292]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4a48      	ldr	r2, [pc, #288]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	61d3      	str	r3, [r2, #28]
 8004afa:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8004b06:	4b44      	ldr	r3, [pc, #272]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b08:	4a44      	ldr	r2, [pc, #272]	; (8004c1c <HAL_TIM_Base_MspInit+0x174>)
 8004b0a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b0e:	2210      	movs	r2, #16
 8004b10:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004b18:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b24:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b26:	4b3c      	ldr	r3, [pc, #240]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b2c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8004b2e:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b30:	2220      	movs	r2, #32
 8004b32:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004b34:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b36:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8004b3c:	4836      	ldr	r0, [pc, #216]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b3e:	f001 ffe4 	bl	8006b0a <HAL_DMA_Init>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8004b48:	f7ff fd24 	bl	8004594 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
 8004b52:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <HAL_TIM_Base_MspInit+0x170>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004b58:	e056      	b.n	8004c08 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM3)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a30      	ldr	r2, [pc, #192]	; (8004c20 <HAL_TIM_Base_MspInit+0x178>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d114      	bne.n	8004b8e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	61d3      	str	r3, [r2, #28]
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 7);
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	2100      	movs	r1, #0
 8004b80:	201d      	movs	r0, #29
 8004b82:	f001 fdb8 	bl	80066f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b86:	201d      	movs	r0, #29
 8004b88:	f001 fdd1 	bl	800672e <HAL_NVIC_EnableIRQ>
}
 8004b8c:	e03c      	b.n	8004c08 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM4)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <HAL_TIM_Base_MspInit+0x17c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b98:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	61d3      	str	r3, [r2, #28]
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	693b      	ldr	r3, [r7, #16]
}
 8004bb0:	e02a      	b.n	8004c08 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM7)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <HAL_TIM_Base_MspInit+0x180>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d114      	bne.n	8004be6 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	61d3      	str	r3, [r2, #28]
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2037      	movs	r0, #55	; 0x37
 8004bda:	f001 fd8c 	bl	80066f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004bde:	2037      	movs	r0, #55	; 0x37
 8004be0:	f001 fda5 	bl	800672e <HAL_NVIC_EnableIRQ>
}
 8004be4:	e010      	b.n	8004c08 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <HAL_TIM_Base_MspInit+0x184>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10b      	bne.n	8004c08 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bfa:	6193      	str	r3, [r2, #24]
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_TIM_Base_MspInit+0x16c>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40021000 	.word	0x40021000
 8004c18:	2000908c 	.word	0x2000908c
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40001400 	.word	0x40001400
 8004c2c:	40013400 	.word	0x40013400

08004c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08e      	sub	sp, #56	; 0x38
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a72      	ldr	r2, [pc, #456]	; (8004e18 <HAL_TIM_MspPostInit+0x1e8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d12d      	bne.n	8004cae <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c52:	4b72      	ldr	r3, [pc, #456]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	4a71      	ldr	r2, [pc, #452]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c5c:	6153      	str	r3, [r2, #20]
 8004c5e:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c70:	2302      	movs	r3, #2
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c84:	4619      	mov	r1, r3
 8004c86:	4866      	ldr	r0, [pc, #408]	; (8004e20 <HAL_TIM_MspPostInit+0x1f0>)
 8004c88:	f002 f92c 	bl	8006ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	485e      	ldr	r0, [pc, #376]	; (8004e20 <HAL_TIM_MspPostInit+0x1f0>)
 8004ca8:	f002 f91c 	bl	8006ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004cac:	e0af      	b.n	8004e0e <HAL_TIM_MspPostInit+0x1de>
  else if(htim->Instance==TIM2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d11d      	bne.n	8004cf4 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	4b58      	ldr	r3, [pc, #352]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	4a57      	ldr	r2, [pc, #348]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc2:	6153      	str	r3, [r2, #20]
 8004cc4:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = SPWM_SemicicloPositivo_Pin;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPWM_SemicicloPositivo_GPIO_Port, &GPIO_InitStruct);
 8004ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cee:	f002 f8f9 	bl	8006ee4 <HAL_GPIO_Init>
}
 8004cf2:	e08c      	b.n	8004e0e <HAL_TIM_MspPostInit+0x1de>
  else if(htim->Instance==TIM4)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	; (8004e24 <HAL_TIM_MspPostInit+0x1f4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d11c      	bne.n	8004d38 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4a46      	ldr	r2, [pc, #280]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d08:	6153      	str	r3, [r2, #20]
 8004d0a:	4b44      	ldr	r3, [pc, #272]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d16:	2340      	movs	r3, #64	; 0x40
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d22:	2300      	movs	r3, #0
 8004d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d26:	2302      	movs	r3, #2
 8004d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2e:	4619      	mov	r1, r3
 8004d30:	483d      	ldr	r0, [pc, #244]	; (8004e28 <HAL_TIM_MspPostInit+0x1f8>)
 8004d32:	f002 f8d7 	bl	8006ee4 <HAL_GPIO_Init>
}
 8004d36:	e06a      	b.n	8004e0e <HAL_TIM_MspPostInit+0x1de>
  else if(htim->Instance==TIM8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3b      	ldr	r2, [pc, #236]	; (8004e2c <HAL_TIM_MspPostInit+0x1fc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d165      	bne.n	8004e0e <HAL_TIM_MspPostInit+0x1de>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4a35      	ldr	r2, [pc, #212]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	6153      	str	r3, [r2, #20]
 8004d4e:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d5a:	4b30      	ldr	r3, [pc, #192]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d64:	6153      	str	r3, [r2, #20]
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d7c:	6153      	str	r3, [r2, #20]
 8004d7e:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <HAL_TIM_MspPostInit+0x1ec>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2300      	movs	r3, #0
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da8:	f002 f89c 	bl	8006ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db0:	2302      	movs	r3, #2
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db8:	2300      	movs	r3, #0
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4816      	ldr	r0, [pc, #88]	; (8004e20 <HAL_TIM_MspPostInit+0x1f0>)
 8004dc8:	f002 f88c 	bl	8006ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004dcc:	2320      	movs	r3, #32
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de4:	4619      	mov	r1, r3
 8004de6:	4810      	ldr	r0, [pc, #64]	; (8004e28 <HAL_TIM_MspPostInit+0x1f8>)
 8004de8:	f002 f87c 	bl	8006ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df2:	2302      	movs	r3, #2
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004dfe:	230a      	movs	r3, #10
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e06:	4619      	mov	r1, r3
 8004e08:	4807      	ldr	r0, [pc, #28]	; (8004e28 <HAL_TIM_MspPostInit+0x1f8>)
 8004e0a:	f002 f86b 	bl	8006ee4 <HAL_GPIO_Init>
}
 8004e0e:	bf00      	nop
 8004e10:	3738      	adds	r7, #56	; 0x38
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	48000800 	.word	0x48000800
 8004e24:	40000800 	.word	0x40000800
 8004e28:	48000400 	.word	0x48000400
 8004e2c:	40013400 	.word	0x40013400

08004e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a17      	ldr	r2, [pc, #92]	; (8004eac <HAL_UART_MspInit+0x7c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d128      	bne.n	8004ea4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <HAL_UART_MspInit+0x80>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <HAL_UART_MspInit+0x80>)
 8004e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5c:	61d3      	str	r3, [r2, #28]
 8004e5e:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_UART_MspInit+0x80>)
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_UART_MspInit+0x80>)
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <HAL_UART_MspInit+0x80>)
 8004e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e74:	6153      	str	r3, [r2, #20]
 8004e76:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <HAL_UART_MspInit+0x80>)
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e82:	230c      	movs	r3, #12
 8004e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e86:	2302      	movs	r3, #2
 8004e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e92:	2307      	movs	r3, #7
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e96:	f107 0314 	add.w	r3, r7, #20
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ea0:	f002 f820 	bl	8006ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ea4:	bf00      	nop
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <SDTimer_Handler+0x38>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <SDTimer_Handler+0x18>
    Timer1--;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <SDTimer_Handler+0x38>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <SDTimer_Handler+0x38>)
 8004eca:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004ecc:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <SDTimer_Handler+0x3c>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <SDTimer_Handler+0x2c>
    Timer2--;
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <SDTimer_Handler+0x3c>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <SDTimer_Handler+0x3c>)
 8004ede:	701a      	strb	r2, [r3, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20009955 	.word	0x20009955
 8004ef0:	20009956 	.word	0x20009956

08004ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f06:	e7fe      	b.n	8004f06 <HardFault_Handler+0x4>

08004f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <MemManage_Handler+0x4>

08004f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f12:	e7fe      	b.n	8004f12 <BusFault_Handler+0x4>

08004f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f18:	e7fe      	b.n	8004f18 <UsageFault_Handler+0x4>

08004f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
 FatFsCnt++;
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <SysTick_Handler+0x2c>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <SysTick_Handler+0x2c>)
 8004f52:	701a      	strb	r2, [r3, #0]
 if(FatFsCnt >= 10)
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <SysTick_Handler+0x2c>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d904      	bls.n	8004f66 <SysTick_Handler+0x22>
 {
   FatFsCnt = 0;
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <SysTick_Handler+0x2c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
   SDTimer_Handler();
 8004f62:	f7ff ffa7 	bl	8004eb4 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f66:	f000 f94f 	bl	8005208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20009954 	.word	0x20009954

08004f74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f78:	4802      	ldr	r0, [pc, #8]	; (8004f84 <DMA1_Channel1_IRQHandler+0x10>)
 8004f7a:	f001 fea5 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20008a58 	.word	0x20008a58

08004f88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004f8c:	4802      	ldr	r0, [pc, #8]	; (8004f98 <DMA1_Channel3_IRQHandler+0x10>)
 8004f8e:	f001 fe9b 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20008b7c 	.word	0x20008b7c

08004f9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8004fa0:	4802      	ldr	r0, [pc, #8]	; (8004fac <DMA1_Channel5_IRQHandler+0x10>)
 8004fa2:	f001 fe91 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2000908c 	.word	0x2000908c

08004fb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fb4:	4802      	ldr	r0, [pc, #8]	; (8004fc0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004fb6:	f006 fead 	bl	800bd14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20008c24 	.word	0x20008c24

08004fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004fc8:	4802      	ldr	r0, [pc, #8]	; (8004fd4 <TIM3_IRQHandler+0x10>)
 8004fca:	f006 fea3 	bl	800bd14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20008d9c 	.word	0x20008d9c

08004fd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004fdc:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <TIM7_IRQHandler+0x10>)
 8004fde:	f006 fe99 	bl	800bd14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20008f14 	.word	0x20008f14

08004fec <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004ff0:	4802      	ldr	r0, [pc, #8]	; (8004ffc <DMA2_Channel1_IRQHandler+0x10>)
 8004ff2:	f001 fe69 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20008a9c 	.word	0x20008a9c

08005000 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8005004:	4802      	ldr	r0, [pc, #8]	; (8005010 <DMA2_Channel2_IRQHandler+0x10>)
 8005006:	f001 fe5f 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20008b24 	.word	0x20008b24

08005014 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <DMA2_Channel5_IRQHandler+0x10>)
 800501a:	f001 fe55 	bl	8006cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20008ae0 	.word	0x20008ae0

08005028 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <USB_LP_IRQHandler+0x10>)
 800502e:	f002 fa25 	bl	800747c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	2000c5d0 	.word	0x2000c5d0

0800503c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <_sbrk+0x50>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <_sbrk+0x16>
		heap_end = &end;
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <_sbrk+0x50>)
 800504e:	4a10      	ldr	r2, [pc, #64]	; (8005090 <_sbrk+0x54>)
 8005050:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <_sbrk+0x50>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <_sbrk+0x50>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	466a      	mov	r2, sp
 8005062:	4293      	cmp	r3, r2
 8005064:	d907      	bls.n	8005076 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005066:	f015 f811 	bl	801a08c <__errno>
 800506a:	4603      	mov	r3, r0
 800506c:	220c      	movs	r2, #12
 800506e:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
 8005074:	e006      	b.n	8005084 <_sbrk+0x48>
	}

	heap_end += incr;
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <_sbrk+0x50>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	4a03      	ldr	r2, [pc, #12]	; (800508c <_sbrk+0x50>)
 8005080:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8005082:	68fb      	ldr	r3, [r7, #12]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20009958 	.word	0x20009958
 8005090:	2000cc28 	.word	0x2000cc28

08005094 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <SystemInit+0x84>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <SystemInit+0x84>)
 80050a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <SystemInit+0x88>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <SystemInit+0x88>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <SystemInit+0x88>)
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4918      	ldr	r1, [pc, #96]	; (800511c <SystemInit+0x88>)
 80050ba:	4b19      	ldr	r3, [pc, #100]	; (8005120 <SystemInit+0x8c>)
 80050bc:	4013      	ands	r3, r2
 80050be:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80050c0:	4b16      	ldr	r3, [pc, #88]	; (800511c <SystemInit+0x88>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a15      	ldr	r2, [pc, #84]	; (800511c <SystemInit+0x88>)
 80050c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80050d0:	4b12      	ldr	r3, [pc, #72]	; (800511c <SystemInit+0x88>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a11      	ldr	r2, [pc, #68]	; (800511c <SystemInit+0x88>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <SystemInit+0x88>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a0e      	ldr	r2, [pc, #56]	; (800511c <SystemInit+0x88>)
 80050e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80050e6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <SystemInit+0x88>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <SystemInit+0x88>)
 80050ee:	f023 030f 	bic.w	r3, r3, #15
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <SystemInit+0x88>)
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	4908      	ldr	r1, [pc, #32]	; (800511c <SystemInit+0x88>)
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <SystemInit+0x90>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <SystemInit+0x88>)
 8005102:	2200      	movs	r2, #0
 8005104:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <SystemInit+0x84>)
 8005108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800510c:	609a      	str	r2, [r3, #8]
#endif
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	e000ed00 	.word	0xe000ed00
 800511c:	40021000 	.word	0x40021000
 8005120:	f87fc00c 	.word	0xf87fc00c
 8005124:	ff00fccc 	.word	0xff00fccc

08005128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005160 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800512c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800512e:	e003      	b.n	8005138 <LoopCopyDataInit>

08005130 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005132:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005134:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005136:	3104      	adds	r1, #4

08005138 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005138:	480b      	ldr	r0, [pc, #44]	; (8005168 <LoopForever+0xa>)
	ldr	r3, =_edata
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <LoopForever+0xe>)
	adds	r2, r0, r1
 800513c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800513e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005140:	d3f6      	bcc.n	8005130 <CopyDataInit>
	ldr	r2, =_sbss
 8005142:	4a0b      	ldr	r2, [pc, #44]	; (8005170 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005144:	e002      	b.n	800514c <LoopFillZerobss>

08005146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005146:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005148:	f842 3b04 	str.w	r3, [r2], #4

0800514c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <LoopForever+0x16>)
	cmp	r2, r3
 800514e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005150:	d3f9      	bcc.n	8005146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005152:	f7ff ff9f 	bl	8005094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005156:	f014 ff9f 	bl	801a098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800515a:	f7fe fa39 	bl	80035d0 <main>

0800515e <LoopForever>:

LoopForever:
    b LoopForever
 800515e:	e7fe      	b.n	800515e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005160:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8005164:	0801dfc0 	.word	0x0801dfc0
	ldr	r0, =_sdata
 8005168:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800516c:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8005170:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8005174:	2000cc24 	.word	0x2000cc24

08005178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005178:	e7fe      	b.n	8005178 <ADC1_2_IRQHandler>
	...

0800517c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005180:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_Init+0x28>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a07      	ldr	r2, [pc, #28]	; (80051a4 <HAL_Init+0x28>)
 8005186:	f043 0310 	orr.w	r3, r3, #16
 800518a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800518c:	2003      	movs	r0, #3
 800518e:	f001 faa7 	bl	80066e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005192:	2000      	movs	r0, #0
 8005194:	f000 f808 	bl	80051a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005198:	f7ff fa04 	bl	80045a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40022000 	.word	0x40022000

080051a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_InitTick+0x54>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b12      	ldr	r3, [pc, #72]	; (8005200 <HAL_InitTick+0x58>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	4619      	mov	r1, r3
 80051ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051be:	fbb3 f3f1 	udiv	r3, r3, r1
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fabf 	bl	800674a <HAL_SYSTICK_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e00e      	b.n	80051f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b0f      	cmp	r3, #15
 80051da:	d80a      	bhi.n	80051f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051dc:	2200      	movs	r2, #0
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	f001 fa87 	bl	80066f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051e8:	4a06      	ldr	r2, [pc, #24]	; (8005204 <HAL_InitTick+0x5c>)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000004 	.word	0x20000004
 8005200:	2000000c 	.word	0x2000000c
 8005204:	20000008 	.word	0x20000008

08005208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_IncTick+0x20>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_IncTick+0x24>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4413      	add	r3, r2
 8005218:	4a04      	ldr	r2, [pc, #16]	; (800522c <HAL_IncTick+0x24>)
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c
 800522c:	2000995c 	.word	0x2000995c

08005230 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return uwTick;  
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <HAL_GetTick+0x14>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000995c 	.word	0x2000995c

08005248 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005250:	f7ff ffee 	bl	8005230 <HAL_GetTick>
 8005254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d005      	beq.n	800526e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_Delay+0x44>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800526e:	bf00      	nop
 8005270:	f7ff ffde 	bl	8005230 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	429a      	cmp	r2, r3
 800527e:	d8f7      	bhi.n	8005270 <HAL_Delay+0x28>
  {
  }
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2000000c 	.word	0x2000000c

08005290 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b09a      	sub	sp, #104	; 0x68
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e1e3      	b.n	80056b4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d176      	bne.n	80053ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d152      	bne.n	80053ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff f963 	bl	80045ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d13b      	bne.n	80053ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 ffe7 	bl	8006308 <ADC_Disable>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d12f      	bne.n	80053ac <HAL_ADC_Init+0xe0>
 800534c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005350:	2b00      	cmp	r3, #0
 8005352:	d12b      	bne.n	80053ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800535c:	f023 0302 	bic.w	r3, r3, #2
 8005360:	f043 0202 	orr.w	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005376:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005386:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005388:	4b92      	ldr	r3, [pc, #584]	; (80055d4 <HAL_ADC_Init+0x308>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a92      	ldr	r2, [pc, #584]	; (80055d8 <HAL_ADC_Init+0x30c>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	0c9a      	lsrs	r2, r3, #18
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800539e:	e002      	b.n	80053a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f9      	bne.n	80053a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80053c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c8:	d110      	bne.n	80053ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f023 0312 	bic.w	r3, r3, #18
 80053d2:	f043 0210 	orr.w	r2, r3, #16
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f043 0201 	orr.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 8150 	bne.w	800569a <HAL_ADC_Init+0x3ce>
 80053fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 814b 	bne.w	800569a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 8143 	bne.w	800569a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800541c:	f043 0202 	orr.w	r2, r3, #2
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800542c:	d004      	beq.n	8005438 <HAL_ADC_Init+0x16c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6a      	ldr	r2, [pc, #424]	; (80055dc <HAL_ADC_Init+0x310>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_ADC_Init+0x170>
 8005438:	4b69      	ldr	r3, [pc, #420]	; (80055e0 <HAL_ADC_Init+0x314>)
 800543a:	e000      	b.n	800543e <HAL_ADC_Init+0x172>
 800543c:	4b69      	ldr	r3, [pc, #420]	; (80055e4 <HAL_ADC_Init+0x318>)
 800543e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005448:	d102      	bne.n	8005450 <HAL_ADC_Init+0x184>
 800544a:	4b64      	ldr	r3, [pc, #400]	; (80055dc <HAL_ADC_Init+0x310>)
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e01a      	b.n	8005486 <HAL_ADC_Init+0x1ba>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a61      	ldr	r2, [pc, #388]	; (80055dc <HAL_ADC_Init+0x310>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d103      	bne.n	8005462 <HAL_ADC_Init+0x196>
 800545a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e011      	b.n	8005486 <HAL_ADC_Init+0x1ba>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a60      	ldr	r2, [pc, #384]	; (80055e8 <HAL_ADC_Init+0x31c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d102      	bne.n	8005472 <HAL_ADC_Init+0x1a6>
 800546c:	4b5f      	ldr	r3, [pc, #380]	; (80055ec <HAL_ADC_Init+0x320>)
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e009      	b.n	8005486 <HAL_ADC_Init+0x1ba>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a5d      	ldr	r2, [pc, #372]	; (80055ec <HAL_ADC_Init+0x320>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d102      	bne.n	8005482 <HAL_ADC_Init+0x1b6>
 800547c:	4b5a      	ldr	r3, [pc, #360]	; (80055e8 <HAL_ADC_Init+0x31c>)
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e001      	b.n	8005486 <HAL_ADC_Init+0x1ba>
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d108      	bne.n	80054a6 <HAL_ADC_Init+0x1da>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_ADC_Init+0x1da>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <HAL_ADC_Init+0x1dc>
 80054a6:	2300      	movs	r3, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11c      	bne.n	80054e6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80054ac:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d010      	beq.n	80054d4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d107      	bne.n	80054ce <HAL_ADC_Init+0x202>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_ADC_Init+0x202>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <HAL_ADC_Init+0x204>
 80054ce:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d108      	bne.n	80054e6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80054d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7e5b      	ldrb	r3, [r3, #25]
 80054ea:	035b      	lsls	r3, r3, #13
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054f0:	2a01      	cmp	r2, #1
 80054f2:	d002      	beq.n	80054fa <HAL_ADC_Init+0x22e>
 80054f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054f8:	e000      	b.n	80054fc <HAL_ADC_Init+0x230>
 80054fa:	2200      	movs	r2, #0
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800550c:	4313      	orrs	r3, r2
 800550e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d11b      	bne.n	8005552 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	7e5b      	ldrb	r3, [r3, #25]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	3b01      	subs	r3, #1
 8005528:	045a      	lsls	r2, r3, #17
 800552a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552c:	4313      	orrs	r3, r2
 800552e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005532:	663b      	str	r3, [r7, #96]	; 0x60
 8005534:	e00d      	b.n	8005552 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f043 0201 	orr.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	2b01      	cmp	r3, #1
 8005558:	d054      	beq.n	8005604 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <HAL_ADC_Init+0x31c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_ADC_Init+0x2a2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <HAL_ADC_Init+0x320>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d140      	bne.n	80055f0 <HAL_ADC_Init+0x324>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005576:	d02a      	beq.n	80055ce <HAL_ADC_Init+0x302>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005580:	d022      	beq.n	80055c8 <HAL_ADC_Init+0x2fc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800558a:	d01a      	beq.n	80055c2 <HAL_ADC_Init+0x2f6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8005594:	d012      	beq.n	80055bc <HAL_ADC_Init+0x2f0>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800559e:	d00a      	beq.n	80055b6 <HAL_ADC_Init+0x2ea>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80055a8:	d002      	beq.n	80055b0 <HAL_ADC_Init+0x2e4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	e023      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80055b4:	e020      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80055ba:	e01d      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80055c0:	e01a      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c6:	e017      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80055cc:	e014      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80055d2:	e011      	b.n	80055f8 <HAL_ADC_Init+0x32c>
 80055d4:	20000004 	.word	0x20000004
 80055d8:	431bde83 	.word	0x431bde83
 80055dc:	50000100 	.word	0x50000100
 80055e0:	50000300 	.word	0x50000300
 80055e4:	50000700 	.word	0x50000700
 80055e8:	50000400 	.word	0x50000400
 80055ec:	50000500 	.word	0x50000500
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055fc:	4313      	orrs	r3, r2
 80055fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005600:	4313      	orrs	r3, r2
 8005602:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b00      	cmp	r3, #0
 8005610:	d114      	bne.n	800563c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005620:	f023 0302 	bic.w	r3, r3, #2
 8005624:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7e1b      	ldrb	r3, [r3, #24]
 800562a:	039a      	lsls	r2, r3, #14
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4313      	orrs	r3, r2
 8005636:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005638:	4313      	orrs	r3, r2
 800563a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <HAL_ADC_Init+0x3f0>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800564c:	430b      	orrs	r3, r1
 800564e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10c      	bne.n	8005672 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f023 010f 	bic.w	r1, r3, #15
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	1e5a      	subs	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
 8005670:	e007      	b.n	8005682 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 020f 	bic.w	r2, r2, #15
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	f043 0201 	orr.w	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	641a      	str	r2, [r3, #64]	; 0x40
 8005698:	e00a      	b.n	80056b0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f023 0312 	bic.w	r3, r3, #18
 80056a2:	f043 0210 	orr.w	r2, r3, #16
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80056b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3768      	adds	r7, #104	; 0x68
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	fff0c007 	.word	0xfff0c007

080056c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 80f7 	bne.w	80058ce <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_ADC_Start_DMA+0x2e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e0f2      	b.n	80058d4 <HAL_ADC_Start_DMA+0x214>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056fe:	d004      	beq.n	800570a <HAL_ADC_Start_DMA+0x4a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a75      	ldr	r2, [pc, #468]	; (80058dc <HAL_ADC_Start_DMA+0x21c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d109      	bne.n	800571e <HAL_ADC_Start_DMA+0x5e>
 800570a:	4b75      	ldr	r3, [pc, #468]	; (80058e0 <HAL_ADC_Start_DMA+0x220>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e008      	b.n	8005730 <HAL_ADC_Start_DMA+0x70>
 800571e:	4b71      	ldr	r3, [pc, #452]	; (80058e4 <HAL_ADC_Start_DMA+0x224>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80c5 	beq.w	80058c0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fd82 	bl	8006240 <ADC_Enable>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 80b7 	bne.w	80058b6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005764:	d004      	beq.n	8005770 <HAL_ADC_Start_DMA+0xb0>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a5c      	ldr	r2, [pc, #368]	; (80058dc <HAL_ADC_Start_DMA+0x21c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d106      	bne.n	800577e <HAL_ADC_Start_DMA+0xbe>
 8005770:	4b5b      	ldr	r3, [pc, #364]	; (80058e0 <HAL_ADC_Start_DMA+0x220>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_ADC_Start_DMA+0xde>
 800577c:	e005      	b.n	800578a <HAL_ADC_Start_DMA+0xca>
 800577e:	4b59      	ldr	r3, [pc, #356]	; (80058e4 <HAL_ADC_Start_DMA+0x224>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_ADC_Start_DMA+0xde>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005792:	d004      	beq.n	800579e <HAL_ADC_Start_DMA+0xde>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a53      	ldr	r2, [pc, #332]	; (80058e8 <HAL_ADC_Start_DMA+0x228>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d115      	bne.n	80057ca <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d036      	beq.n	8005826 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80057c8:	e02d      	b.n	8005826 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057de:	d004      	beq.n	80057ea <HAL_ADC_Start_DMA+0x12a>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <HAL_ADC_Start_DMA+0x21c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10a      	bne.n	8005800 <HAL_ADC_Start_DMA+0x140>
 80057ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	e008      	b.n	8005812 <HAL_ADC_Start_DMA+0x152>
 8005800:	4b39      	ldr	r3, [pc, #228]	; (80058e8 <HAL_ADC_Start_DMA+0x228>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800581e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005832:	d106      	bne.n	8005842 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	f023 0206 	bic.w	r2, r3, #6
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	645a      	str	r2, [r3, #68]	; 0x44
 8005840:	e002      	b.n	8005848 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_ADC_Start_DMA+0x22c>)
 8005856:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <HAL_ADC_Start_DMA+0x230>)
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	4a23      	ldr	r2, [pc, #140]	; (80058f4 <HAL_ADC_Start_DMA+0x234>)
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	221c      	movs	r2, #28
 800586e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0210 	orr.w	r2, r2, #16
 800587e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3340      	adds	r3, #64	; 0x40
 800589a:	4619      	mov	r1, r3
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f001 f97a 	bl	8006b98 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0204 	orr.w	r2, r2, #4
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	e00d      	b.n	80058d2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058be:	e008      	b.n	80058d2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058cc:	e001      	b.n	80058d2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	50000100 	.word	0x50000100
 80058e0:	50000300 	.word	0x50000300
 80058e4:	50000700 	.word	0x50000700
 80058e8:	50000400 	.word	0x50000400
 80058ec:	08006175 	.word	0x08006175
 80058f0:	080061ef 	.word	0x080061ef
 80058f4:	0800620b 	.word	0x0800620b

080058f8 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_ADC_Stop_DMA+0x1a>
 800590e:	2302      	movs	r3, #2
 8005910:	e050      	b.n	80059b4 <HAL_ADC_Stop_DMA+0xbc>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800591a:	216c      	movs	r1, #108	; 0x6c
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fd59 	bl	80063d4 <ADC_ConversionStop>
 8005922:	4603      	mov	r3, r0
 8005924:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d13e      	bne.n	80059aa <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005944:	2b02      	cmp	r3, #2
 8005946:	d10f      	bne.n	8005968 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f982 	bl	8006c56 <HAL_DMA_Abort>
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0210 	bic.w	r2, r2, #16
 8005976:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fcc2 	bl	8006308 <ADC_Disable>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e002      	b.n	8005990 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fcbc 	bl	8006308 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b09b      	sub	sp, #108	; 0x6c
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_ADC_ConfigChannel+0x22>
 80059da:	2302      	movs	r3, #2
 80059dc:	e2c8      	b.n	8005f70 <HAL_ADC_ConfigChannel+0x5b4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 82ac 	bne.w	8005f4e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d81c      	bhi.n	8005a38 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	461a      	mov	r2, r3
 8005a12:	231f      	movs	r3, #31
 8005a14:	4093      	lsls	r3, r2
 8005a16:	43db      	mvns	r3, r3
 8005a18:	4019      	ands	r1, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
 8005a36:	e063      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b09      	cmp	r3, #9
 8005a3e:	d81e      	bhi.n	8005a7e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	3b1e      	subs	r3, #30
 8005a54:	221f      	movs	r2, #31
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	4019      	ands	r1, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	3b1e      	subs	r3, #30
 8005a70:	fa00 f203 	lsl.w	r2, r0, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8005a7c:	e040      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b0e      	cmp	r3, #14
 8005a84:	d81e      	bhi.n	8005ac4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	3b3c      	subs	r3, #60	; 0x3c
 8005a9a:	221f      	movs	r2, #31
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	4019      	ands	r1, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	3b3c      	subs	r3, #60	; 0x3c
 8005ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ac2:	e01d      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	3b5a      	subs	r3, #90	; 0x5a
 8005ad8:	221f      	movs	r2, #31
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	4019      	ands	r1, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	3b5a      	subs	r3, #90	; 0x5a
 8005af4:	fa00 f203 	lsl.w	r2, r0, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 80e5 	bne.w	8005cda <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b09      	cmp	r3, #9
 8005b16:	d91c      	bls.n	8005b52 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	3b1e      	subs	r3, #30
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	4019      	ands	r1, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6898      	ldr	r0, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	3b1e      	subs	r3, #30
 8005b44:	fa00 f203 	lsl.w	r2, r0, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]
 8005b50:	e019      	b.n	8005b86 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6959      	ldr	r1, [r3, #20]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	4413      	add	r3, r2
 8005b62:	2207      	movs	r2, #7
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	4019      	ands	r1, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6898      	ldr	r0, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	08db      	lsrs	r3, r3, #3
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d84f      	bhi.n	8005c48 <HAL_ADC_ConfigChannel+0x28c>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <HAL_ADC_ConfigChannel+0x1f4>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bc1 	.word	0x08005bc1
 8005bb4:	08005be3 	.word	0x08005be3
 8005bb8:	08005c05 	.word	0x08005c05
 8005bbc:	08005c27 	.word	0x08005c27
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bc6:	4b99      	ldr	r3, [pc, #612]	; (8005e2c <HAL_ADC_ConfigChannel+0x470>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	0691      	lsls	r1, r2, #26
 8005bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005be0:	e07b      	b.n	8005cda <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005be8:	4b90      	ldr	r3, [pc, #576]	; (8005e2c <HAL_ADC_ConfigChannel+0x470>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	0691      	lsls	r1, r2, #26
 8005bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c00:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005c02:	e06a      	b.n	8005cda <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005c0a:	4b88      	ldr	r3, [pc, #544]	; (8005e2c <HAL_ADC_ConfigChannel+0x470>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	0691      	lsls	r1, r2, #26
 8005c14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c16:	430a      	orrs	r2, r1
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c22:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005c24:	e059      	b.n	8005cda <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c2c:	4b7f      	ldr	r3, [pc, #508]	; (8005e2c <HAL_ADC_ConfigChannel+0x470>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	0691      	lsls	r1, r2, #26
 8005c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c44:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005c46:	e048      	b.n	8005cda <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	069b      	lsls	r3, r3, #26
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d107      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	069b      	lsls	r3, r3, #26
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d107      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c8e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	069b      	lsls	r3, r3, #26
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d107      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cb2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	069b      	lsls	r3, r3, #26
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d107      	bne.n	8005cd8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cd6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005cd8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d108      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x33e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x33e>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_ADC_ConfigChannel+0x340>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f040 8131 	bne.w	8005f64 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d00f      	beq.n	8005d2a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2201      	movs	r2, #1
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43da      	mvns	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	400a      	ands	r2, r1
 8005d24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005d28:	e049      	b.n	8005dbe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	d91c      	bls.n	8005d86 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3b1b      	subs	r3, #27
 8005d5e:	2207      	movs	r2, #7
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	4019      	ands	r1, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6898      	ldr	r0, [r3, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	3b1b      	subs	r3, #27
 8005d78:	fa00 f203 	lsl.w	r2, r0, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	619a      	str	r2, [r3, #24]
 8005d84:	e01b      	b.n	8005dbe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6959      	ldr	r1, [r3, #20]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	4613      	mov	r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	2207      	movs	r2, #7
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	4019      	ands	r1, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6898      	ldr	r0, [r3, #8]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	4613      	mov	r3, r2
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4413      	add	r3, r2
 8005db2:	fa00 f203 	lsl.w	r2, r0, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc6:	d004      	beq.n	8005dd2 <HAL_ADC_ConfigChannel+0x416>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <HAL_ADC_ConfigChannel+0x474>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_ADC_ConfigChannel+0x41a>
 8005dd2:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <HAL_ADC_ConfigChannel+0x478>)
 8005dd4:	e000      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x41c>
 8005dd6:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <HAL_ADC_ConfigChannel+0x47c>)
 8005dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d105      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005df2:	2b11      	cmp	r3, #17
 8005df4:	d105      	bne.n	8005e02 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005e06:	2b12      	cmp	r3, #18
 8005e08:	f040 80ac 	bne.w	8005f64 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 80a5 	bne.w	8005f64 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e22:	d10b      	bne.n	8005e3c <HAL_ADC_ConfigChannel+0x480>
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <HAL_ADC_ConfigChannel+0x474>)
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e023      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x4b6>
 8005e2a:	bf00      	nop
 8005e2c:	83fff000 	.word	0x83fff000
 8005e30:	50000100 	.word	0x50000100
 8005e34:	50000300 	.word	0x50000300
 8005e38:	50000700 	.word	0x50000700
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a4e      	ldr	r2, [pc, #312]	; (8005f7c <HAL_ADC_ConfigChannel+0x5c0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d103      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x492>
 8005e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e011      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x4b6>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a4b      	ldr	r2, [pc, #300]	; (8005f80 <HAL_ADC_ConfigChannel+0x5c4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d102      	bne.n	8005e5e <HAL_ADC_ConfigChannel+0x4a2>
 8005e58:	4b4a      	ldr	r3, [pc, #296]	; (8005f84 <HAL_ADC_ConfigChannel+0x5c8>)
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e009      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x4b6>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a48      	ldr	r2, [pc, #288]	; (8005f84 <HAL_ADC_ConfigChannel+0x5c8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d102      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x4b2>
 8005e68:	4b45      	ldr	r3, [pc, #276]	; (8005f80 <HAL_ADC_ConfigChannel+0x5c4>)
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e001      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x4b6>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d108      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x4d6>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x4d6>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <HAL_ADC_ConfigChannel+0x4d8>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d150      	bne.n	8005f3a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005e98:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d010      	beq.n	8005ec0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d107      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x4fe>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x4fe>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_ADC_ConfigChannel+0x500>
 8005eba:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d13c      	bne.n	8005f3a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d11d      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x548>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed0:	d118      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ede:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <HAL_ADC_ConfigChannel+0x5cc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	; (8005f8c <HAL_ADC_ConfigChannel+0x5d0>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	0c9a      	lsrs	r2, r3, #18
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005ef4:	e002      	b.n	8005efc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f9      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f02:	e02e      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b11      	cmp	r3, #17
 8005f0a:	d10b      	bne.n	8005f24 <HAL_ADC_ConfigChannel+0x568>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f14:	d106      	bne.n	8005f24 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f20:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f22:	e01e      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b12      	cmp	r3, #18
 8005f2a:	d11a      	bne.n	8005f62 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f36:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f38:	e013      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005f4c:	e00a      	b.n	8005f64 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005f60:	e000      	b.n	8005f64 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f62:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	376c      	adds	r7, #108	; 0x6c
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	50000100 	.word	0x50000100
 8005f80:	50000400 	.word	0x50000400
 8005f84:	50000500 	.word	0x50000500
 8005f88:	20000004 	.word	0x20000004
 8005f8c:	431bde83 	.word	0x431bde83

08005f90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b099      	sub	sp, #100	; 0x64
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa8:	d102      	bne.n	8005fb0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005faa:	4b6d      	ldr	r3, [pc, #436]	; (8006160 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	e01a      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a6a      	ldr	r2, [pc, #424]	; (8006160 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d103      	bne.n	8005fc2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	e011      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a67      	ldr	r2, [pc, #412]	; (8006164 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d102      	bne.n	8005fd2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005fcc:	4b66      	ldr	r3, [pc, #408]	; (8006168 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	e009      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a64      	ldr	r2, [pc, #400]	; (8006168 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d102      	bne.n	8005fe2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005fdc:	4b61      	ldr	r3, [pc, #388]	; (8006164 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	e001      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0b0      	b.n	8006152 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0a9      	b.n	8006152 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 808d 	bne.w	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 8086 	bne.w	8006130 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800602c:	d004      	beq.n	8006038 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4b      	ldr	r2, [pc, #300]	; (8006160 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006038:	4b4c      	ldr	r3, [pc, #304]	; (800616c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800603a:	e000      	b.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800603c:	4b4c      	ldr	r3, [pc, #304]	; (8006170 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800603e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d040      	beq.n	80060ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800605a:	035b      	lsls	r3, r3, #13
 800605c:	430b      	orrs	r3, r1
 800605e:	431a      	orrs	r2, r3
 8006060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006062:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d108      	bne.n	8006084 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006084:	2300      	movs	r3, #0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d15c      	bne.n	8006144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d107      	bne.n	80060a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80060a6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d14b      	bne.n	8006144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80060ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80060b4:	f023 030f 	bic.w	r3, r3, #15
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	6811      	ldr	r1, [r2, #0]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	6892      	ldr	r2, [r2, #8]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	431a      	orrs	r2, r3
 80060c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80060c8:	e03c      	b.n	8006144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060d4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d108      	bne.n	80060f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d123      	bne.n	8006144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006118:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800611a:	2b00      	cmp	r3, #0
 800611c:	d112      	bne.n	8006144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800611e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006126:	f023 030f 	bic.w	r3, r3, #15
 800612a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800612c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800612e:	e009      	b.n	8006144 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006142:	e000      	b.n	8006146 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006144:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800614e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8006152:	4618      	mov	r0, r3
 8006154:	3764      	adds	r7, #100	; 0x64
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	50000100 	.word	0x50000100
 8006164:	50000400 	.word	0x50000400
 8006168:	50000500 	.word	0x50000500
 800616c:	50000300 	.word	0x50000300
 8006170:	50000700 	.word	0x50000700

08006174 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800618a:	2b00      	cmp	r3, #0
 800618c:	d126      	bne.n	80061dc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d115      	bne.n	80061d4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d111      	bne.n	80061d4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0201 	orr.w	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff f85b 	bl	8005290 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80061da:	e004      	b.n	80061e6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff f851 	bl	80052a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff f841 	bl	80052b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d108      	bne.n	800626c <ADC_Enable+0x2c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <ADC_Enable+0x2c>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <ADC_Enable+0x2e>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d143      	bne.n	80062fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	4b22      	ldr	r3, [pc, #136]	; (8006304 <ADC_Enable+0xc4>)
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00d      	beq.n	800629c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f043 0210 	orr.w	r2, r3, #16
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	f043 0201 	orr.w	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e02f      	b.n	80062fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80062ac:	f7fe ffc0 	bl	8005230 <HAL_GetTick>
 80062b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062b2:	e01b      	b.n	80062ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062b4:	f7fe ffbc 	bl	8005230 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d914      	bls.n	80062ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d00d      	beq.n	80062ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	f043 0210 	orr.w	r2, r3, #16
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e007      	b.n	80062fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d1dc      	bne.n	80062b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	8000003f 	.word	0x8000003f

08006308 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d108      	bne.n	8006334 <ADC_Disable+0x2c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <ADC_Disable+0x2c>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <ADC_Disable+0x2e>
 8006334:	2300      	movs	r3, #0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d047      	beq.n	80063ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030d 	and.w	r3, r3, #13
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10f      	bne.n	8006368 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0202 	orr.w	r2, r2, #2
 8006356:	609a      	str	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2203      	movs	r2, #3
 800635e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006360:	f7fe ff66 	bl	8005230 <HAL_GetTick>
 8006364:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006366:	e029      	b.n	80063bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f043 0210 	orr.w	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e023      	b.n	80063cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006384:	f7fe ff54 	bl	8005230 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d914      	bls.n	80063bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d10d      	bne.n	80063bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	f043 0210 	orr.w	r2, r3, #16
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e007      	b.n	80063cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d0dc      	beq.n	8006384 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 030c 	and.w	r3, r3, #12
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 809b 	beq.w	8006530 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d12a      	bne.n	8006460 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800640e:	2b01      	cmp	r3, #1
 8006410:	d126      	bne.n	8006460 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8006416:	2b01      	cmp	r3, #1
 8006418:	d122      	bne.n	8006460 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800641a:	230c      	movs	r3, #12
 800641c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800641e:	e014      	b.n	800644a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4a46      	ldr	r2, [pc, #280]	; (800653c <ADC_ConversionStop+0x168>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d90d      	bls.n	8006444 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f043 0210 	orr.w	r2, r3, #16
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e076      	b.n	8006532 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3301      	adds	r3, #1
 8006448:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d1e3      	bne.n	8006420 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2240      	movs	r2, #64	; 0x40
 800645e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b60      	cmp	r3, #96	; 0x60
 8006464:	d015      	beq.n	8006492 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b04      	cmp	r3, #4
 8006472:	d10e      	bne.n	8006492 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0210 	orr.w	r2, r2, #16
 8006490:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b0c      	cmp	r3, #12
 8006496:	d015      	beq.n	80064c4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d10e      	bne.n	80064c4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0220 	orr.w	r2, r2, #32
 80064c2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b60      	cmp	r3, #96	; 0x60
 80064c8:	d005      	beq.n	80064d6 <ADC_ConversionStop+0x102>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b6c      	cmp	r3, #108	; 0x6c
 80064ce:	d105      	bne.n	80064dc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80064d0:	230c      	movs	r3, #12
 80064d2:	617b      	str	r3, [r7, #20]
        break;
 80064d4:	e005      	b.n	80064e2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80064d6:	2308      	movs	r3, #8
 80064d8:	617b      	str	r3, [r7, #20]
        break;
 80064da:	e002      	b.n	80064e2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80064dc:	2304      	movs	r3, #4
 80064de:	617b      	str	r3, [r7, #20]
        break;
 80064e0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80064e2:	f7fe fea5 	bl	8005230 <HAL_GetTick>
 80064e6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80064e8:	e01b      	b.n	8006522 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80064ea:	f7fe fea1 	bl	8005230 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b0b      	cmp	r3, #11
 80064f6:	d914      	bls.n	8006522 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f043 0210 	orr.w	r2, r3, #16
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	f043 0201 	orr.w	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e007      	b.n	8006532 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1dc      	bne.n	80064ea <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	000993ff 	.word	0x000993ff

08006540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <__NVIC_SetPriorityGrouping+0x44>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800655c:	4013      	ands	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800656c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <__NVIC_SetPriorityGrouping+0x44>)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	60d3      	str	r3, [r2, #12]
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	e000ed00 	.word	0xe000ed00

08006588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <__NVIC_GetPriorityGrouping+0x18>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	f003 0307 	and.w	r3, r3, #7
}
 8006596:	4618      	mov	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	e000ed00 	.word	0xe000ed00

080065a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	db0b      	blt.n	80065ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	f003 021f 	and.w	r2, r3, #31
 80065bc:	4907      	ldr	r1, [pc, #28]	; (80065dc <__NVIC_EnableIRQ+0x38>)
 80065be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	2001      	movs	r0, #1
 80065c6:	fa00 f202 	lsl.w	r2, r0, r2
 80065ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	e000e100 	.word	0xe000e100

080065e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	6039      	str	r1, [r7, #0]
 80065ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db0a      	blt.n	800660a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	490c      	ldr	r1, [pc, #48]	; (800662c <__NVIC_SetPriority+0x4c>)
 80065fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fe:	0112      	lsls	r2, r2, #4
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	440b      	add	r3, r1
 8006604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006608:	e00a      	b.n	8006620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	4908      	ldr	r1, [pc, #32]	; (8006630 <__NVIC_SetPriority+0x50>)
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	3b04      	subs	r3, #4
 8006618:	0112      	lsls	r2, r2, #4
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	440b      	add	r3, r1
 800661e:	761a      	strb	r2, [r3, #24]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	e000e100 	.word	0xe000e100
 8006630:	e000ed00 	.word	0xe000ed00

08006634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006634:	b480      	push	{r7}
 8006636:	b089      	sub	sp, #36	; 0x24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f1c3 0307 	rsb	r3, r3, #7
 800664e:	2b04      	cmp	r3, #4
 8006650:	bf28      	it	cs
 8006652:	2304      	movcs	r3, #4
 8006654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3304      	adds	r3, #4
 800665a:	2b06      	cmp	r3, #6
 800665c:	d902      	bls.n	8006664 <NVIC_EncodePriority+0x30>
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3b03      	subs	r3, #3
 8006662:	e000      	b.n	8006666 <NVIC_EncodePriority+0x32>
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006668:	f04f 32ff 	mov.w	r2, #4294967295
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43da      	mvns	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	401a      	ands	r2, r3
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800667c:	f04f 31ff 	mov.w	r1, #4294967295
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	fa01 f303 	lsl.w	r3, r1, r3
 8006686:	43d9      	mvns	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800668c:	4313      	orrs	r3, r2
         );
}
 800668e:	4618      	mov	r0, r3
 8006690:	3724      	adds	r7, #36	; 0x24
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066ac:	d301      	bcc.n	80066b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066ae:	2301      	movs	r3, #1
 80066b0:	e00f      	b.n	80066d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066b2:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <SysTick_Config+0x40>)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066ba:	210f      	movs	r1, #15
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	f7ff ff8e 	bl	80065e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <SysTick_Config+0x40>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ca:	4b04      	ldr	r3, [pc, #16]	; (80066dc <SysTick_Config+0x40>)
 80066cc:	2207      	movs	r2, #7
 80066ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	e000e010 	.word	0xe000e010

080066e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff ff29 	bl	8006540 <__NVIC_SetPriorityGrouping>
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	4603      	mov	r3, r0
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006708:	f7ff ff3e 	bl	8006588 <__NVIC_GetPriorityGrouping>
 800670c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f7ff ff8e 	bl	8006634 <NVIC_EncodePriority>
 8006718:	4602      	mov	r2, r0
 800671a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff ff5d 	bl	80065e0 <__NVIC_SetPriority>
}
 8006726:	bf00      	nop
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	4603      	mov	r3, r0
 8006736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff31 	bl	80065a4 <__NVIC_EnableIRQ>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff ffa2 	bl	800669c <SysTick_Config>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e014      	b.n	800679e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	791b      	ldrb	r3, [r3, #4]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d105      	bne.n	800678a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fe f8d9 	bl	800493c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	795b      	ldrb	r3, [r3, #5]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_DAC_Start_DMA+0x1e>
 80067fe:	2302      	movs	r3, #2
 8006800:	e09b      	b.n	800693a <HAL_DAC_Start_DMA+0x156>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2202      	movs	r2, #2
 800680c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d12f      	bne.n	8006874 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4a4a      	ldr	r2, [pc, #296]	; (8006944 <HAL_DAC_Start_DMA+0x160>)
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a49      	ldr	r2, [pc, #292]	; (8006948 <HAL_DAC_Start_DMA+0x164>)
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4a48      	ldr	r2, [pc, #288]	; (800694c <HAL_DAC_Start_DMA+0x168>)
 800682a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800683a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	2b08      	cmp	r3, #8
 8006840:	d013      	beq.n	800686a <HAL_DAC_Start_DMA+0x86>
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d845      	bhi.n	80068d4 <HAL_DAC_Start_DMA+0xf0>
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_DAC_Start_DMA+0x72>
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d005      	beq.n	8006860 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8006854:	e03e      	b.n	80068d4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	617b      	str	r3, [r7, #20]
        break;
 800685e:	e03c      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	617b      	str	r3, [r7, #20]
        break;
 8006868:	e037      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3310      	adds	r3, #16
 8006870:	617b      	str	r3, [r7, #20]
        break;
 8006872:	e032      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	4a35      	ldr	r2, [pc, #212]	; (8006950 <HAL_DAC_Start_DMA+0x16c>)
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4a34      	ldr	r2, [pc, #208]	; (8006954 <HAL_DAC_Start_DMA+0x170>)
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4a33      	ldr	r2, [pc, #204]	; (8006958 <HAL_DAC_Start_DMA+0x174>)
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800689a:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d013      	beq.n	80068ca <HAL_DAC_Start_DMA+0xe6>
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d817      	bhi.n	80068d8 <HAL_DAC_Start_DMA+0xf4>
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_DAC_Start_DMA+0xd2>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d005      	beq.n	80068c0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80068b4:	e010      	b.n	80068d8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3314      	adds	r3, #20
 80068bc:	617b      	str	r3, [r7, #20]
        break;
 80068be:	e00c      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3318      	adds	r3, #24
 80068c6:	617b      	str	r3, [r7, #20]
        break;
 80068c8:	e007      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	331c      	adds	r3, #28
 80068d0:	617b      	str	r3, [r7, #20]
        break;
 80068d2:	e002      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
        break;
 80068d4:	bf00      	nop
 80068d6:	e000      	b.n	80068da <HAL_DAC_Start_DMA+0xf6>
        break;
 80068d8:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10f      	bne.n	8006900 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6898      	ldr	r0, [r3, #8]
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	f000 f94d 	bl	8006b98 <HAL_DMA_Start_IT>
 80068fe:	e00e      	b.n	800691e <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800690e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68d8      	ldr	r0, [r3, #12]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	f000 f93d 	bl	8006b98 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	2201      	movs	r2, #1
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	409a      	lsls	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	08006a33 	.word	0x08006a33
 8006948:	08006a55 	.word	0x08006a55
 800694c:	08006a71 	.word	0x08006a71
 8006950:	08006a9f 	.word	0x08006a9f
 8006954:	08006ac1 	.word	0x08006ac1
 8006958:	08006add 	.word	0x08006add

0800695c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	795b      	ldrb	r3, [r3, #5]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_DAC_ConfigChannel+0x20>
 8006978:	2302      	movs	r3, #2
 800697a:	e036      	b.n	80069ea <HAL_DAC_ConfigChannel+0x8e>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2202      	movs	r2, #2
 8006986:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006990:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43db      	mvns	r3, r3
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4013      	ands	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	22c0      	movs	r2, #192	; 0xc0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43da      	mvns	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	400a      	ands	r2, r1
 80069da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff feb0 	bl	80067a6 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	711a      	strb	r2, [r3, #4]
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff fea9 	bl	80067ba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f043 0204 	orr.w	r2, r3, #4
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fe9f 	bl	80067ce <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	711a      	strb	r2, [r3, #4]
}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff ffa2 	bl	80069f6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	711a      	strb	r2, [r3, #4]
}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff ff9b 	bl	8006a0a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f043 0204 	orr.w	r2, r3, #4
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff ff91 	bl	8006a1e <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	711a      	strb	r2, [r3, #4]
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e037      	b.n	8006b90 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f97a 	bl	8006e6c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}  
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_DMA_Start_IT+0x20>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e04a      	b.n	8006c4e <HAL_DMA_Start_IT+0xb6>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d13a      	bne.n	8006c40 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f90d 	bl	8006e0e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 020e 	orr.w	r2, r2, #14
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e00f      	b.n	8006c2e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 020a 	orr.w	r2, r2, #10
 8006c1c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0204 	bic.w	r2, r2, #4
 8006c2c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e005      	b.n	8006c4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d008      	beq.n	8006c7a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e020      	b.n	8006cbc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 020e 	bic.w	r2, r2, #14
 8006c88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d024      	beq.n	8006d3a <HAL_DMA_IRQHandler+0x72>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01f      	beq.n	8006d3a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d107      	bne.n	8006d18 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0204 	bic.w	r2, r2, #4
 8006d16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	2104      	movs	r1, #4
 8006d22:	fa01 f202 	lsl.w	r2, r1, r2
 8006d26:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d06a      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006d38:	e065      	b.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2202      	movs	r2, #2
 8006d40:	409a      	lsls	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d02c      	beq.n	8006da4 <HAL_DMA_IRQHandler+0xdc>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d027      	beq.n	8006da4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 020a 	bic.w	r2, r2, #10
 8006d70:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	2102      	movs	r1, #2
 8006d84:	fa01 f202 	lsl.w	r2, r1, r2
 8006d88:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d035      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006da2:	e030      	b.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2208      	movs	r2, #8
 8006daa:	409a      	lsls	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d028      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d023      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 020e 	bic.w	r2, r2, #14
 8006dcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ddc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
    }
  }
}  
 8006e04:	e7ff      	b.n	8006e06 <HAL_DMA_IRQHandler+0x13e>
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	2101      	movs	r1, #1
 8006e26:	fa01 f202 	lsl.w	r2, r1, r2
 8006e2a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d108      	bne.n	8006e4e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e4c:	e007      	b.n	8006e5e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <DMA_CalcBaseAndBitshift+0x60>)
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d80f      	bhi.n	8006ea0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8006e88:	4413      	add	r3, r2
 8006e8a:	4a12      	ldr	r2, [pc, #72]	; (8006ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	009a      	lsls	r2, r3, #2
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a0f      	ldr	r2, [pc, #60]	; (8006ed8 <DMA_CalcBaseAndBitshift+0x6c>)
 8006e9c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006e9e:	e00e      	b.n	8006ebe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <DMA_CalcBaseAndBitshift+0x70>)
 8006ea8:	4413      	add	r3, r2
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	009a      	lsls	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <DMA_CalcBaseAndBitshift+0x74>)
 8006ebc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40020407 	.word	0x40020407
 8006ed0:	bffdfff8 	.word	0xbffdfff8
 8006ed4:	cccccccd 	.word	0xcccccccd
 8006ed8:	40020000 	.word	0x40020000
 8006edc:	bffdfbf8 	.word	0xbffdfbf8
 8006ee0:	40020400 	.word	0x40020400

08006ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ef2:	e160      	b.n	80071b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	2101      	movs	r1, #1
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	fa01 f303 	lsl.w	r3, r1, r3
 8006f00:	4013      	ands	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 8152 	beq.w	80071b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d005      	beq.n	8006f24 <HAL_GPIO_Init+0x40>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d130      	bne.n	8006f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	2203      	movs	r2, #3
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43db      	mvns	r3, r3
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4013      	ands	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	091b      	lsrs	r3, r3, #4
 8006f70:	f003 0201 	and.w	r2, r3, #1
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d017      	beq.n	8006fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	43db      	mvns	r3, r3
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d123      	bne.n	8007016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	08da      	lsrs	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3208      	adds	r2, #8
 8006fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	220f      	movs	r2, #15
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	43db      	mvns	r3, r3
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	08da      	lsrs	r2, r3, #3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3208      	adds	r2, #8
 8007010:	6939      	ldr	r1, [r7, #16]
 8007012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	2203      	movs	r2, #3
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	43db      	mvns	r3, r3
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4013      	ands	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f003 0203 	and.w	r2, r3, #3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80ac 	beq.w	80071b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007058:	4b5e      	ldr	r3, [pc, #376]	; (80071d4 <HAL_GPIO_Init+0x2f0>)
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	4a5d      	ldr	r2, [pc, #372]	; (80071d4 <HAL_GPIO_Init+0x2f0>)
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	6193      	str	r3, [r2, #24]
 8007064:	4b5b      	ldr	r3, [pc, #364]	; (80071d4 <HAL_GPIO_Init+0x2f0>)
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007070:	4a59      	ldr	r2, [pc, #356]	; (80071d8 <HAL_GPIO_Init+0x2f4>)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	089b      	lsrs	r3, r3, #2
 8007076:	3302      	adds	r3, #2
 8007078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	220f      	movs	r2, #15
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4013      	ands	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800709a:	d025      	beq.n	80070e8 <HAL_GPIO_Init+0x204>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a4f      	ldr	r2, [pc, #316]	; (80071dc <HAL_GPIO_Init+0x2f8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d01f      	beq.n	80070e4 <HAL_GPIO_Init+0x200>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a4e      	ldr	r2, [pc, #312]	; (80071e0 <HAL_GPIO_Init+0x2fc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d019      	beq.n	80070e0 <HAL_GPIO_Init+0x1fc>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a4d      	ldr	r2, [pc, #308]	; (80071e4 <HAL_GPIO_Init+0x300>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_GPIO_Init+0x1f8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a4c      	ldr	r2, [pc, #304]	; (80071e8 <HAL_GPIO_Init+0x304>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00d      	beq.n	80070d8 <HAL_GPIO_Init+0x1f4>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a4b      	ldr	r2, [pc, #300]	; (80071ec <HAL_GPIO_Init+0x308>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d007      	beq.n	80070d4 <HAL_GPIO_Init+0x1f0>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a4a      	ldr	r2, [pc, #296]	; (80071f0 <HAL_GPIO_Init+0x30c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d101      	bne.n	80070d0 <HAL_GPIO_Init+0x1ec>
 80070cc:	2306      	movs	r3, #6
 80070ce:	e00c      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070d0:	2307      	movs	r3, #7
 80070d2:	e00a      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070d4:	2305      	movs	r3, #5
 80070d6:	e008      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070d8:	2304      	movs	r3, #4
 80070da:	e006      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070dc:	2303      	movs	r3, #3
 80070de:	e004      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e002      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <HAL_GPIO_Init+0x206>
 80070e8:	2300      	movs	r3, #0
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	f002 0203 	and.w	r2, r2, #3
 80070f0:	0092      	lsls	r2, r2, #2
 80070f2:	4093      	lsls	r3, r2
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80070fa:	4937      	ldr	r1, [pc, #220]	; (80071d8 <HAL_GPIO_Init+0x2f4>)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	3302      	adds	r3, #2
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007108:	4b3a      	ldr	r3, [pc, #232]	; (80071f4 <HAL_GPIO_Init+0x310>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	43db      	mvns	r3, r3
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4013      	ands	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800712c:	4a31      	ldr	r2, [pc, #196]	; (80071f4 <HAL_GPIO_Init+0x310>)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007132:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <HAL_GPIO_Init+0x310>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	43db      	mvns	r3, r3
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4013      	ands	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007156:	4a27      	ldr	r2, [pc, #156]	; (80071f4 <HAL_GPIO_Init+0x310>)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800715c:	4b25      	ldr	r3, [pc, #148]	; (80071f4 <HAL_GPIO_Init+0x310>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	43db      	mvns	r3, r3
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4013      	ands	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007180:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <HAL_GPIO_Init+0x310>)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007186:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <HAL_GPIO_Init+0x310>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	43db      	mvns	r3, r3
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4013      	ands	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80071aa:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <HAL_GPIO_Init+0x310>)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f47f ae97 	bne.w	8006ef4 <HAL_GPIO_Init+0x10>
  }
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40010000 	.word	0x40010000
 80071dc:	48000400 	.word	0x48000400
 80071e0:	48000800 	.word	0x48000800
 80071e4:	48000c00 	.word	0x48000c00
 80071e8:	48001000 	.word	0x48001000
 80071ec:	48001400 	.word	0x48001400
 80071f0:	48001800 	.word	0x48001800
 80071f4:	40010400 	.word	0x40010400

080071f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
 8007214:	e001      	b.n	800721a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	807b      	strh	r3, [r7, #2]
 8007234:	4613      	mov	r3, r2
 8007236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007238:	787b      	ldrb	r3, [r7, #1]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800723e:	887a      	ldrh	r2, [r7, #2]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007244:	e002      	b.n	800724c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800726a:	887a      	ldrh	r2, [r7, #2]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4013      	ands	r3, r2
 8007270:	041a      	lsls	r2, r3, #16
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	43d9      	mvns	r1, r3
 8007276:	887b      	ldrh	r3, [r7, #2]
 8007278:	400b      	ands	r3, r1
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	619a      	str	r2, [r3, #24]
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800728c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728e:	b08b      	sub	sp, #44	; 0x2c
 8007290:	af06      	add	r7, sp, #24
 8007292:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e0c4      	b.n	8007428 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f012 fc08 	bl	8019ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2203      	movs	r2, #3
 80072bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f006 fc9f 	bl	800dc08 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	e040      	b.n	8007352 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	440b      	add	r3, r1
 80072e0:	3301      	adds	r3, #1
 80072e2:	2201      	movs	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	440b      	add	r3, r1
 80072f6:	7bfa      	ldrb	r2, [r7, #15]
 80072f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	440b      	add	r3, r1
 800730a:	3303      	adds	r3, #3
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007310:	7bfa      	ldrb	r2, [r7, #15]
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	440b      	add	r3, r1
 800731e:	3338      	adds	r3, #56	; 0x38
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007324:	7bfa      	ldrb	r2, [r7, #15]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	440b      	add	r3, r1
 8007332:	333c      	adds	r3, #60	; 0x3c
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007338:	7bfa      	ldrb	r2, [r7, #15]
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	440b      	add	r3, r1
 8007346:	3340      	adds	r3, #64	; 0x40
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	3301      	adds	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	7bfa      	ldrb	r2, [r7, #15]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	d3b9      	bcc.n	80072d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
 8007360:	e044      	b.n	80073ec <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007362:	7bfa      	ldrb	r2, [r7, #15]
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	440b      	add	r3, r1
 8007370:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007378:	7bfa      	ldrb	r2, [r7, #15]
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	440b      	add	r3, r1
 8007386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800738a:	7bfa      	ldrb	r2, [r7, #15]
 800738c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	440b      	add	r3, r1
 800739c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	440b      	add	r3, r1
 80073b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073ba:	7bfa      	ldrb	r2, [r7, #15]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073d0:	7bfa      	ldrb	r2, [r7, #15]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	440b      	add	r3, r1
 80073de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	3301      	adds	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
 80073ec:	7bfa      	ldrb	r2, [r7, #15]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d3b5      	bcc.n	8007362 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	687e      	ldr	r6, [r7, #4]
 80073fe:	466d      	mov	r5, sp
 8007400:	f106 0410 	add.w	r4, r6, #16
 8007404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	1d33      	adds	r3, r6, #4
 800740e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007410:	6838      	ldr	r0, [r7, #0]
 8007412:	f006 fc14 	bl	800dc3e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007430 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_PCD_Start+0x16>
 8007442:	2302      	movs	r3, #2
 8007444:	e016      	b.n	8007474 <HAL_PCD_Start+0x44>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f006 fbc1 	bl	800dbda <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007458:	2101      	movs	r1, #1
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f012 fdb6 	bl	8019fcc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f008 fe80 	bl	801016a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4618      	mov	r0, r3
 800748a:	f008 fe79 	bl	8010180 <USB_ReadInterrupts>
 800748e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fab2 	bl	8007a04 <PCD_EP_ISR_Handler>

    return;
 80074a0:	e0bd      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d013      	beq.n	80074d4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074be:	b292      	uxth	r2, r2
 80074c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f012 fb82 	bl	8019bce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8a9 	bl	8007624 <HAL_PCD_SetAddress>

    return;
 80074d2:	e0a4      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00c      	beq.n	80074f8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074f0:	b292      	uxth	r2, r2
 80074f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80074f6:	e092      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00c      	beq.n	800751c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800750a:	b29a      	uxth	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007514:	b292      	uxth	r2, r2
 8007516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800751a:	e080      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d027      	beq.n	8007576 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0204 	bic.w	r2, r2, #4
 8007538:	b292      	uxth	r2, r2
 800753a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0208 	bic.w	r2, r2, #8
 8007550:	b292      	uxth	r2, r2
 8007552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f012 fb72 	bl	8019c40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007564:	b29a      	uxth	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800756e:	b292      	uxth	r2, r2
 8007570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007574:	e053      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757c:	2b00      	cmp	r3, #0
 800757e:	d027      	beq.n	80075d0 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0208 	orr.w	r2, r2, #8
 8007592:	b292      	uxth	r2, r2
 8007594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075aa:	b292      	uxth	r2, r2
 80075ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0204 	orr.w	r2, r2, #4
 80075c2:	b292      	uxth	r2, r2
 80075c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f012 fb1f 	bl	8019c0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80075ce:	e026      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00f      	beq.n	80075fa <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075ec:	b292      	uxth	r2, r2
 80075ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f012 fadd 	bl	8019bb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80075f8:	e011      	b.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007616:	b292      	uxth	r2, r2
 8007618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800761c:	bf00      	nop
  }
}
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_PCD_SetAddress+0x1a>
 800763a:	2302      	movs	r3, #2
 800763c:	e013      	b.n	8007666 <HAL_PCD_SetAddress+0x42>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	4611      	mov	r1, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f008 fd73 	bl	8010142 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	4608      	mov	r0, r1
 8007678:	4611      	mov	r1, r2
 800767a:	461a      	mov	r2, r3
 800767c:	4603      	mov	r3, r0
 800767e:	70fb      	strb	r3, [r7, #3]
 8007680:	460b      	mov	r3, r1
 8007682:	803b      	strh	r3, [r7, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800768c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da0e      	bge.n	80076b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	705a      	strb	r2, [r3, #1]
 80076b0:	e00e      	b.n	80076d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f003 0207 	and.w	r2, r3, #7
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80076dc:	883a      	ldrh	r2, [r7, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	78ba      	ldrb	r2, [r7, #2]
 80076e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076e8:	78bb      	ldrb	r3, [r7, #2]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d102      	bne.n	80076f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_PCD_EP_Open+0x94>
 80076fe:	2302      	movs	r3, #2
 8007700:	e00e      	b.n	8007720 <HAL_PCD_EP_Open+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	4618      	mov	r0, r3
 8007712:	f006 fab5 	bl	800dc80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800771e:	7afb      	ldrb	r3, [r7, #11]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	da0e      	bge.n	800775a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4413      	add	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	705a      	strb	r2, [r3, #1]
 8007758:	e00e      	b.n	8007778 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	f003 0207 	and.w	r2, r3, #7
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	b2da      	uxtb	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_PCD_EP_Close+0x6a>
 800778e:	2302      	movs	r3, #2
 8007790:	e00e      	b.n	80077b0 <HAL_PCD_EP_Close+0x88>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f006 fe31 	bl	800e408 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	460b      	mov	r3, r1
 80077c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	f003 0207 	and.w	r2, r3, #7
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2200      	movs	r2, #0
 80077f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2200      	movs	r2, #0
 80077f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6979      	ldr	r1, [r7, #20]
 800780a:	4618      	mov	r0, r3
 800780c:	f006 ffe9 	bl	800e7e2 <USB_EPStartXfer>

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	f003 0207 	and.w	r2, r3, #7
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	440b      	add	r3, r1
 8007838:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800783c:	681b      	ldr	r3, [r3, #0]
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	460b      	mov	r3, r1
 8007858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2201      	movs	r2, #1
 8007894:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	b2da      	uxtb	r2, r3
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f006 ff9a 	bl	800e7e2 <USB_EPStartXfer>

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f003 0207 	and.w	r2, r3, #7
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d901      	bls.n	80078d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e03e      	b.n	8007954 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da0e      	bge.n	80078fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	705a      	strb	r2, [r3, #1]
 80078fa:	e00c      	b.n	8007916 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	b2da      	uxtb	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_PCD_EP_SetStall+0x7e>
 8007932:	2302      	movs	r3, #2
 8007934:	e00e      	b.n	8007954 <HAL_PCD_EP_SetStall+0x9c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68f9      	ldr	r1, [r7, #12]
 8007944:	4618      	mov	r0, r3
 8007946:	f008 fafd 	bl	800ff44 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 020f 	and.w	r2, r3, #15
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d901      	bls.n	800797a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e040      	b.n	80079fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800797a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800797e:	2b00      	cmp	r3, #0
 8007980:	da0e      	bge.n	80079a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	705a      	strb	r2, [r3, #1]
 800799e:	e00e      	b.n	80079be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	f003 0207 	and.w	r2, r3, #7
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_PCD_EP_ClrStall+0x82>
 80079da:	2302      	movs	r3, #2
 80079dc:	e00e      	b.n	80079fc <HAL_PCD_EP_ClrStall+0xa0>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f008 fafa 	bl	800ffe6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b096      	sub	sp, #88	; 0x58
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007a0c:	e3b1      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007a1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007a28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 8173 	bne.w	8007d18 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d150      	bne.n	8007ae0 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	81fb      	strh	r3, [r7, #14]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3328      	adds	r3, #40	; 0x28
 8007a66:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	4413      	add	r3, r2
 8007a82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a92:	695a      	ldr	r2, [r3, #20]
 8007a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	441a      	add	r2, r3
 8007a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f012 f86c 	bl	8019b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 835f 	beq.w	8008172 <PCD_EP_ISR_Handler+0x76e>
 8007ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 835a 	bne.w	8008172 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007ade:	e348      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007ae6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007af2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d032      	beq.n	8007b64 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6812      	ldr	r2, [r2, #0]
 8007b16:	4413      	add	r3, r2
 8007b18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b24:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b32:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b36:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f008 fb73 	bl	8010224 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	823b      	strh	r3, [r7, #16]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	8a3a      	ldrh	r2, [r7, #16]
 8007b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b58:	b292      	uxth	r2, r2
 8007b5a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f011 ffe1 	bl	8019b24 <HAL_PCD_SetupStageCallback>
 8007b62:	e306      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007b64:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f280 8302 	bge.w	8008172 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	83fb      	strh	r3, [r7, #30]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	8bfa      	ldrh	r2, [r7, #30]
 8007b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b88:	b292      	uxth	r2, r2
 8007b8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d019      	beq.n	8007bf0 <PCD_EP_ISR_Handler+0x1ec>
 8007bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d015      	beq.n	8007bf0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bca:	6959      	ldr	r1, [r3, #20]
 8007bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f008 fb25 	bl	8010224 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bdc:	695a      	ldr	r2, [r3, #20]
 8007bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	441a      	add	r2, r3
 8007be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007be8:	2100      	movs	r1, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f011 ffac 	bl	8019b48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007bfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f040 82b5 	bne.w	8008172 <PCD_EP_ISR_Handler+0x76e>
 8007c08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c14:	f000 82ad 	beq.w	8008172 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007c4e:	d91d      	bls.n	8007c8c <PCD_EP_ISR_Handler+0x288>
 8007c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	647b      	str	r3, [r7, #68]	; 0x44
 8007c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <PCD_EP_ISR_Handler+0x266>
 8007c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c66:	3b01      	subs	r3, #1
 8007c68:	647b      	str	r3, [r7, #68]	; 0x44
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	029b      	lsls	r3, r3, #10
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	e026      	b.n	8007cda <PCD_EP_ISR_Handler+0x2d6>
 8007c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <PCD_EP_ISR_Handler+0x2a6>
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	801a      	strh	r2, [r3, #0]
 8007ca8:	e017      	b.n	8007cda <PCD_EP_ISR_Handler+0x2d6>
 8007caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <PCD_EP_ISR_Handler+0x2c0>
 8007cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	029b      	lsls	r3, r3, #10
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cea:	827b      	strh	r3, [r7, #18]
 8007cec:	8a7b      	ldrh	r3, [r7, #18]
 8007cee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cf2:	827b      	strh	r3, [r7, #18]
 8007cf4:	8a7b      	ldrh	r3, [r7, #18]
 8007cf6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cfa:	827b      	strh	r3, [r7, #18]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	8a7b      	ldrh	r3, [r7, #18]
 8007d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	8013      	strh	r3, [r2, #0]
 8007d16:	e22c      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f280 80f6 	bge.w	8007f22 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d68:	b292      	uxth	r2, r2
 8007d6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007d6c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d84:	7b1b      	ldrb	r3, [r3, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d123      	bne.n	8007dd2 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	4413      	add	r3, r2
 8007da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007db2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 808e 	beq.w	8007ed8 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc2:	6959      	ldr	r1, [r3, #20]
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc6:	88da      	ldrh	r2, [r3, #6]
 8007dc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007dcc:	f008 fa2a 	bl	8010224 <USB_ReadPMA>
 8007dd0:	e082      	b.n	8007ed8 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dd4:	78db      	ldrb	r3, [r3, #3]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d10a      	bne.n	8007df0 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007dda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dde:	461a      	mov	r2, r3
 8007de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9d3 	bl	800818e <HAL_PCD_EP_DB_Receive>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007dee:	e073      	b.n	8007ed8 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d022      	beq.n	8007e94 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	4413      	add	r3, r2
 8007e68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e72:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007e76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d02c      	beq.n	8007ed8 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e84:	6959      	ldr	r1, [r3, #20]
 8007e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e88:	891a      	ldrh	r2, [r3, #8]
 8007e8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e8e:	f008 f9c9 	bl	8010224 <USB_ReadPMA>
 8007e92:	e021      	b.n	8007ed8 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	4413      	add	r3, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007ebc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	6959      	ldr	r1, [r3, #20]
 8007ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ece:	895a      	ldrh	r2, [r3, #10]
 8007ed0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ed4:	f008 f9a6 	bl	8010224 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eda:	69da      	ldr	r2, [r3, #28]
 8007edc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ee0:	441a      	add	r2, r3
 8007ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007eee:	441a      	add	r2, r3
 8007ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <PCD_EP_ISR_Handler+0x504>
 8007efc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d206      	bcs.n	8007f16 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f011 fe1a 	bl	8019b48 <HAL_PCD_DataOutStageCallback>
 8007f14:	e005      	b.n	8007f22 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f006 fc60 	bl	800e7e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007f22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8121 	beq.w	8008172 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8007f30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4413      	add	r3, r2
 8007f42:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f82:	78db      	ldrb	r3, [r3, #3]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 80a2 	bne.w	80080ce <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8007f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f92:	7b1b      	ldrb	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8093 	beq.w	80080c0 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d046      	beq.n	8008034 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d126      	bne.n	8007ffc <PCD_EP_ISR_Handler+0x5f8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	4413      	add	r3, r2
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	00da      	lsls	r2, r3, #3
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	4413      	add	r3, r2
 8007fd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fd4:	623b      	str	r3, [r7, #32]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	e061      	b.n	80080c0 <PCD_EP_ISR_Handler+0x6bc>
 8007ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d15d      	bne.n	80080c0 <PCD_EP_ISR_Handler+0x6bc>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008012:	b29b      	uxth	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	4413      	add	r3, r2
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800801c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	00da      	lsls	r2, r3, #3
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	4413      	add	r3, r2
 8008026:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	2200      	movs	r2, #0
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e045      	b.n	80080c0 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d126      	bne.n	8008090 <PCD_EP_ISR_Handler+0x68c>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008050:	b29b      	uxth	r3, r3
 8008052:	461a      	mov	r2, r3
 8008054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008056:	4413      	add	r3, r2
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
 800805a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	00da      	lsls	r2, r3, #3
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	4413      	add	r3, r2
 8008064:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008068:	633b      	str	r3, [r7, #48]	; 0x30
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008074:	b29a      	uxth	r2, r3
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008088:	b29a      	uxth	r2, r3
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	e017      	b.n	80080c0 <PCD_EP_ISR_Handler+0x6bc>
 8008090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d113      	bne.n	80080c0 <PCD_EP_ISR_Handler+0x6bc>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	461a      	mov	r2, r3
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a6:	4413      	add	r3, r2
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	00da      	lsls	r2, r3, #3
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	4413      	add	r3, r2
 80080b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	2200      	movs	r2, #0
 80080be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80080c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f011 fd59 	bl	8019b7e <HAL_PCD_DataInStageCallback>
 80080cc:	e051      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80080ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d144      	bne.n	8008164 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4413      	add	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	4413      	add	r3, r2
 80080f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800810a:	429a      	cmp	r2, r3
 800810c:	d907      	bls.n	800811e <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800810e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008116:	1ad2      	subs	r2, r2, r3
 8008118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800811a:	619a      	str	r2, [r3, #24]
 800811c:	e002      	b.n	8008124 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800811e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008120:	2200      	movs	r2, #0
 8008122:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800812c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f011 fd23 	bl	8019b7e <HAL_PCD_DataInStageCallback>
 8008138:	e01b      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800813a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008142:	441a      	add	r2, r3
 8008144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008146:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008150:	441a      	add	r2, r3
 8008152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008154:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800815c:	4618      	mov	r0, r3
 800815e:	f006 fb40 	bl	800e7e2 <USB_EPStartXfer>
 8008162:	e006      	b.n	8008172 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008164:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008168:	461a      	mov	r2, r3
 800816a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f917 	bl	80083a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800817a:	b29b      	uxth	r3, r3
 800817c:	b21b      	sxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	f6ff ac45 	blt.w	8007a0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3758      	adds	r7, #88	; 0x58
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b088      	sub	sp, #32
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	4613      	mov	r3, r2
 800819a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d07c      	beq.n	80082a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	461a      	mov	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4413      	add	r3, r2
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	4413      	add	r3, r2
 80081c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	8b7b      	ldrh	r3, [r7, #26]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d306      	bcc.n	80081e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	8b7b      	ldrh	r3, [r7, #26]
 80081dc:	1ad2      	subs	r2, r2, r3
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	619a      	str	r2, [r3, #24]
 80081e2:	e002      	b.n	80081ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2200      	movs	r2, #0
 80081e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d123      	bne.n	800823a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	833b      	strh	r3, [r7, #24]
 800820e:	8b3b      	ldrh	r3, [r7, #24]
 8008210:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008214:	833b      	strh	r3, [r7, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	441a      	add	r2, r3
 8008224:	8b3b      	ldrh	r3, [r7, #24]
 8008226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	b29b      	uxth	r3, r3
 8008238:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800823a:	88fb      	ldrh	r3, [r7, #6]
 800823c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01f      	beq.n	8008284 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825e:	82fb      	strh	r3, [r7, #22]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	441a      	add	r2, r3
 800826e:	8afb      	ldrh	r3, [r7, #22]
 8008270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008280:	b29b      	uxth	r3, r3
 8008282:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008284:	8b7b      	ldrh	r3, [r7, #26]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8085 	beq.w	8008396 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6959      	ldr	r1, [r3, #20]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	891a      	ldrh	r2, [r3, #8]
 8008298:	8b7b      	ldrh	r3, [r7, #26]
 800829a:	f007 ffc3 	bl	8010224 <USB_ReadPMA>
 800829e:	e07a      	b.n	8008396 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	4413      	add	r3, r2
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	4413      	add	r3, r2
 80082ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	8b7b      	ldrh	r3, [r7, #26]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d306      	bcc.n	80082de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	8b7b      	ldrh	r3, [r7, #26]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	619a      	str	r2, [r3, #24]
 80082dc:	e002      	b.n	80082e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2200      	movs	r2, #0
 80082e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d123      	bne.n	8008334 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	83fb      	strh	r3, [r7, #30]
 8008308:	8bfb      	ldrh	r3, [r7, #30]
 800830a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800830e:	83fb      	strh	r3, [r7, #30]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	441a      	add	r2, r3
 800831e:	8bfb      	ldrh	r3, [r7, #30]
 8008320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	b29b      	uxth	r3, r3
 8008332:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d11f      	bne.n	800837e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	83bb      	strh	r3, [r7, #28]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	441a      	add	r2, r3
 8008368:	8bbb      	ldrh	r3, [r7, #28]
 800836a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008376:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800837a:	b29b      	uxth	r3, r3
 800837c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800837e:	8b7b      	ldrh	r3, [r7, #26]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6959      	ldr	r1, [r3, #20]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	895a      	ldrh	r2, [r3, #10]
 8008390:	8b7b      	ldrh	r3, [r7, #26]
 8008392:	f007 ff47 	bl	8010224 <USB_ReadPMA>
    }
  }

  return count;
 8008396:	8b7b      	ldrh	r3, [r7, #26]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b0a4      	sub	sp, #144	; 0x90
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 81db 	beq.w	8008770 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	4413      	add	r3, r2
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	4413      	add	r3, r2
 80083d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d907      	bls.n	80083fe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	619a      	str	r2, [r3, #24]
 80083fc:	e002      	b.n	8008404 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 80b9 	bne.w	8008580 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d126      	bne.n	8008464 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008424:	b29b      	uxth	r3, r3
 8008426:	461a      	mov	r2, r3
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	4413      	add	r3, r2
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	00da      	lsls	r2, r3, #3
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	4413      	add	r3, r2
 8008438:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008448:	b29a      	uxth	r2, r3
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	801a      	strh	r2, [r3, #0]
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845c:	b29a      	uxth	r2, r3
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	e01a      	b.n	800849a <HAL_PCD_EP_DB_Transmit+0xfa>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d116      	bne.n	800849a <HAL_PCD_EP_DB_Transmit+0xfa>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800847a:	b29b      	uxth	r3, r3
 800847c:	461a      	mov	r2, r3
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	4413      	add	r3, r2
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	00da      	lsls	r2, r3, #3
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	4413      	add	r3, r2
 800848e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008492:	633b      	str	r3, [r7, #48]	; 0x30
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	2200      	movs	r2, #0
 8008498:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d126      	bne.n	80084f6 <HAL_PCD_EP_DB_Transmit+0x156>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	61fb      	str	r3, [r7, #28]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	00da      	lsls	r2, r3, #3
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084ce:	61bb      	str	r3, [r7, #24]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084da:	b29a      	uxth	r2, r3
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e017      	b.n	8008526 <HAL_PCD_EP_DB_Transmit+0x186>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d113      	bne.n	8008526 <HAL_PCD_EP_DB_Transmit+0x186>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008506:	b29b      	uxth	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	4413      	add	r3, r2
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	00da      	lsls	r2, r3, #3
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	4413      	add	r3, r2
 800851a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800851e:	623b      	str	r3, [r7, #32]
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	2200      	movs	r2, #0
 8008524:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f011 fb26 	bl	8019b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 82fa 	beq.w	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008558:	82fb      	strh	r3, [r7, #22]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	441a      	add	r2, r3
 8008568:	8afb      	ldrh	r3, [r7, #22]
 800856a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800856e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800857a:	b29b      	uxth	r3, r3
 800857c:	8013      	strh	r3, [r2, #0]
 800857e:	e2d8      	b.n	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d021      	beq.n	80085ce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	441a      	add	r2, r3
 80085b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80085ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	f040 82ac 	bne.w	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	695a      	ldr	r2, [r3, #20]
 80085de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085e2:	441a      	add	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	69da      	ldr	r2, [r3, #28]
 80085ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085f0:	441a      	add	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d30b      	bcc.n	800861a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6a1a      	ldr	r2, [r3, #32]
 800860e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008612:	1ad2      	subs	r2, r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	621a      	str	r2, [r3, #32]
 8008618:	e017      	b.n	800864a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d108      	bne.n	8008634 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008632:	e00a      	b.n	800864a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d165      	bne.n	800871e <HAL_PCD_EP_DB_Transmit+0x37e>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008660:	b29b      	uxth	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008666:	4413      	add	r3, r2
 8008668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	00da      	lsls	r2, r3, #3
 8008670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008672:	4413      	add	r3, r2
 8008674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008678:	63bb      	str	r3, [r7, #56]	; 0x38
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008684:	b29a      	uxth	r2, r3
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800868e:	2b3e      	cmp	r3, #62	; 0x3e
 8008690:	d91d      	bls.n	80086ce <HAL_PCD_EP_DB_Transmit+0x32e>
 8008692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	64bb      	str	r3, [r7, #72]	; 0x48
 800869a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <HAL_PCD_EP_DB_Transmit+0x30c>
 80086a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a8:	3b01      	subs	r3, #1
 80086aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	029b      	lsls	r3, r3, #10
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	4313      	orrs	r3, r2
 80086bc:	b29b      	uxth	r3, r3
 80086be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e044      	b.n	8008758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80086ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <HAL_PCD_EP_DB_Transmit+0x34c>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	801a      	strh	r2, [r3, #0]
 80086ea:	e035      	b.n	8008758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80086ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <HAL_PCD_EP_DB_Transmit+0x366>
 8008700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008702:	3301      	adds	r3, #1
 8008704:	64bb      	str	r3, [r7, #72]	; 0x48
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29a      	uxth	r2, r3
 800870c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870e:	b29b      	uxth	r3, r3
 8008710:	029b      	lsls	r3, r3, #10
 8008712:	b29b      	uxth	r3, r3
 8008714:	4313      	orrs	r3, r2
 8008716:	b29a      	uxth	r2, r3
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	801a      	strh	r2, [r3, #0]
 800871c:	e01c      	b.n	8008758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d118      	bne.n	8008758 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	647b      	str	r3, [r7, #68]	; 0x44
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008734:	b29b      	uxth	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873a:	4413      	add	r3, r2
 800873c:	647b      	str	r3, [r7, #68]	; 0x44
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	00da      	lsls	r2, r3, #3
 8008744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008746:	4413      	add	r3, r2
 8008748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800874c:	643b      	str	r3, [r7, #64]	; 0x40
 800874e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008752:	b29a      	uxth	r2, r3
 8008754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008756:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6959      	ldr	r1, [r3, #20]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	891a      	ldrh	r2, [r3, #8]
 8008764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008768:	b29b      	uxth	r3, r3
 800876a:	f007 fd19 	bl	80101a0 <USB_WritePMA>
 800876e:	e1e0      	b.n	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008778:	b29b      	uxth	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	4413      	add	r3, r2
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	4413      	add	r3, r2
 800878a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008794:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d307      	bcc.n	80087b4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80087ac:	1ad2      	subs	r2, r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	619a      	str	r2, [r3, #24]
 80087b2:	e002      	b.n	80087ba <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 80c0 	bne.w	8008944 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d126      	bne.n	800881a <HAL_PCD_EP_DB_Transmit+0x47a>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087da:	b29b      	uxth	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087e0:	4413      	add	r3, r2
 80087e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	00da      	lsls	r2, r3, #3
 80087ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087ec:	4413      	add	r3, r2
 80087ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80087f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008812:	b29a      	uxth	r2, r3
 8008814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008816:	801a      	strh	r2, [r3, #0]
 8008818:	e01a      	b.n	8008850 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d116      	bne.n	8008850 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	667b      	str	r3, [r7, #100]	; 0x64
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008830:	b29b      	uxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008836:	4413      	add	r3, r2
 8008838:	667b      	str	r3, [r7, #100]	; 0x64
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	00da      	lsls	r2, r3, #3
 8008840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008842:	4413      	add	r3, r2
 8008844:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008848:	663b      	str	r3, [r7, #96]	; 0x60
 800884a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800884c:	2200      	movs	r2, #0
 800884e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	677b      	str	r3, [r7, #116]	; 0x74
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d12b      	bne.n	80088b6 <HAL_PCD_EP_DB_Transmit+0x516>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886c:	b29b      	uxth	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008872:	4413      	add	r3, r2
 8008874:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	00da      	lsls	r2, r3, #3
 800887c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887e:	4413      	add	r3, r2
 8008880:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e017      	b.n	80088e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d113      	bne.n	80088e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088cc:	4413      	add	r3, r2
 80088ce:	677b      	str	r3, [r7, #116]	; 0x74
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	00da      	lsls	r2, r3, #3
 80088d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088d8:	4413      	add	r3, r2
 80088da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088de:	673b      	str	r3, [r7, #112]	; 0x70
 80088e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e2:	2200      	movs	r2, #0
 80088e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	4619      	mov	r1, r3
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f011 f946 	bl	8019b7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80088f2:	88fb      	ldrh	r3, [r7, #6]
 80088f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f040 811a 	bne.w	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008918:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	441a      	add	r2, r3
 800892a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]
 8008942:	e0f6      	b.n	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008944:	88fb      	ldrh	r3, [r7, #6]
 8008946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d121      	bne.n	8008992 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29b      	uxth	r3, r3
 8008960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008968:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	441a      	add	r2, r3
 800897a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008998:	2b01      	cmp	r3, #1
 800899a:	f040 80ca 	bne.w	8008b32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	695a      	ldr	r2, [r3, #20]
 80089a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80089a6:	441a      	add	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80089b4:	441a      	add	r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	6a1a      	ldr	r2, [r3, #32]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d30b      	bcc.n	80089de <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6a1a      	ldr	r2, [r3, #32]
 80089d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	621a      	str	r2, [r3, #32]
 80089dc:	e017      	b.n	8008a0e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d108      	bne.n	80089f8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80089e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80089ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80089f6:	e00a      	b.n	8008a0e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	657b      	str	r3, [r7, #84]	; 0x54
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	785b      	ldrb	r3, [r3, #1]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d165      	bne.n	8008ae8 <HAL_PCD_EP_DB_Transmit+0x748>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a30:	4413      	add	r3, r2
 8008a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	00da      	lsls	r2, r3, #3
 8008a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a58:	2b3e      	cmp	r3, #62	; 0x3e
 8008a5a:	d91d      	bls.n	8008a98 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a72:	3b01      	subs	r3, #1
 8008a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	029b      	lsls	r3, r3, #10
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	4313      	orrs	r3, r2
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a94:	801a      	strh	r2, [r3, #0]
 8008a96:	e041      	b.n	8008b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <HAL_PCD_EP_DB_Transmit+0x716>
 8008aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e032      	b.n	8008b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_PCD_EP_DB_Transmit+0x730>
 8008aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008acc:	3301      	adds	r3, #1
 8008ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	029b      	lsls	r3, r3, #10
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ae4:	801a      	strh	r2, [r3, #0]
 8008ae6:	e019      	b.n	8008b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	785b      	ldrb	r3, [r3, #1]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d115      	bne.n	8008b1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	461a      	mov	r2, r3
 8008afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008afe:	4413      	add	r3, r2
 8008b00:	657b      	str	r3, [r7, #84]	; 0x54
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	00da      	lsls	r2, r3, #3
 8008b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b10:	653b      	str	r3, [r7, #80]	; 0x50
 8008b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	6959      	ldr	r1, [r3, #20]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	895a      	ldrh	r2, [r3, #10]
 8008b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f007 fb37 	bl	80101a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b4c:	82bb      	strh	r3, [r7, #20]
 8008b4e:	8abb      	ldrh	r3, [r7, #20]
 8008b50:	f083 0310 	eor.w	r3, r3, #16
 8008b54:	82bb      	strh	r3, [r7, #20]
 8008b56:	8abb      	ldrh	r3, [r7, #20]
 8008b58:	f083 0320 	eor.w	r3, r3, #32
 8008b5c:	82bb      	strh	r3, [r7, #20]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	8abb      	ldrh	r3, [r7, #20]
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3790      	adds	r7, #144	; 0x90
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	817b      	strh	r3, [r7, #10]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008b9e:	897b      	ldrh	r3, [r7, #10]
 8008ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00b      	beq.n	8008bc2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008baa:	897b      	ldrh	r3, [r7, #10]
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	e009      	b.n	8008bd6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008bc2:	897a      	ldrh	r2, [r7, #10]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d107      	bne.n	8008bec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2200      	movs	r2, #0
 8008be0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	80da      	strh	r2, [r3, #6]
 8008bea:	e00b      	b.n	8008c04 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	0c1b      	lsrs	r3, r3, #16
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f001 b83a 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008c3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 816f 	beq.w	8008f2e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008c50:	4bb5      	ldr	r3, [pc, #724]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f003 030c 	and.w	r3, r3, #12
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d00c      	beq.n	8008c76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c5c:	4bb2      	ldr	r3, [pc, #712]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f003 030c 	and.w	r3, r3, #12
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d15c      	bne.n	8008d22 <HAL_RCC_OscConfig+0x10e>
 8008c68:	4baf      	ldr	r3, [pc, #700]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c74:	d155      	bne.n	8008d22 <HAL_RCC_OscConfig+0x10e>
 8008c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008c82:	fa93 f3a3 	rbit	r3, r3
 8008c86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008c8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c8e:	fab3 f383 	clz	r3, r3
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f043 0301 	orr.w	r3, r3, #1
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d102      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x94>
 8008ca2:	4ba1      	ldr	r3, [pc, #644]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	e015      	b.n	8008cd4 <HAL_RCC_OscConfig+0xc0>
 8008ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008cb4:	fa93 f3a3 	rbit	r3, r3
 8008cb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cc0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008cc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008cc8:	fa93 f3a3 	rbit	r3, r3
 8008ccc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008cd0:	4b95      	ldr	r3, [pc, #596]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008cd8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008cdc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008ce0:	fa92 f2a2 	rbit	r2, r2
 8008ce4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008ce8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008cec:	fab2 f282 	clz	r2, r2
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	f042 0220 	orr.w	r2, r2, #32
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	f002 021f 	and.w	r2, r2, #31
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8008d02:	4013      	ands	r3, r2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8111 	beq.w	8008f2c <HAL_RCC_OscConfig+0x318>
 8008d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f040 8108 	bne.w	8008f2c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f000 bfc6 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d32:	d106      	bne.n	8008d42 <HAL_RCC_OscConfig+0x12e>
 8008d34:	4b7c      	ldr	r3, [pc, #496]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a7b      	ldr	r2, [pc, #492]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	e036      	b.n	8008db0 <HAL_RCC_OscConfig+0x19c>
 8008d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10c      	bne.n	8008d6c <HAL_RCC_OscConfig+0x158>
 8008d52:	4b75      	ldr	r3, [pc, #468]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a74      	ldr	r2, [pc, #464]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	4b72      	ldr	r3, [pc, #456]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a71      	ldr	r2, [pc, #452]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	e021      	b.n	8008db0 <HAL_RCC_OscConfig+0x19c>
 8008d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d7c:	d10c      	bne.n	8008d98 <HAL_RCC_OscConfig+0x184>
 8008d7e:	4b6a      	ldr	r3, [pc, #424]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a69      	ldr	r2, [pc, #420]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	4b67      	ldr	r3, [pc, #412]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a66      	ldr	r2, [pc, #408]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	e00b      	b.n	8008db0 <HAL_RCC_OscConfig+0x19c>
 8008d98:	4b63      	ldr	r3, [pc, #396]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a62      	ldr	r2, [pc, #392]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	4b60      	ldr	r3, [pc, #384]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a5f      	ldr	r2, [pc, #380]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008db4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d059      	beq.n	8008e74 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc0:	f7fc fa36 	bl	8005230 <HAL_GetTick>
 8008dc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dc8:	e00a      	b.n	8008de0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dca:	f7fc fa31 	bl	8005230 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b64      	cmp	r3, #100	; 0x64
 8008dd8:	d902      	bls.n	8008de0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	f000 bf67 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
 8008de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008de4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008dec:	fa93 f3a3 	rbit	r3, r3
 8008df0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008df4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008df8:	fab3 f383 	clz	r3, r3
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	095b      	lsrs	r3, r3, #5
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <HAL_RCC_OscConfig+0x1fe>
 8008e0c:	4b46      	ldr	r3, [pc, #280]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	e015      	b.n	8008e3e <HAL_RCC_OscConfig+0x22a>
 8008e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008e1e:	fa93 f3a3 	rbit	r3, r3
 8008e22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008e2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008e32:	fa93 f3a3 	rbit	r3, r3
 8008e36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008e3a:	4b3b      	ldr	r3, [pc, #236]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e42:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008e46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008e4a:	fa92 f2a2 	rbit	r2, r2
 8008e4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008e52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008e56:	fab2 f282 	clz	r2, r2
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	f042 0220 	orr.w	r2, r2, #32
 8008e60:	b2d2      	uxtb	r2, r2
 8008e62:	f002 021f 	and.w	r2, r2, #31
 8008e66:	2101      	movs	r1, #1
 8008e68:	fa01 f202 	lsl.w	r2, r1, r2
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0ab      	beq.n	8008dca <HAL_RCC_OscConfig+0x1b6>
 8008e72:	e05c      	b.n	8008f2e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e74:	f7fc f9dc 	bl	8005230 <HAL_GetTick>
 8008e78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e7c:	e00a      	b.n	8008e94 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e7e:	f7fc f9d7 	bl	8005230 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b64      	cmp	r3, #100	; 0x64
 8008e8c:	d902      	bls.n	8008e94 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	f000 bf0d 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
 8008e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008ea0:	fa93 f3a3 	rbit	r3, r3
 8008ea4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008ea8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eac:	fab3 f383 	clz	r3, r3
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	095b      	lsrs	r3, r3, #5
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d102      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x2b2>
 8008ec0:	4b19      	ldr	r3, [pc, #100]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	e015      	b.n	8008ef2 <HAL_RCC_OscConfig+0x2de>
 8008ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ece:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008ed2:	fa93 f3a3 	rbit	r3, r3
 8008ed6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ede:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008ee2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008ee6:	fa93 f3a3 	rbit	r3, r3
 8008eea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <HAL_RCC_OscConfig+0x314>)
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ef6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008efa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008efe:	fa92 f2a2 	rbit	r2, r2
 8008f02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008f06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008f0a:	fab2 f282 	clz	r2, r2
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	f042 0220 	orr.w	r2, r2, #32
 8008f14:	b2d2      	uxtb	r2, r2
 8008f16:	f002 021f 	and.w	r2, r2, #31
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8008f20:	4013      	ands	r3, r2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1ab      	bne.n	8008e7e <HAL_RCC_OscConfig+0x26a>
 8008f26:	e002      	b.n	8008f2e <HAL_RCC_OscConfig+0x31a>
 8008f28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 817f 	beq.w	8009242 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008f44:	4ba7      	ldr	r3, [pc, #668]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f003 030c 	and.w	r3, r3, #12
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00c      	beq.n	8008f6a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008f50:	4ba4      	ldr	r3, [pc, #656]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f003 030c 	and.w	r3, r3, #12
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d173      	bne.n	8009044 <HAL_RCC_OscConfig+0x430>
 8008f5c:	4ba1      	ldr	r3, [pc, #644]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f68:	d16c      	bne.n	8009044 <HAL_RCC_OscConfig+0x430>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f70:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008f74:	fa93 f3a3 	rbit	r3, r3
 8008f78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8008f7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f80:	fab3 f383 	clz	r3, r3
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f043 0301 	orr.w	r3, r3, #1
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d102      	bne.n	8008f9a <HAL_RCC_OscConfig+0x386>
 8008f94:	4b93      	ldr	r3, [pc, #588]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	e013      	b.n	8008fc2 <HAL_RCC_OscConfig+0x3ae>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fa0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008fa4:	fa93 f3a3 	rbit	r3, r3
 8008fa8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008fac:	2302      	movs	r3, #2
 8008fae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008fb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008fb6:	fa93 f3a3 	rbit	r3, r3
 8008fba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008fbe:	4b89      	ldr	r3, [pc, #548]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008fc8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008fcc:	fa92 f2a2 	rbit	r2, r2
 8008fd0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008fd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008fd8:	fab2 f282 	clz	r2, r2
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	f042 0220 	orr.w	r2, r2, #32
 8008fe2:	b2d2      	uxtb	r2, r2
 8008fe4:	f002 021f 	and.w	r2, r2, #31
 8008fe8:	2101      	movs	r1, #1
 8008fea:	fa01 f202 	lsl.w	r2, r1, r2
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <HAL_RCC_OscConfig+0x3f6>
 8008ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ff8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d002      	beq.n	800900a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f000 be52 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800900a:	4b76      	ldr	r3, [pc, #472]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009016:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	21f8      	movs	r1, #248	; 0xf8
 8009020:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009024:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8009028:	fa91 f1a1 	rbit	r1, r1
 800902c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8009030:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8009034:	fab1 f181 	clz	r1, r1
 8009038:	b2c9      	uxtb	r1, r1
 800903a:	408b      	lsls	r3, r1
 800903c:	4969      	ldr	r1, [pc, #420]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 800903e:	4313      	orrs	r3, r2
 8009040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009042:	e0fe      	b.n	8009242 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009048:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8088 	beq.w	8009166 <HAL_RCC_OscConfig+0x552>
 8009056:	2301      	movs	r3, #1
 8009058:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800905c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009060:	fa93 f3a3 	rbit	r3, r3
 8009064:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8009068:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800906c:	fab3 f383 	clz	r3, r3
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	461a      	mov	r2, r3
 800907e:	2301      	movs	r3, #1
 8009080:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009082:	f7fc f8d5 	bl	8005230 <HAL_GetTick>
 8009086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800908a:	e00a      	b.n	80090a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800908c:	f7fc f8d0 	bl	8005230 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d902      	bls.n	80090a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	f000 be06 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
 80090a2:	2302      	movs	r3, #2
 80090a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80090ac:	fa93 f3a3 	rbit	r3, r3
 80090b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80090b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090b8:	fab3 f383 	clz	r3, r3
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f043 0301 	orr.w	r3, r3, #1
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d102      	bne.n	80090d2 <HAL_RCC_OscConfig+0x4be>
 80090cc:	4b45      	ldr	r3, [pc, #276]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	e013      	b.n	80090fa <HAL_RCC_OscConfig+0x4e6>
 80090d2:	2302      	movs	r3, #2
 80090d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80090dc:	fa93 f3a3 	rbit	r3, r3
 80090e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80090e4:	2302      	movs	r3, #2
 80090e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80090ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80090ee:	fa93 f3a3 	rbit	r3, r3
 80090f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80090f6:	4b3b      	ldr	r3, [pc, #236]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2202      	movs	r2, #2
 80090fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009100:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009104:	fa92 f2a2 	rbit	r2, r2
 8009108:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800910c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009110:	fab2 f282 	clz	r2, r2
 8009114:	b2d2      	uxtb	r2, r2
 8009116:	f042 0220 	orr.w	r2, r2, #32
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	f002 021f 	and.w	r2, r2, #31
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f202 	lsl.w	r2, r1, r2
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0af      	beq.n	800908c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912c:	4b2d      	ldr	r3, [pc, #180]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009138:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	21f8      	movs	r1, #248	; 0xf8
 8009142:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009146:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800914a:	fa91 f1a1 	rbit	r1, r1
 800914e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8009152:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009156:	fab1 f181 	clz	r1, r1
 800915a:	b2c9      	uxtb	r1, r1
 800915c:	408b      	lsls	r3, r1
 800915e:	4921      	ldr	r1, [pc, #132]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 8009160:	4313      	orrs	r3, r2
 8009162:	600b      	str	r3, [r1, #0]
 8009164:	e06d      	b.n	8009242 <HAL_RCC_OscConfig+0x62e>
 8009166:	2301      	movs	r3, #1
 8009168:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800916c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009170:	fa93 f3a3 	rbit	r3, r3
 8009174:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8009178:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800917c:	fab3 f383 	clz	r3, r3
 8009180:	b2db      	uxtb	r3, r3
 8009182:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009186:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	461a      	mov	r2, r3
 800918e:	2300      	movs	r3, #0
 8009190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009192:	f7fc f84d 	bl	8005230 <HAL_GetTick>
 8009196:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919a:	e00a      	b.n	80091b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800919c:	f7fc f848 	bl	8005230 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d902      	bls.n	80091b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	f000 bd7e 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
 80091b2:	2302      	movs	r3, #2
 80091b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091bc:	fa93 f3a3 	rbit	r3, r3
 80091c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80091c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091c8:	fab3 f383 	clz	r3, r3
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f043 0301 	orr.w	r3, r3, #1
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d105      	bne.n	80091e8 <HAL_RCC_OscConfig+0x5d4>
 80091dc:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <HAL_RCC_OscConfig+0x5d0>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	e016      	b.n	8009210 <HAL_RCC_OscConfig+0x5fc>
 80091e2:	bf00      	nop
 80091e4:	40021000 	.word	0x40021000
 80091e8:	2302      	movs	r3, #2
 80091ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f2:	fa93 f3a3 	rbit	r3, r3
 80091f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80091fa:	2302      	movs	r3, #2
 80091fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009200:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009204:	fa93 f3a3 	rbit	r3, r3
 8009208:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800920c:	4bbf      	ldr	r3, [pc, #764]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2202      	movs	r2, #2
 8009212:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009216:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800921a:	fa92 f2a2 	rbit	r2, r2
 800921e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8009222:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009226:	fab2 f282 	clz	r2, r2
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	f042 0220 	orr.w	r2, r2, #32
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	f002 021f 	and.w	r2, r2, #31
 8009236:	2101      	movs	r1, #1
 8009238:	fa01 f202 	lsl.w	r2, r1, r2
 800923c:	4013      	ands	r3, r2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1ac      	bne.n	800919c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8113 	beq.w	800947e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800925c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d07c      	beq.n	8009362 <HAL_RCC_OscConfig+0x74e>
 8009268:	2301      	movs	r3, #1
 800926a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009272:	fa93 f3a3 	rbit	r3, r3
 8009276:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800927a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800927e:	fab3 f383 	clz	r3, r3
 8009282:	b2db      	uxtb	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	4ba2      	ldr	r3, [pc, #648]	; (8009510 <HAL_RCC_OscConfig+0x8fc>)
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	461a      	mov	r2, r3
 800928e:	2301      	movs	r3, #1
 8009290:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009292:	f7fb ffcd 	bl	8005230 <HAL_GetTick>
 8009296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800929a:	e00a      	b.n	80092b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800929c:	f7fb ffc8 	bl	8005230 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d902      	bls.n	80092b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	f000 bcfe 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
 80092b2:	2302      	movs	r3, #2
 80092b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092bc:	fa93 f2a3 	rbit	r2, r3
 80092c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d2:	2202      	movs	r2, #2
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	fa93 f2a3 	rbit	r2, r3
 80092e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80092f6:	2202      	movs	r2, #2
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	fa93 f2a3 	rbit	r2, r3
 8009308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800930c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009312:	4b7e      	ldr	r3, [pc, #504]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 8009314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800931a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800931e:	2102      	movs	r1, #2
 8009320:	6019      	str	r1, [r3, #0]
 8009322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	fa93 f1a3 	rbit	r1, r3
 8009330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009334:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009338:	6019      	str	r1, [r3, #0]
  return result;
 800933a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800933e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	fab3 f383 	clz	r3, r3
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 031f 	and.w	r3, r3, #31
 8009354:	2101      	movs	r1, #1
 8009356:	fa01 f303 	lsl.w	r3, r1, r3
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d09d      	beq.n	800929c <HAL_RCC_OscConfig+0x688>
 8009360:	e08d      	b.n	800947e <HAL_RCC_OscConfig+0x86a>
 8009362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009366:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	fa93 f2a3 	rbit	r2, r3
 800937c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009380:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009384:	601a      	str	r2, [r3, #0]
  return result;
 8009386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800938a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800938e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009390:	fab3 f383 	clz	r3, r3
 8009394:	b2db      	uxtb	r3, r3
 8009396:	461a      	mov	r2, r3
 8009398:	4b5d      	ldr	r3, [pc, #372]	; (8009510 <HAL_RCC_OscConfig+0x8fc>)
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	461a      	mov	r2, r3
 80093a0:	2300      	movs	r3, #0
 80093a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093a4:	f7fb ff44 	bl	8005230 <HAL_GetTick>
 80093a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093ac:	e00a      	b.n	80093c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093ae:	f7fb ff3f 	bl	8005230 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d902      	bls.n	80093c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	f000 bc75 	b.w	8009cae <HAL_RCC_OscConfig+0x109a>
 80093c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80093cc:	2202      	movs	r2, #2
 80093ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	fa93 f2a3 	rbit	r2, r3
 80093de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093f0:	2202      	movs	r2, #2
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	fa93 f2a3 	rbit	r2, r3
 8009402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009410:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009414:	2202      	movs	r2, #2
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800941c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	fa93 f2a3 	rbit	r2, r3
 8009426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800942a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800942e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009430:	4b36      	ldr	r3, [pc, #216]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 8009432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009438:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800943c:	2102      	movs	r1, #2
 800943e:	6019      	str	r1, [r3, #0]
 8009440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009444:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	fa93 f1a3 	rbit	r1, r3
 800944e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009452:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009456:	6019      	str	r1, [r3, #0]
  return result;
 8009458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800945c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	fab3 f383 	clz	r3, r3
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 031f 	and.w	r3, r3, #31
 8009472:	2101      	movs	r1, #1
 8009474:	fa01 f303 	lsl.w	r3, r1, r3
 8009478:	4013      	ands	r3, r2
 800947a:	2b00      	cmp	r3, #0
 800947c:	d197      	bne.n	80093ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800947e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009482:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 81a5 	beq.w	80097de <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800949a:	4b1c      	ldr	r3, [pc, #112]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d116      	bne.n	80094d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094a6:	4b19      	ldr	r3, [pc, #100]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	4a18      	ldr	r2, [pc, #96]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 80094ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094b0:	61d3      	str	r3, [r2, #28]
 80094b2:	4b16      	ldr	r3, [pc, #88]	; (800950c <HAL_RCC_OscConfig+0x8f8>)
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80094ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094d4:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <HAL_RCC_OscConfig+0x900>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d121      	bne.n	8009524 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094e0:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <HAL_RCC_OscConfig+0x900>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a0b      	ldr	r2, [pc, #44]	; (8009514 <HAL_RCC_OscConfig+0x900>)
 80094e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094ec:	f7fb fea0 	bl	8005230 <HAL_GetTick>
 80094f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094f4:	e010      	b.n	8009518 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f6:	f7fb fe9b 	bl	8005230 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b64      	cmp	r3, #100	; 0x64
 8009504:	d908      	bls.n	8009518 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e3d1      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
 800950a:	bf00      	nop
 800950c:	40021000 	.word	0x40021000
 8009510:	10908120 	.word	0x10908120
 8009514:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009518:	4b8d      	ldr	r3, [pc, #564]	; (8009750 <HAL_RCC_OscConfig+0xb3c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0e8      	beq.n	80094f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009528:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d106      	bne.n	8009542 <HAL_RCC_OscConfig+0x92e>
 8009534:	4b87      	ldr	r3, [pc, #540]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	4a86      	ldr	r2, [pc, #536]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	6213      	str	r3, [r2, #32]
 8009540:	e035      	b.n	80095ae <HAL_RCC_OscConfig+0x99a>
 8009542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10c      	bne.n	800956c <HAL_RCC_OscConfig+0x958>
 8009552:	4b80      	ldr	r3, [pc, #512]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	4a7f      	ldr	r2, [pc, #508]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	6213      	str	r3, [r2, #32]
 800955e:	4b7d      	ldr	r3, [pc, #500]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	4a7c      	ldr	r2, [pc, #496]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009564:	f023 0304 	bic.w	r3, r3, #4
 8009568:	6213      	str	r3, [r2, #32]
 800956a:	e020      	b.n	80095ae <HAL_RCC_OscConfig+0x99a>
 800956c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009570:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b05      	cmp	r3, #5
 800957a:	d10c      	bne.n	8009596 <HAL_RCC_OscConfig+0x982>
 800957c:	4b75      	ldr	r3, [pc, #468]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	4a74      	ldr	r2, [pc, #464]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009582:	f043 0304 	orr.w	r3, r3, #4
 8009586:	6213      	str	r3, [r2, #32]
 8009588:	4b72      	ldr	r3, [pc, #456]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	4a71      	ldr	r2, [pc, #452]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800958e:	f043 0301 	orr.w	r3, r3, #1
 8009592:	6213      	str	r3, [r2, #32]
 8009594:	e00b      	b.n	80095ae <HAL_RCC_OscConfig+0x99a>
 8009596:	4b6f      	ldr	r3, [pc, #444]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	4a6e      	ldr	r2, [pc, #440]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	6213      	str	r3, [r2, #32]
 80095a2:	4b6c      	ldr	r3, [pc, #432]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	4a6b      	ldr	r2, [pc, #428]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 80095a8:	f023 0304 	bic.w	r3, r3, #4
 80095ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8081 	beq.w	80096c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095c0:	f7fb fe36 	bl	8005230 <HAL_GetTick>
 80095c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095c8:	e00b      	b.n	80095e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095ca:	f7fb fe31 	bl	8005230 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095da:	4293      	cmp	r3, r2
 80095dc:	d901      	bls.n	80095e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e365      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
 80095e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80095ea:	2202      	movs	r2, #2
 80095ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	fa93 f2a3 	rbit	r2, r3
 80095fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009600:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800960a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800960e:	2202      	movs	r2, #2
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009616:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	fa93 f2a3 	rbit	r2, r3
 8009620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009624:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009628:	601a      	str	r2, [r3, #0]
  return result;
 800962a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800962e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009632:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009634:	fab3 f383 	clz	r3, r3
 8009638:	b2db      	uxtb	r3, r3
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f043 0302 	orr.w	r3, r3, #2
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	d102      	bne.n	800964e <HAL_RCC_OscConfig+0xa3a>
 8009648:	4b42      	ldr	r3, [pc, #264]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	e013      	b.n	8009676 <HAL_RCC_OscConfig+0xa62>
 800964e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009652:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009656:	2202      	movs	r2, #2
 8009658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800965e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	fa93 f2a3 	rbit	r2, r3
 8009668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800966c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	4b38      	ldr	r3, [pc, #224]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800967a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800967e:	2102      	movs	r1, #2
 8009680:	6011      	str	r1, [r2, #0]
 8009682:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009686:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	fa92 f1a2 	rbit	r1, r2
 8009690:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009694:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8009698:	6011      	str	r1, [r2, #0]
  return result;
 800969a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800969e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	fab2 f282 	clz	r2, r2
 80096a8:	b2d2      	uxtb	r2, r2
 80096aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	f002 021f 	and.w	r2, r2, #31
 80096b4:	2101      	movs	r1, #1
 80096b6:	fa01 f202 	lsl.w	r2, r1, r2
 80096ba:	4013      	ands	r3, r2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d084      	beq.n	80095ca <HAL_RCC_OscConfig+0x9b6>
 80096c0:	e083      	b.n	80097ca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096c2:	f7fb fdb5 	bl	8005230 <HAL_GetTick>
 80096c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096ca:	e00b      	b.n	80096e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096cc:	f7fb fdb0 	bl	8005230 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096dc:	4293      	cmp	r3, r2
 80096de:	d901      	bls.n	80096e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e2e4      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
 80096e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80096ec:	2202      	movs	r2, #2
 80096ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	fa93 f2a3 	rbit	r2, r3
 80096fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009702:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800970c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009710:	2202      	movs	r2, #2
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009718:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	fa93 f2a3 	rbit	r2, r3
 8009722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009726:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800972a:	601a      	str	r2, [r3, #0]
  return result;
 800972c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009730:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009734:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009736:	fab3 f383 	clz	r3, r3
 800973a:	b2db      	uxtb	r3, r3
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f043 0302 	orr.w	r3, r3, #2
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b02      	cmp	r3, #2
 8009748:	d106      	bne.n	8009758 <HAL_RCC_OscConfig+0xb44>
 800974a:	4b02      	ldr	r3, [pc, #8]	; (8009754 <HAL_RCC_OscConfig+0xb40>)
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	e017      	b.n	8009780 <HAL_RCC_OscConfig+0xb6c>
 8009750:	40007000 	.word	0x40007000
 8009754:	40021000 	.word	0x40021000
 8009758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800975c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009760:	2202      	movs	r2, #2
 8009762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009768:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	fa93 f2a3 	rbit	r2, r3
 8009772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009776:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	4bb3      	ldr	r3, [pc, #716]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009784:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009788:	2102      	movs	r1, #2
 800978a:	6011      	str	r1, [r2, #0]
 800978c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009790:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	fa92 f1a2 	rbit	r1, r2
 800979a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800979e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80097a2:	6011      	str	r1, [r2, #0]
  return result;
 80097a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097a8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	fab2 f282 	clz	r2, r2
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097b8:	b2d2      	uxtb	r2, r2
 80097ba:	f002 021f 	and.w	r2, r2, #31
 80097be:	2101      	movs	r1, #1
 80097c0:	fa01 f202 	lsl.w	r2, r1, r2
 80097c4:	4013      	ands	r3, r2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d180      	bne.n	80096cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80097ca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d105      	bne.n	80097de <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097d2:	4b9e      	ldr	r3, [pc, #632]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4a9d      	ldr	r2, [pc, #628]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 80097d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80097e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 825e 	beq.w	8009cac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80097f0:	4b96      	ldr	r3, [pc, #600]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f003 030c 	and.w	r3, r3, #12
 80097f8:	2b08      	cmp	r3, #8
 80097fa:	f000 821f 	beq.w	8009c3c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009802:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	2b02      	cmp	r3, #2
 800980c:	f040 8170 	bne.w	8009af0 <HAL_RCC_OscConfig+0xedc>
 8009810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009814:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800981c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800981e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009822:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	fa93 f2a3 	rbit	r2, r3
 800982c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009830:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009834:	601a      	str	r2, [r3, #0]
  return result;
 8009836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800983a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800983e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009840:	fab3 f383 	clz	r3, r3
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800984a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	461a      	mov	r2, r3
 8009852:	2300      	movs	r3, #0
 8009854:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009856:	f7fb fceb 	bl	8005230 <HAL_GetTick>
 800985a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800985e:	e009      	b.n	8009874 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009860:	f7fb fce6 	bl	8005230 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d901      	bls.n	8009874 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e21c      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
 8009874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009878:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800987c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009886:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	fa93 f2a3 	rbit	r2, r3
 8009890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009894:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009898:	601a      	str	r2, [r3, #0]
  return result;
 800989a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800989e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80098a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098a4:	fab3 f383 	clz	r3, r3
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d102      	bne.n	80098be <HAL_RCC_OscConfig+0xcaa>
 80098b8:	4b64      	ldr	r3, [pc, #400]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	e027      	b.n	800990e <HAL_RCC_OscConfig+0xcfa>
 80098be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80098c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098d0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	fa93 f2a3 	rbit	r2, r3
 80098da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80098ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	fa93 f2a3 	rbit	r2, r3
 8009900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009904:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	4b50      	ldr	r3, [pc, #320]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009912:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009916:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800991a:	6011      	str	r1, [r2, #0]
 800991c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009920:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	fa92 f1a2 	rbit	r1, r2
 800992a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800992e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009932:	6011      	str	r1, [r2, #0]
  return result;
 8009934:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009938:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	fab2 f282 	clz	r2, r2
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	f042 0220 	orr.w	r2, r2, #32
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	f002 021f 	and.w	r2, r2, #31
 800994e:	2101      	movs	r1, #1
 8009950:	fa01 f202 	lsl.w	r2, r1, r2
 8009954:	4013      	ands	r3, r2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d182      	bne.n	8009860 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800995a:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 800995c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995e:	f023 020f 	bic.w	r2, r3, #15
 8009962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009966:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	4937      	ldr	r1, [pc, #220]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 8009970:	4313      	orrs	r3, r2
 8009972:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009974:	4b35      	ldr	r3, [pc, #212]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800997c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009980:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6a19      	ldr	r1, [r3, #32]
 8009988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800998c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	430b      	orrs	r3, r1
 8009996:	492d      	ldr	r1, [pc, #180]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 8009998:	4313      	orrs	r3, r2
 800999a:	604b      	str	r3, [r1, #4]
 800999c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80099a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	fa93 f2a3 	rbit	r2, r3
 80099b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80099c0:	601a      	str	r2, [r3, #0]
  return result;
 80099c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80099ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099cc:	fab3 f383 	clz	r3, r3
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80099d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	461a      	mov	r2, r3
 80099de:	2301      	movs	r3, #1
 80099e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e2:	f7fb fc25 	bl	8005230 <HAL_GetTick>
 80099e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80099ea:	e009      	b.n	8009a00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ec:	f7fb fc20 	bl	8005230 <HAL_GetTick>
 80099f0:	4602      	mov	r2, r0
 80099f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d901      	bls.n	8009a00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e156      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
 8009a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	fa93 f2a3 	rbit	r2, r3
 8009a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009a24:	601a      	str	r2, [r3, #0]
  return result;
 8009a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009a2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009a30:	fab3 f383 	clz	r3, r3
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	095b      	lsrs	r3, r3, #5
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d105      	bne.n	8009a50 <HAL_RCC_OscConfig+0xe3c>
 8009a44:	4b01      	ldr	r3, [pc, #4]	; (8009a4c <HAL_RCC_OscConfig+0xe38>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	e02a      	b.n	8009aa0 <HAL_RCC_OscConfig+0xe8c>
 8009a4a:	bf00      	nop
 8009a4c:	40021000 	.word	0x40021000
 8009a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	fa93 f2a3 	rbit	r2, r3
 8009a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	fa93 f2a3 	rbit	r2, r3
 8009a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	4b86      	ldr	r3, [pc, #536]	; (8009cb8 <HAL_RCC_OscConfig+0x10a4>)
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009aa4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009aa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009ab2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009ab6:	6812      	ldr	r2, [r2, #0]
 8009ab8:	fa92 f1a2 	rbit	r1, r2
 8009abc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009ac0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009ac4:	6011      	str	r1, [r2, #0]
  return result;
 8009ac6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009aca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	fab2 f282 	clz	r2, r2
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	f042 0220 	orr.w	r2, r2, #32
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	f002 021f 	and.w	r2, r2, #31
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f43f af7f 	beq.w	80099ec <HAL_RCC_OscConfig+0xdd8>
 8009aee:	e0dd      	b.n	8009cac <HAL_RCC_OscConfig+0x1098>
 8009af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009af4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	fa93 f2a3 	rbit	r2, r3
 8009b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009b14:	601a      	str	r2, [r3, #0]
  return result;
 8009b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009b1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b20:	fab3 f383 	clz	r3, r3
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009b2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	461a      	mov	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b36:	f7fb fb7b 	bl	8005230 <HAL_GetTick>
 8009b3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b3e:	e009      	b.n	8009b54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b40:	f7fb fb76 	bl	8005230 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e0ac      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
 8009b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	fa93 f2a3 	rbit	r2, r3
 8009b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009b78:	601a      	str	r2, [r3, #0]
  return result;
 8009b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009b82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b84:	fab3 f383 	clz	r3, r3
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f043 0301 	orr.w	r3, r3, #1
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d102      	bne.n	8009b9e <HAL_RCC_OscConfig+0xf8a>
 8009b98:	4b47      	ldr	r3, [pc, #284]	; (8009cb8 <HAL_RCC_OscConfig+0x10a4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	e027      	b.n	8009bee <HAL_RCC_OscConfig+0xfda>
 8009b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009ba2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bb0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	fa93 f2a3 	rbit	r2, r3
 8009bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bc8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009bcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	fa93 f2a3 	rbit	r2, r3
 8009be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009be4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	4b33      	ldr	r3, [pc, #204]	; (8009cb8 <HAL_RCC_OscConfig+0x10a4>)
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009bf2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009bf6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009bfa:	6011      	str	r1, [r2, #0]
 8009bfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009c00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009c04:	6812      	ldr	r2, [r2, #0]
 8009c06:	fa92 f1a2 	rbit	r1, r2
 8009c0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009c0e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009c12:	6011      	str	r1, [r2, #0]
  return result;
 8009c14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009c18:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	fab2 f282 	clz	r2, r2
 8009c22:	b2d2      	uxtb	r2, r2
 8009c24:	f042 0220 	orr.w	r2, r2, #32
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	f002 021f 	and.w	r2, r2, #31
 8009c2e:	2101      	movs	r1, #1
 8009c30:	fa01 f202 	lsl.w	r2, r1, r2
 8009c34:	4013      	ands	r3, r2
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d182      	bne.n	8009b40 <HAL_RCC_OscConfig+0xf2c>
 8009c3a:	e037      	b.n	8009cac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e02e      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009c50:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <HAL_RCC_OscConfig+0x10a4>)
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <HAL_RCC_OscConfig+0x10a4>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009c60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009c64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8009c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d117      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009c78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009c7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d10b      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d001      	beq.n	8009cac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e000      	b.n	8009cae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40021000 	.word	0x40021000

08009cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b09e      	sub	sp, #120	; 0x78
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e162      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cd4:	4b90      	ldr	r3, [pc, #576]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d910      	bls.n	8009d04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ce2:	4b8d      	ldr	r3, [pc, #564]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f023 0207 	bic.w	r2, r3, #7
 8009cea:	498b      	ldr	r1, [pc, #556]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cf2:	4b89      	ldr	r3, [pc, #548]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d001      	beq.n	8009d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e14a      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d008      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d10:	4b82      	ldr	r3, [pc, #520]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	497f      	ldr	r1, [pc, #508]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80dc 	beq.w	8009ee8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d13c      	bne.n	8009db2 <HAL_RCC_ClockConfig+0xf6>
 8009d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d40:	fa93 f3a3 	rbit	r3, r3
 8009d44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d48:	fab3 f383 	clz	r3, r3
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d102      	bne.n	8009d62 <HAL_RCC_ClockConfig+0xa6>
 8009d5c:	4b6f      	ldr	r3, [pc, #444]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	e00f      	b.n	8009d82 <HAL_RCC_ClockConfig+0xc6>
 8009d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d6a:	fa93 f3a3 	rbit	r3, r3
 8009d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d74:	663b      	str	r3, [r7, #96]	; 0x60
 8009d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d78:	fa93 f3a3 	rbit	r3, r3
 8009d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d7e:	4b67      	ldr	r3, [pc, #412]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009d86:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d8a:	fa92 f2a2 	rbit	r2, r2
 8009d8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d92:	fab2 f282 	clz	r2, r2
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	f042 0220 	orr.w	r2, r2, #32
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	f002 021f 	and.w	r2, r2, #31
 8009da2:	2101      	movs	r1, #1
 8009da4:	fa01 f202 	lsl.w	r2, r1, r2
 8009da8:	4013      	ands	r3, r2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d17b      	bne.n	8009ea6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e0f3      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d13c      	bne.n	8009e34 <HAL_RCC_ClockConfig+0x178>
 8009dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc2:	fa93 f3a3 	rbit	r3, r3
 8009dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dca:	fab3 f383 	clz	r3, r3
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	095b      	lsrs	r3, r3, #5
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f043 0301 	orr.w	r3, r3, #1
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d102      	bne.n	8009de4 <HAL_RCC_ClockConfig+0x128>
 8009dde:	4b4f      	ldr	r3, [pc, #316]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	e00f      	b.n	8009e04 <HAL_RCC_ClockConfig+0x148>
 8009de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009de8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dec:	fa93 f3a3 	rbit	r3, r3
 8009df0:	647b      	str	r3, [r7, #68]	; 0x44
 8009df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009df6:	643b      	str	r3, [r7, #64]	; 0x40
 8009df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfa:	fa93 f3a3 	rbit	r3, r3
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e00:	4b46      	ldr	r3, [pc, #280]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e08:	63ba      	str	r2, [r7, #56]	; 0x38
 8009e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e0c:	fa92 f2a2 	rbit	r2, r2
 8009e10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e14:	fab2 f282 	clz	r2, r2
 8009e18:	b2d2      	uxtb	r2, r2
 8009e1a:	f042 0220 	orr.w	r2, r2, #32
 8009e1e:	b2d2      	uxtb	r2, r2
 8009e20:	f002 021f 	and.w	r2, r2, #31
 8009e24:	2101      	movs	r1, #1
 8009e26:	fa01 f202 	lsl.w	r2, r1, r2
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d13a      	bne.n	8009ea6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e0b2      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
 8009e34:	2302      	movs	r3, #2
 8009e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	fa93 f3a3 	rbit	r3, r3
 8009e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e42:	fab3 f383 	clz	r3, r3
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f043 0301 	orr.w	r3, r3, #1
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d102      	bne.n	8009e5c <HAL_RCC_ClockConfig+0x1a0>
 8009e56:	4b31      	ldr	r3, [pc, #196]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	e00d      	b.n	8009e78 <HAL_RCC_ClockConfig+0x1bc>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	fa93 f3a3 	rbit	r3, r3
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
 8009e68:	2302      	movs	r3, #2
 8009e6a:	623b      	str	r3, [r7, #32]
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	fa93 f3a3 	rbit	r3, r3
 8009e72:	61fb      	str	r3, [r7, #28]
 8009e74:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2202      	movs	r2, #2
 8009e7a:	61ba      	str	r2, [r7, #24]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	fa92 f2a2 	rbit	r2, r2
 8009e82:	617a      	str	r2, [r7, #20]
  return result;
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	fab2 f282 	clz	r2, r2
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	f042 0220 	orr.w	r2, r2, #32
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	f002 021f 	and.w	r2, r2, #31
 8009e96:	2101      	movs	r1, #1
 8009e98:	fa01 f202 	lsl.w	r2, r1, r2
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e079      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ea6:	4b1d      	ldr	r3, [pc, #116]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f023 0203 	bic.w	r2, r3, #3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	491a      	ldr	r1, [pc, #104]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009eb8:	f7fb f9ba 	bl	8005230 <HAL_GetTick>
 8009ebc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ebe:	e00a      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ec0:	f7fb f9b6 	bl	8005230 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d901      	bls.n	8009ed6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e061      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <HAL_RCC_ClockConfig+0x260>)
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f003 020c 	and.w	r2, r3, #12
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d1eb      	bne.n	8009ec0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0307 	and.w	r3, r3, #7
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d214      	bcs.n	8009f20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f023 0207 	bic.w	r2, r3, #7
 8009efe:	4906      	ldr	r1, [pc, #24]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f06:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <HAL_RCC_ClockConfig+0x25c>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0307 	and.w	r3, r3, #7
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d005      	beq.n	8009f20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e040      	b.n	8009f9a <HAL_RCC_ClockConfig+0x2de>
 8009f18:	40022000 	.word	0x40022000
 8009f1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d008      	beq.n	8009f3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f2c:	4b1d      	ldr	r3, [pc, #116]	; (8009fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	491a      	ldr	r1, [pc, #104]	; (8009fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f4a:	4b16      	ldr	r3, [pc, #88]	; (8009fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4912      	ldr	r1, [pc, #72]	; (8009fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009f5e:	f000 f829 	bl	8009fb4 <HAL_RCC_GetSysClockFreq>
 8009f62:	4601      	mov	r1, r0
 8009f64:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f6c:	22f0      	movs	r2, #240	; 0xf0
 8009f6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	fa92 f2a2 	rbit	r2, r2
 8009f76:	60fa      	str	r2, [r7, #12]
  return result;
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	fab2 f282 	clz	r2, r2
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	40d3      	lsrs	r3, r2
 8009f82:	4a09      	ldr	r2, [pc, #36]	; (8009fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8009f84:	5cd3      	ldrb	r3, [r2, r3]
 8009f86:	fa21 f303 	lsr.w	r3, r1, r3
 8009f8a:	4a08      	ldr	r2, [pc, #32]	; (8009fac <HAL_RCC_ClockConfig+0x2f0>)
 8009f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009f8e:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <HAL_RCC_ClockConfig+0x2f4>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fb f908 	bl	80051a8 <HAL_InitTick>
  
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3778      	adds	r7, #120	; 0x78
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	40021000 	.word	0x40021000
 8009fa8:	0801c63c 	.word	0x0801c63c
 8009fac:	20000004 	.word	0x20000004
 8009fb0:	20000008 	.word	0x20000008

08009fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b08b      	sub	sp, #44	; 0x2c
 8009fb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61bb      	str	r3, [r7, #24]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009fce:	4b2a      	ldr	r3, [pc, #168]	; (800a078 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	f003 030c 	and.w	r3, r3, #12
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	d002      	beq.n	8009fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8009fde:	2b08      	cmp	r3, #8
 8009fe0:	d003      	beq.n	8009fea <HAL_RCC_GetSysClockFreq+0x36>
 8009fe2:	e03f      	b.n	800a064 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009fe4:	4b25      	ldr	r3, [pc, #148]	; (800a07c <HAL_RCC_GetSysClockFreq+0xc8>)
 8009fe6:	623b      	str	r3, [r7, #32]
      break;
 8009fe8:	e03f      	b.n	800a06a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009ff0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009ff4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	fa92 f2a2 	rbit	r2, r2
 8009ffc:	607a      	str	r2, [r7, #4]
  return result;
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	fab2 f282 	clz	r2, r2
 800a004:	b2d2      	uxtb	r2, r2
 800a006:	40d3      	lsrs	r3, r2
 800a008:	4a1d      	ldr	r2, [pc, #116]	; (800a080 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
 800a00c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a00e:	4b1a      	ldr	r3, [pc, #104]	; (800a078 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	f003 030f 	and.w	r3, r3, #15
 800a016:	220f      	movs	r2, #15
 800a018:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	fa92 f2a2 	rbit	r2, r2
 800a020:	60fa      	str	r2, [r7, #12]
  return result;
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	fab2 f282 	clz	r2, r2
 800a028:	b2d2      	uxtb	r2, r2
 800a02a:	40d3      	lsrs	r3, r2
 800a02c:	4a15      	ldr	r2, [pc, #84]	; (800a084 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a02e:	5cd3      	ldrb	r3, [r2, r3]
 800a030:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a03c:	4a0f      	ldr	r2, [pc, #60]	; (800a07c <HAL_RCC_GetSysClockFreq+0xc8>)
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	fbb2 f2f3 	udiv	r2, r2, r3
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	fb02 f303 	mul.w	r3, r2, r3
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
 800a04c:	e007      	b.n	800a05e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a04e:	4a0b      	ldr	r2, [pc, #44]	; (800a07c <HAL_RCC_GetSysClockFreq+0xc8>)
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	fbb2 f2f3 	udiv	r2, r2, r3
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	fb02 f303 	mul.w	r3, r2, r3
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	623b      	str	r3, [r7, #32]
      break;
 800a062:	e002      	b.n	800a06a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <HAL_RCC_GetSysClockFreq+0xc8>)
 800a066:	623b      	str	r3, [r7, #32]
      break;
 800a068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a06a:	6a3b      	ldr	r3, [r7, #32]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	372c      	adds	r7, #44	; 0x2c
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	40021000 	.word	0x40021000
 800a07c:	007a1200 	.word	0x007a1200
 800a080:	0801c654 	.word	0x0801c654
 800a084:	0801c664 	.word	0x0801c664

0800a088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a08c:	4b03      	ldr	r3, [pc, #12]	; (800a09c <HAL_RCC_GetHCLKFreq+0x14>)
 800a08e:	681b      	ldr	r3, [r3, #0]
}
 800a090:	4618      	mov	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000004 	.word	0x20000004

0800a0a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a0a6:	f7ff ffef 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a0b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	fa92 f2a2 	rbit	r2, r2
 800a0c0:	603a      	str	r2, [r7, #0]
  return result;
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	fab2 f282 	clz	r2, r2
 800a0c8:	b2d2      	uxtb	r2, r2
 800a0ca:	40d3      	lsrs	r3, r2
 800a0cc:	4a04      	ldr	r2, [pc, #16]	; (800a0e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a0ce:	5cd3      	ldrb	r3, [r2, r3]
 800a0d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	40021000 	.word	0x40021000
 800a0e0:	0801c64c 	.word	0x0801c64c

0800a0e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a0ea:	f7ff ffcd 	bl	800a088 <HAL_RCC_GetHCLKFreq>
 800a0ee:	4601      	mov	r1, r0
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a0f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a0fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	fa92 f2a2 	rbit	r2, r2
 800a104:	603a      	str	r2, [r7, #0]
  return result;
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	fab2 f282 	clz	r2, r2
 800a10c:	b2d2      	uxtb	r2, r2
 800a10e:	40d3      	lsrs	r3, r2
 800a110:	4a04      	ldr	r2, [pc, #16]	; (800a124 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a112:	5cd3      	ldrb	r3, [r2, r3]
 800a114:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40021000 	.word	0x40021000
 800a124:	0801c64c 	.word	0x0801c64c

0800a128 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b092      	sub	sp, #72	; 0x48
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a138:	2300      	movs	r3, #0
 800a13a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 80d4 	beq.w	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a14c:	4b4e      	ldr	r3, [pc, #312]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10e      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a158:	4b4b      	ldr	r3, [pc, #300]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	4a4a      	ldr	r2, [pc, #296]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a15e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a162:	61d3      	str	r3, [r2, #28]
 800a164:	4b48      	ldr	r3, [pc, #288]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a16c:	60bb      	str	r3, [r7, #8]
 800a16e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a176:	4b45      	ldr	r3, [pc, #276]	; (800a28c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d118      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a182:	4b42      	ldr	r3, [pc, #264]	; (800a28c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a41      	ldr	r2, [pc, #260]	; (800a28c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a18c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a18e:	f7fb f84f 	bl	8005230 <HAL_GetTick>
 800a192:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a194:	e008      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a196:	f7fb f84b 	bl	8005230 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b64      	cmp	r3, #100	; 0x64
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e1d6      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1a8:	4b38      	ldr	r3, [pc, #224]	; (800a28c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0f0      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a1b4:	4b34      	ldr	r3, [pc, #208]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 8084 	beq.w	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d07c      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a1d4:	4b2c      	ldr	r3, [pc, #176]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	fa93 f3a3 	rbit	r3, r3
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a1ee:	fab3 f383 	clz	r3, r3
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4b26      	ldr	r3, [pc, #152]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2301      	movs	r3, #1
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a206:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	fa93 f3a3 	rbit	r3, r3
 800a20e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a212:	fab3 f383 	clz	r3, r3
 800a216:	b2db      	uxtb	r3, r3
 800a218:	461a      	mov	r2, r3
 800a21a:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	461a      	mov	r2, r3
 800a222:	2300      	movs	r3, #0
 800a224:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a226:	4a18      	ldr	r2, [pc, #96]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d04b      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a236:	f7fa fffb 	bl	8005230 <HAL_GetTick>
 800a23a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a23c:	e00a      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a23e:	f7fa fff7 	bl	8005230 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	f241 3288 	movw	r2, #5000	; 0x1388
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d901      	bls.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e180      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a254:	2302      	movs	r3, #2
 800a256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	fa93 f3a3 	rbit	r3, r3
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
 800a260:	2302      	movs	r3, #2
 800a262:	623b      	str	r3, [r7, #32]
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	fa93 f3a3 	rbit	r3, r3
 800a26a:	61fb      	str	r3, [r7, #28]
  return result;
 800a26c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a26e:	fab3 f383 	clz	r3, r3
 800a272:	b2db      	uxtb	r3, r3
 800a274:	095b      	lsrs	r3, r3, #5
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f043 0302 	orr.w	r3, r3, #2
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d108      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a282:	4b01      	ldr	r3, [pc, #4]	; (800a288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	e00d      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a288:	40021000 	.word	0x40021000
 800a28c:	40007000 	.word	0x40007000
 800a290:	10908100 	.word	0x10908100
 800a294:	2302      	movs	r3, #2
 800a296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	fa93 f3a3 	rbit	r3, r3
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	4b9a      	ldr	r3, [pc, #616]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	613a      	str	r2, [r7, #16]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	fa92 f2a2 	rbit	r2, r2
 800a2ae:	60fa      	str	r2, [r7, #12]
  return result;
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	fab2 f282 	clz	r2, r2
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2bc:	b2d2      	uxtb	r2, r2
 800a2be:	f002 021f 	and.w	r2, r2, #31
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	fa01 f202 	lsl.w	r2, r1, r2
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0b7      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a2ce:	4b8f      	ldr	r3, [pc, #572]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	498c      	ldr	r1, [pc, #560]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a2e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d105      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e8:	4b88      	ldr	r3, [pc, #544]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	4a87      	ldr	r2, [pc, #540]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a2ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d008      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a300:	4b82      	ldr	r3, [pc, #520]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a304:	f023 0203 	bic.w	r2, r3, #3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	497f      	ldr	r1, [pc, #508]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d008      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a31e:	4b7b      	ldr	r3, [pc, #492]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	4978      	ldr	r1, [pc, #480]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d008      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a33c:	4b73      	ldr	r3, [pc, #460]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	4970      	ldr	r1, [pc, #448]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0320 	and.w	r3, r3, #32
 800a356:	2b00      	cmp	r3, #0
 800a358:	d008      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a35a:	4b6c      	ldr	r3, [pc, #432]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	f023 0210 	bic.w	r2, r3, #16
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	4969      	ldr	r1, [pc, #420]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a368:	4313      	orrs	r3, r2
 800a36a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d008      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a378:	4b64      	ldr	r3, [pc, #400]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a384:	4961      	ldr	r1, [pc, #388]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a386:	4313      	orrs	r3, r2
 800a388:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a396:	4b5d      	ldr	r3, [pc, #372]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39a:	f023 0220 	bic.w	r2, r3, #32
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	495a      	ldr	r1, [pc, #360]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3b4:	4b55      	ldr	r3, [pc, #340]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	4952      	ldr	r1, [pc, #328]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a3d2:	4b4e      	ldr	r3, [pc, #312]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	494b      	ldr	r1, [pc, #300]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d008      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a3f0:	4b46      	ldr	r3, [pc, #280]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	4943      	ldr	r1, [pc, #268]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d008      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a40e:	4b3f      	ldr	r3, [pc, #252]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	493c      	ldr	r1, [pc, #240]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d008      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a42c:	4b37      	ldr	r3, [pc, #220]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a430:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	4934      	ldr	r1, [pc, #208]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a446:	2b00      	cmp	r3, #0
 800a448:	d008      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a44a:	4b30      	ldr	r3, [pc, #192]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a456:	492d      	ldr	r1, [pc, #180]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a458:	4313      	orrs	r3, r2
 800a45a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d008      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a468:	4b28      	ldr	r3, [pc, #160]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a474:	4925      	ldr	r1, [pc, #148]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a476:	4313      	orrs	r3, r2
 800a478:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d008      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a486:	4b21      	ldr	r3, [pc, #132]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	491e      	ldr	r1, [pc, #120]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a494:	4313      	orrs	r3, r2
 800a496:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d008      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a4a4:	4b19      	ldr	r3, [pc, #100]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b0:	4916      	ldr	r1, [pc, #88]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d008      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a4c2:	4b12      	ldr	r3, [pc, #72]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ce:	490f      	ldr	r1, [pc, #60]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ec:	4907      	ldr	r1, [pc, #28]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00c      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a4fe:	4b03      	ldr	r3, [pc, #12]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a502:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	e002      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a50a:	bf00      	nop
 800a50c:	40021000 	.word	0x40021000
 800a510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a512:	4913      	ldr	r1, [pc, #76]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a514:	4313      	orrs	r3, r2
 800a516:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d008      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a524:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a528:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a530:	490b      	ldr	r1, [pc, #44]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a532:	4313      	orrs	r3, r2
 800a534:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a542:	4b07      	ldr	r3, [pc, #28]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	4904      	ldr	r1, [pc, #16]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a550:	4313      	orrs	r3, r2
 800a552:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3748      	adds	r7, #72	; 0x48
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	40021000 	.word	0x40021000

0800a564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e09d      	b.n	800a6b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d108      	bne.n	800a590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a586:	d009      	beq.n	800a59c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	61da      	str	r2, [r3, #28]
 800a58e:	e005      	b.n	800a59c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fa fa32 	bl	8004a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5dc:	d902      	bls.n	800a5e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	e002      	b.n	800a5ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a5f2:	d007      	beq.n	800a604 <HAL_SPI_Init+0xa0>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5fc:	d002      	beq.n	800a604 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	431a      	orrs	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a63c:	431a      	orrs	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a646:	ea42 0103 	orr.w	r1, r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	0c1b      	lsrs	r3, r3, #16
 800a660:	f003 0204 	and.w	r2, r3, #4
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	f003 0310 	and.w	r3, r3, #16
 800a66c:	431a      	orrs	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a680:	ea42 0103 	orr.w	r1, r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69da      	ldr	r2, [r3, #28]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b088      	sub	sp, #32
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d101      	bne.n	800a6dc <HAL_SPI_Transmit+0x22>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e15f      	b.n	800a99c <HAL_SPI_Transmit+0x2e2>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6e4:	f7fa fda4 	bl	8005230 <HAL_GetTick>
 800a6e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d002      	beq.n	800a700 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6fe:	e148      	b.n	800a992 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <HAL_SPI_Transmit+0x52>
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a710:	e13f      	b.n	800a992 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2203      	movs	r2, #3
 800a716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	88fa      	ldrh	r2, [r7, #6]
 800a72a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	88fa      	ldrh	r2, [r7, #6]
 800a730:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a75c:	d10f      	bne.n	800a77e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a76c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a77c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a788:	2b40      	cmp	r3, #64	; 0x40
 800a78a:	d007      	beq.n	800a79c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a79a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a7a4:	d94f      	bls.n	800a846 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <HAL_SPI_Transmit+0xfa>
 800a7ae:	8afb      	ldrh	r3, [r7, #22]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d142      	bne.n	800a83a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b8:	881a      	ldrh	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	1c9a      	adds	r2, r3, #2
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7d8:	e02f      	b.n	800a83a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d112      	bne.n	800a80e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	881a      	ldrh	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	1c9a      	adds	r2, r3, #2
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a802:	b29b      	uxth	r3, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a80c:	e015      	b.n	800a83a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a80e:	f7fa fd0f 	bl	8005230 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d803      	bhi.n	800a826 <HAL_SPI_Transmit+0x16c>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d102      	bne.n	800a82c <HAL_SPI_Transmit+0x172>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d106      	bne.n	800a83a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a838:	e0ab      	b.n	800a992 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1ca      	bne.n	800a7da <HAL_SPI_Transmit+0x120>
 800a844:	e080      	b.n	800a948 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <HAL_SPI_Transmit+0x19a>
 800a84e:	8afb      	ldrh	r3, [r7, #22]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d174      	bne.n	800a93e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a858:	b29b      	uxth	r3, r3
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d912      	bls.n	800a884 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	881a      	ldrh	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86e:	1c9a      	adds	r2, r3, #2
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a878:	b29b      	uxth	r3, r3
 800a87a:	3b02      	subs	r3, #2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a882:	e05c      	b.n	800a93e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	330c      	adds	r3, #12
 800a88e:	7812      	ldrb	r2, [r2, #0]
 800a890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a8aa:	e048      	b.n	800a93e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d12b      	bne.n	800a912 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d912      	bls.n	800a8ea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	881a      	ldrh	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d4:	1c9a      	adds	r2, r3, #2
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	3b02      	subs	r3, #2
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8e8:	e029      	b.n	800a93e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	330c      	adds	r3, #12
 800a8f4:	7812      	ldrb	r2, [r2, #0]
 800a8f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a910:	e015      	b.n	800a93e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a912:	f7fa fc8d 	bl	8005230 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d803      	bhi.n	800a92a <HAL_SPI_Transmit+0x270>
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d102      	bne.n	800a930 <HAL_SPI_Transmit+0x276>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d106      	bne.n	800a93e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a93c:	e029      	b.n	800a992 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1b1      	bne.n	800a8ac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 fb69 	bl	800b024 <SPI_EndRxTxTransaction>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2220      	movs	r2, #32
 800a95c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10a      	bne.n	800a97c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a966:	2300      	movs	r3, #0
 800a968:	613b      	str	r3, [r7, #16]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	77fb      	strb	r3, [r7, #31]
 800a988:	e003      	b.n	800a992 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08a      	sub	sp, #40	; 0x28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d101      	bne.n	800a9ca <HAL_SPI_TransmitReceive+0x26>
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	e20a      	b.n	800ade0 <HAL_SPI_TransmitReceive+0x43c>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9d2:	f7fa fc2d 	bl	8005230 <HAL_GetTick>
 800a9d6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a9de:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a9e6:	887b      	ldrh	r3, [r7, #2]
 800a9e8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a9ea:	887b      	ldrh	r3, [r7, #2]
 800a9ec:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9ee:	7efb      	ldrb	r3, [r7, #27]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d00e      	beq.n	800aa12 <HAL_SPI_TransmitReceive+0x6e>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9fa:	d106      	bne.n	800aa0a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <HAL_SPI_TransmitReceive+0x66>
 800aa04:	7efb      	ldrb	r3, [r7, #27]
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d003      	beq.n	800aa12 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800aa10:	e1e0      	b.n	800add4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <HAL_SPI_TransmitReceive+0x80>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_SPI_TransmitReceive+0x80>
 800aa1e:	887b      	ldrh	r3, [r7, #2]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d103      	bne.n	800aa2c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800aa2a:	e1d3      	b.n	800add4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d003      	beq.n	800aa40 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2205      	movs	r2, #5
 800aa3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	887a      	ldrh	r2, [r7, #2]
 800aa50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	887a      	ldrh	r2, [r7, #2]
 800aa58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	887a      	ldrh	r2, [r7, #2]
 800aa66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	887a      	ldrh	r2, [r7, #2]
 800aa6c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa82:	d802      	bhi.n	800aa8a <HAL_SPI_TransmitReceive+0xe6>
 800aa84:	8a3b      	ldrh	r3, [r7, #16]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d908      	bls.n	800aa9c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	e007      	b.n	800aaac <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aaaa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d007      	beq.n	800aaca <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aad2:	f240 8081 	bls.w	800abd8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <HAL_SPI_TransmitReceive+0x140>
 800aade:	8a7b      	ldrh	r3, [r7, #18]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d16d      	bne.n	800abc0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	881a      	ldrh	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	1c9a      	adds	r2, r3, #2
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	3b01      	subs	r3, #1
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab08:	e05a      	b.n	800abc0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d11b      	bne.n	800ab50 <HAL_SPI_TransmitReceive+0x1ac>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d016      	beq.n	800ab50 <HAL_SPI_TransmitReceive+0x1ac>
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d113      	bne.n	800ab50 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2c:	881a      	ldrh	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab38:	1c9a      	adds	r2, r3, #2
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d11c      	bne.n	800ab98 <HAL_SPI_TransmitReceive+0x1f4>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d016      	beq.n	800ab98 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	b292      	uxth	r2, r2
 800ab76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7c:	1c9a      	adds	r2, r3, #2
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab94:	2301      	movs	r3, #1
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab98:	f7fa fb4a 	bl	8005230 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d80b      	bhi.n	800abc0 <HAL_SPI_TransmitReceive+0x21c>
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d007      	beq.n	800abc0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800abbe:	e109      	b.n	800add4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d19f      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x166>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d199      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x166>
 800abd6:	e0e3      	b.n	800ada0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d003      	beq.n	800abe8 <HAL_SPI_TransmitReceive+0x244>
 800abe0:	8a7b      	ldrh	r3, [r7, #18]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	f040 80cf 	bne.w	800ad86 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abec:	b29b      	uxth	r3, r3
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d912      	bls.n	800ac18 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf6:	881a      	ldrh	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	1c9a      	adds	r2, r3, #2
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	3b02      	subs	r3, #2
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac16:	e0b6      	b.n	800ad86 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	330c      	adds	r3, #12
 800ac22:	7812      	ldrb	r2, [r2, #0]
 800ac24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac3e:	e0a2      	b.n	800ad86 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f003 0302 	and.w	r3, r3, #2
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d134      	bne.n	800acb8 <HAL_SPI_TransmitReceive+0x314>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d02f      	beq.n	800acb8 <HAL_SPI_TransmitReceive+0x314>
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d12c      	bne.n	800acb8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d912      	bls.n	800ac8e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6c:	881a      	ldrh	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac78:	1c9a      	adds	r2, r3, #2
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	3b02      	subs	r3, #2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac8c:	e012      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	330c      	adds	r3, #12
 800ac98:	7812      	ldrb	r2, [r2, #0]
 800ac9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b01      	subs	r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d148      	bne.n	800ad58 <HAL_SPI_TransmitReceive+0x3b4>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800accc:	b29b      	uxth	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d042      	beq.n	800ad58 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acd8:	b29b      	uxth	r3, r3
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d923      	bls.n	800ad26 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68da      	ldr	r2, [r3, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace8:	b292      	uxth	r2, r2
 800acea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf0:	1c9a      	adds	r2, r3, #2
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	3b02      	subs	r3, #2
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d81f      	bhi.n	800ad54 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad22:	605a      	str	r2, [r3, #4]
 800ad24:	e016      	b.n	800ad54 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f103 020c 	add.w	r2, r3, #12
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	7812      	ldrb	r2, [r2, #0]
 800ad34:	b2d2      	uxtb	r2, r2
 800ad36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad54:	2301      	movs	r3, #1
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ad58:	f7fa fa6a 	bl	8005230 <HAL_GetTick>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d803      	bhi.n	800ad70 <HAL_SPI_TransmitReceive+0x3cc>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6e:	d102      	bne.n	800ad76 <HAL_SPI_TransmitReceive+0x3d2>
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d107      	bne.n	800ad86 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800ad84:	e026      	b.n	800add4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f af57 	bne.w	800ac40 <HAL_SPI_TransmitReceive+0x29c>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f47f af50 	bne.w	800ac40 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 f93d 	bl	800b024 <SPI_EndRxTxTransaction>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800adca:	e003      	b.n	800add4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800addc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3728      	adds	r7, #40	; 0x28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	603b      	str	r3, [r7, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800adf8:	f7fa fa1a 	bl	8005230 <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	4413      	add	r3, r2
 800ae06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae08:	f7fa fa12 	bl	8005230 <HAL_GetTick>
 800ae0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ae0e:	4b39      	ldr	r3, [pc, #228]	; (800aef4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	015b      	lsls	r3, r3, #5
 800ae14:	0d1b      	lsrs	r3, r3, #20
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
 800ae1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae1e:	e054      	b.n	800aeca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae26:	d050      	beq.n	800aeca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae28:	f7fa fa02 	bl	8005230 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d902      	bls.n	800ae3e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d13d      	bne.n	800aeba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae56:	d111      	bne.n	800ae7c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae60:	d004      	beq.n	800ae6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae6a:	d107      	bne.n	800ae7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae84:	d10f      	bne.n	800aea6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e017      	b.n	800aeea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4013      	ands	r3, r2
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	bf0c      	ite	eq
 800aeda:	2301      	moveq	r3, #1
 800aedc:	2300      	movne	r3, #0
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	461a      	mov	r2, r3
 800aee2:	79fb      	ldrb	r3, [r7, #7]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d19b      	bne.n	800ae20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20000004 	.word	0x20000004

0800aef8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	; 0x28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800af0a:	f7fa f991 	bl	8005230 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	1a9b      	subs	r3, r3, r2
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	4413      	add	r3, r2
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800af1a:	f7fa f989 	bl	8005230 <HAL_GetTick>
 800af1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	330c      	adds	r3, #12
 800af26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800af28:	4b3d      	ldr	r3, [pc, #244]	; (800b020 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	00da      	lsls	r2, r3, #3
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	0d1b      	lsrs	r3, r3, #20
 800af38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3a:	fb02 f303 	mul.w	r3, r2, r3
 800af3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800af40:	e060      	b.n	800b004 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800af48:	d107      	bne.n	800af5a <SPI_WaitFifoStateUntilTimeout+0x62>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800af58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af60:	d050      	beq.n	800b004 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af62:	f7fa f965 	bl	8005230 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6e:	429a      	cmp	r2, r3
 800af70:	d902      	bls.n	800af78 <SPI_WaitFifoStateUntilTimeout+0x80>
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	2b00      	cmp	r3, #0
 800af76:	d13d      	bne.n	800aff4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af90:	d111      	bne.n	800afb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af9a:	d004      	beq.n	800afa6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afa4:	d107      	bne.n	800afb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afbe:	d10f      	bne.n	800afe0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e010      	b.n	800b016 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	3b01      	subs	r3, #1
 800b002:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	4013      	ands	r3, r2
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	429a      	cmp	r2, r3
 800b012:	d196      	bne.n	800af42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3728      	adds	r7, #40	; 0x28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20000004 	.word	0x20000004

0800b024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2200      	movs	r2, #0
 800b038:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff ff5b 	bl	800aef8 <SPI_WaitFifoStateUntilTimeout>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b04c:	f043 0220 	orr.w	r2, r3, #32
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e027      	b.n	800b0a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2200      	movs	r2, #0
 800b060:	2180      	movs	r1, #128	; 0x80
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fec0 	bl	800ade8 <SPI_WaitFlagStateUntilTimeout>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b072:	f043 0220 	orr.w	r2, r3, #32
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e014      	b.n	800b0a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2200      	movs	r2, #0
 800b086:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff ff34 	bl	800aef8 <SPI_WaitFifoStateUntilTimeout>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b09a:	f043 0220 	orr.w	r2, r3, #32
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e000      	b.n	800b0a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e054      	b.n	800b16c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d111      	bne.n	800b0f2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 fed0 	bl	800ce7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d102      	bne.n	800b0ea <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a23      	ldr	r2, [pc, #140]	; (800b174 <HAL_TIM_Base_Init+0xc4>)
 800b0e8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3304      	adds	r3, #4
 800b102:	4619      	mov	r1, r3
 800b104:	4610      	mov	r0, r2
 800b106:	f001 fa55 	bl	800c5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	08004aa9 	.word	0x08004aa9

0800b178 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d001      	beq.n	800b190 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e047      	b.n	800b220 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a23      	ldr	r2, [pc, #140]	; (800b22c <HAL_TIM_Base_Start+0xb4>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d01d      	beq.n	800b1de <HAL_TIM_Base_Start+0x66>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1aa:	d018      	beq.n	800b1de <HAL_TIM_Base_Start+0x66>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <HAL_TIM_Base_Start+0xb8>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d013      	beq.n	800b1de <HAL_TIM_Base_Start+0x66>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a1e      	ldr	r2, [pc, #120]	; (800b234 <HAL_TIM_Base_Start+0xbc>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d00e      	beq.n	800b1de <HAL_TIM_Base_Start+0x66>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a1c      	ldr	r2, [pc, #112]	; (800b238 <HAL_TIM_Base_Start+0xc0>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d009      	beq.n	800b1de <HAL_TIM_Base_Start+0x66>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a1b      	ldr	r2, [pc, #108]	; (800b23c <HAL_TIM_Base_Start+0xc4>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d004      	beq.n	800b1de <HAL_TIM_Base_Start+0x66>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a19      	ldr	r2, [pc, #100]	; (800b240 <HAL_TIM_Base_Start+0xc8>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d115      	bne.n	800b20a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	4b17      	ldr	r3, [pc, #92]	; (800b244 <HAL_TIM_Base_Start+0xcc>)
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b06      	cmp	r3, #6
 800b1ee:	d015      	beq.n	800b21c <HAL_TIM_Base_Start+0xa4>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1f6:	d011      	beq.n	800b21c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0201 	orr.w	r2, r2, #1
 800b206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b208:	e008      	b.n	800b21c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f042 0201 	orr.w	r2, r2, #1
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	e000      	b.n	800b21e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b21c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	40012c00 	.word	0x40012c00
 800b230:	40000400 	.word	0x40000400
 800b234:	40000800 	.word	0x40000800
 800b238:	40013400 	.word	0x40013400
 800b23c:	40014000 	.word	0x40014000
 800b240:	40015000 	.word	0x40015000
 800b244:	00010007 	.word	0x00010007

0800b248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d001      	beq.n	800b260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e04f      	b.n	800b300 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2202      	movs	r2, #2
 800b264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f042 0201 	orr.w	r2, r2, #1
 800b276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a23      	ldr	r2, [pc, #140]	; (800b30c <HAL_TIM_Base_Start_IT+0xc4>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d01d      	beq.n	800b2be <HAL_TIM_Base_Start_IT+0x76>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d018      	beq.n	800b2be <HAL_TIM_Base_Start_IT+0x76>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a1f      	ldr	r2, [pc, #124]	; (800b310 <HAL_TIM_Base_Start_IT+0xc8>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d013      	beq.n	800b2be <HAL_TIM_Base_Start_IT+0x76>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a1e      	ldr	r2, [pc, #120]	; (800b314 <HAL_TIM_Base_Start_IT+0xcc>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d00e      	beq.n	800b2be <HAL_TIM_Base_Start_IT+0x76>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a1c      	ldr	r2, [pc, #112]	; (800b318 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d009      	beq.n	800b2be <HAL_TIM_Base_Start_IT+0x76>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a1b      	ldr	r2, [pc, #108]	; (800b31c <HAL_TIM_Base_Start_IT+0xd4>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d004      	beq.n	800b2be <HAL_TIM_Base_Start_IT+0x76>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a19      	ldr	r2, [pc, #100]	; (800b320 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d115      	bne.n	800b2ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	4b17      	ldr	r3, [pc, #92]	; (800b324 <HAL_TIM_Base_Start_IT+0xdc>)
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b06      	cmp	r3, #6
 800b2ce:	d015      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0xb4>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d6:	d011      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f042 0201 	orr.w	r2, r2, #1
 800b2e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e8:	e008      	b.n	800b2fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f042 0201 	orr.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e000      	b.n	800b2fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	40012c00 	.word	0x40012c00
 800b310:	40000400 	.word	0x40000400
 800b314:	40000800 	.word	0x40000800
 800b318:	40013400 	.word	0x40013400
 800b31c:	40014000 	.word	0x40014000
 800b320:	40015000 	.word	0x40015000
 800b324:	00010007 	.word	0x00010007

0800b328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e054      	b.n	800b3e4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d111      	bne.n	800b36a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 fd94 	bl	800ce7c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d102      	bne.n	800b362 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a23      	ldr	r2, [pc, #140]	; (800b3ec <HAL_TIM_PWM_Init+0xc4>)
 800b360:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2202      	movs	r2, #2
 800b36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3304      	adds	r3, #4
 800b37a:	4619      	mov	r1, r3
 800b37c:	4610      	mov	r0, r2
 800b37e:	f001 f919 	bl	800c5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	0800b3f1 	.word	0x0800b3f1

0800b3f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d109      	bne.n	800b428 <HAL_TIM_PWM_Start+0x24>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	bf14      	ite	ne
 800b420:	2301      	movne	r3, #1
 800b422:	2300      	moveq	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	e03c      	b.n	800b4a2 <HAL_TIM_PWM_Start+0x9e>
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	d109      	bne.n	800b442 <HAL_TIM_PWM_Start+0x3e>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b01      	cmp	r3, #1
 800b438:	bf14      	ite	ne
 800b43a:	2301      	movne	r3, #1
 800b43c:	2300      	moveq	r3, #0
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	e02f      	b.n	800b4a2 <HAL_TIM_PWM_Start+0x9e>
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b08      	cmp	r3, #8
 800b446:	d109      	bne.n	800b45c <HAL_TIM_PWM_Start+0x58>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b01      	cmp	r3, #1
 800b452:	bf14      	ite	ne
 800b454:	2301      	movne	r3, #1
 800b456:	2300      	moveq	r3, #0
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	e022      	b.n	800b4a2 <HAL_TIM_PWM_Start+0x9e>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b0c      	cmp	r3, #12
 800b460:	d109      	bne.n	800b476 <HAL_TIM_PWM_Start+0x72>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	bf14      	ite	ne
 800b46e:	2301      	movne	r3, #1
 800b470:	2300      	moveq	r3, #0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	e015      	b.n	800b4a2 <HAL_TIM_PWM_Start+0x9e>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b10      	cmp	r3, #16
 800b47a:	d109      	bne.n	800b490 <HAL_TIM_PWM_Start+0x8c>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b01      	cmp	r3, #1
 800b486:	bf14      	ite	ne
 800b488:	2301      	movne	r3, #1
 800b48a:	2300      	moveq	r3, #0
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	e008      	b.n	800b4a2 <HAL_TIM_PWM_Start+0x9e>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b01      	cmp	r3, #1
 800b49a:	bf14      	ite	ne
 800b49c:	2301      	movne	r3, #1
 800b49e:	2300      	moveq	r3, #0
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e0a1      	b.n	800b5ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d104      	bne.n	800b4ba <HAL_TIM_PWM_Start+0xb6>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4b8:	e023      	b.n	800b502 <HAL_TIM_PWM_Start+0xfe>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d104      	bne.n	800b4ca <HAL_TIM_PWM_Start+0xc6>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4c8:	e01b      	b.n	800b502 <HAL_TIM_PWM_Start+0xfe>
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b08      	cmp	r3, #8
 800b4ce:	d104      	bne.n	800b4da <HAL_TIM_PWM_Start+0xd6>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4d8:	e013      	b.n	800b502 <HAL_TIM_PWM_Start+0xfe>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b0c      	cmp	r3, #12
 800b4de:	d104      	bne.n	800b4ea <HAL_TIM_PWM_Start+0xe6>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4e8:	e00b      	b.n	800b502 <HAL_TIM_PWM_Start+0xfe>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b10      	cmp	r3, #16
 800b4ee:	d104      	bne.n	800b4fa <HAL_TIM_PWM_Start+0xf6>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4f8:	e003      	b.n	800b502 <HAL_TIM_PWM_Start+0xfe>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2201      	movs	r2, #1
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fc90 	bl	800ce30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a38      	ldr	r2, [pc, #224]	; (800b5f8 <HAL_TIM_PWM_Start+0x1f4>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d018      	beq.n	800b54c <HAL_TIM_PWM_Start+0x148>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a37      	ldr	r2, [pc, #220]	; (800b5fc <HAL_TIM_PWM_Start+0x1f8>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d013      	beq.n	800b54c <HAL_TIM_PWM_Start+0x148>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a35      	ldr	r2, [pc, #212]	; (800b600 <HAL_TIM_PWM_Start+0x1fc>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d00e      	beq.n	800b54c <HAL_TIM_PWM_Start+0x148>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a34      	ldr	r2, [pc, #208]	; (800b604 <HAL_TIM_PWM_Start+0x200>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d009      	beq.n	800b54c <HAL_TIM_PWM_Start+0x148>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a32      	ldr	r2, [pc, #200]	; (800b608 <HAL_TIM_PWM_Start+0x204>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d004      	beq.n	800b54c <HAL_TIM_PWM_Start+0x148>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a31      	ldr	r2, [pc, #196]	; (800b60c <HAL_TIM_PWM_Start+0x208>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d101      	bne.n	800b550 <HAL_TIM_PWM_Start+0x14c>
 800b54c:	2301      	movs	r3, #1
 800b54e:	e000      	b.n	800b552 <HAL_TIM_PWM_Start+0x14e>
 800b550:	2300      	movs	r3, #0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a23      	ldr	r2, [pc, #140]	; (800b5f8 <HAL_TIM_PWM_Start+0x1f4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d01d      	beq.n	800b5ac <HAL_TIM_PWM_Start+0x1a8>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b578:	d018      	beq.n	800b5ac <HAL_TIM_PWM_Start+0x1a8>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a24      	ldr	r2, [pc, #144]	; (800b610 <HAL_TIM_PWM_Start+0x20c>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d013      	beq.n	800b5ac <HAL_TIM_PWM_Start+0x1a8>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a22      	ldr	r2, [pc, #136]	; (800b614 <HAL_TIM_PWM_Start+0x210>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d00e      	beq.n	800b5ac <HAL_TIM_PWM_Start+0x1a8>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a1a      	ldr	r2, [pc, #104]	; (800b5fc <HAL_TIM_PWM_Start+0x1f8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d009      	beq.n	800b5ac <HAL_TIM_PWM_Start+0x1a8>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a18      	ldr	r2, [pc, #96]	; (800b600 <HAL_TIM_PWM_Start+0x1fc>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d004      	beq.n	800b5ac <HAL_TIM_PWM_Start+0x1a8>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a19      	ldr	r2, [pc, #100]	; (800b60c <HAL_TIM_PWM_Start+0x208>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d115      	bne.n	800b5d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689a      	ldr	r2, [r3, #8]
 800b5b2:	4b19      	ldr	r3, [pc, #100]	; (800b618 <HAL_TIM_PWM_Start+0x214>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b06      	cmp	r3, #6
 800b5bc:	d015      	beq.n	800b5ea <HAL_TIM_PWM_Start+0x1e6>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c4:	d011      	beq.n	800b5ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f042 0201 	orr.w	r2, r2, #1
 800b5d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5d6:	e008      	b.n	800b5ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f042 0201 	orr.w	r2, r2, #1
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	e000      	b.n	800b5ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	40012c00 	.word	0x40012c00
 800b5fc:	40013400 	.word	0x40013400
 800b600:	40014000 	.word	0x40014000
 800b604:	40014400 	.word	0x40014400
 800b608:	40014800 	.word	0x40014800
 800b60c:	40015000 	.word	0x40015000
 800b610:	40000400 	.word	0x40000400
 800b614:	40000800 	.word	0x40000800
 800b618:	00010007 	.word	0x00010007

0800b61c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d109      	bne.n	800b644 <HAL_TIM_PWM_Start_IT+0x28>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b01      	cmp	r3, #1
 800b63a:	bf14      	ite	ne
 800b63c:	2301      	movne	r3, #1
 800b63e:	2300      	moveq	r3, #0
 800b640:	b2db      	uxtb	r3, r3
 800b642:	e03c      	b.n	800b6be <HAL_TIM_PWM_Start_IT+0xa2>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b04      	cmp	r3, #4
 800b648:	d109      	bne.n	800b65e <HAL_TIM_PWM_Start_IT+0x42>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b01      	cmp	r3, #1
 800b654:	bf14      	ite	ne
 800b656:	2301      	movne	r3, #1
 800b658:	2300      	moveq	r3, #0
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	e02f      	b.n	800b6be <HAL_TIM_PWM_Start_IT+0xa2>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b08      	cmp	r3, #8
 800b662:	d109      	bne.n	800b678 <HAL_TIM_PWM_Start_IT+0x5c>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	bf14      	ite	ne
 800b670:	2301      	movne	r3, #1
 800b672:	2300      	moveq	r3, #0
 800b674:	b2db      	uxtb	r3, r3
 800b676:	e022      	b.n	800b6be <HAL_TIM_PWM_Start_IT+0xa2>
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2b0c      	cmp	r3, #12
 800b67c:	d109      	bne.n	800b692 <HAL_TIM_PWM_Start_IT+0x76>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b01      	cmp	r3, #1
 800b688:	bf14      	ite	ne
 800b68a:	2301      	movne	r3, #1
 800b68c:	2300      	moveq	r3, #0
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	e015      	b.n	800b6be <HAL_TIM_PWM_Start_IT+0xa2>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b10      	cmp	r3, #16
 800b696:	d109      	bne.n	800b6ac <HAL_TIM_PWM_Start_IT+0x90>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	bf14      	ite	ne
 800b6a4:	2301      	movne	r3, #1
 800b6a6:	2300      	moveq	r3, #0
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	e008      	b.n	800b6be <HAL_TIM_PWM_Start_IT+0xa2>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e0ec      	b.n	800b8a0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <HAL_TIM_PWM_Start_IT+0xba>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6d4:	e023      	b.n	800b71e <HAL_TIM_PWM_Start_IT+0x102>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d104      	bne.n	800b6e6 <HAL_TIM_PWM_Start_IT+0xca>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6e4:	e01b      	b.n	800b71e <HAL_TIM_PWM_Start_IT+0x102>
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d104      	bne.n	800b6f6 <HAL_TIM_PWM_Start_IT+0xda>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6f4:	e013      	b.n	800b71e <HAL_TIM_PWM_Start_IT+0x102>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b0c      	cmp	r3, #12
 800b6fa:	d104      	bne.n	800b706 <HAL_TIM_PWM_Start_IT+0xea>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2202      	movs	r2, #2
 800b700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b704:	e00b      	b.n	800b71e <HAL_TIM_PWM_Start_IT+0x102>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b10      	cmp	r3, #16
 800b70a:	d104      	bne.n	800b716 <HAL_TIM_PWM_Start_IT+0xfa>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b714:	e003      	b.n	800b71e <HAL_TIM_PWM_Start_IT+0x102>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2202      	movs	r2, #2
 800b71a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b0c      	cmp	r3, #12
 800b722:	d841      	bhi.n	800b7a8 <HAL_TIM_PWM_Start_IT+0x18c>
 800b724:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <HAL_TIM_PWM_Start_IT+0x110>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b761 	.word	0x0800b761
 800b730:	0800b7a9 	.word	0x0800b7a9
 800b734:	0800b7a9 	.word	0x0800b7a9
 800b738:	0800b7a9 	.word	0x0800b7a9
 800b73c:	0800b773 	.word	0x0800b773
 800b740:	0800b7a9 	.word	0x0800b7a9
 800b744:	0800b7a9 	.word	0x0800b7a9
 800b748:	0800b7a9 	.word	0x0800b7a9
 800b74c:	0800b785 	.word	0x0800b785
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b7a9 	.word	0x0800b7a9
 800b758:	0800b7a9 	.word	0x0800b7a9
 800b75c:	0800b797 	.word	0x0800b797
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68da      	ldr	r2, [r3, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f042 0202 	orr.w	r2, r2, #2
 800b76e:	60da      	str	r2, [r3, #12]
      break;
 800b770:	e01d      	b.n	800b7ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f042 0204 	orr.w	r2, r2, #4
 800b780:	60da      	str	r2, [r3, #12]
      break;
 800b782:	e014      	b.n	800b7ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68da      	ldr	r2, [r3, #12]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0208 	orr.w	r2, r2, #8
 800b792:	60da      	str	r2, [r3, #12]
      break;
 800b794:	e00b      	b.n	800b7ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f042 0210 	orr.w	r2, r2, #16
 800b7a4:	60da      	str	r2, [r3, #12]
      break;
 800b7a6:	e002      	b.n	800b7ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d174      	bne.n	800b89e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 fb37 	bl	800ce30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a38      	ldr	r2, [pc, #224]	; (800b8a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d018      	beq.n	800b7fe <HAL_TIM_PWM_Start_IT+0x1e2>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a36      	ldr	r2, [pc, #216]	; (800b8ac <HAL_TIM_PWM_Start_IT+0x290>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d013      	beq.n	800b7fe <HAL_TIM_PWM_Start_IT+0x1e2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a35      	ldr	r2, [pc, #212]	; (800b8b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d00e      	beq.n	800b7fe <HAL_TIM_PWM_Start_IT+0x1e2>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a33      	ldr	r2, [pc, #204]	; (800b8b4 <HAL_TIM_PWM_Start_IT+0x298>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d009      	beq.n	800b7fe <HAL_TIM_PWM_Start_IT+0x1e2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a32      	ldr	r2, [pc, #200]	; (800b8b8 <HAL_TIM_PWM_Start_IT+0x29c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d004      	beq.n	800b7fe <HAL_TIM_PWM_Start_IT+0x1e2>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a30      	ldr	r2, [pc, #192]	; (800b8bc <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d101      	bne.n	800b802 <HAL_TIM_PWM_Start_IT+0x1e6>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <HAL_TIM_PWM_Start_IT+0x1e8>
 800b802:	2300      	movs	r3, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d007      	beq.n	800b818 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b816:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a22      	ldr	r2, [pc, #136]	; (800b8a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d01d      	beq.n	800b85e <HAL_TIM_PWM_Start_IT+0x242>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82a:	d018      	beq.n	800b85e <HAL_TIM_PWM_Start_IT+0x242>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a23      	ldr	r2, [pc, #140]	; (800b8c0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d013      	beq.n	800b85e <HAL_TIM_PWM_Start_IT+0x242>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a22      	ldr	r2, [pc, #136]	; (800b8c4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00e      	beq.n	800b85e <HAL_TIM_PWM_Start_IT+0x242>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a19      	ldr	r2, [pc, #100]	; (800b8ac <HAL_TIM_PWM_Start_IT+0x290>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d009      	beq.n	800b85e <HAL_TIM_PWM_Start_IT+0x242>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a18      	ldr	r2, [pc, #96]	; (800b8b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d004      	beq.n	800b85e <HAL_TIM_PWM_Start_IT+0x242>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a18      	ldr	r2, [pc, #96]	; (800b8bc <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d115      	bne.n	800b88a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689a      	ldr	r2, [r3, #8]
 800b864:	4b18      	ldr	r3, [pc, #96]	; (800b8c8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800b866:	4013      	ands	r3, r2
 800b868:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b06      	cmp	r3, #6
 800b86e:	d015      	beq.n	800b89c <HAL_TIM_PWM_Start_IT+0x280>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b876:	d011      	beq.n	800b89c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f042 0201 	orr.w	r2, r2, #1
 800b886:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b888:	e008      	b.n	800b89c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f042 0201 	orr.w	r2, r2, #1
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	e000      	b.n	800b89e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b89c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	40012c00 	.word	0x40012c00
 800b8ac:	40013400 	.word	0x40013400
 800b8b0:	40014000 	.word	0x40014000
 800b8b4:	40014400 	.word	0x40014400
 800b8b8:	40014800 	.word	0x40014800
 800b8bc:	40015000 	.word	0x40015000
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40000800 	.word	0x40000800
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d109      	bne.n	800b8f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	bf0c      	ite	eq
 800b8f0:	2301      	moveq	r3, #1
 800b8f2:	2300      	movne	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	e03c      	b.n	800b972 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d109      	bne.n	800b912 <HAL_TIM_PWM_Start_DMA+0x46>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b02      	cmp	r3, #2
 800b908:	bf0c      	ite	eq
 800b90a:	2301      	moveq	r3, #1
 800b90c:	2300      	movne	r3, #0
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	e02f      	b.n	800b972 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b08      	cmp	r3, #8
 800b916:	d109      	bne.n	800b92c <HAL_TIM_PWM_Start_DMA+0x60>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b02      	cmp	r3, #2
 800b922:	bf0c      	ite	eq
 800b924:	2301      	moveq	r3, #1
 800b926:	2300      	movne	r3, #0
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	e022      	b.n	800b972 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b0c      	cmp	r3, #12
 800b930:	d109      	bne.n	800b946 <HAL_TIM_PWM_Start_DMA+0x7a>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	bf0c      	ite	eq
 800b93e:	2301      	moveq	r3, #1
 800b940:	2300      	movne	r3, #0
 800b942:	b2db      	uxtb	r3, r3
 800b944:	e015      	b.n	800b972 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b10      	cmp	r3, #16
 800b94a:	d109      	bne.n	800b960 <HAL_TIM_PWM_Start_DMA+0x94>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b02      	cmp	r3, #2
 800b956:	bf0c      	ite	eq
 800b958:	2301      	moveq	r3, #1
 800b95a:	2300      	movne	r3, #0
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	e008      	b.n	800b972 <HAL_TIM_PWM_Start_DMA+0xa6>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	bf0c      	ite	eq
 800b96c:	2301      	moveq	r3, #1
 800b96e:	2300      	movne	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800b976:	2302      	movs	r3, #2
 800b978:	e1b0      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d109      	bne.n	800b994 <HAL_TIM_PWM_Start_DMA+0xc8>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b01      	cmp	r3, #1
 800b98a:	bf0c      	ite	eq
 800b98c:	2301      	moveq	r3, #1
 800b98e:	2300      	movne	r3, #0
 800b990:	b2db      	uxtb	r3, r3
 800b992:	e03c      	b.n	800ba0e <HAL_TIM_PWM_Start_DMA+0x142>
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	2b04      	cmp	r3, #4
 800b998:	d109      	bne.n	800b9ae <HAL_TIM_PWM_Start_DMA+0xe2>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	bf0c      	ite	eq
 800b9a6:	2301      	moveq	r3, #1
 800b9a8:	2300      	movne	r3, #0
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	e02f      	b.n	800ba0e <HAL_TIM_PWM_Start_DMA+0x142>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d109      	bne.n	800b9c8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	bf0c      	ite	eq
 800b9c0:	2301      	moveq	r3, #1
 800b9c2:	2300      	movne	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	e022      	b.n	800ba0e <HAL_TIM_PWM_Start_DMA+0x142>
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b0c      	cmp	r3, #12
 800b9cc:	d109      	bne.n	800b9e2 <HAL_TIM_PWM_Start_DMA+0x116>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	bf0c      	ite	eq
 800b9da:	2301      	moveq	r3, #1
 800b9dc:	2300      	movne	r3, #0
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	e015      	b.n	800ba0e <HAL_TIM_PWM_Start_DMA+0x142>
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2b10      	cmp	r3, #16
 800b9e6:	d109      	bne.n	800b9fc <HAL_TIM_PWM_Start_DMA+0x130>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	bf0c      	ite	eq
 800b9f4:	2301      	moveq	r3, #1
 800b9f6:	2300      	movne	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	e008      	b.n	800ba0e <HAL_TIM_PWM_Start_DMA+0x142>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	bf0c      	ite	eq
 800ba08:	2301      	moveq	r3, #1
 800ba0a:	2300      	movne	r3, #0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d034      	beq.n	800ba7c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <HAL_TIM_PWM_Start_DMA+0x152>
 800ba18:	887b      	ldrh	r3, [r7, #2]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e15c      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d104      	bne.n	800ba32 <HAL_TIM_PWM_Start_DMA+0x166>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba30:	e026      	b.n	800ba80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b04      	cmp	r3, #4
 800ba36:	d104      	bne.n	800ba42 <HAL_TIM_PWM_Start_DMA+0x176>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba40:	e01e      	b.n	800ba80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b08      	cmp	r3, #8
 800ba46:	d104      	bne.n	800ba52 <HAL_TIM_PWM_Start_DMA+0x186>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba50:	e016      	b.n	800ba80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b0c      	cmp	r3, #12
 800ba56:	d104      	bne.n	800ba62 <HAL_TIM_PWM_Start_DMA+0x196>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba60:	e00e      	b.n	800ba80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b10      	cmp	r3, #16
 800ba66:	d104      	bne.n	800ba72 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba70:	e006      	b.n	800ba80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2202      	movs	r2, #2
 800ba76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba7a:	e001      	b.n	800ba80 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e12d      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b0c      	cmp	r3, #12
 800ba84:	f200 80ae 	bhi.w	800bbe4 <HAL_TIM_PWM_Start_DMA+0x318>
 800ba88:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800bac5 	.word	0x0800bac5
 800ba94:	0800bbe5 	.word	0x0800bbe5
 800ba98:	0800bbe5 	.word	0x0800bbe5
 800ba9c:	0800bbe5 	.word	0x0800bbe5
 800baa0:	0800bb0d 	.word	0x0800bb0d
 800baa4:	0800bbe5 	.word	0x0800bbe5
 800baa8:	0800bbe5 	.word	0x0800bbe5
 800baac:	0800bbe5 	.word	0x0800bbe5
 800bab0:	0800bb55 	.word	0x0800bb55
 800bab4:	0800bbe5 	.word	0x0800bbe5
 800bab8:	0800bbe5 	.word	0x0800bbe5
 800babc:	0800bbe5 	.word	0x0800bbe5
 800bac0:	0800bb9d 	.word	0x0800bb9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	4a86      	ldr	r2, [pc, #536]	; (800bce4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800baca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	4a85      	ldr	r2, [pc, #532]	; (800bce8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bad2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	4a84      	ldr	r2, [pc, #528]	; (800bcec <HAL_TIM_PWM_Start_DMA+0x420>)
 800bada:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bae0:	6879      	ldr	r1, [r7, #4]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3334      	adds	r3, #52	; 0x34
 800bae8:	461a      	mov	r2, r3
 800baea:	887b      	ldrh	r3, [r7, #2]
 800baec:	f7fb f854 	bl	8006b98 <HAL_DMA_Start_IT>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e0f0      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb08:	60da      	str	r2, [r3, #12]
      break;
 800bb0a:	e06e      	b.n	800bbea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb10:	4a74      	ldr	r2, [pc, #464]	; (800bce4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800bb12:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb18:	4a73      	ldr	r2, [pc, #460]	; (800bce8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bb1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb20:	4a72      	ldr	r2, [pc, #456]	; (800bcec <HAL_TIM_PWM_Start_DMA+0x420>)
 800bb22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3338      	adds	r3, #56	; 0x38
 800bb30:	461a      	mov	r2, r3
 800bb32:	887b      	ldrh	r3, [r7, #2]
 800bb34:	f7fb f830 	bl	8006b98 <HAL_DMA_Start_IT>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e0cc      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb50:	60da      	str	r2, [r3, #12]
      break;
 800bb52:	e04a      	b.n	800bbea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	4a62      	ldr	r2, [pc, #392]	; (800bce4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800bb5a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	4a61      	ldr	r2, [pc, #388]	; (800bce8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bb62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	4a60      	ldr	r2, [pc, #384]	; (800bcec <HAL_TIM_PWM_Start_DMA+0x420>)
 800bb6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bb70:	6879      	ldr	r1, [r7, #4]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	333c      	adds	r3, #60	; 0x3c
 800bb78:	461a      	mov	r2, r3
 800bb7a:	887b      	ldrh	r3, [r7, #2]
 800bb7c:	f7fb f80c 	bl	8006b98 <HAL_DMA_Start_IT>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e0a8      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68da      	ldr	r2, [r3, #12]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb98:	60da      	str	r2, [r3, #12]
      break;
 800bb9a:	e026      	b.n	800bbea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba0:	4a50      	ldr	r2, [pc, #320]	; (800bce4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800bba2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba8:	4a4f      	ldr	r2, [pc, #316]	; (800bce8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bbaa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb0:	4a4e      	ldr	r2, [pc, #312]	; (800bcec <HAL_TIM_PWM_Start_DMA+0x420>)
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bbb8:	6879      	ldr	r1, [r7, #4]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3340      	adds	r3, #64	; 0x40
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	887b      	ldrh	r3, [r7, #2]
 800bbc4:	f7fa ffe8 	bl	8006b98 <HAL_DMA_Start_IT>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e084      	b.n	800bcdc <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbe0:	60da      	str	r2, [r3, #12]
      break;
 800bbe2:	e002      	b.n	800bbea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe8:	bf00      	nop
  }

  if (status == HAL_OK)
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d174      	bne.n	800bcda <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f001 f919 	bl	800ce30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a3b      	ldr	r2, [pc, #236]	; (800bcf0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d018      	beq.n	800bc3a <HAL_TIM_PWM_Start_DMA+0x36e>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a39      	ldr	r2, [pc, #228]	; (800bcf4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d013      	beq.n	800bc3a <HAL_TIM_PWM_Start_DMA+0x36e>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a38      	ldr	r2, [pc, #224]	; (800bcf8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d00e      	beq.n	800bc3a <HAL_TIM_PWM_Start_DMA+0x36e>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a36      	ldr	r2, [pc, #216]	; (800bcfc <HAL_TIM_PWM_Start_DMA+0x430>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d009      	beq.n	800bc3a <HAL_TIM_PWM_Start_DMA+0x36e>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a35      	ldr	r2, [pc, #212]	; (800bd00 <HAL_TIM_PWM_Start_DMA+0x434>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d004      	beq.n	800bc3a <HAL_TIM_PWM_Start_DMA+0x36e>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a33      	ldr	r2, [pc, #204]	; (800bd04 <HAL_TIM_PWM_Start_DMA+0x438>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d101      	bne.n	800bc3e <HAL_TIM_PWM_Start_DMA+0x372>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e000      	b.n	800bc40 <HAL_TIM_PWM_Start_DMA+0x374>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d007      	beq.n	800bc54 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a25      	ldr	r2, [pc, #148]	; (800bcf0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d01d      	beq.n	800bc9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc66:	d018      	beq.n	800bc9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a26      	ldr	r2, [pc, #152]	; (800bd08 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d013      	beq.n	800bc9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a25      	ldr	r2, [pc, #148]	; (800bd0c <HAL_TIM_PWM_Start_DMA+0x440>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d00e      	beq.n	800bc9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a1c      	ldr	r2, [pc, #112]	; (800bcf4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d009      	beq.n	800bc9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a1b      	ldr	r2, [pc, #108]	; (800bcf8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d004      	beq.n	800bc9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a1b      	ldr	r2, [pc, #108]	; (800bd04 <HAL_TIM_PWM_Start_DMA+0x438>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d115      	bne.n	800bcc6 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	4b1b      	ldr	r3, [pc, #108]	; (800bd10 <HAL_TIM_PWM_Start_DMA+0x444>)
 800bca2:	4013      	ands	r3, r2
 800bca4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	2b06      	cmp	r3, #6
 800bcaa:	d015      	beq.n	800bcd8 <HAL_TIM_PWM_Start_DMA+0x40c>
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb2:	d011      	beq.n	800bcd8 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0201 	orr.w	r2, r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcc4:	e008      	b.n	800bcd8 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0201 	orr.w	r2, r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]
 800bcd6:	e000      	b.n	800bcda <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	0800c49d 	.word	0x0800c49d
 800bce8:	0800c549 	.word	0x0800c549
 800bcec:	0800c407 	.word	0x0800c407
 800bcf0:	40012c00 	.word	0x40012c00
 800bcf4:	40013400 	.word	0x40013400
 800bcf8:	40014000 	.word	0x40014000
 800bcfc:	40014400 	.word	0x40014400
 800bd00:	40014800 	.word	0x40014800
 800bd04:	40015000 	.word	0x40015000
 800bd08:	40000400 	.word	0x40000400
 800bd0c:	40000800 	.word	0x40000800
 800bd10:	00010007 	.word	0x00010007

0800bd14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	f003 0302 	and.w	r3, r3, #2
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d128      	bne.n	800bd7c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	f003 0302 	and.w	r3, r3, #2
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d121      	bne.n	800bd7c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f06f 0202 	mvn.w	r2, #2
 800bd40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	f003 0303 	and.w	r3, r3, #3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d005      	beq.n	800bd62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	4798      	blx	r3
 800bd60:	e009      	b.n	800bd76 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	d128      	bne.n	800bddc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f003 0304 	and.w	r3, r3, #4
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	d121      	bne.n	800bddc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f06f 0204 	mvn.w	r2, #4
 800bda0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2202      	movs	r2, #2
 800bda6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d005      	beq.n	800bdc2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
 800bdc0:	e009      	b.n	800bdd6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f003 0308 	and.w	r3, r3, #8
 800bde6:	2b08      	cmp	r3, #8
 800bde8:	d128      	bne.n	800be3c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	f003 0308 	and.w	r3, r3, #8
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d121      	bne.n	800be3c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f06f 0208 	mvn.w	r2, #8
 800be00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2204      	movs	r2, #4
 800be06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	4798      	blx	r3
 800be20:	e009      	b.n	800be36 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	f003 0310 	and.w	r3, r3, #16
 800be46:	2b10      	cmp	r3, #16
 800be48:	d128      	bne.n	800be9c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f003 0310 	and.w	r3, r3, #16
 800be54:	2b10      	cmp	r3, #16
 800be56:	d121      	bne.n	800be9c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f06f 0210 	mvn.w	r2, #16
 800be60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2208      	movs	r2, #8
 800be66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	4798      	blx	r3
 800be80:	e009      	b.n	800be96 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d110      	bne.n	800becc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d109      	bne.n	800becc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0201 	mvn.w	r2, #1
 800bec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed6:	2b80      	cmp	r3, #128	; 0x80
 800bed8:	d110      	bne.n	800befc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee4:	2b80      	cmp	r3, #128	; 0x80
 800bee6:	d109      	bne.n	800befc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0a:	d110      	bne.n	800bf2e <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf16:	2b80      	cmp	r3, #128	; 0x80
 800bf18:	d109      	bne.n	800bf2e <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	d110      	bne.n	800bf5e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf46:	2b40      	cmp	r3, #64	; 0x40
 800bf48:	d109      	bne.n	800bf5e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	f003 0320 	and.w	r3, r3, #32
 800bf68:	2b20      	cmp	r3, #32
 800bf6a:	d110      	bne.n	800bf8e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f003 0320 	and.w	r3, r3, #32
 800bf76:	2b20      	cmp	r3, #32
 800bf78:	d109      	bne.n	800bf8e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f06f 0220 	mvn.w	r2, #32
 800bf82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d101      	bne.n	800bfb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	e0ff      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b14      	cmp	r3, #20
 800bfc2:	f200 80f0 	bhi.w	800c1a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bfc6:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800c021 	.word	0x0800c021
 800bfd0:	0800c1a7 	.word	0x0800c1a7
 800bfd4:	0800c1a7 	.word	0x0800c1a7
 800bfd8:	0800c1a7 	.word	0x0800c1a7
 800bfdc:	0800c061 	.word	0x0800c061
 800bfe0:	0800c1a7 	.word	0x0800c1a7
 800bfe4:	0800c1a7 	.word	0x0800c1a7
 800bfe8:	0800c1a7 	.word	0x0800c1a7
 800bfec:	0800c0a3 	.word	0x0800c0a3
 800bff0:	0800c1a7 	.word	0x0800c1a7
 800bff4:	0800c1a7 	.word	0x0800c1a7
 800bff8:	0800c1a7 	.word	0x0800c1a7
 800bffc:	0800c0e3 	.word	0x0800c0e3
 800c000:	0800c1a7 	.word	0x0800c1a7
 800c004:	0800c1a7 	.word	0x0800c1a7
 800c008:	0800c1a7 	.word	0x0800c1a7
 800c00c:	0800c125 	.word	0x0800c125
 800c010:	0800c1a7 	.word	0x0800c1a7
 800c014:	0800c1a7 	.word	0x0800c1a7
 800c018:	0800c1a7 	.word	0x0800c1a7
 800c01c:	0800c165 	.word	0x0800c165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68b9      	ldr	r1, [r7, #8]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fb62 	bl	800c6f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f042 0208 	orr.w	r2, r2, #8
 800c03a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	699a      	ldr	r2, [r3, #24]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f022 0204 	bic.w	r2, r2, #4
 800c04a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6999      	ldr	r1, [r3, #24]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	691a      	ldr	r2, [r3, #16]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	430a      	orrs	r2, r1
 800c05c:	619a      	str	r2, [r3, #24]
      break;
 800c05e:	e0a5      	b.n	800c1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fbdc 	bl	800c824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	699a      	ldr	r2, [r3, #24]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c07a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	699a      	ldr	r2, [r3, #24]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c08a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6999      	ldr	r1, [r3, #24]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	021a      	lsls	r2, r3, #8
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	430a      	orrs	r2, r1
 800c09e:	619a      	str	r2, [r3, #24]
      break;
 800c0a0:	e084      	b.n	800c1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68b9      	ldr	r1, [r7, #8]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 fc4f 	bl	800c94c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69da      	ldr	r2, [r3, #28]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f042 0208 	orr.w	r2, r2, #8
 800c0bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69da      	ldr	r2, [r3, #28]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f022 0204 	bic.w	r2, r2, #4
 800c0cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69d9      	ldr	r1, [r3, #28]
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	691a      	ldr	r2, [r3, #16]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	430a      	orrs	r2, r1
 800c0de:	61da      	str	r2, [r3, #28]
      break;
 800c0e0:	e064      	b.n	800c1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 fcc1 	bl	800ca70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	69da      	ldr	r2, [r3, #28]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69da      	ldr	r2, [r3, #28]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c10c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	69d9      	ldr	r1, [r3, #28]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	021a      	lsls	r2, r3, #8
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	430a      	orrs	r2, r1
 800c120:	61da      	str	r2, [r3, #28]
      break;
 800c122:	e043      	b.n	800c1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 fd10 	bl	800cb50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f042 0208 	orr.w	r2, r2, #8
 800c13e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f022 0204 	bic.w	r2, r2, #4
 800c14e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	691a      	ldr	r2, [r3, #16]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	430a      	orrs	r2, r1
 800c160:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c162:	e023      	b.n	800c1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68b9      	ldr	r1, [r7, #8]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 fd5a 	bl	800cc24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c17e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c18e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	021a      	lsls	r2, r3, #8
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c1a4:	e002      	b.n	800c1ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop

0800c1c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d101      	bne.n	800c1dc <HAL_TIM_ConfigClockSource+0x1c>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e0b6      	b.n	800c34a <HAL_TIM_ConfigClockSource+0x18a>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c1fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c218:	d03e      	beq.n	800c298 <HAL_TIM_ConfigClockSource+0xd8>
 800c21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c21e:	f200 8087 	bhi.w	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c226:	f000 8086 	beq.w	800c336 <HAL_TIM_ConfigClockSource+0x176>
 800c22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c22e:	d87f      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c230:	2b70      	cmp	r3, #112	; 0x70
 800c232:	d01a      	beq.n	800c26a <HAL_TIM_ConfigClockSource+0xaa>
 800c234:	2b70      	cmp	r3, #112	; 0x70
 800c236:	d87b      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c238:	2b60      	cmp	r3, #96	; 0x60
 800c23a:	d050      	beq.n	800c2de <HAL_TIM_ConfigClockSource+0x11e>
 800c23c:	2b60      	cmp	r3, #96	; 0x60
 800c23e:	d877      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c240:	2b50      	cmp	r3, #80	; 0x50
 800c242:	d03c      	beq.n	800c2be <HAL_TIM_ConfigClockSource+0xfe>
 800c244:	2b50      	cmp	r3, #80	; 0x50
 800c246:	d873      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	d058      	beq.n	800c2fe <HAL_TIM_ConfigClockSource+0x13e>
 800c24c:	2b40      	cmp	r3, #64	; 0x40
 800c24e:	d86f      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c250:	2b30      	cmp	r3, #48	; 0x30
 800c252:	d064      	beq.n	800c31e <HAL_TIM_ConfigClockSource+0x15e>
 800c254:	2b30      	cmp	r3, #48	; 0x30
 800c256:	d86b      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c258:	2b20      	cmp	r3, #32
 800c25a:	d060      	beq.n	800c31e <HAL_TIM_ConfigClockSource+0x15e>
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d867      	bhi.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
 800c260:	2b00      	cmp	r3, #0
 800c262:	d05c      	beq.n	800c31e <HAL_TIM_ConfigClockSource+0x15e>
 800c264:	2b10      	cmp	r3, #16
 800c266:	d05a      	beq.n	800c31e <HAL_TIM_ConfigClockSource+0x15e>
 800c268:	e062      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c27a:	f000 fdb9 	bl	800cdf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c28c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	609a      	str	r2, [r3, #8]
      break;
 800c296:	e04f      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c2a8:	f000 fda2 	bl	800cdf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	689a      	ldr	r2, [r3, #8]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2ba:	609a      	str	r2, [r3, #8]
      break;
 800c2bc:	e03c      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f000 fd16 	bl	800ccfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2150      	movs	r1, #80	; 0x50
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fd6f 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c2dc:	e02c      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f000 fd35 	bl	800cd5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2160      	movs	r1, #96	; 0x60
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 fd5f 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c2fc:	e01c      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c30a:	461a      	mov	r2, r3
 800c30c:	f000 fcf6 	bl	800ccfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2140      	movs	r1, #64	; 0x40
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fd4f 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c31c:	e00c      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f000 fd46 	bl	800cdba <TIM_ITRx_SetConfig>
      break;
 800c32e:	e003      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	73fb      	strb	r3, [r7, #15]
      break;
 800c334:	e000      	b.n	800c338 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800c35a:	bf00      	nop
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c36e:	bf00      	nop
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c3be:	bf00      	nop
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b083      	sub	sp, #12
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c3fa:	bf00      	nop
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c412:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d107      	bne.n	800c42e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c42c:	e02a      	b.n	800c484 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d107      	bne.n	800c448 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2202      	movs	r2, #2
 800c43c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c446:	e01d      	b.n	800c484 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d107      	bne.n	800c462 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2204      	movs	r2, #4
 800c456:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c460:	e010      	b.n	800c484 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d107      	bne.n	800c47c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2208      	movs	r2, #8
 800c470:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c47a:	e003      	b.n	800c484 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	4798      	blx	r3
#else
  HAL_TIM_ErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	771a      	strb	r2, [r3, #28]
}
 800c494:	bf00      	nop
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d10b      	bne.n	800c4cc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d136      	bne.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4ca:	e031      	b.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d10b      	bne.n	800c4ee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2202      	movs	r2, #2
 800c4da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d125      	bne.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4ec:	e020      	b.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d10b      	bne.n	800c510 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2204      	movs	r2, #4
 800c4fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d114      	bne.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c50e:	e00f      	b.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	429a      	cmp	r2, r3
 800c518:	d10a      	bne.n	800c530 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2208      	movs	r2, #8
 800c51e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d103      	bne.n	800c530 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	771a      	strb	r2, [r3, #28]
}
 800c540:	bf00      	nop
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d103      	bne.n	800c568 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2201      	movs	r2, #1
 800c564:	771a      	strb	r2, [r3, #28]
 800c566:	e019      	b.n	800c59c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d103      	bne.n	800c57a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2202      	movs	r2, #2
 800c576:	771a      	strb	r2, [r3, #28]
 800c578:	e010      	b.n	800c59c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d103      	bne.n	800c58c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2204      	movs	r2, #4
 800c588:	771a      	strb	r2, [r3, #28]
 800c58a:	e007      	b.n	800c59c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	429a      	cmp	r2, r3
 800c594:	d102      	bne.n	800c59c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2208      	movs	r2, #8
 800c59a:	771a      	strb	r2, [r3, #28]
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	4798      	blx	r3
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	771a      	strb	r2, [r3, #28]
}
 800c5ac:	bf00      	nop
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a42      	ldr	r2, [pc, #264]	; (800c6d0 <TIM_Base_SetConfig+0x11c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5d2:	d00f      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a3f      	ldr	r2, [pc, #252]	; (800c6d4 <TIM_Base_SetConfig+0x120>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d00b      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a3e      	ldr	r2, [pc, #248]	; (800c6d8 <TIM_Base_SetConfig+0x124>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d007      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a3d      	ldr	r2, [pc, #244]	; (800c6dc <TIM_Base_SetConfig+0x128>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d003      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a3c      	ldr	r2, [pc, #240]	; (800c6e0 <TIM_Base_SetConfig+0x12c>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d108      	bne.n	800c606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4313      	orrs	r3, r2
 800c604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a31      	ldr	r2, [pc, #196]	; (800c6d0 <TIM_Base_SetConfig+0x11c>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d01f      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c614:	d01b      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a2e      	ldr	r2, [pc, #184]	; (800c6d4 <TIM_Base_SetConfig+0x120>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d017      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a2d      	ldr	r2, [pc, #180]	; (800c6d8 <TIM_Base_SetConfig+0x124>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d013      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a2c      	ldr	r2, [pc, #176]	; (800c6dc <TIM_Base_SetConfig+0x128>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d00f      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a2c      	ldr	r2, [pc, #176]	; (800c6e4 <TIM_Base_SetConfig+0x130>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d00b      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a2b      	ldr	r2, [pc, #172]	; (800c6e8 <TIM_Base_SetConfig+0x134>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d007      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a2a      	ldr	r2, [pc, #168]	; (800c6ec <TIM_Base_SetConfig+0x138>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d003      	beq.n	800c64e <TIM_Base_SetConfig+0x9a>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a25      	ldr	r2, [pc, #148]	; (800c6e0 <TIM_Base_SetConfig+0x12c>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d108      	bne.n	800c660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a12      	ldr	r2, [pc, #72]	; (800c6d0 <TIM_Base_SetConfig+0x11c>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d013      	beq.n	800c6b4 <TIM_Base_SetConfig+0x100>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a13      	ldr	r2, [pc, #76]	; (800c6dc <TIM_Base_SetConfig+0x128>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00f      	beq.n	800c6b4 <TIM_Base_SetConfig+0x100>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a13      	ldr	r2, [pc, #76]	; (800c6e4 <TIM_Base_SetConfig+0x130>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00b      	beq.n	800c6b4 <TIM_Base_SetConfig+0x100>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a12      	ldr	r2, [pc, #72]	; (800c6e8 <TIM_Base_SetConfig+0x134>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d007      	beq.n	800c6b4 <TIM_Base_SetConfig+0x100>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a11      	ldr	r2, [pc, #68]	; (800c6ec <TIM_Base_SetConfig+0x138>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d003      	beq.n	800c6b4 <TIM_Base_SetConfig+0x100>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a0c      	ldr	r2, [pc, #48]	; (800c6e0 <TIM_Base_SetConfig+0x12c>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d103      	bne.n	800c6bc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	691a      	ldr	r2, [r3, #16]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	615a      	str	r2, [r3, #20]
}
 800c6c2:	bf00      	nop
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	40012c00 	.word	0x40012c00
 800c6d4:	40000400 	.word	0x40000400
 800c6d8:	40000800 	.word	0x40000800
 800c6dc:	40013400 	.word	0x40013400
 800c6e0:	40015000 	.word	0x40015000
 800c6e4:	40014000 	.word	0x40014000
 800c6e8:	40014400 	.word	0x40014400
 800c6ec:	40014800 	.word	0x40014800

0800c6f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	f023 0201 	bic.w	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4313      	orrs	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f023 0302 	bic.w	r3, r3, #2
 800c73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	4313      	orrs	r3, r2
 800c746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a30      	ldr	r2, [pc, #192]	; (800c80c <TIM_OC1_SetConfig+0x11c>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d013      	beq.n	800c778 <TIM_OC1_SetConfig+0x88>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a2f      	ldr	r2, [pc, #188]	; (800c810 <TIM_OC1_SetConfig+0x120>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d00f      	beq.n	800c778 <TIM_OC1_SetConfig+0x88>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a2e      	ldr	r2, [pc, #184]	; (800c814 <TIM_OC1_SetConfig+0x124>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00b      	beq.n	800c778 <TIM_OC1_SetConfig+0x88>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a2d      	ldr	r2, [pc, #180]	; (800c818 <TIM_OC1_SetConfig+0x128>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d007      	beq.n	800c778 <TIM_OC1_SetConfig+0x88>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a2c      	ldr	r2, [pc, #176]	; (800c81c <TIM_OC1_SetConfig+0x12c>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d003      	beq.n	800c778 <TIM_OC1_SetConfig+0x88>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a2b      	ldr	r2, [pc, #172]	; (800c820 <TIM_OC1_SetConfig+0x130>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d10c      	bne.n	800c792 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f023 0308 	bic.w	r3, r3, #8
 800c77e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	4313      	orrs	r3, r2
 800c788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f023 0304 	bic.w	r3, r3, #4
 800c790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a1d      	ldr	r2, [pc, #116]	; (800c80c <TIM_OC1_SetConfig+0x11c>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d013      	beq.n	800c7c2 <TIM_OC1_SetConfig+0xd2>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a1c      	ldr	r2, [pc, #112]	; (800c810 <TIM_OC1_SetConfig+0x120>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d00f      	beq.n	800c7c2 <TIM_OC1_SetConfig+0xd2>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a1b      	ldr	r2, [pc, #108]	; (800c814 <TIM_OC1_SetConfig+0x124>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d00b      	beq.n	800c7c2 <TIM_OC1_SetConfig+0xd2>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a1a      	ldr	r2, [pc, #104]	; (800c818 <TIM_OC1_SetConfig+0x128>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d007      	beq.n	800c7c2 <TIM_OC1_SetConfig+0xd2>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a19      	ldr	r2, [pc, #100]	; (800c81c <TIM_OC1_SetConfig+0x12c>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d003      	beq.n	800c7c2 <TIM_OC1_SetConfig+0xd2>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a18      	ldr	r2, [pc, #96]	; (800c820 <TIM_OC1_SetConfig+0x130>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d111      	bne.n	800c7e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	621a      	str	r2, [r3, #32]
}
 800c800:	bf00      	nop
 800c802:	371c      	adds	r7, #28
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	40012c00 	.word	0x40012c00
 800c810:	40013400 	.word	0x40013400
 800c814:	40014000 	.word	0x40014000
 800c818:	40014400 	.word	0x40014400
 800c81c:	40014800 	.word	0x40014800
 800c820:	40015000 	.word	0x40015000

0800c824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	f023 0210 	bic.w	r2, r3, #16
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	021b      	lsls	r3, r3, #8
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	4313      	orrs	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f023 0320 	bic.w	r3, r3, #32
 800c872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	011b      	lsls	r3, r3, #4
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a2c      	ldr	r2, [pc, #176]	; (800c934 <TIM_OC2_SetConfig+0x110>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d007      	beq.n	800c898 <TIM_OC2_SetConfig+0x74>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a2b      	ldr	r2, [pc, #172]	; (800c938 <TIM_OC2_SetConfig+0x114>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d003      	beq.n	800c898 <TIM_OC2_SetConfig+0x74>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a2a      	ldr	r2, [pc, #168]	; (800c93c <TIM_OC2_SetConfig+0x118>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d10d      	bne.n	800c8b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c89e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	011b      	lsls	r3, r3, #4
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a1f      	ldr	r2, [pc, #124]	; (800c934 <TIM_OC2_SetConfig+0x110>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d013      	beq.n	800c8e4 <TIM_OC2_SetConfig+0xc0>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a1e      	ldr	r2, [pc, #120]	; (800c938 <TIM_OC2_SetConfig+0x114>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00f      	beq.n	800c8e4 <TIM_OC2_SetConfig+0xc0>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a1e      	ldr	r2, [pc, #120]	; (800c940 <TIM_OC2_SetConfig+0x11c>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d00b      	beq.n	800c8e4 <TIM_OC2_SetConfig+0xc0>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a1d      	ldr	r2, [pc, #116]	; (800c944 <TIM_OC2_SetConfig+0x120>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d007      	beq.n	800c8e4 <TIM_OC2_SetConfig+0xc0>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a1c      	ldr	r2, [pc, #112]	; (800c948 <TIM_OC2_SetConfig+0x124>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d003      	beq.n	800c8e4 <TIM_OC2_SetConfig+0xc0>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a17      	ldr	r2, [pc, #92]	; (800c93c <TIM_OC2_SetConfig+0x118>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d113      	bne.n	800c90c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8ea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8f2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	4313      	orrs	r3, r2
 800c90a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	621a      	str	r2, [r3, #32]
}
 800c926:	bf00      	nop
 800c928:	371c      	adds	r7, #28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	40012c00 	.word	0x40012c00
 800c938:	40013400 	.word	0x40013400
 800c93c:	40015000 	.word	0x40015000
 800c940:	40014000 	.word	0x40014000
 800c944:	40014400 	.word	0x40014400
 800c948:	40014800 	.word	0x40014800

0800c94c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	021b      	lsls	r3, r3, #8
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a2b      	ldr	r2, [pc, #172]	; (800ca58 <TIM_OC3_SetConfig+0x10c>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d007      	beq.n	800c9be <TIM_OC3_SetConfig+0x72>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a2a      	ldr	r2, [pc, #168]	; (800ca5c <TIM_OC3_SetConfig+0x110>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d003      	beq.n	800c9be <TIM_OC3_SetConfig+0x72>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a29      	ldr	r2, [pc, #164]	; (800ca60 <TIM_OC3_SetConfig+0x114>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d10d      	bne.n	800c9da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	697a      	ldr	r2, [r7, #20]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a1e      	ldr	r2, [pc, #120]	; (800ca58 <TIM_OC3_SetConfig+0x10c>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d013      	beq.n	800ca0a <TIM_OC3_SetConfig+0xbe>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a1d      	ldr	r2, [pc, #116]	; (800ca5c <TIM_OC3_SetConfig+0x110>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d00f      	beq.n	800ca0a <TIM_OC3_SetConfig+0xbe>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a1d      	ldr	r2, [pc, #116]	; (800ca64 <TIM_OC3_SetConfig+0x118>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d00b      	beq.n	800ca0a <TIM_OC3_SetConfig+0xbe>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a1c      	ldr	r2, [pc, #112]	; (800ca68 <TIM_OC3_SetConfig+0x11c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d007      	beq.n	800ca0a <TIM_OC3_SetConfig+0xbe>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a1b      	ldr	r2, [pc, #108]	; (800ca6c <TIM_OC3_SetConfig+0x120>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d003      	beq.n	800ca0a <TIM_OC3_SetConfig+0xbe>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a16      	ldr	r2, [pc, #88]	; (800ca60 <TIM_OC3_SetConfig+0x114>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d113      	bne.n	800ca32 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	695b      	ldr	r3, [r3, #20]
 800ca1e:	011b      	lsls	r3, r3, #4
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	011b      	lsls	r3, r3, #4
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	621a      	str	r2, [r3, #32]
}
 800ca4c:	bf00      	nop
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	40012c00 	.word	0x40012c00
 800ca5c:	40013400 	.word	0x40013400
 800ca60:	40015000 	.word	0x40015000
 800ca64:	40014000 	.word	0x40014000
 800ca68:	40014400 	.word	0x40014400
 800ca6c:	40014800 	.word	0x40014800

0800ca70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b087      	sub	sp, #28
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	021b      	lsls	r3, r3, #8
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cabe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	031b      	lsls	r3, r3, #12
 800cac6:	693a      	ldr	r2, [r7, #16]
 800cac8:	4313      	orrs	r3, r2
 800caca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a1a      	ldr	r2, [pc, #104]	; (800cb38 <TIM_OC4_SetConfig+0xc8>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d013      	beq.n	800cafc <TIM_OC4_SetConfig+0x8c>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a19      	ldr	r2, [pc, #100]	; (800cb3c <TIM_OC4_SetConfig+0xcc>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00f      	beq.n	800cafc <TIM_OC4_SetConfig+0x8c>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a18      	ldr	r2, [pc, #96]	; (800cb40 <TIM_OC4_SetConfig+0xd0>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d00b      	beq.n	800cafc <TIM_OC4_SetConfig+0x8c>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a17      	ldr	r2, [pc, #92]	; (800cb44 <TIM_OC4_SetConfig+0xd4>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d007      	beq.n	800cafc <TIM_OC4_SetConfig+0x8c>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a16      	ldr	r2, [pc, #88]	; (800cb48 <TIM_OC4_SetConfig+0xd8>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d003      	beq.n	800cafc <TIM_OC4_SetConfig+0x8c>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a15      	ldr	r2, [pc, #84]	; (800cb4c <TIM_OC4_SetConfig+0xdc>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d109      	bne.n	800cb10 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	695b      	ldr	r3, [r3, #20]
 800cb08:	019b      	lsls	r3, r3, #6
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	621a      	str	r2, [r3, #32]
}
 800cb2a:	bf00      	nop
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	40012c00 	.word	0x40012c00
 800cb3c:	40013400 	.word	0x40013400
 800cb40:	40014000 	.word	0x40014000
 800cb44:	40014400 	.word	0x40014400
 800cb48:	40014800 	.word	0x40014800
 800cb4c:	40015000 	.word	0x40015000

0800cb50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b087      	sub	sp, #28
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cb94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	041b      	lsls	r3, r3, #16
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a19      	ldr	r2, [pc, #100]	; (800cc0c <TIM_OC5_SetConfig+0xbc>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d013      	beq.n	800cbd2 <TIM_OC5_SetConfig+0x82>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a18      	ldr	r2, [pc, #96]	; (800cc10 <TIM_OC5_SetConfig+0xc0>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d00f      	beq.n	800cbd2 <TIM_OC5_SetConfig+0x82>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a17      	ldr	r2, [pc, #92]	; (800cc14 <TIM_OC5_SetConfig+0xc4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d00b      	beq.n	800cbd2 <TIM_OC5_SetConfig+0x82>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a16      	ldr	r2, [pc, #88]	; (800cc18 <TIM_OC5_SetConfig+0xc8>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d007      	beq.n	800cbd2 <TIM_OC5_SetConfig+0x82>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a15      	ldr	r2, [pc, #84]	; (800cc1c <TIM_OC5_SetConfig+0xcc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d003      	beq.n	800cbd2 <TIM_OC5_SetConfig+0x82>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a14      	ldr	r2, [pc, #80]	; (800cc20 <TIM_OC5_SetConfig+0xd0>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d109      	bne.n	800cbe6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	021b      	lsls	r3, r3, #8
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	685a      	ldr	r2, [r3, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	621a      	str	r2, [r3, #32]
}
 800cc00:	bf00      	nop
 800cc02:	371c      	adds	r7, #28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	40012c00 	.word	0x40012c00
 800cc10:	40013400 	.word	0x40013400
 800cc14:	40014000 	.word	0x40014000
 800cc18:	40014400 	.word	0x40014400
 800cc1c:	40014800 	.word	0x40014800
 800cc20:	40015000 	.word	0x40015000

0800cc24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	051b      	lsls	r3, r3, #20
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a1a      	ldr	r2, [pc, #104]	; (800cce4 <TIM_OC6_SetConfig+0xc0>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d013      	beq.n	800cca8 <TIM_OC6_SetConfig+0x84>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a19      	ldr	r2, [pc, #100]	; (800cce8 <TIM_OC6_SetConfig+0xc4>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00f      	beq.n	800cca8 <TIM_OC6_SetConfig+0x84>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a18      	ldr	r2, [pc, #96]	; (800ccec <TIM_OC6_SetConfig+0xc8>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <TIM_OC6_SetConfig+0x84>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a17      	ldr	r2, [pc, #92]	; (800ccf0 <TIM_OC6_SetConfig+0xcc>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d007      	beq.n	800cca8 <TIM_OC6_SetConfig+0x84>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a16      	ldr	r2, [pc, #88]	; (800ccf4 <TIM_OC6_SetConfig+0xd0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d003      	beq.n	800cca8 <TIM_OC6_SetConfig+0x84>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <TIM_OC6_SetConfig+0xd4>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d109      	bne.n	800ccbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	029b      	lsls	r3, r3, #10
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	621a      	str	r2, [r3, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	40012c00 	.word	0x40012c00
 800cce8:	40013400 	.word	0x40013400
 800ccec:	40014000 	.word	0x40014000
 800ccf0:	40014400 	.word	0x40014400
 800ccf4:	40014800 	.word	0x40014800
 800ccf8:	40015000 	.word	0x40015000

0800ccfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	f023 0201 	bic.w	r2, r3, #1
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	011b      	lsls	r3, r3, #4
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f023 030a 	bic.w	r3, r3, #10
 800cd38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	621a      	str	r2, [r3, #32]
}
 800cd4e:	bf00      	nop
 800cd50:	371c      	adds	r7, #28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b087      	sub	sp, #28
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	f023 0210 	bic.w	r2, r3, #16
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a1b      	ldr	r3, [r3, #32]
 800cd7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	031b      	lsls	r3, r3, #12
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	011b      	lsls	r3, r3, #4
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	621a      	str	r2, [r3, #32]
}
 800cdae:	bf00      	nop
 800cdb0:	371c      	adds	r7, #28
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdba:	b480      	push	{r7}
 800cdbc:	b085      	sub	sp, #20
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	f043 0307 	orr.w	r3, r3, #7
 800cddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	609a      	str	r2, [r3, #8]
}
 800cde4:	bf00      	nop
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	021a      	lsls	r2, r3, #8
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	431a      	orrs	r2, r3
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	609a      	str	r2, [r3, #8]
}
 800ce24:	bf00      	nop
 800ce26:	371c      	adds	r7, #28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b087      	sub	sp, #28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f003 031f 	and.w	r3, r3, #31
 800ce42:	2201      	movs	r2, #1
 800ce44:	fa02 f303 	lsl.w	r3, r2, r3
 800ce48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6a1a      	ldr	r2, [r3, #32]
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	43db      	mvns	r3, r3
 800ce52:	401a      	ands	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6a1a      	ldr	r2, [r3, #32]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	f003 031f 	and.w	r3, r3, #31
 800ce62:	6879      	ldr	r1, [r7, #4]
 800ce64:	fa01 f303 	lsl.w	r3, r1, r3
 800ce68:	431a      	orrs	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	621a      	str	r2, [r3, #32]
}
 800ce6e:	bf00      	nop
 800ce70:	371c      	adds	r7, #28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
	...

0800ce7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a1e      	ldr	r2, [pc, #120]	; (800cf00 <TIM_ResetCallback+0x84>)
 800ce88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a1d      	ldr	r2, [pc, #116]	; (800cf04 <TIM_ResetCallback+0x88>)
 800ce90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a1c      	ldr	r2, [pc, #112]	; (800cf08 <TIM_ResetCallback+0x8c>)
 800ce98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a1b      	ldr	r2, [pc, #108]	; (800cf0c <TIM_ResetCallback+0x90>)
 800cea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a1a      	ldr	r2, [pc, #104]	; (800cf10 <TIM_ResetCallback+0x94>)
 800cea8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a19      	ldr	r2, [pc, #100]	; (800cf14 <TIM_ResetCallback+0x98>)
 800ceb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a18      	ldr	r2, [pc, #96]	; (800cf18 <TIM_ResetCallback+0x9c>)
 800ceb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a17      	ldr	r2, [pc, #92]	; (800cf1c <TIM_ResetCallback+0xa0>)
 800cec0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a16      	ldr	r2, [pc, #88]	; (800cf20 <TIM_ResetCallback+0xa4>)
 800cec8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a15      	ldr	r2, [pc, #84]	; (800cf24 <TIM_ResetCallback+0xa8>)
 800ced0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a14      	ldr	r2, [pc, #80]	; (800cf28 <TIM_ResetCallback+0xac>)
 800ced8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a13      	ldr	r2, [pc, #76]	; (800cf2c <TIM_ResetCallback+0xb0>)
 800cee0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a12      	ldr	r2, [pc, #72]	; (800cf30 <TIM_ResetCallback+0xb4>)
 800cee8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a11      	ldr	r2, [pc, #68]	; (800cf34 <TIM_ResetCallback+0xb8>)
 800cef0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	08004551 	.word	0x08004551
 800cf04:	0800c353 	.word	0x0800c353
 800cf08:	0800c3cb 	.word	0x0800c3cb
 800cf0c:	0800c3df 	.word	0x0800c3df
 800cf10:	0800c37b 	.word	0x0800c37b
 800cf14:	0800c38f 	.word	0x0800c38f
 800cf18:	0800c367 	.word	0x0800c367
 800cf1c:	0800c3a3 	.word	0x0800c3a3
 800cf20:	0800c3b7 	.word	0x0800c3b7
 800cf24:	0800c3f3 	.word	0x0800c3f3
 800cf28:	0800d2d1 	.word	0x0800d2d1
 800cf2c:	0800d2e5 	.word	0x0800d2e5
 800cf30:	0800d2f9 	.word	0x0800d2f9
 800cf34:	0800d30d 	.word	0x0800d30d

0800cf38 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d109      	bne.n	800cf5c <HAL_TIMEx_PWMN_Start+0x24>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	bf14      	ite	ne
 800cf54:	2301      	movne	r3, #1
 800cf56:	2300      	moveq	r3, #0
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	e022      	b.n	800cfa2 <HAL_TIMEx_PWMN_Start+0x6a>
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2b04      	cmp	r3, #4
 800cf60:	d109      	bne.n	800cf76 <HAL_TIMEx_PWMN_Start+0x3e>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	bf14      	ite	ne
 800cf6e:	2301      	movne	r3, #1
 800cf70:	2300      	moveq	r3, #0
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	e015      	b.n	800cfa2 <HAL_TIMEx_PWMN_Start+0x6a>
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b08      	cmp	r3, #8
 800cf7a:	d109      	bne.n	800cf90 <HAL_TIMEx_PWMN_Start+0x58>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	bf14      	ite	ne
 800cf88:	2301      	movne	r3, #1
 800cf8a:	2300      	moveq	r3, #0
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	e008      	b.n	800cfa2 <HAL_TIMEx_PWMN_Start+0x6a>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	bf14      	ite	ne
 800cf9c:	2301      	movne	r3, #1
 800cf9e:	2300      	moveq	r3, #0
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e06e      	b.n	800d088 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d104      	bne.n	800cfba <HAL_TIMEx_PWMN_Start+0x82>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfb8:	e013      	b.n	800cfe2 <HAL_TIMEx_PWMN_Start+0xaa>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d104      	bne.n	800cfca <HAL_TIMEx_PWMN_Start+0x92>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfc8:	e00b      	b.n	800cfe2 <HAL_TIMEx_PWMN_Start+0xaa>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b08      	cmp	r3, #8
 800cfce:	d104      	bne.n	800cfda <HAL_TIMEx_PWMN_Start+0xa2>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfd8:	e003      	b.n	800cfe2 <HAL_TIMEx_PWMN_Start+0xaa>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2202      	movs	r2, #2
 800cfde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2204      	movs	r2, #4
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 f998 	bl	800d320 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cffe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a22      	ldr	r2, [pc, #136]	; (800d090 <HAL_TIMEx_PWMN_Start+0x158>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d01d      	beq.n	800d046 <HAL_TIMEx_PWMN_Start+0x10e>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d012:	d018      	beq.n	800d046 <HAL_TIMEx_PWMN_Start+0x10e>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a1e      	ldr	r2, [pc, #120]	; (800d094 <HAL_TIMEx_PWMN_Start+0x15c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d013      	beq.n	800d046 <HAL_TIMEx_PWMN_Start+0x10e>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a1d      	ldr	r2, [pc, #116]	; (800d098 <HAL_TIMEx_PWMN_Start+0x160>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d00e      	beq.n	800d046 <HAL_TIMEx_PWMN_Start+0x10e>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a1b      	ldr	r2, [pc, #108]	; (800d09c <HAL_TIMEx_PWMN_Start+0x164>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d009      	beq.n	800d046 <HAL_TIMEx_PWMN_Start+0x10e>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a1a      	ldr	r2, [pc, #104]	; (800d0a0 <HAL_TIMEx_PWMN_Start+0x168>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d004      	beq.n	800d046 <HAL_TIMEx_PWMN_Start+0x10e>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a18      	ldr	r2, [pc, #96]	; (800d0a4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d115      	bne.n	800d072 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	689a      	ldr	r2, [r3, #8]
 800d04c:	4b16      	ldr	r3, [pc, #88]	; (800d0a8 <HAL_TIMEx_PWMN_Start+0x170>)
 800d04e:	4013      	ands	r3, r2
 800d050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b06      	cmp	r3, #6
 800d056:	d015      	beq.n	800d084 <HAL_TIMEx_PWMN_Start+0x14c>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d05e:	d011      	beq.n	800d084 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f042 0201 	orr.w	r2, r2, #1
 800d06e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d070:	e008      	b.n	800d084 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f042 0201 	orr.w	r2, r2, #1
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	e000      	b.n	800d086 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	40012c00 	.word	0x40012c00
 800d094:	40000400 	.word	0x40000400
 800d098:	40000800 	.word	0x40000800
 800d09c:	40013400 	.word	0x40013400
 800d0a0:	40014000 	.word	0x40014000
 800d0a4:	40015000 	.word	0x40015000
 800d0a8:	00010007 	.word	0x00010007

0800d0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d101      	bne.n	800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	e06d      	b.n	800d1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a30      	ldr	r2, [pc, #192]	; (800d1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d009      	beq.n	800d102 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a2f      	ldr	r2, [pc, #188]	; (800d1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d004      	beq.n	800d102 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a2d      	ldr	r2, [pc, #180]	; (800d1b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d108      	bne.n	800d114 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d108:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	4313      	orrs	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d11a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a1e      	ldr	r2, [pc, #120]	; (800d1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d01d      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d140:	d018      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a1c      	ldr	r2, [pc, #112]	; (800d1b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d013      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a1a      	ldr	r2, [pc, #104]	; (800d1bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d00e      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a15      	ldr	r2, [pc, #84]	; (800d1b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d009      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a16      	ldr	r2, [pc, #88]	; (800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d004      	beq.n	800d174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a11      	ldr	r2, [pc, #68]	; (800d1b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d10c      	bne.n	800d18e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d17a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	4313      	orrs	r3, r2
 800d184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	40012c00 	.word	0x40012c00
 800d1b0:	40013400 	.word	0x40013400
 800d1b4:	40015000 	.word	0x40015000
 800d1b8:	40000400 	.word	0x40000400
 800d1bc:	40000800 	.word	0x40000800
 800d1c0:	40014000 	.word	0x40014000

0800d1c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d101      	bne.n	800d1e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d1dc:	2302      	movs	r3, #2
 800d1de:	e06a      	b.n	800d2b6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	4313      	orrs	r3, r2
 800d202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	4313      	orrs	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d246:	4313      	orrs	r3, r2
 800d248:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	041b      	lsls	r3, r3, #16
 800d256:	4313      	orrs	r3, r2
 800d258:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a19      	ldr	r2, [pc, #100]	; (800d2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d009      	beq.n	800d278 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a17      	ldr	r2, [pc, #92]	; (800d2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d004      	beq.n	800d278 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a16      	ldr	r2, [pc, #88]	; (800d2cc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d115      	bne.n	800d2a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	051b      	lsls	r3, r3, #20
 800d284:	4313      	orrs	r3, r2
 800d286:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	69db      	ldr	r3, [r3, #28]
 800d292:	4313      	orrs	r3, r2
 800d294:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	40012c00 	.word	0x40012c00
 800d2c8:	40013400 	.word	0x40013400
 800d2cc:	40015000 	.word	0x40015000

0800d2d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d320:	b480      	push	{r7}
 800d322:	b087      	sub	sp, #28
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	f003 031f 	and.w	r3, r3, #31
 800d332:	2204      	movs	r2, #4
 800d334:	fa02 f303 	lsl.w	r3, r2, r3
 800d338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6a1a      	ldr	r2, [r3, #32]
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	43db      	mvns	r3, r3
 800d342:	401a      	ands	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6a1a      	ldr	r2, [r3, #32]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	f003 031f 	and.w	r3, r3, #31
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	fa01 f303 	lsl.w	r3, r1, r3
 800d358:	431a      	orrs	r2, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	621a      	str	r2, [r3, #32]
}
 800d35e:	bf00      	nop
 800d360:	371c      	adds	r7, #28
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e040      	b.n	800d3fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d380:	2b00      	cmp	r3, #0
 800d382:	d106      	bne.n	800d392 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7f7 fd4f 	bl	8004e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2224      	movs	r2, #36	; 0x24
 800d396:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f022 0201 	bic.w	r2, r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f82d 	bl	800d408 <UART_SetConfig>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d101      	bne.n	800d3b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e022      	b.n	800d3fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f9f5 	bl	800d7b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	689a      	ldr	r2, [r3, #8]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f042 0201 	orr.w	r2, r2, #1
 800d3f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fa7c 	bl	800d8f4 <UART_CheckIdleState>
 800d3fc:	4603      	mov	r3, r0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	431a      	orrs	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	431a      	orrs	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	4313      	orrs	r3, r2
 800d42a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	4b92      	ldr	r3, [pc, #584]	; (800d67c <UART_SetConfig+0x274>)
 800d434:	4013      	ands	r3, r2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	6812      	ldr	r2, [r2, #0]
 800d43a:	6979      	ldr	r1, [r7, #20]
 800d43c:	430b      	orrs	r3, r1
 800d43e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68da      	ldr	r2, [r3, #12]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	430a      	orrs	r2, r1
 800d454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a1b      	ldr	r3, [r3, #32]
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4313      	orrs	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	430a      	orrs	r2, r1
 800d478:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a80      	ldr	r2, [pc, #512]	; (800d680 <UART_SetConfig+0x278>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d120      	bne.n	800d4c6 <UART_SetConfig+0xbe>
 800d484:	4b7f      	ldr	r3, [pc, #508]	; (800d684 <UART_SetConfig+0x27c>)
 800d486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d488:	f003 0303 	and.w	r3, r3, #3
 800d48c:	2b03      	cmp	r3, #3
 800d48e:	d817      	bhi.n	800d4c0 <UART_SetConfig+0xb8>
 800d490:	a201      	add	r2, pc, #4	; (adr r2, 800d498 <UART_SetConfig+0x90>)
 800d492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d496:	bf00      	nop
 800d498:	0800d4a9 	.word	0x0800d4a9
 800d49c:	0800d4b5 	.word	0x0800d4b5
 800d4a0:	0800d4bb 	.word	0x0800d4bb
 800d4a4:	0800d4af 	.word	0x0800d4af
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	77fb      	strb	r3, [r7, #31]
 800d4ac:	e0b5      	b.n	800d61a <UART_SetConfig+0x212>
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	77fb      	strb	r3, [r7, #31]
 800d4b2:	e0b2      	b.n	800d61a <UART_SetConfig+0x212>
 800d4b4:	2304      	movs	r3, #4
 800d4b6:	77fb      	strb	r3, [r7, #31]
 800d4b8:	e0af      	b.n	800d61a <UART_SetConfig+0x212>
 800d4ba:	2308      	movs	r3, #8
 800d4bc:	77fb      	strb	r3, [r7, #31]
 800d4be:	e0ac      	b.n	800d61a <UART_SetConfig+0x212>
 800d4c0:	2310      	movs	r3, #16
 800d4c2:	77fb      	strb	r3, [r7, #31]
 800d4c4:	e0a9      	b.n	800d61a <UART_SetConfig+0x212>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a6f      	ldr	r2, [pc, #444]	; (800d688 <UART_SetConfig+0x280>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d124      	bne.n	800d51a <UART_SetConfig+0x112>
 800d4d0:	4b6c      	ldr	r3, [pc, #432]	; (800d684 <UART_SetConfig+0x27c>)
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d4d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d4dc:	d011      	beq.n	800d502 <UART_SetConfig+0xfa>
 800d4de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d4e2:	d817      	bhi.n	800d514 <UART_SetConfig+0x10c>
 800d4e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4e8:	d011      	beq.n	800d50e <UART_SetConfig+0x106>
 800d4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4ee:	d811      	bhi.n	800d514 <UART_SetConfig+0x10c>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <UART_SetConfig+0xf4>
 800d4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4f8:	d006      	beq.n	800d508 <UART_SetConfig+0x100>
 800d4fa:	e00b      	b.n	800d514 <UART_SetConfig+0x10c>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	77fb      	strb	r3, [r7, #31]
 800d500:	e08b      	b.n	800d61a <UART_SetConfig+0x212>
 800d502:	2302      	movs	r3, #2
 800d504:	77fb      	strb	r3, [r7, #31]
 800d506:	e088      	b.n	800d61a <UART_SetConfig+0x212>
 800d508:	2304      	movs	r3, #4
 800d50a:	77fb      	strb	r3, [r7, #31]
 800d50c:	e085      	b.n	800d61a <UART_SetConfig+0x212>
 800d50e:	2308      	movs	r3, #8
 800d510:	77fb      	strb	r3, [r7, #31]
 800d512:	e082      	b.n	800d61a <UART_SetConfig+0x212>
 800d514:	2310      	movs	r3, #16
 800d516:	77fb      	strb	r3, [r7, #31]
 800d518:	e07f      	b.n	800d61a <UART_SetConfig+0x212>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a5b      	ldr	r2, [pc, #364]	; (800d68c <UART_SetConfig+0x284>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d124      	bne.n	800d56e <UART_SetConfig+0x166>
 800d524:	4b57      	ldr	r3, [pc, #348]	; (800d684 <UART_SetConfig+0x27c>)
 800d526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d528:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800d52c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d530:	d011      	beq.n	800d556 <UART_SetConfig+0x14e>
 800d532:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d536:	d817      	bhi.n	800d568 <UART_SetConfig+0x160>
 800d538:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d53c:	d011      	beq.n	800d562 <UART_SetConfig+0x15a>
 800d53e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d542:	d811      	bhi.n	800d568 <UART_SetConfig+0x160>
 800d544:	2b00      	cmp	r3, #0
 800d546:	d003      	beq.n	800d550 <UART_SetConfig+0x148>
 800d548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d54c:	d006      	beq.n	800d55c <UART_SetConfig+0x154>
 800d54e:	e00b      	b.n	800d568 <UART_SetConfig+0x160>
 800d550:	2300      	movs	r3, #0
 800d552:	77fb      	strb	r3, [r7, #31]
 800d554:	e061      	b.n	800d61a <UART_SetConfig+0x212>
 800d556:	2302      	movs	r3, #2
 800d558:	77fb      	strb	r3, [r7, #31]
 800d55a:	e05e      	b.n	800d61a <UART_SetConfig+0x212>
 800d55c:	2304      	movs	r3, #4
 800d55e:	77fb      	strb	r3, [r7, #31]
 800d560:	e05b      	b.n	800d61a <UART_SetConfig+0x212>
 800d562:	2308      	movs	r3, #8
 800d564:	77fb      	strb	r3, [r7, #31]
 800d566:	e058      	b.n	800d61a <UART_SetConfig+0x212>
 800d568:	2310      	movs	r3, #16
 800d56a:	77fb      	strb	r3, [r7, #31]
 800d56c:	e055      	b.n	800d61a <UART_SetConfig+0x212>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a47      	ldr	r2, [pc, #284]	; (800d690 <UART_SetConfig+0x288>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d124      	bne.n	800d5c2 <UART_SetConfig+0x1ba>
 800d578:	4b42      	ldr	r3, [pc, #264]	; (800d684 <UART_SetConfig+0x27c>)
 800d57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d584:	d011      	beq.n	800d5aa <UART_SetConfig+0x1a2>
 800d586:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d58a:	d817      	bhi.n	800d5bc <UART_SetConfig+0x1b4>
 800d58c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d590:	d011      	beq.n	800d5b6 <UART_SetConfig+0x1ae>
 800d592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d596:	d811      	bhi.n	800d5bc <UART_SetConfig+0x1b4>
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d003      	beq.n	800d5a4 <UART_SetConfig+0x19c>
 800d59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5a0:	d006      	beq.n	800d5b0 <UART_SetConfig+0x1a8>
 800d5a2:	e00b      	b.n	800d5bc <UART_SetConfig+0x1b4>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	77fb      	strb	r3, [r7, #31]
 800d5a8:	e037      	b.n	800d61a <UART_SetConfig+0x212>
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	77fb      	strb	r3, [r7, #31]
 800d5ae:	e034      	b.n	800d61a <UART_SetConfig+0x212>
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	77fb      	strb	r3, [r7, #31]
 800d5b4:	e031      	b.n	800d61a <UART_SetConfig+0x212>
 800d5b6:	2308      	movs	r3, #8
 800d5b8:	77fb      	strb	r3, [r7, #31]
 800d5ba:	e02e      	b.n	800d61a <UART_SetConfig+0x212>
 800d5bc:	2310      	movs	r3, #16
 800d5be:	77fb      	strb	r3, [r7, #31]
 800d5c0:	e02b      	b.n	800d61a <UART_SetConfig+0x212>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a33      	ldr	r2, [pc, #204]	; (800d694 <UART_SetConfig+0x28c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d124      	bne.n	800d616 <UART_SetConfig+0x20e>
 800d5cc:	4b2d      	ldr	r3, [pc, #180]	; (800d684 <UART_SetConfig+0x27c>)
 800d5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d5d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5d8:	d011      	beq.n	800d5fe <UART_SetConfig+0x1f6>
 800d5da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5de:	d817      	bhi.n	800d610 <UART_SetConfig+0x208>
 800d5e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5e4:	d011      	beq.n	800d60a <UART_SetConfig+0x202>
 800d5e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5ea:	d811      	bhi.n	800d610 <UART_SetConfig+0x208>
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d003      	beq.n	800d5f8 <UART_SetConfig+0x1f0>
 800d5f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5f4:	d006      	beq.n	800d604 <UART_SetConfig+0x1fc>
 800d5f6:	e00b      	b.n	800d610 <UART_SetConfig+0x208>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	77fb      	strb	r3, [r7, #31]
 800d5fc:	e00d      	b.n	800d61a <UART_SetConfig+0x212>
 800d5fe:	2302      	movs	r3, #2
 800d600:	77fb      	strb	r3, [r7, #31]
 800d602:	e00a      	b.n	800d61a <UART_SetConfig+0x212>
 800d604:	2304      	movs	r3, #4
 800d606:	77fb      	strb	r3, [r7, #31]
 800d608:	e007      	b.n	800d61a <UART_SetConfig+0x212>
 800d60a:	2308      	movs	r3, #8
 800d60c:	77fb      	strb	r3, [r7, #31]
 800d60e:	e004      	b.n	800d61a <UART_SetConfig+0x212>
 800d610:	2310      	movs	r3, #16
 800d612:	77fb      	strb	r3, [r7, #31]
 800d614:	e001      	b.n	800d61a <UART_SetConfig+0x212>
 800d616:	2310      	movs	r3, #16
 800d618:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d622:	d16b      	bne.n	800d6fc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800d624:	7ffb      	ldrb	r3, [r7, #31]
 800d626:	2b08      	cmp	r3, #8
 800d628:	d838      	bhi.n	800d69c <UART_SetConfig+0x294>
 800d62a:	a201      	add	r2, pc, #4	; (adr r2, 800d630 <UART_SetConfig+0x228>)
 800d62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d630:	0800d655 	.word	0x0800d655
 800d634:	0800d65d 	.word	0x0800d65d
 800d638:	0800d665 	.word	0x0800d665
 800d63c:	0800d69d 	.word	0x0800d69d
 800d640:	0800d66b 	.word	0x0800d66b
 800d644:	0800d69d 	.word	0x0800d69d
 800d648:	0800d69d 	.word	0x0800d69d
 800d64c:	0800d69d 	.word	0x0800d69d
 800d650:	0800d673 	.word	0x0800d673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d654:	f7fc fd24 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800d658:	61b8      	str	r0, [r7, #24]
        break;
 800d65a:	e024      	b.n	800d6a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d65c:	f7fc fd42 	bl	800a0e4 <HAL_RCC_GetPCLK2Freq>
 800d660:	61b8      	str	r0, [r7, #24]
        break;
 800d662:	e020      	b.n	800d6a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d664:	4b0c      	ldr	r3, [pc, #48]	; (800d698 <UART_SetConfig+0x290>)
 800d666:	61bb      	str	r3, [r7, #24]
        break;
 800d668:	e01d      	b.n	800d6a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d66a:	f7fc fca3 	bl	8009fb4 <HAL_RCC_GetSysClockFreq>
 800d66e:	61b8      	str	r0, [r7, #24]
        break;
 800d670:	e019      	b.n	800d6a6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d676:	61bb      	str	r3, [r7, #24]
        break;
 800d678:	e015      	b.n	800d6a6 <UART_SetConfig+0x29e>
 800d67a:	bf00      	nop
 800d67c:	efff69f3 	.word	0xefff69f3
 800d680:	40013800 	.word	0x40013800
 800d684:	40021000 	.word	0x40021000
 800d688:	40004400 	.word	0x40004400
 800d68c:	40004800 	.word	0x40004800
 800d690:	40004c00 	.word	0x40004c00
 800d694:	40005000 	.word	0x40005000
 800d698:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800d69c:	2300      	movs	r3, #0
 800d69e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	77bb      	strb	r3, [r7, #30]
        break;
 800d6a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d073      	beq.n	800d794 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	005a      	lsls	r2, r3, #1
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	085b      	lsrs	r3, r3, #1
 800d6b6:	441a      	add	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	2b0f      	cmp	r3, #15
 800d6c6:	d916      	bls.n	800d6f6 <UART_SetConfig+0x2ee>
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6ce:	d212      	bcs.n	800d6f6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	f023 030f 	bic.w	r3, r3, #15
 800d6d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	085b      	lsrs	r3, r3, #1
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	f003 0307 	and.w	r3, r3, #7
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	89fb      	ldrh	r3, [r7, #14]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	89fa      	ldrh	r2, [r7, #14]
 800d6f2:	60da      	str	r2, [r3, #12]
 800d6f4:	e04e      	b.n	800d794 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	77bb      	strb	r3, [r7, #30]
 800d6fa:	e04b      	b.n	800d794 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6fc:	7ffb      	ldrb	r3, [r7, #31]
 800d6fe:	2b08      	cmp	r3, #8
 800d700:	d827      	bhi.n	800d752 <UART_SetConfig+0x34a>
 800d702:	a201      	add	r2, pc, #4	; (adr r2, 800d708 <UART_SetConfig+0x300>)
 800d704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d708:	0800d72d 	.word	0x0800d72d
 800d70c:	0800d735 	.word	0x0800d735
 800d710:	0800d73d 	.word	0x0800d73d
 800d714:	0800d753 	.word	0x0800d753
 800d718:	0800d743 	.word	0x0800d743
 800d71c:	0800d753 	.word	0x0800d753
 800d720:	0800d753 	.word	0x0800d753
 800d724:	0800d753 	.word	0x0800d753
 800d728:	0800d74b 	.word	0x0800d74b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d72c:	f7fc fcb8 	bl	800a0a0 <HAL_RCC_GetPCLK1Freq>
 800d730:	61b8      	str	r0, [r7, #24]
        break;
 800d732:	e013      	b.n	800d75c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d734:	f7fc fcd6 	bl	800a0e4 <HAL_RCC_GetPCLK2Freq>
 800d738:	61b8      	str	r0, [r7, #24]
        break;
 800d73a:	e00f      	b.n	800d75c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d73c:	4b1b      	ldr	r3, [pc, #108]	; (800d7ac <UART_SetConfig+0x3a4>)
 800d73e:	61bb      	str	r3, [r7, #24]
        break;
 800d740:	e00c      	b.n	800d75c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d742:	f7fc fc37 	bl	8009fb4 <HAL_RCC_GetSysClockFreq>
 800d746:	61b8      	str	r0, [r7, #24]
        break;
 800d748:	e008      	b.n	800d75c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d74a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d74e:	61bb      	str	r3, [r7, #24]
        break;
 800d750:	e004      	b.n	800d75c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	77bb      	strb	r3, [r7, #30]
        break;
 800d75a:	bf00      	nop
    }

    if (pclk != 0U)
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d018      	beq.n	800d794 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	085a      	lsrs	r2, r3, #1
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	441a      	add	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	fbb2 f3f3 	udiv	r3, r2, r3
 800d774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	2b0f      	cmp	r3, #15
 800d77a:	d909      	bls.n	800d790 <UART_SetConfig+0x388>
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d782:	d205      	bcs.n	800d790 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	b29a      	uxth	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	60da      	str	r2, [r3, #12]
 800d78e:	e001      	b.n	800d794 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d7a0:	7fbb      	ldrb	r3, [r7, #30]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3720      	adds	r7, #32
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	007a1200 	.word	0x007a1200

0800d7b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00a      	beq.n	800d7da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	f003 0302 	and.w	r3, r3, #2
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00a      	beq.n	800d7fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	430a      	orrs	r2, r1
 800d7fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00a      	beq.n	800d81e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	430a      	orrs	r2, r1
 800d81c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d822:	f003 0308 	and.w	r3, r3, #8
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00a      	beq.n	800d840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	430a      	orrs	r2, r1
 800d83e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	f003 0310 	and.w	r3, r3, #16
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00a      	beq.n	800d862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	430a      	orrs	r2, r1
 800d860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d866:	f003 0320 	and.w	r3, r3, #32
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00a      	beq.n	800d884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	430a      	orrs	r2, r1
 800d882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01a      	beq.n	800d8c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8ae:	d10a      	bne.n	800d8c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	430a      	orrs	r2, r1
 800d8c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00a      	beq.n	800d8e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	430a      	orrs	r2, r1
 800d8e6:	605a      	str	r2, [r3, #4]
  }
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b098      	sub	sp, #96	; 0x60
 800d8f8:	af02      	add	r7, sp, #8
 800d8fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d904:	f7f7 fc94 	bl	8005230 <HAL_GetTick>
 800d908:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b08      	cmp	r3, #8
 800d916:	d12e      	bne.n	800d976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d920:	2200      	movs	r2, #0
 800d922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f88c 	bl	800da44 <UART_WaitOnFlagUntilTimeout>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d021      	beq.n	800d976 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93a:	e853 3f00 	ldrex	r3, [r3]
 800d93e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d946:	653b      	str	r3, [r7, #80]	; 0x50
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	461a      	mov	r2, r3
 800d94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d950:	647b      	str	r3, [r7, #68]	; 0x44
 800d952:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d958:	e841 2300 	strex	r3, r2, [r1]
 800d95c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1e6      	bne.n	800d932 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2220      	movs	r2, #32
 800d968:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d972:	2303      	movs	r3, #3
 800d974:	e062      	b.n	800da3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 0304 	and.w	r3, r3, #4
 800d980:	2b04      	cmp	r3, #4
 800d982:	d149      	bne.n	800da18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d98c:	2200      	movs	r2, #0
 800d98e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 f856 	bl	800da44 <UART_WaitOnFlagUntilTimeout>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d03c      	beq.n	800da18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	e853 3f00 	ldrex	r3, [r3]
 800d9aa:	623b      	str	r3, [r7, #32]
   return(result);
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
 800d9ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9bc:	633b      	str	r3, [r7, #48]	; 0x30
 800d9be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e6      	bne.n	800d99e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	e853 3f00 	ldrex	r3, [r3]
 800d9de:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f023 0301 	bic.w	r3, r3, #1
 800d9e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9f0:	61fa      	str	r2, [r7, #28]
 800d9f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f4:	69b9      	ldr	r1, [r7, #24]
 800d9f6:	69fa      	ldr	r2, [r7, #28]
 800d9f8:	e841 2300 	strex	r3, r2, [r1]
 800d9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1e5      	bne.n	800d9d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2220      	movs	r2, #32
 800da08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da14:	2303      	movs	r3, #3
 800da16:	e011      	b.n	800da3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2220      	movs	r2, #32
 800da1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2220      	movs	r2, #32
 800da22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3758      	adds	r7, #88	; 0x58
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	603b      	str	r3, [r7, #0]
 800da50:	4613      	mov	r3, r2
 800da52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da54:	e049      	b.n	800daea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da5c:	d045      	beq.n	800daea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da5e:	f7f7 fbe7 	bl	8005230 <HAL_GetTick>
 800da62:	4602      	mov	r2, r0
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d302      	bcc.n	800da74 <UART_WaitOnFlagUntilTimeout+0x30>
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da74:	2303      	movs	r3, #3
 800da76:	e048      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 0304 	and.w	r3, r3, #4
 800da82:	2b00      	cmp	r3, #0
 800da84:	d031      	beq.n	800daea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	f003 0308 	and.w	r3, r3, #8
 800da90:	2b08      	cmp	r3, #8
 800da92:	d110      	bne.n	800dab6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2208      	movs	r2, #8
 800da9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f000 f838 	bl	800db12 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2208      	movs	r2, #8
 800daa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e029      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dac4:	d111      	bne.n	800daea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f81e 	bl	800db12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2220      	movs	r2, #32
 800dada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800dae6:	2303      	movs	r3, #3
 800dae8:	e00f      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	69da      	ldr	r2, [r3, #28]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4013      	ands	r3, r2
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	bf0c      	ite	eq
 800dafa:	2301      	moveq	r3, #1
 800dafc:	2300      	movne	r3, #0
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	461a      	mov	r2, r3
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	429a      	cmp	r2, r3
 800db06:	d0a6      	beq.n	800da56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db12:	b480      	push	{r7}
 800db14:	b095      	sub	sp, #84	; 0x54
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db22:	e853 3f00 	ldrex	r3, [r3]
 800db26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db38:	643b      	str	r3, [r7, #64]	; 0x40
 800db3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e6      	bne.n	800db1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3308      	adds	r3, #8
 800db52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	f023 0301 	bic.w	r3, r3, #1
 800db62:	64bb      	str	r3, [r7, #72]	; 0x48
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3308      	adds	r3, #8
 800db6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e5      	bne.n	800db4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db84:	2b01      	cmp	r3, #1
 800db86:	d118      	bne.n	800dbba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	e853 3f00 	ldrex	r3, [r3]
 800db94:	60bb      	str	r3, [r7, #8]
   return(result);
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	f023 0310 	bic.w	r3, r3, #16
 800db9c:	647b      	str	r3, [r7, #68]	; 0x44
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	461a      	mov	r2, r3
 800dba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbaa:	6979      	ldr	r1, [r7, #20]
 800dbac:	69ba      	ldr	r2, [r7, #24]
 800dbae:	e841 2300 	strex	r3, r2, [r1]
 800dbb2:	613b      	str	r3, [r7, #16]
   return(result);
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1e6      	bne.n	800db88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2220      	movs	r2, #32
 800dbbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	669a      	str	r2, [r3, #104]	; 0x68
}
 800dbce:	bf00      	nop
 800dbd0:	3754      	adds	r7, #84	; 0x54
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b085      	sub	sp, #20
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dbea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800dbee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dc10:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800dc14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	43db      	mvns	r3, r3
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	4013      	ands	r3, r2
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800dc3e:	b084      	sub	sp, #16
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	f107 0014 	add.w	r0, r7, #20
 800dc4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	b004      	add	sp, #16
 800dc7e:	4770      	bx	lr

0800dc80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b09d      	sub	sp, #116	; 0x74
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800dca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dca6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	78db      	ldrb	r3, [r3, #3]
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	d81f      	bhi.n	800dcf2 <USB_ActivateEndpoint+0x72>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <USB_ActivateEndpoint+0x38>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dcc9 	.word	0x0800dcc9
 800dcbc:	0800dce5 	.word	0x0800dce5
 800dcc0:	0800dcfb 	.word	0x0800dcfb
 800dcc4:	0800dcd7 	.word	0x0800dcd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800dcc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800dccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800dcd4:	e012      	b.n	800dcfc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800dcd6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800dcda:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800dcde:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800dce2:	e00b      	b.n	800dcfc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800dce4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800dce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dcec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800dcf0:	e004      	b.n	800dcfc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800dcf8:	e000      	b.n	800dcfc <USB_ActivateEndpoint+0x7c>
      break;
 800dcfa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	441a      	add	r2, r3
 800dd06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800dd0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	881b      	ldrh	r3, [r3, #0]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	b21b      	sxth	r3, r3
 800dd2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd36:	b21a      	sxth	r2, r3
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	b21b      	sxth	r3, r3
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	b21b      	sxth	r3, r3
 800dd42:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	441a      	add	r2, r3
 800dd50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800dd54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	7b1b      	ldrb	r3, [r3, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f040 8178 	bne.w	800e062 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	785b      	ldrb	r3, [r3, #1]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f000 8084 	beq.w	800de84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	61bb      	str	r3, [r7, #24]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	461a      	mov	r2, r3
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	61bb      	str	r3, [r7, #24]
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	00da      	lsls	r2, r3, #3
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	4413      	add	r3, r2
 800dd9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	88db      	ldrh	r3, [r3, #6]
 800dda4:	085b      	lsrs	r3, r3, #1
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	827b      	strh	r3, [r7, #18]
 800ddbe:	8a7b      	ldrh	r3, [r7, #18]
 800ddc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d01b      	beq.n	800de00 <USB_ActivateEndpoint+0x180>
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddde:	823b      	strh	r3, [r7, #16]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	441a      	add	r2, r3
 800ddea:	8a3b      	ldrh	r3, [r7, #16]
 800ddec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	78db      	ldrb	r3, [r3, #3]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d020      	beq.n	800de4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4413      	add	r3, r2
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	b29b      	uxth	r3, r3
 800de16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de1e:	81bb      	strh	r3, [r7, #12]
 800de20:	89bb      	ldrh	r3, [r7, #12]
 800de22:	f083 0320 	eor.w	r3, r3, #32
 800de26:	81bb      	strh	r3, [r7, #12]
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	441a      	add	r2, r3
 800de32:	89bb      	ldrh	r3, [r7, #12]
 800de34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de44:	b29b      	uxth	r3, r3
 800de46:	8013      	strh	r3, [r2, #0]
 800de48:	e2d5      	b.n	800e3f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	881b      	ldrh	r3, [r3, #0]
 800de56:	b29b      	uxth	r3, r3
 800de58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de60:	81fb      	strh	r3, [r7, #14]
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	441a      	add	r2, r3
 800de6c:	89fb      	ldrh	r3, [r7, #14]
 800de6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de7e:	b29b      	uxth	r3, r3
 800de80:	8013      	strh	r3, [r2, #0]
 800de82:	e2b8      	b.n	800e3f6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	633b      	str	r3, [r7, #48]	; 0x30
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de8e:	b29b      	uxth	r3, r3
 800de90:	461a      	mov	r2, r3
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	4413      	add	r3, r2
 800de96:	633b      	str	r3, [r7, #48]	; 0x30
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	00da      	lsls	r2, r3, #3
 800de9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea0:	4413      	add	r3, r2
 800dea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	88db      	ldrh	r3, [r3, #6]
 800deac:	085b      	lsrs	r3, r3, #1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	005b      	lsls	r3, r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	62bb      	str	r3, [r7, #40]	; 0x28
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	461a      	mov	r2, r3
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	4413      	add	r3, r2
 800deca:	62bb      	str	r3, [r7, #40]	; 0x28
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	00da      	lsls	r2, r3, #3
 800ded2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded4:	4413      	add	r3, r2
 800ded6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	881b      	ldrh	r3, [r3, #0]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	801a      	strh	r2, [r3, #0]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	2b3e      	cmp	r3, #62	; 0x3e
 800def2:	d91d      	bls.n	800df30 <USB_ActivateEndpoint+0x2b0>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	095b      	lsrs	r3, r3, #5
 800defa:	66bb      	str	r3, [r7, #104]	; 0x68
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	f003 031f 	and.w	r3, r3, #31
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <USB_ActivateEndpoint+0x28e>
 800df08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df0a:	3b01      	subs	r3, #1
 800df0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	b29a      	uxth	r2, r3
 800df14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df16:	b29b      	uxth	r3, r3
 800df18:	029b      	lsls	r3, r3, #10
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	4313      	orrs	r3, r2
 800df1e:	b29b      	uxth	r3, r3
 800df20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df28:	b29a      	uxth	r2, r3
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	801a      	strh	r2, [r3, #0]
 800df2e:	e026      	b.n	800df7e <USB_ActivateEndpoint+0x2fe>
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	691b      	ldr	r3, [r3, #16]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10a      	bne.n	800df4e <USB_ActivateEndpoint+0x2ce>
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df46:	b29a      	uxth	r2, r3
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	801a      	strh	r2, [r3, #0]
 800df4c:	e017      	b.n	800df7e <USB_ActivateEndpoint+0x2fe>
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	085b      	lsrs	r3, r3, #1
 800df54:	66bb      	str	r3, [r7, #104]	; 0x68
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <USB_ActivateEndpoint+0x2e8>
 800df62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df64:	3301      	adds	r3, #1
 800df66:	66bb      	str	r3, [r7, #104]	; 0x68
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df70:	b29b      	uxth	r3, r3
 800df72:	029b      	lsls	r3, r3, #10
 800df74:	b29b      	uxth	r3, r3
 800df76:	4313      	orrs	r3, r2
 800df78:	b29a      	uxth	r2, r3
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	847b      	strh	r3, [r7, #34]	; 0x22
 800df8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d01b      	beq.n	800dfce <USB_ActivateEndpoint+0x34e>
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfac:	843b      	strh	r3, [r7, #32]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	441a      	add	r2, r3
 800dfb8:	8c3b      	ldrh	r3, [r7, #32]
 800dfba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d124      	bne.n	800e020 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfec:	83bb      	strh	r3, [r7, #28]
 800dfee:	8bbb      	ldrh	r3, [r7, #28]
 800dff0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dff4:	83bb      	strh	r3, [r7, #28]
 800dff6:	8bbb      	ldrh	r3, [r7, #28]
 800dff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dffc:	83bb      	strh	r3, [r7, #28]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	441a      	add	r2, r3
 800e008:	8bbb      	ldrh	r3, [r7, #28]
 800e00a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e00e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	8013      	strh	r3, [r2, #0]
 800e01e:	e1ea      	b.n	800e3f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	881b      	ldrh	r3, [r3, #0]
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e036:	83fb      	strh	r3, [r7, #30]
 800e038:	8bfb      	ldrh	r3, [r7, #30]
 800e03a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e03e:	83fb      	strh	r3, [r7, #30]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	441a      	add	r2, r3
 800e04a:	8bfb      	ldrh	r3, [r7, #30]
 800e04c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	8013      	strh	r3, [r2, #0]
 800e060:	e1c9      	b.n	800e3f6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	78db      	ldrb	r3, [r3, #3]
 800e066:	2b02      	cmp	r3, #2
 800e068:	d11e      	bne.n	800e0a8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	4413      	add	r3, r2
 800e074:	881b      	ldrh	r3, [r3, #0]
 800e076:	b29b      	uxth	r3, r3
 800e078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e080:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	441a      	add	r2, r3
 800e08e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e09a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	8013      	strh	r3, [r2, #0]
 800e0a6:	e01d      	b.n	800e0e4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	881b      	ldrh	r3, [r3, #0]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	441a      	add	r2, r3
 800e0cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800e0d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0f4:	4413      	add	r3, r2
 800e0f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	00da      	lsls	r2, r3, #3
 800e0fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e100:	4413      	add	r3, r2
 800e102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e106:	65bb      	str	r3, [r7, #88]	; 0x58
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	891b      	ldrh	r3, [r3, #8]
 800e10c:	085b      	lsrs	r3, r3, #1
 800e10e:	b29b      	uxth	r3, r3
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e116:	801a      	strh	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	657b      	str	r3, [r7, #84]	; 0x54
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e122:	b29b      	uxth	r3, r3
 800e124:	461a      	mov	r2, r3
 800e126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e128:	4413      	add	r3, r2
 800e12a:	657b      	str	r3, [r7, #84]	; 0x54
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	00da      	lsls	r2, r3, #3
 800e132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e134:	4413      	add	r3, r2
 800e136:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e13a:	653b      	str	r3, [r7, #80]	; 0x50
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	895b      	ldrh	r3, [r3, #10]
 800e140:	085b      	lsrs	r3, r3, #1
 800e142:	b29b      	uxth	r3, r3
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	b29a      	uxth	r2, r3
 800e148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e14a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	2b00      	cmp	r3, #0
 800e152:	f040 8093 	bne.w	800e27c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e166:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d01b      	beq.n	800e1aa <USB_ActivateEndpoint+0x52a>
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e188:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	441a      	add	r2, r3
 800e194:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e19a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e19e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e1a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e1b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d01b      	beq.n	800e1fa <USB_ActivateEndpoint+0x57a>
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	441a      	add	r2, r3
 800e1e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	881b      	ldrh	r3, [r3, #0]
 800e206:	b29b      	uxth	r3, r3
 800e208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e210:	873b      	strh	r3, [r7, #56]	; 0x38
 800e212:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e214:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e218:	873b      	strh	r3, [r7, #56]	; 0x38
 800e21a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e21c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e220:	873b      	strh	r3, [r7, #56]	; 0x38
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	441a      	add	r2, r3
 800e22c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e22e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e23e:	b29b      	uxth	r3, r3
 800e240:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	b29b      	uxth	r3, r3
 800e250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e258:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	441a      	add	r2, r3
 800e264:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e26a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e276:	b29b      	uxth	r3, r3
 800e278:	8013      	strh	r3, [r2, #0]
 800e27a:	e0bc      	b.n	800e3f6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e28c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d01d      	beq.n	800e2d4 <USB_ActivateEndpoint+0x654>
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	441a      	add	r2, r3
 800e2bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e2c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e2e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01d      	beq.n	800e32c <USB_ActivateEndpoint+0x6ac>
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e306:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	441a      	add	r2, r3
 800e314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e31c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e328:	b29b      	uxth	r3, r3
 800e32a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	78db      	ldrb	r3, [r3, #3]
 800e330:	2b01      	cmp	r3, #1
 800e332:	d024      	beq.n	800e37e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	b29b      	uxth	r3, r3
 800e342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e34a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e34e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e352:	f083 0320 	eor.w	r3, r3, #32
 800e356:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	441a      	add	r2, r3
 800e364:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e36c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e378:	b29b      	uxth	r3, r3
 800e37a:	8013      	strh	r3, [r2, #0]
 800e37c:	e01d      	b.n	800e3ba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	881b      	ldrh	r3, [r3, #0]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e394:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	441a      	add	r2, r3
 800e3a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e3cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	441a      	add	r2, r3
 800e3de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e3f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3774      	adds	r7, #116	; 0x74
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop

0800e408 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e408:	b480      	push	{r7}
 800e40a:	b08d      	sub	sp, #52	; 0x34
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	7b1b      	ldrb	r3, [r3, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f040 808e 	bne.w	800e538 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	785b      	ldrb	r3, [r3, #1]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d044      	beq.n	800e4ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	881b      	ldrh	r3, [r3, #0]
 800e430:	81bb      	strh	r3, [r7, #12]
 800e432:	89bb      	ldrh	r3, [r7, #12]
 800e434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01b      	beq.n	800e474 <USB_DeactivateEndpoint+0x6c>
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	881b      	ldrh	r3, [r3, #0]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e44e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e452:	817b      	strh	r3, [r7, #10]
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	441a      	add	r2, r3
 800e45e:	897b      	ldrh	r3, [r7, #10]
 800e460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e46c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e470:	b29b      	uxth	r3, r3
 800e472:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	4413      	add	r3, r2
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	b29b      	uxth	r3, r3
 800e482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e48a:	813b      	strh	r3, [r7, #8]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	441a      	add	r2, r3
 800e496:	893b      	ldrh	r3, [r7, #8]
 800e498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e49c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	8013      	strh	r3, [r2, #0]
 800e4ac:	e192      	b.n	800e7d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	4413      	add	r3, r2
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	827b      	strh	r3, [r7, #18]
 800e4bc:	8a7b      	ldrh	r3, [r7, #18]
 800e4be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d01b      	beq.n	800e4fe <USB_DeactivateEndpoint+0xf6>
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4413      	add	r3, r2
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4dc:	823b      	strh	r3, [r7, #16]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	441a      	add	r2, r3
 800e4e8:	8a3b      	ldrh	r3, [r7, #16]
 800e4ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4413      	add	r3, r2
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e514:	81fb      	strh	r3, [r7, #14]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	441a      	add	r2, r3
 800e520:	89fb      	ldrh	r3, [r7, #14]
 800e522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e52a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e52e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e532:	b29b      	uxth	r3, r3
 800e534:	8013      	strh	r3, [r2, #0]
 800e536:	e14d      	b.n	800e7d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	785b      	ldrb	r3, [r3, #1]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f040 80a5 	bne.w	800e68c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4413      	add	r3, r2
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	843b      	strh	r3, [r7, #32]
 800e550:	8c3b      	ldrh	r3, [r7, #32]
 800e552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e556:	2b00      	cmp	r3, #0
 800e558:	d01b      	beq.n	800e592 <USB_DeactivateEndpoint+0x18a>
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4413      	add	r3, r2
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	b29b      	uxth	r3, r3
 800e568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e56c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e570:	83fb      	strh	r3, [r7, #30]
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	441a      	add	r2, r3
 800e57c:	8bfb      	ldrh	r3, [r7, #30]
 800e57e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e58a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e58e:	b29b      	uxth	r3, r3
 800e590:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	881b      	ldrh	r3, [r3, #0]
 800e59e:	83bb      	strh	r3, [r7, #28]
 800e5a0:	8bbb      	ldrh	r3, [r7, #28]
 800e5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d01b      	beq.n	800e5e2 <USB_DeactivateEndpoint+0x1da>
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5c0:	837b      	strh	r3, [r7, #26]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	441a      	add	r2, r3
 800e5cc:	8b7b      	ldrh	r3, [r7, #26]
 800e5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4413      	add	r3, r2
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5f8:	833b      	strh	r3, [r7, #24]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	441a      	add	r2, r3
 800e604:	8b3b      	ldrh	r3, [r7, #24]
 800e606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e60a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e60e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e612:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e616:	b29b      	uxth	r3, r3
 800e618:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	b29b      	uxth	r3, r3
 800e628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e62c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e630:	82fb      	strh	r3, [r7, #22]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	441a      	add	r2, r3
 800e63c:	8afb      	ldrh	r3, [r7, #22]
 800e63e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e64e:	b29b      	uxth	r3, r3
 800e650:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e668:	82bb      	strh	r3, [r7, #20]
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	441a      	add	r2, r3
 800e674:	8abb      	ldrh	r3, [r7, #20]
 800e676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e67a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e686:	b29b      	uxth	r3, r3
 800e688:	8013      	strh	r3, [r2, #0]
 800e68a:	e0a3      	b.n	800e7d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e69a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d01b      	beq.n	800e6dc <USB_DeactivateEndpoint+0x2d4>
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	4413      	add	r3, r2
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	441a      	add	r2, r3
 800e6c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	881b      	ldrh	r3, [r3, #0]
 800e6e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e6ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d01b      	beq.n	800e72c <USB_DeactivateEndpoint+0x324>
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	b29b      	uxth	r3, r3
 800e702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e70a:	853b      	strh	r3, [r7, #40]	; 0x28
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	441a      	add	r2, r3
 800e716:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e71c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e728:	b29b      	uxth	r3, r3
 800e72a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	b29b      	uxth	r3, r3
 800e73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e742:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	441a      	add	r2, r3
 800e74e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e760:	b29b      	uxth	r3, r3
 800e762:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4413      	add	r3, r2
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	b29b      	uxth	r3, r3
 800e772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e77a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	441a      	add	r2, r3
 800e786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e78c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e798:	b29b      	uxth	r3, r3
 800e79a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	441a      	add	r2, r3
 800e7be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3734      	adds	r7, #52	; 0x34
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b0c2      	sub	sp, #264	; 0x108
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7f0:	6018      	str	r0, [r3, #0]
 800e7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	785b      	ldrb	r3, [r3, #1]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	f040 86b7 	bne.w	800f57c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	699a      	ldr	r2, [r3, #24]
 800e81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	429a      	cmp	r2, r3
 800e828:	d908      	bls.n	800e83c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e83a:	e007      	b.n	800e84c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	7b1b      	ldrb	r3, [r3, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d13a      	bne.n	800e8d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6959      	ldr	r1, [r3, #20]
 800e868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	88da      	ldrh	r2, [r3, #6]
 800e874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e878:	b29b      	uxth	r3, r3
 800e87a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e87e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e882:	6800      	ldr	r0, [r0, #0]
 800e884:	f001 fc8c 	bl	80101a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	613b      	str	r3, [r7, #16]
 800e894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	613b      	str	r3, [r7, #16]
 800e8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	00da      	lsls	r2, r3, #3
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	801a      	strh	r2, [r3, #0]
 800e8ce:	f000 be1f 	b.w	800f510 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	78db      	ldrb	r3, [r3, #3]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	f040 8462 	bne.w	800f1a8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	6a1a      	ldr	r2, [r3, #32]
 800e8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	f240 83df 	bls.w	800f0c0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4413      	add	r3, r2
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	b29b      	uxth	r3, r3
 800e920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e928:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e93a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	441a      	add	r2, r3
 800e946:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e94a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e94e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e952:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	6a1a      	ldr	r2, [r3, #32]
 800e96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4413      	add	r3, r2
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f000 81c7 	beq.w	800ed32 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	633b      	str	r3, [r7, #48]	; 0x30
 800e9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	785b      	ldrb	r3, [r3, #1]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d177      	bne.n	800eab0 <USB_EPStartXfer+0x2ce>
 800e9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	461a      	mov	r2, r3
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	4413      	add	r3, r2
 800e9e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	00da      	lsls	r2, r3, #3
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e9fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	801a      	strh	r2, [r3, #0]
 800ea0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea10:	2b3e      	cmp	r3, #62	; 0x3e
 800ea12:	d921      	bls.n	800ea58 <USB_EPStartXfer+0x276>
 800ea14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea18:	095b      	lsrs	r3, r3, #5
 800ea1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ea1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea22:	f003 031f 	and.w	r3, r3, #31
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d104      	bne.n	800ea34 <USB_EPStartXfer+0x252>
 800ea2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ea34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea36:	881b      	ldrh	r3, [r3, #0]
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	029b      	lsls	r3, r3, #10
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	4313      	orrs	r3, r2
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	801a      	strh	r2, [r3, #0]
 800ea56:	e050      	b.n	800eafa <USB_EPStartXfer+0x318>
 800ea58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10a      	bne.n	800ea76 <USB_EPStartXfer+0x294>
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	881b      	ldrh	r3, [r3, #0]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	801a      	strh	r2, [r3, #0]
 800ea74:	e041      	b.n	800eafa <USB_EPStartXfer+0x318>
 800ea76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea7a:	085b      	lsrs	r3, r3, #1
 800ea7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ea80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d004      	beq.n	800ea96 <USB_EPStartXfer+0x2b4>
 800ea8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ea90:	3301      	adds	r3, #1
 800ea92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	029b      	lsls	r3, r3, #10
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	801a      	strh	r2, [r3, #0]
 800eaae:	e024      	b.n	800eafa <USB_EPStartXfer+0x318>
 800eab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	785b      	ldrb	r3, [r3, #1]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d11c      	bne.n	800eafa <USB_EPStartXfer+0x318>
 800eac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eace:	b29b      	uxth	r3, r3
 800ead0:	461a      	mov	r2, r3
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	4413      	add	r3, r2
 800ead6:	633b      	str	r3, [r7, #48]	; 0x30
 800ead8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eadc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	00da      	lsls	r2, r3, #3
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	4413      	add	r3, r2
 800eaea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eaee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800eafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eafe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	895b      	ldrh	r3, [r3, #10]
 800eb06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6959      	ldr	r1, [r3, #20]
 800eb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eb20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eb24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eb28:	6800      	ldr	r0, [r0, #0]
 800eb2a:	f001 fb39 	bl	80101a0 <USB_WritePMA>
            ep->xfer_buff += len;
 800eb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	695a      	ldr	r2, [r3, #20]
 800eb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb3e:	441a      	add	r2, r3
 800eb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6a1a      	ldr	r2, [r3, #32]
 800eb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d90f      	bls.n	800eb88 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800eb68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	6a1a      	ldr	r2, [r3, #32]
 800eb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb78:	1ad2      	subs	r2, r2, r3
 800eb7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	621a      	str	r2, [r3, #32]
 800eb86:	e00e      	b.n	800eba6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800eb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6a1b      	ldr	r3, [r3, #32]
 800eb94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800eb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2200      	movs	r2, #0
 800eba4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	785b      	ldrb	r3, [r3, #1]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d177      	bne.n	800eca6 <USB_EPStartXfer+0x4c4>
 800ebb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	61bb      	str	r3, [r7, #24]
 800ebc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	61bb      	str	r3, [r7, #24]
 800ebda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	00da      	lsls	r2, r3, #3
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	4413      	add	r3, r2
 800ebec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ebf0:	617b      	str	r3, [r7, #20]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	801a      	strh	r2, [r3, #0]
 800ec02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec06:	2b3e      	cmp	r3, #62	; 0x3e
 800ec08:	d921      	bls.n	800ec4e <USB_EPStartXfer+0x46c>
 800ec0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec0e:	095b      	lsrs	r3, r3, #5
 800ec10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ec14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec18:	f003 031f 	and.w	r3, r3, #31
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d104      	bne.n	800ec2a <USB_EPStartXfer+0x448>
 800ec20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec24:	3b01      	subs	r3, #1
 800ec26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	029b      	lsls	r3, r3, #10
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	801a      	strh	r2, [r3, #0]
 800ec4c:	e056      	b.n	800ecfc <USB_EPStartXfer+0x51a>
 800ec4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10a      	bne.n	800ec6c <USB_EPStartXfer+0x48a>
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	801a      	strh	r2, [r3, #0]
 800ec6a:	e047      	b.n	800ecfc <USB_EPStartXfer+0x51a>
 800ec6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec70:	085b      	lsrs	r3, r3, #1
 800ec72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ec76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <USB_EPStartXfer+0x4aa>
 800ec82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec86:	3301      	adds	r3, #1
 800ec88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	029b      	lsls	r3, r3, #10
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	801a      	strh	r2, [r3, #0]
 800eca4:	e02a      	b.n	800ecfc <USB_EPStartXfer+0x51a>
 800eca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	785b      	ldrb	r3, [r3, #1]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d122      	bne.n	800ecfc <USB_EPStartXfer+0x51a>
 800ecb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	623b      	str	r3, [r7, #32]
 800ecc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	623b      	str	r3, [r7, #32]
 800ecda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	00da      	lsls	r2, r3, #3
 800ece8:	6a3b      	ldr	r3, [r7, #32]
 800ecea:	4413      	add	r3, r2
 800ecec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ecf0:	61fb      	str	r3, [r7, #28]
 800ecf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ecfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	891b      	ldrh	r3, [r3, #8]
 800ed08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	6959      	ldr	r1, [r3, #20]
 800ed18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ed22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ed26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ed2a:	6800      	ldr	r0, [r0, #0]
 800ed2c:	f001 fa38 	bl	80101a0 <USB_WritePMA>
 800ed30:	e3ee      	b.n	800f510 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ed32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	785b      	ldrb	r3, [r3, #1]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d177      	bne.n	800ee32 <USB_EPStartXfer+0x650>
 800ed42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	461a      	mov	r2, r3
 800ed60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed62:	4413      	add	r3, r2
 800ed64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	00da      	lsls	r2, r3, #3
 800ed74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed76:	4413      	add	r3, r2
 800ed78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed7c:	647b      	str	r3, [r7, #68]	; 0x44
 800ed7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8c:	801a      	strh	r2, [r3, #0]
 800ed8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed92:	2b3e      	cmp	r3, #62	; 0x3e
 800ed94:	d921      	bls.n	800edda <USB_EPStartXfer+0x5f8>
 800ed96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed9a:	095b      	lsrs	r3, r3, #5
 800ed9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eda4:	f003 031f 	and.w	r3, r3, #31
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d104      	bne.n	800edb6 <USB_EPStartXfer+0x5d4>
 800edac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800edb0:	3b01      	subs	r3, #1
 800edb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800edb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	b29a      	uxth	r2, r3
 800edbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	029b      	lsls	r3, r3, #10
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	4313      	orrs	r3, r2
 800edc8:	b29b      	uxth	r3, r3
 800edca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd6:	801a      	strh	r2, [r3, #0]
 800edd8:	e056      	b.n	800ee88 <USB_EPStartXfer+0x6a6>
 800edda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10a      	bne.n	800edf8 <USB_EPStartXfer+0x616>
 800ede2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf4:	801a      	strh	r2, [r3, #0]
 800edf6:	e047      	b.n	800ee88 <USB_EPStartXfer+0x6a6>
 800edf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edfc:	085b      	lsrs	r3, r3, #1
 800edfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ee02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee06:	f003 0301 	and.w	r3, r3, #1
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d004      	beq.n	800ee18 <USB_EPStartXfer+0x636>
 800ee0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee12:	3301      	adds	r3, #1
 800ee14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ee18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	029b      	lsls	r3, r3, #10
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee2e:	801a      	strh	r2, [r3, #0]
 800ee30:	e02a      	b.n	800ee88 <USB_EPStartXfer+0x6a6>
 800ee32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	785b      	ldrb	r3, [r3, #1]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d122      	bne.n	800ee88 <USB_EPStartXfer+0x6a6>
 800ee42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	653b      	str	r3, [r7, #80]	; 0x50
 800ee4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	461a      	mov	r2, r3
 800ee60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee62:	4413      	add	r3, r2
 800ee64:	653b      	str	r3, [r7, #80]	; 0x50
 800ee66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	00da      	lsls	r2, r3, #3
 800ee74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee76:	4413      	add	r3, r2
 800ee78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ee88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	891b      	ldrh	r3, [r3, #8]
 800ee94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	6959      	ldr	r1, [r3, #20]
 800eea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eeae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eeb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eeb6:	6800      	ldr	r0, [r0, #0]
 800eeb8:	f001 f972 	bl	80101a0 <USB_WritePMA>
            ep->xfer_buff += len;
 800eebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	695a      	ldr	r2, [r3, #20]
 800eec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eecc:	441a      	add	r2, r3
 800eece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eeda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6a1a      	ldr	r2, [r3, #32]
 800eee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	691b      	ldr	r3, [r3, #16]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d90f      	bls.n	800ef16 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800eef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eefa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6a1a      	ldr	r2, [r3, #32]
 800ef02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef06:	1ad2      	subs	r2, r2, r3
 800ef08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	621a      	str	r2, [r3, #32]
 800ef14:	e00e      	b.n	800ef34 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ef16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6a1b      	ldr	r3, [r3, #32]
 800ef22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ef26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2200      	movs	r2, #0
 800ef32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ef34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ef40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	785b      	ldrb	r3, [r3, #1]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d177      	bne.n	800f040 <USB_EPStartXfer+0x85e>
 800ef50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef70:	4413      	add	r3, r2
 800ef72:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	00da      	lsls	r2, r3, #3
 800ef82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef84:	4413      	add	r3, r2
 800ef86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ef8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ef8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef8e:	881b      	ldrh	r3, [r3, #0]
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef9a:	801a      	strh	r2, [r3, #0]
 800ef9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efa0:	2b3e      	cmp	r3, #62	; 0x3e
 800efa2:	d921      	bls.n	800efe8 <USB_EPStartXfer+0x806>
 800efa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efa8:	095b      	lsrs	r3, r3, #5
 800efaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800efae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efb2:	f003 031f 	and.w	r3, r3, #31
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d104      	bne.n	800efc4 <USB_EPStartXfer+0x7e2>
 800efba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efbe:	3b01      	subs	r3, #1
 800efc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800efc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	b29a      	uxth	r2, r3
 800efca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efce:	b29b      	uxth	r3, r3
 800efd0:	029b      	lsls	r3, r3, #10
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	4313      	orrs	r3, r2
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe4:	801a      	strh	r2, [r3, #0]
 800efe6:	e050      	b.n	800f08a <USB_EPStartXfer+0x8a8>
 800efe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10a      	bne.n	800f006 <USB_EPStartXfer+0x824>
 800eff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800effa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800effe:	b29a      	uxth	r2, r3
 800f000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f002:	801a      	strh	r2, [r3, #0]
 800f004:	e041      	b.n	800f08a <USB_EPStartXfer+0x8a8>
 800f006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f00a:	085b      	lsrs	r3, r3, #1
 800f00c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d004      	beq.n	800f026 <USB_EPStartXfer+0x844>
 800f01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f020:	3301      	adds	r3, #1
 800f022:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f030:	b29b      	uxth	r3, r3
 800f032:	029b      	lsls	r3, r3, #10
 800f034:	b29b      	uxth	r3, r3
 800f036:	4313      	orrs	r3, r2
 800f038:	b29a      	uxth	r2, r3
 800f03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03c:	801a      	strh	r2, [r3, #0]
 800f03e:	e024      	b.n	800f08a <USB_EPStartXfer+0x8a8>
 800f040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	785b      	ldrb	r3, [r3, #1]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d11c      	bne.n	800f08a <USB_EPStartXfer+0x8a8>
 800f050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f05e:	b29b      	uxth	r3, r3
 800f060:	461a      	mov	r2, r3
 800f062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f064:	4413      	add	r3, r2
 800f066:	643b      	str	r3, [r7, #64]	; 0x40
 800f068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f06c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	00da      	lsls	r2, r3, #3
 800f076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f078:	4413      	add	r3, r2
 800f07a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f084:	b29a      	uxth	r2, r3
 800f086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	895b      	ldrh	r3, [r3, #10]
 800f096:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6959      	ldr	r1, [r3, #20]
 800f0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f0b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f0b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f0b8:	6800      	ldr	r0, [r0, #0]
 800f0ba:	f001 f871 	bl	80101a0 <USB_WritePMA>
 800f0be:	e227      	b.n	800f510 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6a1b      	ldr	r3, [r3, #32]
 800f0cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	009b      	lsls	r3, r3, #2
 800f0e8:	4413      	add	r3, r2
 800f0ea:	881b      	ldrh	r3, [r3, #0]
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	441a      	add	r2, r3
 800f114:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f11c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f128:	b29b      	uxth	r3, r3
 800f12a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f13c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f146:	b29b      	uxth	r3, r3
 800f148:	461a      	mov	r2, r3
 800f14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f14c:	4413      	add	r3, r2
 800f14e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	00da      	lsls	r2, r3, #3
 800f15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f160:	4413      	add	r3, r2
 800f162:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f166:	65bb      	str	r3, [r7, #88]	; 0x58
 800f168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f170:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	891b      	ldrh	r3, [r3, #8]
 800f17e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	6959      	ldr	r1, [r3, #20]
 800f18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f192:	b29b      	uxth	r3, r3
 800f194:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f198:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f19c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f1a0:	6800      	ldr	r0, [r0, #0]
 800f1a2:	f000 fffd 	bl	80101a0 <USB_WritePMA>
 800f1a6:	e1b3      	b.n	800f510 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	6a1a      	ldr	r2, [r3, #32]
 800f1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1b8:	1ad2      	subs	r2, r2, r3
 800f1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	4413      	add	r3, r2
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 80c6 	beq.w	800f37a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	673b      	str	r3, [r7, #112]	; 0x70
 800f1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	785b      	ldrb	r3, [r3, #1]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d177      	bne.n	800f2fa <USB_EPStartXfer+0xb18>
 800f20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f20e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	66bb      	str	r3, [r7, #104]	; 0x68
 800f216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f21a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f224:	b29b      	uxth	r3, r3
 800f226:	461a      	mov	r2, r3
 800f228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f22a:	4413      	add	r3, r2
 800f22c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	00da      	lsls	r2, r3, #3
 800f23c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f23e:	4413      	add	r3, r2
 800f240:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f244:	667b      	str	r3, [r7, #100]	; 0x64
 800f246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f250:	b29a      	uxth	r2, r3
 800f252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f254:	801a      	strh	r2, [r3, #0]
 800f256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f25a:	2b3e      	cmp	r3, #62	; 0x3e
 800f25c:	d921      	bls.n	800f2a2 <USB_EPStartXfer+0xac0>
 800f25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f262:	095b      	lsrs	r3, r3, #5
 800f264:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f26c:	f003 031f 	and.w	r3, r3, #31
 800f270:	2b00      	cmp	r3, #0
 800f272:	d104      	bne.n	800f27e <USB_EPStartXfer+0xa9c>
 800f274:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f278:	3b01      	subs	r3, #1
 800f27a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f27e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f280:	881b      	ldrh	r3, [r3, #0]
 800f282:	b29a      	uxth	r2, r3
 800f284:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f288:	b29b      	uxth	r3, r3
 800f28a:	029b      	lsls	r3, r3, #10
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	4313      	orrs	r3, r2
 800f290:	b29b      	uxth	r3, r3
 800f292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f29e:	801a      	strh	r2, [r3, #0]
 800f2a0:	e050      	b.n	800f344 <USB_EPStartXfer+0xb62>
 800f2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10a      	bne.n	800f2c0 <USB_EPStartXfer+0xade>
 800f2aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ac:	881b      	ldrh	r3, [r3, #0]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2bc:	801a      	strh	r2, [r3, #0]
 800f2be:	e041      	b.n	800f344 <USB_EPStartXfer+0xb62>
 800f2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2c4:	085b      	lsrs	r3, r3, #1
 800f2c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d004      	beq.n	800f2e0 <USB_EPStartXfer+0xafe>
 800f2d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f2da:	3301      	adds	r3, #1
 800f2dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	029b      	lsls	r3, r3, #10
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2f6:	801a      	strh	r2, [r3, #0]
 800f2f8:	e024      	b.n	800f344 <USB_EPStartXfer+0xb62>
 800f2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	785b      	ldrb	r3, [r3, #1]
 800f306:	2b01      	cmp	r3, #1
 800f308:	d11c      	bne.n	800f344 <USB_EPStartXfer+0xb62>
 800f30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f30e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f318:	b29b      	uxth	r3, r3
 800f31a:	461a      	mov	r2, r3
 800f31c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f31e:	4413      	add	r3, r2
 800f320:	673b      	str	r3, [r7, #112]	; 0x70
 800f322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	00da      	lsls	r2, r3, #3
 800f330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f332:	4413      	add	r3, r2
 800f334:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f33e:	b29a      	uxth	r2, r3
 800f340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f342:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	895b      	ldrh	r3, [r3, #10]
 800f350:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	6959      	ldr	r1, [r3, #20]
 800f360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f364:	b29b      	uxth	r3, r3
 800f366:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f36a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f36e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f372:	6800      	ldr	r0, [r0, #0]
 800f374:	f000 ff14 	bl	80101a0 <USB_WritePMA>
 800f378:	e0ca      	b.n	800f510 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	785b      	ldrb	r3, [r3, #1]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d177      	bne.n	800f47a <USB_EPStartXfer+0xc98>
 800f38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f38e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f39a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f3aa:	4413      	add	r3, r2
 800f3ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	00da      	lsls	r2, r3, #3
 800f3bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f3be:	4413      	add	r3, r2
 800f3c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f3c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f3c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3d4:	801a      	strh	r2, [r3, #0]
 800f3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3da:	2b3e      	cmp	r3, #62	; 0x3e
 800f3dc:	d921      	bls.n	800f422 <USB_EPStartXfer+0xc40>
 800f3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3e2:	095b      	lsrs	r3, r3, #5
 800f3e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3ec:	f003 031f 	and.w	r3, r3, #31
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d104      	bne.n	800f3fe <USB_EPStartXfer+0xc1c>
 800f3f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f3f8:	3b01      	subs	r3, #1
 800f3fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	b29a      	uxth	r2, r3
 800f404:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f408:	b29b      	uxth	r3, r3
 800f40a:	029b      	lsls	r3, r3, #10
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	4313      	orrs	r3, r2
 800f410:	b29b      	uxth	r3, r3
 800f412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f41e:	801a      	strh	r2, [r3, #0]
 800f420:	e05c      	b.n	800f4dc <USB_EPStartXfer+0xcfa>
 800f422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10a      	bne.n	800f440 <USB_EPStartXfer+0xc5e>
 800f42a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f42c:	881b      	ldrh	r3, [r3, #0]
 800f42e:	b29b      	uxth	r3, r3
 800f430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f438:	b29a      	uxth	r2, r3
 800f43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f43c:	801a      	strh	r2, [r3, #0]
 800f43e:	e04d      	b.n	800f4dc <USB_EPStartXfer+0xcfa>
 800f440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f444:	085b      	lsrs	r3, r3, #1
 800f446:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f44e:	f003 0301 	and.w	r3, r3, #1
 800f452:	2b00      	cmp	r3, #0
 800f454:	d004      	beq.n	800f460 <USB_EPStartXfer+0xc7e>
 800f456:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f45a:	3301      	adds	r3, #1
 800f45c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	b29a      	uxth	r2, r3
 800f466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	029b      	lsls	r3, r3, #10
 800f46e:	b29b      	uxth	r3, r3
 800f470:	4313      	orrs	r3, r2
 800f472:	b29a      	uxth	r2, r3
 800f474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f476:	801a      	strh	r2, [r3, #0]
 800f478:	e030      	b.n	800f4dc <USB_EPStartXfer+0xcfa>
 800f47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	785b      	ldrb	r3, [r3, #1]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d128      	bne.n	800f4dc <USB_EPStartXfer+0xcfa>
 800f48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f48e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f49c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4ae:	4413      	add	r3, r2
 800f4b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	00da      	lsls	r2, r3, #3
 800f4c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4c6:	4413      	add	r3, r2
 800f4c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f4cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	891b      	ldrh	r3, [r3, #8]
 800f4e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	6959      	ldr	r1, [r3, #20]
 800f4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f502:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f506:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f50a:	6800      	ldr	r0, [r0, #0]
 800f50c:	f000 fe48 	bl	80101a0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	4413      	add	r3, r2
 800f52a:	881b      	ldrh	r3, [r3, #0]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f536:	817b      	strh	r3, [r7, #10]
 800f538:	897b      	ldrh	r3, [r7, #10]
 800f53a:	f083 0310 	eor.w	r3, r3, #16
 800f53e:	817b      	strh	r3, [r7, #10]
 800f540:	897b      	ldrh	r3, [r7, #10]
 800f542:	f083 0320 	eor.w	r3, r3, #32
 800f546:	817b      	strh	r3, [r7, #10]
 800f548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	441a      	add	r2, r3
 800f562:	897b      	ldrh	r3, [r7, #10]
 800f564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f56c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f574:	b29b      	uxth	r3, r3
 800f576:	8013      	strh	r3, [r2, #0]
 800f578:	f000 bcde 	b.w	800ff38 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	7b1b      	ldrb	r3, [r3, #12]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f040 80bb 	bne.w	800f704 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	699a      	ldr	r2, [r3, #24]
 800f59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	691b      	ldr	r3, [r3, #16]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d917      	bls.n	800f5da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800f5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800f5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	699a      	ldr	r2, [r3, #24]
 800f5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5ca:	1ad2      	subs	r2, r2, r3
 800f5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	619a      	str	r2, [r3, #24]
 800f5d8:	e00e      	b.n	800f5f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800f5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	699b      	ldr	r3, [r3, #24]
 800f5e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800f5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f614:	b29b      	uxth	r3, r3
 800f616:	461a      	mov	r2, r3
 800f618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f61c:	4413      	add	r3, r2
 800f61e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	00da      	lsls	r2, r3, #3
 800f630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f634:	4413      	add	r3, r2
 800f636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f63a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	b29b      	uxth	r3, r3
 800f646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f650:	801a      	strh	r2, [r3, #0]
 800f652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f656:	2b3e      	cmp	r3, #62	; 0x3e
 800f658:	d924      	bls.n	800f6a4 <USB_EPStartXfer+0xec2>
 800f65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f65e:	095b      	lsrs	r3, r3, #5
 800f660:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f668:	f003 031f 	and.w	r3, r3, #31
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d104      	bne.n	800f67a <USB_EPStartXfer+0xe98>
 800f670:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f674:	3b01      	subs	r3, #1
 800f676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f67a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	b29a      	uxth	r2, r3
 800f682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f686:	b29b      	uxth	r3, r3
 800f688:	029b      	lsls	r3, r3, #10
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	4313      	orrs	r3, r2
 800f68e:	b29b      	uxth	r3, r3
 800f690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f698:	b29a      	uxth	r2, r3
 800f69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f69e:	801a      	strh	r2, [r3, #0]
 800f6a0:	f000 bc10 	b.w	800fec4 <USB_EPStartXfer+0x16e2>
 800f6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d10c      	bne.n	800f6c6 <USB_EPStartXfer+0xee4>
 800f6ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6b0:	881b      	ldrh	r3, [r3, #0]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6c2:	801a      	strh	r2, [r3, #0]
 800f6c4:	e3fe      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
 800f6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6ca:	085b      	lsrs	r3, r3, #1
 800f6cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6d4:	f003 0301 	and.w	r3, r3, #1
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d004      	beq.n	800f6e6 <USB_EPStartXfer+0xf04>
 800f6dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	029b      	lsls	r3, r3, #10
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f700:	801a      	strh	r2, [r3, #0]
 800f702:	e3df      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	78db      	ldrb	r3, [r3, #3]
 800f710:	2b02      	cmp	r3, #2
 800f712:	f040 8218 	bne.w	800fb46 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	785b      	ldrb	r3, [r3, #1]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f040 809d 	bne.w	800f862 <USB_EPStartXfer+0x1080>
 800f728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f72c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f73a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f744:	b29b      	uxth	r3, r3
 800f746:	461a      	mov	r2, r3
 800f748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f74c:	4413      	add	r3, r2
 800f74e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	00da      	lsls	r2, r3, #3
 800f760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f764:	4413      	add	r3, r2
 800f766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f76a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f76e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	b29b      	uxth	r3, r3
 800f776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f780:	801a      	strh	r2, [r3, #0]
 800f782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	2b3e      	cmp	r3, #62	; 0x3e
 800f790:	d92b      	bls.n	800f7ea <USB_EPStartXfer+0x1008>
 800f792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	095b      	lsrs	r3, r3, #5
 800f7a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	691b      	ldr	r3, [r3, #16]
 800f7b0:	f003 031f 	and.w	r3, r3, #31
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d104      	bne.n	800f7c2 <USB_EPStartXfer+0xfe0>
 800f7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f7c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f7c6:	881b      	ldrh	r3, [r3, #0]
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	029b      	lsls	r3, r3, #10
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f7e6:	801a      	strh	r2, [r3, #0]
 800f7e8:	e070      	b.n	800f8cc <USB_EPStartXfer+0x10ea>
 800f7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10c      	bne.n	800f814 <USB_EPStartXfer+0x1032>
 800f7fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f7fe:	881b      	ldrh	r3, [r3, #0]
 800f800:	b29b      	uxth	r3, r3
 800f802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f810:	801a      	strh	r2, [r3, #0]
 800f812:	e05b      	b.n	800f8cc <USB_EPStartXfer+0x10ea>
 800f814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	085b      	lsrs	r3, r3, #1
 800f822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	691b      	ldr	r3, [r3, #16]
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d004      	beq.n	800f844 <USB_EPStartXfer+0x1062>
 800f83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f83e:	3301      	adds	r3, #1
 800f840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f850:	b29b      	uxth	r3, r3
 800f852:	029b      	lsls	r3, r3, #10
 800f854:	b29b      	uxth	r3, r3
 800f856:	4313      	orrs	r3, r2
 800f858:	b29a      	uxth	r2, r3
 800f85a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f85e:	801a      	strh	r2, [r3, #0]
 800f860:	e034      	b.n	800f8cc <USB_EPStartXfer+0x10ea>
 800f862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	785b      	ldrb	r3, [r3, #1]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d12c      	bne.n	800f8cc <USB_EPStartXfer+0x10ea>
 800f872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f88e:	b29b      	uxth	r3, r3
 800f890:	461a      	mov	r2, r3
 800f892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f896:	4413      	add	r3, r2
 800f898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	00da      	lsls	r2, r3, #3
 800f8aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8ae:	4413      	add	r3, r2
 800f8b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f8b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f8ca:	801a      	strh	r2, [r3, #0]
 800f8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	785b      	ldrb	r3, [r3, #1]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f040 809d 	bne.w	800fa26 <USB_EPStartXfer+0x1244>
 800f8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f908:	b29b      	uxth	r3, r3
 800f90a:	461a      	mov	r2, r3
 800f90c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f910:	4413      	add	r3, r2
 800f912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	00da      	lsls	r2, r3, #3
 800f924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f928:	4413      	add	r3, r2
 800f92a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f92e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f932:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f93e:	b29a      	uxth	r2, r3
 800f940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f944:	801a      	strh	r2, [r3, #0]
 800f946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	691b      	ldr	r3, [r3, #16]
 800f952:	2b3e      	cmp	r3, #62	; 0x3e
 800f954:	d92b      	bls.n	800f9ae <USB_EPStartXfer+0x11cc>
 800f956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	691b      	ldr	r3, [r3, #16]
 800f962:	095b      	lsrs	r3, r3, #5
 800f964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f96c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	f003 031f 	and.w	r3, r3, #31
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d104      	bne.n	800f986 <USB_EPStartXfer+0x11a4>
 800f97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f980:	3b01      	subs	r3, #1
 800f982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f986:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f992:	b29b      	uxth	r3, r3
 800f994:	029b      	lsls	r3, r3, #10
 800f996:	b29b      	uxth	r3, r3
 800f998:	4313      	orrs	r3, r2
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f9aa:	801a      	strh	r2, [r3, #0]
 800f9ac:	e069      	b.n	800fa82 <USB_EPStartXfer+0x12a0>
 800f9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d10c      	bne.n	800f9d8 <USB_EPStartXfer+0x11f6>
 800f9be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f9d4:	801a      	strh	r2, [r3, #0]
 800f9d6:	e054      	b.n	800fa82 <USB_EPStartXfer+0x12a0>
 800f9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	085b      	lsrs	r3, r3, #1
 800f9e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	691b      	ldr	r3, [r3, #16]
 800f9f6:	f003 0301 	and.w	r3, r3, #1
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d004      	beq.n	800fa08 <USB_EPStartXfer+0x1226>
 800f9fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa02:	3301      	adds	r3, #1
 800fa04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	029b      	lsls	r3, r3, #10
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa22:	801a      	strh	r2, [r3, #0]
 800fa24:	e02d      	b.n	800fa82 <USB_EPStartXfer+0x12a0>
 800fa26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	785b      	ldrb	r3, [r3, #1]
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d125      	bne.n	800fa82 <USB_EPStartXfer+0x12a0>
 800fa36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	461a      	mov	r2, r3
 800fa48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa4c:	4413      	add	r3, r2
 800fa4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fa52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	00da      	lsls	r2, r3, #3
 800fa60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa64:	4413      	add	r3, r2
 800fa66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fa6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fa6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	691b      	ldr	r3, [r3, #16]
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa80:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800fa82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f000 8218 	beq.w	800fec4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800fa94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4413      	add	r3, r2
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fab4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d005      	beq.n	800facc <USB_EPStartXfer+0x12ea>
 800fac0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10d      	bne.n	800fae8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800facc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f040 81f5 	bne.w	800fec4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800fada:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800fade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f040 81ee 	bne.w	800fec4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800fae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	4413      	add	r3, r2
 800fb02:	881b      	ldrh	r3, [r3, #0]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb0e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800fb12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	441a      	add	r2, r3
 800fb2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800fb30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	8013      	strh	r3, [r2, #0]
 800fb44:	e1be      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800fb46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	78db      	ldrb	r3, [r3, #3]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	f040 81b4 	bne.w	800fec0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800fb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	699a      	ldr	r2, [r3, #24]
 800fb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d917      	bls.n	800fba4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800fb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800fb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	699a      	ldr	r2, [r3, #24]
 800fb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb94:	1ad2      	subs	r2, r2, r3
 800fb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	619a      	str	r2, [r3, #24]
 800fba2:	e00e      	b.n	800fbc2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800fba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	699b      	ldr	r3, [r3, #24]
 800fbb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800fbb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800fbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	785b      	ldrb	r3, [r3, #1]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f040 8085 	bne.w	800fcde <USB_EPStartXfer+0x14fc>
 800fbd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fbe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fbf8:	4413      	add	r3, r2
 800fbfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fbfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	00da      	lsls	r2, r3, #3
 800fc0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fc10:	4413      	add	r3, r2
 800fc12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fc16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fc1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc2c:	801a      	strh	r2, [r3, #0]
 800fc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc32:	2b3e      	cmp	r3, #62	; 0x3e
 800fc34:	d923      	bls.n	800fc7e <USB_EPStartXfer+0x149c>
 800fc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc3a:	095b      	lsrs	r3, r3, #5
 800fc3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc44:	f003 031f 	and.w	r3, r3, #31
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d104      	bne.n	800fc56 <USB_EPStartXfer+0x1474>
 800fc4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc50:	3b01      	subs	r3, #1
 800fc52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fc56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc5a:	881b      	ldrh	r3, [r3, #0]
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	029b      	lsls	r3, r3, #10
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc7a:	801a      	strh	r2, [r3, #0]
 800fc7c:	e060      	b.n	800fd40 <USB_EPStartXfer+0x155e>
 800fc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d10c      	bne.n	800fca0 <USB_EPStartXfer+0x14be>
 800fc86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc8a:	881b      	ldrh	r3, [r3, #0]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc9c:	801a      	strh	r2, [r3, #0]
 800fc9e:	e04f      	b.n	800fd40 <USB_EPStartXfer+0x155e>
 800fca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fca4:	085b      	lsrs	r3, r3, #1
 800fca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcae:	f003 0301 	and.w	r3, r3, #1
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d004      	beq.n	800fcc0 <USB_EPStartXfer+0x14de>
 800fcb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcba:	3301      	adds	r3, #1
 800fcbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fcc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	029b      	lsls	r3, r3, #10
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcda:	801a      	strh	r2, [r3, #0]
 800fcdc:	e030      	b.n	800fd40 <USB_EPStartXfer+0x155e>
 800fcde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	785b      	ldrb	r3, [r3, #1]
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d128      	bne.n	800fd40 <USB_EPStartXfer+0x155e>
 800fcee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fcfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fd12:	4413      	add	r3, r2
 800fd14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fd18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	00da      	lsls	r2, r3, #3
 800fd26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fd2a:	4413      	add	r3, r2
 800fd2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fd30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fd3e:	801a      	strh	r2, [r3, #0]
 800fd40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	785b      	ldrb	r3, [r3, #1]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f040 8085 	bne.w	800fe6a <USB_EPStartXfer+0x1688>
 800fd60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fd84:	4413      	add	r3, r2
 800fd86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	00da      	lsls	r2, r3, #3
 800fd98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fda2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fda6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fdaa:	881b      	ldrh	r3, [r3, #0]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fdb8:	801a      	strh	r2, [r3, #0]
 800fdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdbe:	2b3e      	cmp	r3, #62	; 0x3e
 800fdc0:	d923      	bls.n	800fe0a <USB_EPStartXfer+0x1628>
 800fdc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdc6:	095b      	lsrs	r3, r3, #5
 800fdc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdd0:	f003 031f 	and.w	r3, r3, #31
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d104      	bne.n	800fde2 <USB_EPStartXfer+0x1600>
 800fdd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fddc:	3b01      	subs	r3, #1
 800fdde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fde2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fde6:	881b      	ldrh	r3, [r3, #0]
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	029b      	lsls	r3, r3, #10
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe06:	801a      	strh	r2, [r3, #0]
 800fe08:	e05c      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
 800fe0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d10c      	bne.n	800fe2c <USB_EPStartXfer+0x164a>
 800fe12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe28:	801a      	strh	r2, [r3, #0]
 800fe2a:	e04b      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
 800fe2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe30:	085b      	lsrs	r3, r3, #1
 800fe32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fe36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe3a:	f003 0301 	and.w	r3, r3, #1
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d004      	beq.n	800fe4c <USB_EPStartXfer+0x166a>
 800fe42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fe46:	3301      	adds	r3, #1
 800fe48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fe4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	029b      	lsls	r3, r3, #10
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe66:	801a      	strh	r2, [r3, #0]
 800fe68:	e02c      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
 800fe6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	785b      	ldrb	r3, [r3, #1]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d124      	bne.n	800fec4 <USB_EPStartXfer+0x16e2>
 800fe7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fe90:	4413      	add	r3, r2
 800fe92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fe96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	00da      	lsls	r2, r3, #3
 800fea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fea8:	4413      	add	r3, r2
 800feaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800feae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800feb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800febc:	801a      	strh	r2, [r3, #0]
 800febe:	e001      	b.n	800fec4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800fec0:	2301      	movs	r3, #1
 800fec2:	e03a      	b.n	800ff3a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fecc:	681a      	ldr	r2, [r3, #0]
 800fece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	881b      	ldrh	r3, [r3, #0]
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800feee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fef2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fef6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800fefa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fefe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ff02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ff06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	441a      	add	r2, r3
 800ff20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ff24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	785b      	ldrb	r3, [r3, #1]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d020      	beq.n	800ff98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	881b      	ldrh	r3, [r3, #0]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff6c:	81bb      	strh	r3, [r7, #12]
 800ff6e:	89bb      	ldrh	r3, [r7, #12]
 800ff70:	f083 0310 	eor.w	r3, r3, #16
 800ff74:	81bb      	strh	r3, [r7, #12]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	441a      	add	r2, r3
 800ff80:	89bb      	ldrh	r3, [r7, #12]
 800ff82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	8013      	strh	r3, [r2, #0]
 800ff96:	e01f      	b.n	800ffd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4413      	add	r3, r2
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ffaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffae:	81fb      	strh	r3, [r7, #14]
 800ffb0:	89fb      	ldrh	r3, [r7, #14]
 800ffb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ffb6:	81fb      	strh	r3, [r7, #14]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	441a      	add	r2, r3
 800ffc2:	89fb      	ldrh	r3, [r7, #14]
 800ffc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b087      	sub	sp, #28
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	7b1b      	ldrb	r3, [r3, #12]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f040 809d 	bne.w	8010134 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	785b      	ldrb	r3, [r3, #1]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d04c      	beq.n	801009c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	4413      	add	r3, r2
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	823b      	strh	r3, [r7, #16]
 8010010:	8a3b      	ldrh	r3, [r7, #16]
 8010012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010016:	2b00      	cmp	r3, #0
 8010018:	d01b      	beq.n	8010052 <USB_EPClearStall+0x6c>
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4413      	add	r3, r2
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	b29b      	uxth	r3, r3
 8010028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801002c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010030:	81fb      	strh	r3, [r7, #14]
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	441a      	add	r2, r3
 801003c:	89fb      	ldrh	r3, [r7, #14]
 801003e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801004a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801004e:	b29b      	uxth	r3, r3
 8010050:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	78db      	ldrb	r3, [r3, #3]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d06c      	beq.n	8010134 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4413      	add	r3, r2
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	b29b      	uxth	r3, r3
 8010068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801006c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010070:	81bb      	strh	r3, [r7, #12]
 8010072:	89bb      	ldrh	r3, [r7, #12]
 8010074:	f083 0320 	eor.w	r3, r3, #32
 8010078:	81bb      	strh	r3, [r7, #12]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	009b      	lsls	r3, r3, #2
 8010082:	441a      	add	r2, r3
 8010084:	89bb      	ldrh	r3, [r7, #12]
 8010086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801008a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801008e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010096:	b29b      	uxth	r3, r3
 8010098:	8013      	strh	r3, [r2, #0]
 801009a:	e04b      	b.n	8010134 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	4413      	add	r3, r2
 80100a6:	881b      	ldrh	r3, [r3, #0]
 80100a8:	82fb      	strh	r3, [r7, #22]
 80100aa:	8afb      	ldrh	r3, [r7, #22]
 80100ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d01b      	beq.n	80100ec <USB_EPClearStall+0x106>
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	4413      	add	r3, r2
 80100be:	881b      	ldrh	r3, [r3, #0]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100ca:	82bb      	strh	r3, [r7, #20]
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	441a      	add	r2, r3
 80100d6:	8abb      	ldrh	r3, [r7, #20]
 80100d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80100e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4413      	add	r3, r2
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010102:	827b      	strh	r3, [r7, #18]
 8010104:	8a7b      	ldrh	r3, [r7, #18]
 8010106:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801010a:	827b      	strh	r3, [r7, #18]
 801010c:	8a7b      	ldrh	r3, [r7, #18]
 801010e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010112:	827b      	strh	r3, [r7, #18]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	441a      	add	r2, r3
 801011e:	8a7b      	ldrh	r3, [r7, #18]
 8010120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801012c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010130:	b29b      	uxth	r3, r3
 8010132:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010134:	2300      	movs	r3, #0
}
 8010136:	4618      	mov	r0, r3
 8010138:	371c      	adds	r7, #28
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr

08010142 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010142:	b480      	push	{r7}
 8010144:	b083      	sub	sp, #12
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	460b      	mov	r3, r1
 801014c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801014e:	78fb      	ldrb	r3, [r7, #3]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d103      	bne.n	801015c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2280      	movs	r2, #128	; 0x80
 8010158:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	370c      	adds	r7, #12
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr

0801016a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801016a:	b480      	push	{r7}
 801016c:	b083      	sub	sp, #12
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010180:	b480      	push	{r7}
 8010182:	b085      	sub	sp, #20
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801018e:	b29b      	uxth	r3, r3
 8010190:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010192:	68fb      	ldr	r3, [r7, #12]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b08b      	sub	sp, #44	; 0x2c
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	4611      	mov	r1, r2
 80101ac:	461a      	mov	r2, r3
 80101ae:	460b      	mov	r3, r1
 80101b0:	80fb      	strh	r3, [r7, #6]
 80101b2:	4613      	mov	r3, r2
 80101b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80101b6:	88bb      	ldrh	r3, [r7, #4]
 80101b8:	3301      	adds	r3, #1
 80101ba:	085b      	lsrs	r3, r3, #1
 80101bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80101c6:	88fa      	ldrh	r2, [r7, #6]
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	4413      	add	r3, r2
 80101cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	627b      	str	r3, [r7, #36]	; 0x24
 80101d6:	e01b      	b.n	8010210 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	3301      	adds	r3, #1
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	021b      	lsls	r3, r3, #8
 80101e6:	b21a      	sxth	r2, r3
 80101e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101ec:	4313      	orrs	r3, r2
 80101ee:	b21b      	sxth	r3, r3
 80101f0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80101f2:	6a3b      	ldr	r3, [r7, #32]
 80101f4:	8a7a      	ldrh	r2, [r7, #18]
 80101f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80101f8:	6a3b      	ldr	r3, [r7, #32]
 80101fa:	3302      	adds	r3, #2
 80101fc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	3301      	adds	r3, #1
 8010202:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	3301      	adds	r3, #1
 8010208:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020c:	3b01      	subs	r3, #1
 801020e:	627b      	str	r3, [r7, #36]	; 0x24
 8010210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010212:	2b00      	cmp	r3, #0
 8010214:	d1e0      	bne.n	80101d8 <USB_WritePMA+0x38>
  }
}
 8010216:	bf00      	nop
 8010218:	bf00      	nop
 801021a:	372c      	adds	r7, #44	; 0x2c
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010224:	b480      	push	{r7}
 8010226:	b08b      	sub	sp, #44	; 0x2c
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	4611      	mov	r1, r2
 8010230:	461a      	mov	r2, r3
 8010232:	460b      	mov	r3, r1
 8010234:	80fb      	strh	r3, [r7, #6]
 8010236:	4613      	mov	r3, r2
 8010238:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801023a:	88bb      	ldrh	r3, [r7, #4]
 801023c:	085b      	lsrs	r3, r3, #1
 801023e:	b29b      	uxth	r3, r3
 8010240:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801024a:	88fa      	ldrh	r2, [r7, #6]
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	4413      	add	r3, r2
 8010250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010254:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	627b      	str	r3, [r7, #36]	; 0x24
 801025a:	e018      	b.n	801028e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801025c:	6a3b      	ldr	r3, [r7, #32]
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	b29b      	uxth	r3, r3
 8010262:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010264:	6a3b      	ldr	r3, [r7, #32]
 8010266:	3302      	adds	r3, #2
 8010268:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	b2da      	uxtb	r2, r3
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	3301      	adds	r3, #1
 8010276:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	0a1b      	lsrs	r3, r3, #8
 801027c:	b2da      	uxtb	r2, r3
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	3301      	adds	r3, #1
 8010286:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028a:	3b01      	subs	r3, #1
 801028c:	627b      	str	r3, [r7, #36]	; 0x24
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1e3      	bne.n	801025c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010294:	88bb      	ldrh	r3, [r7, #4]
 8010296:	f003 0301 	and.w	r3, r3, #1
 801029a:	b29b      	uxth	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d007      	beq.n	80102b0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80102a0:	6a3b      	ldr	r3, [r7, #32]
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	b2da      	uxtb	r2, r3
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	701a      	strb	r2, [r3, #0]
  }
}
 80102b0:	bf00      	nop
 80102b2:	372c      	adds	r7, #44	; 0x2c
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr

080102bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80102c0:	4904      	ldr	r1, [pc, #16]	; (80102d4 <MX_FATFS_Init+0x18>)
 80102c2:	4805      	ldr	r0, [pc, #20]	; (80102d8 <MX_FATFS_Init+0x1c>)
 80102c4:	f006 fba4 	bl	8016a10 <FATFS_LinkDriver>
 80102c8:	4603      	mov	r3, r0
 80102ca:	461a      	mov	r2, r3
 80102cc:	4b03      	ldr	r3, [pc, #12]	; (80102dc <MX_FATFS_Init+0x20>)
 80102ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80102d0:	bf00      	nop
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	20009964 	.word	0x20009964
 80102d8:	20000010 	.word	0x20000010
 80102dc:	20009960 	.word	0x20009960

080102e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80102e0:	b480      	push	{r7}
 80102e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80102e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <SD_ReadyWait>:


/* SD카드 Ready 대기 */
//static
uint8_t SD_ReadyWait(void)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80102f6:	4b0a      	ldr	r3, [pc, #40]	; (8010320 <SD_ReadyWait+0x30>)
 80102f8:	2232      	movs	r2, #50	; 0x32
 80102fa:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80102fc:	f007 fe44 	bl	8017f88 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8010300:	f007 fe42 	bl	8017f88 <SPI_RxByte>
 8010304:	4603      	mov	r3, r0
 8010306:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8010308:	79fb      	ldrb	r3, [r7, #7]
 801030a:	2bff      	cmp	r3, #255	; 0xff
 801030c:	d003      	beq.n	8010316 <SD_ReadyWait+0x26>
 801030e:	4b04      	ldr	r3, [pc, #16]	; (8010320 <SD_ReadyWait+0x30>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1f4      	bne.n	8010300 <SD_ReadyWait+0x10>
  
  return res;
 8010316:	79fb      	ldrb	r3, [r7, #7]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	20009956 	.word	0x20009956

08010324 <SD_PowerOn>:

/* 전원 켜기 */
//static
void SD_PowerOn(void)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 801032a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801032e:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  SD_CS_OFF;//DESELECT();
 8010330:	2201      	movs	r2, #1
 8010332:	2108      	movs	r1, #8
 8010334:	4825      	ldr	r0, [pc, #148]	; (80103cc <SD_PowerOn+0xa8>)
 8010336:	f7f6 ff77 	bl	8007228 <HAL_GPIO_WritePin>
  
  for(int i = 0; i < 10; i++)
 801033a:	2300      	movs	r3, #0
 801033c:	613b      	str	r3, [r7, #16]
 801033e:	e005      	b.n	801034c <SD_PowerOn+0x28>
  {
    SPI_TxByte(0xFF);
 8010340:	20ff      	movs	r0, #255	; 0xff
 8010342:	f007 fe11 	bl	8017f68 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	3301      	adds	r3, #1
 801034a:	613b      	str	r3, [r7, #16]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	2b09      	cmp	r3, #9
 8010350:	ddf6      	ble.n	8010340 <SD_PowerOn+0x1c>
  }
  
  /*SPI Chips Select*/
  SD_CS_ON;
 8010352:	2200      	movs	r2, #0
 8010354:	2108      	movs	r1, #8
 8010356:	481d      	ldr	r0, [pc, #116]	; (80103cc <SD_PowerOn+0xa8>)
 8010358:	f7f6 ff66 	bl	8007228 <HAL_GPIO_WritePin>
  
  /*GO_IDLE_STATE*/
  cmd_arg[0] = (CMD_0 | 0x40);
 801035c:	2340      	movs	r3, #64	; 0x40
 801035e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8010368:	2300      	movs	r3, #0
 801036a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 801036c:	2300      	movs	r3, #0
 801036e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8010370:	2395      	movs	r3, #149	; 0x95
 8010372:	727b      	strb	r3, [r7, #9]
  
  for (int i = 0; i < 6; i++)
 8010374:	2300      	movs	r3, #0
 8010376:	60fb      	str	r3, [r7, #12]
 8010378:	e009      	b.n	801038e <SD_PowerOn+0x6a>
  {
    SPI_TxByte(cmd_arg[i]);
 801037a:	1d3a      	adds	r2, r7, #4
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	4413      	add	r3, r2
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	4618      	mov	r0, r3
 8010384:	f007 fdf0 	bl	8017f68 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	3301      	adds	r3, #1
 801038c:	60fb      	str	r3, [r7, #12]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b05      	cmp	r3, #5
 8010392:	ddf2      	ble.n	801037a <SD_PowerOn+0x56>
  }
  
  while ((SPI_RxByte() != 0x01) && Count)
 8010394:	e002      	b.n	801039c <SD_PowerOn+0x78>
  {
    Count--;
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	3b01      	subs	r3, #1
 801039a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 801039c:	f007 fdf4 	bl	8017f88 <SPI_RxByte>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d002      	beq.n	80103ac <SD_PowerOn+0x88>
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1f4      	bne.n	8010396 <SD_PowerOn+0x72>
  }
  
  SD_CS_OFF;//DESELECT();
 80103ac:	2201      	movs	r2, #1
 80103ae:	2108      	movs	r1, #8
 80103b0:	4806      	ldr	r0, [pc, #24]	; (80103cc <SD_PowerOn+0xa8>)
 80103b2:	f7f6 ff39 	bl	8007228 <HAL_GPIO_WritePin>
  SPI_TxByte(0XFF);
 80103b6:	20ff      	movs	r0, #255	; 0xff
 80103b8:	f007 fdd6 	bl	8017f68 <SPI_TxByte>
  
  PowerFlag = 1;
 80103bc:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <SD_PowerOn+0xac>)
 80103be:	2201      	movs	r2, #1
 80103c0:	701a      	strb	r2, [r3, #0]
}
 80103c2:	bf00      	nop
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	48000800 	.word	0x48000800
 80103d0:	20009968 	.word	0x20009968

080103d4 <SD_PowerOff>:

//static
void SD_PowerOff(void)
{
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80103d8:	4b03      	ldr	r3, [pc, #12]	; (80103e8 <SD_PowerOff+0x14>)
 80103da:	2200      	movs	r2, #0
 80103dc:	701a      	strb	r2, [r3, #0]
}
 80103de:	bf00      	nop
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	20009968 	.word	0x20009968

080103ec <SD_CheckPower>:

//static
uint8_t SD_CheckPower(void)
{
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80103f0:	4b03      	ldr	r3, [pc, #12]	; (8010400 <SD_CheckPower+0x14>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	20009968 	.word	0x20009968

08010404 <SD_RxDataBlock>:

//static
bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 801040e:	4b17      	ldr	r3, [pc, #92]	; (801046c <SD_RxDataBlock+0x68>)
 8010410:	220a      	movs	r2, #10
 8010412:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8010414:	f007 fdb8 	bl	8017f88 <SPI_RxByte>
 8010418:	4603      	mov	r3, r0
 801041a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	2bff      	cmp	r3, #255	; 0xff
 8010420:	d103      	bne.n	801042a <SD_RxDataBlock+0x26>
 8010422:	4b12      	ldr	r3, [pc, #72]	; (801046c <SD_RxDataBlock+0x68>)
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1f4      	bne.n	8010414 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 801042a:	7bfb      	ldrb	r3, [r7, #15]
 801042c:	2bfe      	cmp	r3, #254	; 0xfe
 801042e:	d001      	beq.n	8010434 <SD_RxDataBlock+0x30>
    return FALSE;
 8010430:	2300      	movs	r3, #0
 8010432:	e016      	b.n	8010462 <SD_RxDataBlock+0x5e>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	1c5a      	adds	r2, r3, #1
 8010438:	607a      	str	r2, [r7, #4]
 801043a:	4618      	mov	r0, r3
 801043c:	f007 fdb6 	bl	8017fac <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	1c5a      	adds	r2, r3, #1
 8010444:	607a      	str	r2, [r7, #4]
 8010446:	4618      	mov	r0, r3
 8010448:	f007 fdb0 	bl	8017fac <SPI_RxBytePtr>
  } while(btr -= 2);
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	3b02      	subs	r3, #2
 8010450:	603b      	str	r3, [r7, #0]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1ed      	bne.n	8010434 <SD_RxDataBlock+0x30>
  
  SPI_RxByte(); /* CRC 무시 */
 8010458:	f007 fd96 	bl	8017f88 <SPI_RxByte>
  SPI_RxByte();
 801045c:	f007 fd94 	bl	8017f88 <SPI_RxByte>
  
  return TRUE;
 8010460:	2301      	movs	r3, #1
}
 8010462:	4618      	mov	r0, r3
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	20009955 	.word	0x20009955

08010470 <SD_TxDataBlock>:

#if _READONLY == 0
//static
bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	460b      	mov	r3, r1
 801047a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 801047c:	2300      	movs	r3, #0
 801047e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8010480:	f7ff ff36 	bl	80102f0 <SD_ReadyWait>
 8010484:	4603      	mov	r3, r0
 8010486:	2bff      	cmp	r3, #255	; 0xff
 8010488:	d001      	beq.n	801048e <SD_TxDataBlock+0x1e>
    return FALSE;
 801048a:	2300      	movs	r3, #0
 801048c:	e040      	b.n	8010510 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 801048e:	78fb      	ldrb	r3, [r7, #3]
 8010490:	4618      	mov	r0, r3
 8010492:	f007 fd69 	bl	8017f68 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8010496:	78fb      	ldrb	r3, [r7, #3]
 8010498:	2bfd      	cmp	r3, #253	; 0xfd
 801049a:	d031      	beq.n	8010500 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 801049c:	2300      	movs	r3, #0
 801049e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	607a      	str	r2, [r7, #4]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f007 fd5d 	bl	8017f68 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f007 fd56 	bl	8017f68 <SPI_TxByte>
    } while (--wc);
 80104bc:	7bbb      	ldrb	r3, [r7, #14]
 80104be:	3b01      	subs	r3, #1
 80104c0:	73bb      	strb	r3, [r7, #14]
 80104c2:	7bbb      	ldrb	r3, [r7, #14]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1eb      	bne.n	80104a0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80104c8:	f007 fd5e 	bl	8017f88 <SPI_RxByte>
    SPI_RxByte();
 80104cc:	f007 fd5c 	bl	8017f88 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80104d0:	e00b      	b.n	80104ea <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80104d2:	f007 fd59 	bl	8017f88 <SPI_RxByte>
 80104d6:	4603      	mov	r3, r0
 80104d8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80104da:	7bfb      	ldrb	r3, [r7, #15]
 80104dc:	f003 031f 	and.w	r3, r3, #31
 80104e0:	2b05      	cmp	r3, #5
 80104e2:	d006      	beq.n	80104f2 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80104e4:	7b7b      	ldrb	r3, [r7, #13]
 80104e6:	3301      	adds	r3, #1
 80104e8:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80104ea:	7b7b      	ldrb	r3, [r7, #13]
 80104ec:	2b40      	cmp	r3, #64	; 0x40
 80104ee:	d9f0      	bls.n	80104d2 <SD_TxDataBlock+0x62>
 80104f0:	e000      	b.n	80104f4 <SD_TxDataBlock+0x84>
        break;
 80104f2:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80104f4:	bf00      	nop
 80104f6:	f007 fd47 	bl	8017f88 <SPI_RxByte>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d0fa      	beq.n	80104f6 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8010500:	7bfb      	ldrb	r3, [r7, #15]
 8010502:	f003 031f 	and.w	r3, r3, #31
 8010506:	2b05      	cmp	r3, #5
 8010508:	d101      	bne.n	801050e <SD_TxDataBlock+0x9e>
    return TRUE;
 801050a:	2301      	movs	r3, #1
 801050c:	e000      	b.n	8010510 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 801050e:	2300      	movs	r3, #0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
//static
BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	4603      	mov	r3, r0
 8010520:	6039      	str	r1, [r7, #0]
 8010522:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8010524:	f7ff fee4 	bl	80102f0 <SD_ReadyWait>
 8010528:	4603      	mov	r3, r0
 801052a:	2bff      	cmp	r3, #255	; 0xff
 801052c:	d001      	beq.n	8010532 <SD_SendCmd+0x1a>
    return 0xFF;
 801052e:	23ff      	movs	r3, #255	; 0xff
 8010530:	e040      	b.n	80105b4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8010532:	79fb      	ldrb	r3, [r7, #7]
 8010534:	4618      	mov	r0, r3
 8010536:	f007 fd17 	bl	8017f68 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	0e1b      	lsrs	r3, r3, #24
 801053e:	b2db      	uxtb	r3, r3
 8010540:	4618      	mov	r0, r3
 8010542:	f007 fd11 	bl	8017f68 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	0c1b      	lsrs	r3, r3, #16
 801054a:	b2db      	uxtb	r3, r3
 801054c:	4618      	mov	r0, r3
 801054e:	f007 fd0b 	bl	8017f68 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	0a1b      	lsrs	r3, r3, #8
 8010556:	b2db      	uxtb	r3, r3
 8010558:	4618      	mov	r0, r3
 801055a:	f007 fd05 	bl	8017f68 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	b2db      	uxtb	r3, r3
 8010562:	4618      	mov	r0, r3
 8010564:	f007 fd00 	bl	8017f68 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8010568:	2300      	movs	r3, #0
 801056a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD_0)
 801056c:	79fb      	ldrb	r3, [r7, #7]
 801056e:	2b40      	cmp	r3, #64	; 0x40
 8010570:	d101      	bne.n	8010576 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD_0(0) */
 8010572:	2395      	movs	r3, #149	; 0x95
 8010574:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD_8)
 8010576:	79fb      	ldrb	r3, [r7, #7]
 8010578:	2b48      	cmp	r3, #72	; 0x48
 801057a:	d101      	bne.n	8010580 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD_8(0x1AA) */
 801057c:	2387      	movs	r3, #135	; 0x87
 801057e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8010580:	7bfb      	ldrb	r3, [r7, #15]
 8010582:	4618      	mov	r0, r3
 8010584:	f007 fcf0 	bl	8017f68 <SPI_TxByte>
  
  /* CMD_12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD_12)
 8010588:	79fb      	ldrb	r3, [r7, #7]
 801058a:	2b4c      	cmp	r3, #76	; 0x4c
 801058c:	d101      	bne.n	8010592 <SD_SendCmd+0x7a>
    SPI_RxByte();
 801058e:	f007 fcfb 	bl	8017f88 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8010592:	230a      	movs	r3, #10
 8010594:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8010596:	f007 fcf7 	bl	8017f88 <SPI_RxByte>
 801059a:	4603      	mov	r3, r0
 801059c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 801059e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	da05      	bge.n	80105b2 <SD_SendCmd+0x9a>
 80105a6:	7bbb      	ldrb	r3, [r7, #14]
 80105a8:	3b01      	subs	r3, #1
 80105aa:	73bb      	strb	r3, [r7, #14]
 80105ac:	7bbb      	ldrb	r3, [r7, #14]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d1f1      	bne.n	8010596 <SD_SendCmd+0x7e>
  
  return res;
 80105b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <SD_disk_read>:
  return Stat;
}

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60b9      	str	r1, [r7, #8]
 80105c4:	607a      	str	r2, [r7, #4]
 80105c6:	603b      	str	r3, [r7, #0]
 80105c8:	4603      	mov	r3, r0
 80105ca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d102      	bne.n	80105d8 <SD_disk_read+0x1c>
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <SD_disk_read+0x20>
    return RES_PARERR;
 80105d8:	2304      	movs	r3, #4
 80105da:	e056      	b.n	801068a <SD_disk_read+0xce>

  if (Stat & STA_NOINIT)
 80105dc:	4b2d      	ldr	r3, [pc, #180]	; (8010694 <SD_disk_read+0xd8>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 0301 	and.w	r3, r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d001      	beq.n	80105ec <SD_disk_read+0x30>
    return RES_NOTRDY;
 80105e8:	2303      	movs	r3, #3
 80105ea:	e04e      	b.n	801068a <SD_disk_read+0xce>

  if (!(CardType & 8))
 80105ec:	4b2a      	ldr	r3, [pc, #168]	; (8010698 <SD_disk_read+0xdc>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	f003 0308 	and.w	r3, r3, #8
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d102      	bne.n	80105fe <SD_disk_read+0x42>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	025b      	lsls	r3, r3, #9
 80105fc:	607b      	str	r3, [r7, #4]

  SD_CS_ON;
 80105fe:	2200      	movs	r2, #0
 8010600:	2108      	movs	r1, #8
 8010602:	4826      	ldr	r0, [pc, #152]	; (801069c <SD_disk_read+0xe0>)
 8010604:	f7f6 fe10 	bl	8007228 <HAL_GPIO_WritePin>

  if (count == 1)
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	2b01      	cmp	r3, #1
 801060c:	d111      	bne.n	8010632 <SD_disk_read+0x76>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD_17, sector) == 0) && SD_RxDataBlock(buff, 512))
 801060e:	6879      	ldr	r1, [r7, #4]
 8010610:	2051      	movs	r0, #81	; 0x51
 8010612:	f7ff ff81 	bl	8010518 <SD_SendCmd>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d129      	bne.n	8010670 <SD_disk_read+0xb4>
 801061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010620:	68b8      	ldr	r0, [r7, #8]
 8010622:	f7ff feef 	bl	8010404 <SD_RxDataBlock>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d021      	beq.n	8010670 <SD_disk_read+0xb4>
      count = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	e01e      	b.n	8010670 <SD_disk_read+0xb4>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD_18, sector) == 0)
 8010632:	6879      	ldr	r1, [r7, #4]
 8010634:	2052      	movs	r0, #82	; 0x52
 8010636:	f7ff ff6f 	bl	8010518 <SD_SendCmd>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d117      	bne.n	8010670 <SD_disk_read+0xb4>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8010640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010644:	68b8      	ldr	r0, [r7, #8]
 8010646:	f7ff fedd 	bl	8010404 <SD_RxDataBlock>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00a      	beq.n	8010666 <SD_disk_read+0xaa>
          break;

        buff += 512;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010656:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	3b01      	subs	r3, #1
 801065c:	603b      	str	r3, [r7, #0]
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1ed      	bne.n	8010640 <SD_disk_read+0x84>
 8010664:	e000      	b.n	8010668 <SD_disk_read+0xac>
          break;
 8010666:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD_12, 0);
 8010668:	2100      	movs	r1, #0
 801066a:	204c      	movs	r0, #76	; 0x4c
 801066c:	f7ff ff54 	bl	8010518 <SD_SendCmd>
    }
  }

  SD_CS_OFF;
 8010670:	2201      	movs	r2, #1
 8010672:	2108      	movs	r1, #8
 8010674:	4809      	ldr	r0, [pc, #36]	; (801069c <SD_disk_read+0xe0>)
 8010676:	f7f6 fdd7 	bl	8007228 <HAL_GPIO_WritePin>

  SPI_RxByte(); /* Idle 상태(Release DO) */
 801067a:	f007 fc85 	bl	8017f88 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	20000024 	.word	0x20000024
 8010698:	20009969 	.word	0x20009969
 801069c:	48000800 	.word	0x48000800

080106a0 <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60b9      	str	r1, [r7, #8]
 80106a8:	607a      	str	r2, [r7, #4]
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	4603      	mov	r3, r0
 80106ae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d102      	bne.n	80106bc <SD_disk_write+0x1c>
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d101      	bne.n	80106c0 <SD_disk_write+0x20>
    return RES_PARERR;
 80106bc:	2304      	movs	r3, #4
 80106be:	e06f      	b.n	80107a0 <SD_disk_write+0x100>
  
  if (Stat & STA_NOINIT)
 80106c0:	4b39      	ldr	r3, [pc, #228]	; (80107a8 <SD_disk_write+0x108>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d001      	beq.n	80106d0 <SD_disk_write+0x30>
    return RES_NOTRDY;
 80106cc:	2303      	movs	r3, #3
 80106ce:	e067      	b.n	80107a0 <SD_disk_write+0x100>
  
  if (Stat & STA_PROTECT)
 80106d0:	4b35      	ldr	r3, [pc, #212]	; (80107a8 <SD_disk_write+0x108>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	f003 0304 	and.w	r3, r3, #4
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d001      	beq.n	80106e0 <SD_disk_write+0x40>
    return RES_WRPRT;
 80106dc:	2302      	movs	r3, #2
 80106de:	e05f      	b.n	80107a0 <SD_disk_write+0x100>
  
  if (!(CardType & 4))
 80106e0:	4b32      	ldr	r3, [pc, #200]	; (80107ac <SD_disk_write+0x10c>)
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	f003 0304 	and.w	r3, r3, #4
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d102      	bne.n	80106f2 <SD_disk_write+0x52>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	025b      	lsls	r3, r3, #9
 80106f0:	607b      	str	r3, [r7, #4]
  
  SD_CS_ON;
 80106f2:	2200      	movs	r2, #0
 80106f4:	2108      	movs	r1, #8
 80106f6:	482e      	ldr	r0, [pc, #184]	; (80107b0 <SD_disk_write+0x110>)
 80106f8:	f7f6 fd96 	bl	8007228 <HAL_GPIO_WritePin>
  
  if (count == 1) 
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d110      	bne.n	8010724 <SD_disk_write+0x84>
  { 
    if ((SD_SendCmd(CMD_24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8010702:	6879      	ldr	r1, [r7, #4]
 8010704:	2058      	movs	r0, #88	; 0x58
 8010706:	f7ff ff07 	bl	8010518 <SD_SendCmd>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d13a      	bne.n	8010786 <SD_disk_write+0xe6>
 8010710:	21fe      	movs	r1, #254	; 0xfe
 8010712:	68b8      	ldr	r0, [r7, #8]
 8010714:	f7ff feac 	bl	8010470 <SD_TxDataBlock>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d033      	beq.n	8010786 <SD_disk_write+0xe6>
      count = 0;
 801071e:	2300      	movs	r3, #0
 8010720:	603b      	str	r3, [r7, #0]
 8010722:	e030      	b.n	8010786 <SD_disk_write+0xe6>
  } 
  else 
  { 
    if (CardType & 2) 
 8010724:	4b21      	ldr	r3, [pc, #132]	; (80107ac <SD_disk_write+0x10c>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	f003 0302 	and.w	r3, r3, #2
 801072c:	2b00      	cmp	r3, #0
 801072e:	d007      	beq.n	8010740 <SD_disk_write+0xa0>
    {
      SD_SendCmd(CMD_55, 0);
 8010730:	2100      	movs	r1, #0
 8010732:	2077      	movs	r0, #119	; 0x77
 8010734:	f7ff fef0 	bl	8010518 <SD_SendCmd>
      SD_SendCmd(CMD_23, count); /* ACMD23 */
 8010738:	6839      	ldr	r1, [r7, #0]
 801073a:	2057      	movs	r0, #87	; 0x57
 801073c:	f7ff feec 	bl	8010518 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD_25, sector) == 0)
 8010740:	6879      	ldr	r1, [r7, #4]
 8010742:	2059      	movs	r0, #89	; 0x59
 8010744:	f7ff fee8 	bl	8010518 <SD_SendCmd>
 8010748:	4603      	mov	r3, r0
 801074a:	2b00      	cmp	r3, #0
 801074c:	d11b      	bne.n	8010786 <SD_disk_write+0xe6>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 801074e:	21fc      	movs	r1, #252	; 0xfc
 8010750:	68b8      	ldr	r0, [r7, #8]
 8010752:	f7ff fe8d 	bl	8010470 <SD_TxDataBlock>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00a      	beq.n	8010772 <SD_disk_write+0xd2>
          break;
        
        buff += 512;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010762:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	3b01      	subs	r3, #1
 8010768:	603b      	str	r3, [r7, #0]
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1ee      	bne.n	801074e <SD_disk_write+0xae>
 8010770:	e000      	b.n	8010774 <SD_disk_write+0xd4>
          break;
 8010772:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8010774:	21fd      	movs	r1, #253	; 0xfd
 8010776:	2000      	movs	r0, #0
 8010778:	f7ff fe7a 	bl	8010470 <SD_TxDataBlock>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d101      	bne.n	8010786 <SD_disk_write+0xe6>
      {        
        count = 1;
 8010782:	2301      	movs	r3, #1
 8010784:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  SD_CS_OFF;
 8010786:	2201      	movs	r2, #1
 8010788:	2108      	movs	r1, #8
 801078a:	4809      	ldr	r0, [pc, #36]	; (80107b0 <SD_disk_write+0x110>)
 801078c:	f7f6 fd4c 	bl	8007228 <HAL_GPIO_WritePin>
  SPI_RxByte();
 8010790:	f007 fbfa 	bl	8017f88 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	bf14      	ite	ne
 801079a:	2301      	movne	r3, #1
 801079c:	2300      	moveq	r3, #0
 801079e:	b2db      	uxtb	r3, r3
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	20000024 	.word	0x20000024
 80107ac:	20009969 	.word	0x20009969
 80107b0:	48000800 	.word	0x48000800

080107b4 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b08b      	sub	sp, #44	; 0x2c
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	4603      	mov	r3, r0
 80107bc:	603a      	str	r2, [r7, #0]
 80107be:	71fb      	strb	r3, [r7, #7]
 80107c0:	460b      	mov	r3, r1
 80107c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)  return RES_PARERR;
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d001      	beq.n	80107d2 <SD_disk_ioctl+0x1e>
 80107ce:	2304      	movs	r3, #4
 80107d0:	e120      	b.n	8010a14 <SD_disk_ioctl+0x260>
  
  res = RES_ERROR;
 80107d2:	2301      	movs	r3, #1
 80107d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80107d8:	79bb      	ldrb	r3, [r7, #6]
 80107da:	2b05      	cmp	r3, #5
 80107dc:	d129      	bne.n	8010832 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80107de:	6a3b      	ldr	r3, [r7, #32]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d017      	beq.n	8010816 <SD_disk_ioctl+0x62>
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	dc1f      	bgt.n	801082a <SD_disk_ioctl+0x76>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d002      	beq.n	80107f4 <SD_disk_ioctl+0x40>
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d00b      	beq.n	801080a <SD_disk_ioctl+0x56>
 80107f2:	e01a      	b.n	801082a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower()) SD_PowerOff();   /* Power Off */
 80107f4:	f7ff fdfa 	bl	80103ec <SD_CheckPower>
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d001      	beq.n	8010802 <SD_disk_ioctl+0x4e>
 80107fe:	f7ff fde9 	bl	80103d4 <SD_PowerOff>
      res = RES_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010808:	e102      	b.n	8010a10 <SD_disk_ioctl+0x25c>
    case 1:
      SD_PowerOn();             /* Power On */
 801080a:	f7ff fd8b 	bl	8010324 <SD_PowerOn>
      res = RES_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010814:	e0fc      	b.n	8010a10 <SD_disk_ioctl+0x25c>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	1c5c      	adds	r4, r3, #1
 801081a:	f7ff fde7 	bl	80103ec <SD_CheckPower>
 801081e:	4603      	mov	r3, r0
 8010820:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8010822:	2300      	movs	r3, #0
 8010824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010828:	e0f2      	b.n	8010a10 <SD_disk_ioctl+0x25c>
    default:
      res = RES_PARERR;
 801082a:	2304      	movs	r3, #4
 801082c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010830:	e0ee      	b.n	8010a10 <SD_disk_ioctl+0x25c>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)  return RES_NOTRDY;
 8010832:	4b7a      	ldr	r3, [pc, #488]	; (8010a1c <SD_disk_ioctl+0x268>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f003 0301 	and.w	r3, r3, #1
 801083a:	2b00      	cmp	r3, #0
 801083c:	d001      	beq.n	8010842 <SD_disk_ioctl+0x8e>
 801083e:	2303      	movs	r3, #3
 8010840:	e0e8      	b.n	8010a14 <SD_disk_ioctl+0x260>
    
    SD_CS_ON;
 8010842:	2200      	movs	r2, #0
 8010844:	2108      	movs	r1, #8
 8010846:	4876      	ldr	r0, [pc, #472]	; (8010a20 <SD_disk_ioctl+0x26c>)
 8010848:	f7f6 fcee 	bl	8007228 <HAL_GPIO_WritePin>
    
    switch (ctrl) 
 801084c:	79bb      	ldrb	r3, [r7, #6]
 801084e:	2b0d      	cmp	r3, #13
 8010850:	f200 80cc 	bhi.w	80109ec <SD_disk_ioctl+0x238>
 8010854:	a201      	add	r2, pc, #4	; (adr r2, 801085c <SD_disk_ioctl+0xa8>)
 8010856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085a:	bf00      	nop
 801085c:	08010957 	.word	0x08010957
 8010860:	08010895 	.word	0x08010895
 8010864:	08010947 	.word	0x08010947
 8010868:	080109ed 	.word	0x080109ed
 801086c:	080109ed 	.word	0x080109ed
 8010870:	080109ed 	.word	0x080109ed
 8010874:	080109ed 	.word	0x080109ed
 8010878:	080109ed 	.word	0x080109ed
 801087c:	080109ed 	.word	0x080109ed
 8010880:	080109ed 	.word	0x080109ed
 8010884:	080109ed 	.word	0x080109ed
 8010888:	08010969 	.word	0x08010969
 801088c:	0801098d 	.word	0x0801098d
 8010890:	080109b1 	.word	0x080109b1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD_9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8010894:	2100      	movs	r1, #0
 8010896:	2049      	movs	r0, #73	; 0x49
 8010898:	f7ff fe3e 	bl	8010518 <SD_SendCmd>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f040 80a8 	bne.w	80109f4 <SD_disk_ioctl+0x240>
 80108a4:	f107 030c 	add.w	r3, r7, #12
 80108a8:	2110      	movs	r1, #16
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7ff fdaa 	bl	8010404 <SD_RxDataBlock>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f000 809e 	beq.w	80109f4 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1) 
 80108b8:	7b3b      	ldrb	r3, [r7, #12]
 80108ba:	099b      	lsrs	r3, r3, #6
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d10e      	bne.n	80108e0 <SD_disk_ioctl+0x12c>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80108c2:	7d7b      	ldrb	r3, [r7, #21]
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	7d3b      	ldrb	r3, [r7, #20]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	021b      	lsls	r3, r3, #8
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	4413      	add	r3, r2
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	3301      	adds	r3, #1
 80108d4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80108d6:	8bfb      	ldrh	r3, [r7, #30]
 80108d8:	029a      	lsls	r2, r3, #10
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	601a      	str	r2, [r3, #0]
 80108de:	e02e      	b.n	801093e <SD_disk_ioctl+0x18a>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80108e0:	7c7b      	ldrb	r3, [r7, #17]
 80108e2:	f003 030f 	and.w	r3, r3, #15
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	7dbb      	ldrb	r3, [r7, #22]
 80108ea:	09db      	lsrs	r3, r3, #7
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	4413      	add	r3, r2
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	7d7b      	ldrb	r3, [r7, #21]
 80108f4:	005b      	lsls	r3, r3, #1
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	f003 0306 	and.w	r3, r3, #6
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	4413      	add	r3, r2
 8010900:	b2db      	uxtb	r3, r3
 8010902:	3302      	adds	r3, #2
 8010904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8010908:	7d3b      	ldrb	r3, [r7, #20]
 801090a:	099b      	lsrs	r3, r3, #6
 801090c:	b2db      	uxtb	r3, r3
 801090e:	b29a      	uxth	r2, r3
 8010910:	7cfb      	ldrb	r3, [r7, #19]
 8010912:	b29b      	uxth	r3, r3
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	b29b      	uxth	r3, r3
 8010918:	4413      	add	r3, r2
 801091a:	b29a      	uxth	r2, r3
 801091c:	7cbb      	ldrb	r3, [r7, #18]
 801091e:	029b      	lsls	r3, r3, #10
 8010920:	b29b      	uxth	r3, r3
 8010922:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010926:	b29b      	uxth	r3, r3
 8010928:	4413      	add	r3, r2
 801092a:	b29b      	uxth	r3, r3
 801092c:	3301      	adds	r3, #1
 801092e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8010930:	8bfa      	ldrh	r2, [r7, #30]
 8010932:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010936:	3b09      	subs	r3, #9
 8010938:	409a      	lsls	r2, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 801093e:	2300      	movs	r3, #0
 8010940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8010944:	e056      	b.n	80109f4 <SD_disk_ioctl+0x240>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	f44f 7200 	mov.w	r2, #512	; 0x200
 801094c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 801094e:	2300      	movs	r3, #0
 8010950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010954:	e055      	b.n	8010a02 <SD_disk_ioctl+0x24e>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8010956:	f7ff fccb 	bl	80102f0 <SD_ReadyWait>
 801095a:	4603      	mov	r3, r0
 801095c:	2bff      	cmp	r3, #255	; 0xff
 801095e:	d14b      	bne.n	80109f8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8010960:	2300      	movs	r3, #0
 8010962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010966:	e047      	b.n	80109f8 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD_9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8010968:	2100      	movs	r1, #0
 801096a:	2049      	movs	r0, #73	; 0x49
 801096c:	f7ff fdd4 	bl	8010518 <SD_SendCmd>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d142      	bne.n	80109fc <SD_disk_ioctl+0x248>
 8010976:	2110      	movs	r1, #16
 8010978:	6a38      	ldr	r0, [r7, #32]
 801097a:	f7ff fd43 	bl	8010404 <SD_RxDataBlock>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	d03b      	beq.n	80109fc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8010984:	2300      	movs	r3, #0
 8010986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 801098a:	e037      	b.n	80109fc <SD_disk_ioctl+0x248>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD_10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 801098c:	2100      	movs	r1, #0
 801098e:	204a      	movs	r0, #74	; 0x4a
 8010990:	f7ff fdc2 	bl	8010518 <SD_SendCmd>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d132      	bne.n	8010a00 <SD_disk_ioctl+0x24c>
 801099a:	2110      	movs	r1, #16
 801099c:	6a38      	ldr	r0, [r7, #32]
 801099e:	f7ff fd31 	bl	8010404 <SD_RxDataBlock>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d02b      	beq.n	8010a00 <SD_disk_ioctl+0x24c>
        res = RES_OK;
 80109a8:	2300      	movs	r3, #0
 80109aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80109ae:	e027      	b.n	8010a00 <SD_disk_ioctl+0x24c>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD_58, 0) == 0)
 80109b0:	2100      	movs	r1, #0
 80109b2:	207a      	movs	r0, #122	; 0x7a
 80109b4:	f7ff fdb0 	bl	8010518 <SD_SendCmd>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d116      	bne.n	80109ec <SD_disk_ioctl+0x238>
      {         
        for (n = 0; n < 4; n++)
 80109be:	2300      	movs	r3, #0
 80109c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80109c4:	e00b      	b.n	80109de <SD_disk_ioctl+0x22a>
        {
          *ptr++ = SPI_RxByte();
 80109c6:	6a3c      	ldr	r4, [r7, #32]
 80109c8:	1c63      	adds	r3, r4, #1
 80109ca:	623b      	str	r3, [r7, #32]
 80109cc:	f007 fadc 	bl	8017f88 <SPI_RxByte>
 80109d0:	4603      	mov	r3, r0
 80109d2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80109d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80109d8:	3301      	adds	r3, #1
 80109da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80109de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80109e2:	2b03      	cmp	r3, #3
 80109e4:	d9ef      	bls.n	80109c6 <SD_disk_ioctl+0x212>
        }
        
        res = RES_OK;
 80109e6:	2300      	movs	r3, #0
 80109e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80109ec:	2304      	movs	r3, #4
 80109ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109f2:	e006      	b.n	8010a02 <SD_disk_ioctl+0x24e>
      break;
 80109f4:	bf00      	nop
 80109f6:	e004      	b.n	8010a02 <SD_disk_ioctl+0x24e>
      break;
 80109f8:	bf00      	nop
 80109fa:	e002      	b.n	8010a02 <SD_disk_ioctl+0x24e>
      break;
 80109fc:	bf00      	nop
 80109fe:	e000      	b.n	8010a02 <SD_disk_ioctl+0x24e>
      break;
 8010a00:	bf00      	nop
    }
    
    SD_CS_OFF;
 8010a02:	2201      	movs	r2, #1
 8010a04:	2108      	movs	r1, #8
 8010a06:	4806      	ldr	r0, [pc, #24]	; (8010a20 <SD_disk_ioctl+0x26c>)
 8010a08:	f7f6 fc0e 	bl	8007228 <HAL_GPIO_WritePin>

    SPI_RxByte();
 8010a0c:	f007 fabc 	bl	8017f88 <SPI_RxByte>
  }
  
  return res;
 8010a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	372c      	adds	r7, #44	; 0x2c
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd90      	pop	{r4, r7, pc}
 8010a1c:	20000024 	.word	0x20000024
 8010a20:	48000800 	.word	0x48000800

08010a24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 f949 	bl	8010cc8 <USER_SPI_initialize>
 8010a36:	4603      	mov	r3, r0
	//return SD_disk_initialize(pdrv);
  /* USER CODE END INIT */
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	4603      	mov	r3, r0
 8010a48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010a4a:	79fb      	ldrb	r3, [r7, #7]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 fa25 	bl	8010e9c <USER_SPI_status>
 8010a52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	607a      	str	r2, [r7, #4]
 8010a66:	603b      	str	r3, [r7, #0]
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//return USER_SPI_read(pdrv, buff, sector, count);
	return SD_disk_read(pdrv, buff, sector, count);
 8010a6c:	7bf8      	ldrb	r0, [r7, #15]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	68b9      	ldr	r1, [r7, #8]
 8010a74:	f7ff fda2 	bl	80105bc <SD_disk_read>
 8010a78:	4603      	mov	r3, r0

  /* USER CODE END READ */
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b084      	sub	sp, #16
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	603b      	str	r3, [r7, #0]
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	//return USER_SPI_write(pdrv, buff, sector, count);
	return SD_disk_write(pdrv, buff, sector, count);
 8010a92:	7bf8      	ldrb	r0, [r7, #15]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	68b9      	ldr	r1, [r7, #8]
 8010a9a:	f7ff fe01 	bl	80106a0 <SD_disk_write>
 8010a9e:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	4603      	mov	r3, r0
 8010ab0:	603a      	str	r2, [r7, #0]
 8010ab2:	71fb      	strb	r3, [r7, #7]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//return USER_SPI_ioctl(pdrv, cmd, buff);
	return SD_disk_ioctl(pdrv, cmd, buff);
 8010ab8:	79b9      	ldrb	r1, [r7, #6]
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7ff fe78 	bl	80107b4 <SD_disk_ioctl>
 8010ac4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3708      	adds	r7, #8
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
	...

08010ad0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8010ad8:	f7f4 fbaa 	bl	8005230 <HAL_GetTick>
 8010adc:	4603      	mov	r3, r0
 8010ade:	4a04      	ldr	r2, [pc, #16]	; (8010af0 <SPI_Timer_On+0x20>)
 8010ae0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8010ae2:	4a04      	ldr	r2, [pc, #16]	; (8010af4 <SPI_Timer_On+0x24>)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6013      	str	r3, [r2, #0]
}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	2000996c 	.word	0x2000996c
 8010af4:	20009970 	.word	0x20009970

08010af8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8010af8:	b580      	push	{r7, lr}
 8010afa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8010afc:	f7f4 fb98 	bl	8005230 <HAL_GetTick>
 8010b00:	4602      	mov	r2, r0
 8010b02:	4b06      	ldr	r3, [pc, #24]	; (8010b1c <SPI_Timer_Status+0x24>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	1ad2      	subs	r2, r2, r3
 8010b08:	4b05      	ldr	r3, [pc, #20]	; (8010b20 <SPI_Timer_Status+0x28>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	bf34      	ite	cc
 8010b10:	2301      	movcc	r3, #1
 8010b12:	2300      	movcs	r3, #0
 8010b14:	b2db      	uxtb	r3, r3
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	2000996c 	.word	0x2000996c
 8010b20:	20009970 	.word	0x20009970

08010b24 <xchg_spi>:
/* Exchange a byte */
//static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af02      	add	r7, sp, #8
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8010b2e:	f107 020f 	add.w	r2, r7, #15
 8010b32:	1df9      	adds	r1, r7, #7
 8010b34:	2332      	movs	r3, #50	; 0x32
 8010b36:	9300      	str	r3, [sp, #0]
 8010b38:	2301      	movs	r3, #1
 8010b3a:	4804      	ldr	r0, [pc, #16]	; (8010b4c <xchg_spi+0x28>)
 8010b3c:	f7f9 ff32 	bl	800a9a4 <HAL_SPI_TransmitReceive>
    return rxDat;
 8010b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	20008bc0 	.word	0x20008bc0

08010b50 <wait_ready>:

//static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8010b58:	f7f4 fb6a 	bl	8005230 <HAL_GetTick>
 8010b5c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8010b62:	20ff      	movs	r0, #255	; 0xff
 8010b64:	f7ff ffde 	bl	8010b24 <xchg_spi>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	2bff      	cmp	r3, #255	; 0xff
 8010b70:	d007      	beq.n	8010b82 <wait_ready+0x32>
 8010b72:	f7f4 fb5d 	bl	8005230 <HAL_GetTick>
 8010b76:	4602      	mov	r2, r0
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d8ef      	bhi.n	8010b62 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	2bff      	cmp	r3, #255	; 0xff
 8010b86:	bf0c      	ite	eq
 8010b88:	2301      	moveq	r3, #1
 8010b8a:	2300      	movne	r3, #0
 8010b8c:	b2db      	uxtb	r3, r3
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3718      	adds	r7, #24
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
	...

08010b98 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

//static
void despiselect (void)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	2108      	movs	r1, #8
 8010ba0:	4803      	ldr	r0, [pc, #12]	; (8010bb0 <despiselect+0x18>)
 8010ba2:	f7f6 fb41 	bl	8007228 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010ba6:	20ff      	movs	r0, #255	; 0xff
 8010ba8:	f7ff ffbc 	bl	8010b24 <xchg_spi>

}
 8010bac:	bf00      	nop
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	48000800 	.word	0x48000800

08010bb4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

//static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8010bb8:	2200      	movs	r2, #0
 8010bba:	2108      	movs	r1, #8
 8010bbc:	4809      	ldr	r0, [pc, #36]	; (8010be4 <spiselect+0x30>)
 8010bbe:	f7f6 fb33 	bl	8007228 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8010bc2:	20ff      	movs	r0, #255	; 0xff
 8010bc4:	f7ff ffae 	bl	8010b24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8010bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010bcc:	f7ff ffc0 	bl	8010b50 <wait_ready>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <spiselect+0x26>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	e002      	b.n	8010be0 <spiselect+0x2c>

	despiselect();
 8010bda:	f7ff ffdd 	bl	8010b98 <despiselect>
	return 0;	/* Timeout */
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	48000800 	.word	0x48000800

08010be8 <send_cmd>:
//static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	6039      	str	r1, [r7, #0]
 8010bf2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8010bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	da0e      	bge.n	8010c1a <send_cmd+0x32>
		cmd &= 0x7F;
 8010bfc:	79fb      	ldrb	r3, [r7, #7]
 8010bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c02:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8010c04:	2100      	movs	r1, #0
 8010c06:	2037      	movs	r0, #55	; 0x37
 8010c08:	f7ff ffee 	bl	8010be8 <send_cmd>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8010c10:	7bbb      	ldrb	r3, [r7, #14]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d901      	bls.n	8010c1a <send_cmd+0x32>
 8010c16:	7bbb      	ldrb	r3, [r7, #14]
 8010c18:	e051      	b.n	8010cbe <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8010c1a:	79fb      	ldrb	r3, [r7, #7]
 8010c1c:	2b0c      	cmp	r3, #12
 8010c1e:	d008      	beq.n	8010c32 <send_cmd+0x4a>
		despiselect();
 8010c20:	f7ff ffba 	bl	8010b98 <despiselect>
		if (!spiselect()) return 0xFF;
 8010c24:	f7ff ffc6 	bl	8010bb4 <spiselect>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d101      	bne.n	8010c32 <send_cmd+0x4a>
 8010c2e:	23ff      	movs	r3, #255	; 0xff
 8010c30:	e045      	b.n	8010cbe <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff ff72 	bl	8010b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	0e1b      	lsrs	r3, r3, #24
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff ff6c 	bl	8010b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	0c1b      	lsrs	r3, r3, #16
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7ff ff66 	bl	8010b24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	0a1b      	lsrs	r3, r3, #8
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7ff ff60 	bl	8010b24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7ff ff5b 	bl	8010b24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010c6e:	2301      	movs	r3, #1
 8010c70:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d101      	bne.n	8010c7c <send_cmd+0x94>
 8010c78:	2395      	movs	r3, #149	; 0x95
 8010c7a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010c7c:	79fb      	ldrb	r3, [r7, #7]
 8010c7e:	2b08      	cmp	r3, #8
 8010c80:	d101      	bne.n	8010c86 <send_cmd+0x9e>
 8010c82:	2387      	movs	r3, #135	; 0x87
 8010c84:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff ff4b 	bl	8010b24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8010c8e:	79fb      	ldrb	r3, [r7, #7]
 8010c90:	2b0c      	cmp	r3, #12
 8010c92:	d102      	bne.n	8010c9a <send_cmd+0xb2>
 8010c94:	20ff      	movs	r0, #255	; 0xff
 8010c96:	f7ff ff45 	bl	8010b24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8010c9a:	230a      	movs	r3, #10
 8010c9c:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8010c9e:	20ff      	movs	r0, #255	; 0xff
 8010ca0:	f7ff ff40 	bl	8010b24 <xchg_spi>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8010ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	da05      	bge.n	8010cbc <send_cmd+0xd4>
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	73fb      	strb	r3, [r7, #15]
 8010cb6:	7bfb      	ldrb	r3, [r7, #15]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d1f0      	bne.n	8010c9e <send_cmd+0xb6>

	return res;							/* Return received response */
 8010cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <USER_SPI_initialize>:

//inline
DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010cc8:	b590      	push	{r4, r7, lr}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d001      	beq.n	8010cdc <USER_SPI_initialize+0x14>
 8010cd8:	2301      	movs	r3, #1
 8010cda:	e0d3      	b.n	8010e84 <USER_SPI_initialize+0x1bc>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8010cdc:	4b6b      	ldr	r3, [pc, #428]	; (8010e8c <USER_SPI_initialize+0x1c4>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	f003 0302 	and.w	r3, r3, #2
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <USER_SPI_initialize+0x26>
 8010ce8:	4b68      	ldr	r3, [pc, #416]	; (8010e8c <USER_SPI_initialize+0x1c4>)
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	e0ca      	b.n	8010e84 <USER_SPI_initialize+0x1bc>

	FCLK_SLOW();
 8010cee:	4b68      	ldr	r3, [pc, #416]	; (8010e90 <USER_SPI_initialize+0x1c8>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010cf8:	4b65      	ldr	r3, [pc, #404]	; (8010e90 <USER_SPI_initialize+0x1c8>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8010d00:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010d02:	230a      	movs	r3, #10
 8010d04:	73fb      	strb	r3, [r7, #15]
 8010d06:	e005      	b.n	8010d14 <USER_SPI_initialize+0x4c>
 8010d08:	20ff      	movs	r0, #255	; 0xff
 8010d0a:	f7ff ff0b 	bl	8010b24 <xchg_spi>
 8010d0e:	7bfb      	ldrb	r3, [r7, #15]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	73fb      	strb	r3, [r7, #15]
 8010d14:	7bfb      	ldrb	r3, [r7, #15]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d1f6      	bne.n	8010d08 <USER_SPI_initialize+0x40>

	ty = 0;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8010d1e:	2100      	movs	r1, #0
 8010d20:	2000      	movs	r0, #0
 8010d22:	f7ff ff61 	bl	8010be8 <send_cmd>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	f040 808b 	bne.w	8010e44 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d32:	f7ff fecd 	bl	8010ad0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8010d36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d3a:	2008      	movs	r0, #8
 8010d3c:	f7ff ff54 	bl	8010be8 <send_cmd>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d151      	bne.n	8010dea <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8010d46:	2300      	movs	r3, #0
 8010d48:	73fb      	strb	r3, [r7, #15]
 8010d4a:	e00d      	b.n	8010d68 <USER_SPI_initialize+0xa0>
 8010d4c:	7bfc      	ldrb	r4, [r7, #15]
 8010d4e:	20ff      	movs	r0, #255	; 0xff
 8010d50:	f7ff fee8 	bl	8010b24 <xchg_spi>
 8010d54:	4603      	mov	r3, r0
 8010d56:	461a      	mov	r2, r3
 8010d58:	f104 0310 	add.w	r3, r4, #16
 8010d5c:	443b      	add	r3, r7
 8010d5e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
 8010d64:	3301      	adds	r3, #1
 8010d66:	73fb      	strb	r3, [r7, #15]
 8010d68:	7bfb      	ldrb	r3, [r7, #15]
 8010d6a:	2b03      	cmp	r3, #3
 8010d6c:	d9ee      	bls.n	8010d4c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8010d6e:	7abb      	ldrb	r3, [r7, #10]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d167      	bne.n	8010e44 <USER_SPI_initialize+0x17c>
 8010d74:	7afb      	ldrb	r3, [r7, #11]
 8010d76:	2baa      	cmp	r3, #170	; 0xaa
 8010d78:	d164      	bne.n	8010e44 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8010d7a:	bf00      	nop
 8010d7c:	f7ff febc 	bl	8010af8 <SPI_Timer_Status>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d007      	beq.n	8010d96 <USER_SPI_initialize+0xce>
 8010d86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010d8a:	20a9      	movs	r0, #169	; 0xa9
 8010d8c:	f7ff ff2c 	bl	8010be8 <send_cmd>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1f2      	bne.n	8010d7c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8010d96:	f7ff feaf 	bl	8010af8 <SPI_Timer_Status>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d051      	beq.n	8010e44 <USER_SPI_initialize+0x17c>
 8010da0:	2100      	movs	r1, #0
 8010da2:	203a      	movs	r0, #58	; 0x3a
 8010da4:	f7ff ff20 	bl	8010be8 <send_cmd>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d14a      	bne.n	8010e44 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8010dae:	2300      	movs	r3, #0
 8010db0:	73fb      	strb	r3, [r7, #15]
 8010db2:	e00d      	b.n	8010dd0 <USER_SPI_initialize+0x108>
 8010db4:	7bfc      	ldrb	r4, [r7, #15]
 8010db6:	20ff      	movs	r0, #255	; 0xff
 8010db8:	f7ff feb4 	bl	8010b24 <xchg_spi>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	f104 0310 	add.w	r3, r4, #16
 8010dc4:	443b      	add	r3, r7
 8010dc6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010dca:	7bfb      	ldrb	r3, [r7, #15]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	73fb      	strb	r3, [r7, #15]
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
 8010dd2:	2b03      	cmp	r3, #3
 8010dd4:	d9ee      	bls.n	8010db4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8010dd6:	7a3b      	ldrb	r3, [r7, #8]
 8010dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d001      	beq.n	8010de4 <USER_SPI_initialize+0x11c>
 8010de0:	230c      	movs	r3, #12
 8010de2:	e000      	b.n	8010de6 <USER_SPI_initialize+0x11e>
 8010de4:	2304      	movs	r3, #4
 8010de6:	737b      	strb	r3, [r7, #13]
 8010de8:	e02c      	b.n	8010e44 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8010dea:	2100      	movs	r1, #0
 8010dec:	20a9      	movs	r0, #169	; 0xa9
 8010dee:	f7ff fefb 	bl	8010be8 <send_cmd>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d804      	bhi.n	8010e02 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8010df8:	2302      	movs	r3, #2
 8010dfa:	737b      	strb	r3, [r7, #13]
 8010dfc:	23a9      	movs	r3, #169	; 0xa9
 8010dfe:	73bb      	strb	r3, [r7, #14]
 8010e00:	e003      	b.n	8010e0a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8010e02:	2301      	movs	r3, #1
 8010e04:	737b      	strb	r3, [r7, #13]
 8010e06:	2301      	movs	r3, #1
 8010e08:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8010e0a:	bf00      	nop
 8010e0c:	f7ff fe74 	bl	8010af8 <SPI_Timer_Status>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d007      	beq.n	8010e26 <USER_SPI_initialize+0x15e>
 8010e16:	7bbb      	ldrb	r3, [r7, #14]
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fee4 	bl	8010be8 <send_cmd>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1f2      	bne.n	8010e0c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8010e26:	f7ff fe67 	bl	8010af8 <SPI_Timer_Status>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d007      	beq.n	8010e40 <USER_SPI_initialize+0x178>
 8010e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e34:	2010      	movs	r0, #16
 8010e36:	f7ff fed7 	bl	8010be8 <send_cmd>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d001      	beq.n	8010e44 <USER_SPI_initialize+0x17c>
				ty = 0;
 8010e40:	2300      	movs	r3, #0
 8010e42:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010e44:	4a13      	ldr	r2, [pc, #76]	; (8010e94 <USER_SPI_initialize+0x1cc>)
 8010e46:	7b7b      	ldrb	r3, [r7, #13]
 8010e48:	7013      	strb	r3, [r2, #0]

	//despiselect();
SD_CS_OFF;
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	2108      	movs	r1, #8
 8010e4e:	4812      	ldr	r0, [pc, #72]	; (8010e98 <USER_SPI_initialize+0x1d0>)
 8010e50:	f7f6 f9ea 	bl	8007228 <HAL_GPIO_WritePin>

	if (ty) {			/* OK */
 8010e54:	7b7b      	ldrb	r3, [r7, #13]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00f      	beq.n	8010e7a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010e5a:	4b0d      	ldr	r3, [pc, #52]	; (8010e90 <USER_SPI_initialize+0x1c8>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	4b0b      	ldr	r3, [pc, #44]	; (8010e90 <USER_SPI_initialize+0x1c8>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8010e68:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8010e6a:	4b08      	ldr	r3, [pc, #32]	; (8010e8c <USER_SPI_initialize+0x1c4>)
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	f023 0301 	bic.w	r3, r3, #1
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	4b05      	ldr	r3, [pc, #20]	; (8010e8c <USER_SPI_initialize+0x1c4>)
 8010e76:	701a      	strb	r2, [r3, #0]
 8010e78:	e002      	b.n	8010e80 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8010e7a:	4b04      	ldr	r3, [pc, #16]	; (8010e8c <USER_SPI_initialize+0x1c4>)
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8010e80:	4b02      	ldr	r3, [pc, #8]	; (8010e8c <USER_SPI_initialize+0x1c4>)
 8010e82:	781b      	ldrb	r3, [r3, #0]
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3714      	adds	r7, #20
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd90      	pop	{r4, r7, pc}
 8010e8c:	20000024 	.word	0x20000024
 8010e90:	20008bc0 	.word	0x20008bc0
 8010e94:	20009969 	.word	0x20009969
 8010e98:	48000800 	.word	0x48000800

08010e9c <USER_SPI_status>:

//inline
DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8010ea6:	79fb      	ldrb	r3, [r7, #7]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d001      	beq.n	8010eb0 <USER_SPI_status+0x14>
 8010eac:	2301      	movs	r3, #1
 8010eae:	e001      	b.n	8010eb4 <USER_SPI_status+0x18>

	return Stat;	/* Return disk status */
 8010eb0:	4b03      	ldr	r3, [pc, #12]	; (8010ec0 <USER_SPI_status+0x24>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr
 8010ec0:	20000024 	.word	0x20000024

08010ec4 <ILI9341_Init>:
unsigned char hh;

SPI_HandleTypeDef lcd_spi;

void ILI9341_Init()
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	af00      	add	r7, sp, #0

	SD_CS_OFF;
 8010ec8:	2201      	movs	r2, #1
 8010eca:	2108      	movs	r1, #8
 8010ecc:	4884      	ldr	r0, [pc, #528]	; (80110e0 <ILI9341_Init+0x21c>)
 8010ece:	f7f6 f9ab 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	2180      	movs	r1, #128	; 0x80
 8010ed6:	4882      	ldr	r0, [pc, #520]	; (80110e0 <ILI9341_Init+0x21c>)
 8010ed8:	f7f6 f9a6 	bl	8007228 <HAL_GPIO_WritePin>

	ILI9341_SPI_Init();
 8010edc:	f000 f902 	bl	80110e4 <ILI9341_SPI_Init>
	/* Reset The Screen */
	ILI9341_Reset();
 8010ee0:	f000 f94a 	bl	8011178 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8010ee4:	2001      	movs	r0, #1
 8010ee6:	f000 fd6f 	bl	80119c8 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8010eea:	20cb      	movs	r0, #203	; 0xcb
 8010eec:	f000 fd6c 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8010ef0:	2039      	movs	r0, #57	; 0x39
 8010ef2:	f000 fd85 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8010ef6:	202c      	movs	r0, #44	; 0x2c
 8010ef8:	f000 fd82 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8010efc:	2000      	movs	r0, #0
 8010efe:	f000 fd7f 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8010f02:	2034      	movs	r0, #52	; 0x34
 8010f04:	f000 fd7c 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8010f08:	2002      	movs	r0, #2
 8010f0a:	f000 fd79 	bl	8011a00 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8010f0e:	20cf      	movs	r0, #207	; 0xcf
 8010f10:	f000 fd5a 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8010f14:	2000      	movs	r0, #0
 8010f16:	f000 fd73 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8010f1a:	20c1      	movs	r0, #193	; 0xc1
 8010f1c:	f000 fd70 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8010f20:	2030      	movs	r0, #48	; 0x30
 8010f22:	f000 fd6d 	bl	8011a00 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8010f26:	20e8      	movs	r0, #232	; 0xe8
 8010f28:	f000 fd4e 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8010f2c:	2085      	movs	r0, #133	; 0x85
 8010f2e:	f000 fd67 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8010f32:	2000      	movs	r0, #0
 8010f34:	f000 fd64 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8010f38:	2078      	movs	r0, #120	; 0x78
 8010f3a:	f000 fd61 	bl	8011a00 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8010f3e:	20ea      	movs	r0, #234	; 0xea
 8010f40:	f000 fd42 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8010f44:	2000      	movs	r0, #0
 8010f46:	f000 fd5b 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	f000 fd58 	bl	8011a00 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8010f50:	20ed      	movs	r0, #237	; 0xed
 8010f52:	f000 fd39 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8010f56:	2064      	movs	r0, #100	; 0x64
 8010f58:	f000 fd52 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8010f5c:	2003      	movs	r0, #3
 8010f5e:	f000 fd4f 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8010f62:	2012      	movs	r0, #18
 8010f64:	f000 fd4c 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8010f68:	2081      	movs	r0, #129	; 0x81
 8010f6a:	f000 fd49 	bl	8011a00 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8010f6e:	20f7      	movs	r0, #247	; 0xf7
 8010f70:	f000 fd2a 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8010f74:	2020      	movs	r0, #32
 8010f76:	f000 fd43 	bl	8011a00 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8010f7a:	20c0      	movs	r0, #192	; 0xc0
 8010f7c:	f000 fd24 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8010f80:	2010      	movs	r0, #16
 8010f82:	f000 fd3d 	bl	8011a00 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8010f86:	20c1      	movs	r0, #193	; 0xc1
 8010f88:	f000 fd1e 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8010f8c:	2010      	movs	r0, #16
 8010f8e:	f000 fd37 	bl	8011a00 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8010f92:	20c5      	movs	r0, #197	; 0xc5
 8010f94:	f000 fd18 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8010f98:	203e      	movs	r0, #62	; 0x3e
 8010f9a:	f000 fd31 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8010f9e:	2028      	movs	r0, #40	; 0x28
 8010fa0:	f000 fd2e 	bl	8011a00 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8010fa4:	20c7      	movs	r0, #199	; 0xc7
 8010fa6:	f000 fd0f 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8010faa:	2086      	movs	r0, #134	; 0x86
 8010fac:	f000 fd28 	bl	8011a00 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8010fb0:	2036      	movs	r0, #54	; 0x36
 8010fb2:	f000 fd09 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8010fb6:	2048      	movs	r0, #72	; 0x48
 8010fb8:	f000 fd22 	bl	8011a00 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8010fbc:	203a      	movs	r0, #58	; 0x3a
 8010fbe:	f000 fd03 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8010fc2:	2055      	movs	r0, #85	; 0x55
 8010fc4:	f000 fd1c 	bl	8011a00 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8010fc8:	20b1      	movs	r0, #177	; 0xb1
 8010fca:	f000 fcfd 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8010fce:	2000      	movs	r0, #0
 8010fd0:	f000 fd16 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8010fd4:	2018      	movs	r0, #24
 8010fd6:	f000 fd13 	bl	8011a00 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8010fda:	20b6      	movs	r0, #182	; 0xb6
 8010fdc:	f000 fcf4 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8010fe0:	2008      	movs	r0, #8
 8010fe2:	f000 fd0d 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8010fe6:	2082      	movs	r0, #130	; 0x82
 8010fe8:	f000 fd0a 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8010fec:	2027      	movs	r0, #39	; 0x27
 8010fee:	f000 fd07 	bl	8011a00 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8010ff2:	20f2      	movs	r0, #242	; 0xf2
 8010ff4:	f000 fce8 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	f000 fd01 	bl	8011a00 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8010ffe:	2026      	movs	r0, #38	; 0x26
 8011000:	f000 fce2 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8011004:	2001      	movs	r0, #1
 8011006:	f000 fcfb 	bl	8011a00 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 801100a:	20e0      	movs	r0, #224	; 0xe0
 801100c:	f000 fcdc 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8011010:	200f      	movs	r0, #15
 8011012:	f000 fcf5 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8011016:	2031      	movs	r0, #49	; 0x31
 8011018:	f000 fcf2 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 801101c:	202b      	movs	r0, #43	; 0x2b
 801101e:	f000 fcef 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8011022:	200c      	movs	r0, #12
 8011024:	f000 fcec 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8011028:	200e      	movs	r0, #14
 801102a:	f000 fce9 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 801102e:	2008      	movs	r0, #8
 8011030:	f000 fce6 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8011034:	204e      	movs	r0, #78	; 0x4e
 8011036:	f000 fce3 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 801103a:	20f1      	movs	r0, #241	; 0xf1
 801103c:	f000 fce0 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8011040:	2037      	movs	r0, #55	; 0x37
 8011042:	f000 fcdd 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8011046:	2007      	movs	r0, #7
 8011048:	f000 fcda 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 801104c:	2010      	movs	r0, #16
 801104e:	f000 fcd7 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8011052:	2003      	movs	r0, #3
 8011054:	f000 fcd4 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8011058:	200e      	movs	r0, #14
 801105a:	f000 fcd1 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 801105e:	2009      	movs	r0, #9
 8011060:	f000 fcce 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8011064:	2000      	movs	r0, #0
 8011066:	f000 fccb 	bl	8011a00 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 801106a:	20e1      	movs	r0, #225	; 0xe1
 801106c:	f000 fcac 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8011070:	2000      	movs	r0, #0
 8011072:	f000 fcc5 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8011076:	200e      	movs	r0, #14
 8011078:	f000 fcc2 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 801107c:	2014      	movs	r0, #20
 801107e:	f000 fcbf 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8011082:	2003      	movs	r0, #3
 8011084:	f000 fcbc 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8011088:	2011      	movs	r0, #17
 801108a:	f000 fcb9 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 801108e:	2007      	movs	r0, #7
 8011090:	f000 fcb6 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8011094:	2031      	movs	r0, #49	; 0x31
 8011096:	f000 fcb3 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 801109a:	20c1      	movs	r0, #193	; 0xc1
 801109c:	f000 fcb0 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80110a0:	2048      	movs	r0, #72	; 0x48
 80110a2:	f000 fcad 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80110a6:	2008      	movs	r0, #8
 80110a8:	f000 fcaa 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80110ac:	200f      	movs	r0, #15
 80110ae:	f000 fca7 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80110b2:	200c      	movs	r0, #12
 80110b4:	f000 fca4 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80110b8:	2031      	movs	r0, #49	; 0x31
 80110ba:	f000 fca1 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80110be:	2036      	movs	r0, #54	; 0x36
 80110c0:	f000 fc9e 	bl	8011a00 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80110c4:	200f      	movs	r0, #15
 80110c6:	f000 fc9b 	bl	8011a00 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80110ca:	2011      	movs	r0, #17
 80110cc:	f000 fc7c 	bl	80119c8 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80110d0:	2029      	movs	r0, #41	; 0x29
 80110d2:	f000 fc79 	bl	80119c8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80110d6:	202c      	movs	r0, #44	; 0x2c
 80110d8:	f000 fc92 	bl	8011a00 <ILI9341_Send_Data>
}
 80110dc:	bf00      	nop
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	48000800 	.word	0x48000800

080110e4 <ILI9341_SPI_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI3;
 80110e8:	4b18      	ldr	r3, [pc, #96]	; (801114c <ILI9341_SPI_Init+0x68>)
 80110ea:	4a19      	ldr	r2, [pc, #100]	; (8011150 <ILI9341_SPI_Init+0x6c>)
 80110ec:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 80110ee:	4b17      	ldr	r3, [pc, #92]	; (801114c <ILI9341_SPI_Init+0x68>)
 80110f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80110f4:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 80110f6:	4b15      	ldr	r3, [pc, #84]	; (801114c <ILI9341_SPI_Init+0x68>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80110fc:	4b13      	ldr	r3, [pc, #76]	; (801114c <ILI9341_SPI_Init+0x68>)
 80110fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011102:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8011104:	4b11      	ldr	r3, [pc, #68]	; (801114c <ILI9341_SPI_Init+0x68>)
 8011106:	2200      	movs	r2, #0
 8011108:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 801110a:	4b10      	ldr	r3, [pc, #64]	; (801114c <ILI9341_SPI_Init+0x68>)
 801110c:	2200      	movs	r2, #0
 801110e:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8011110:	4b0e      	ldr	r3, [pc, #56]	; (801114c <ILI9341_SPI_Init+0x68>)
 8011112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011116:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8011118:	4b0c      	ldr	r3, [pc, #48]	; (801114c <ILI9341_SPI_Init+0x68>)
 801111a:	2200      	movs	r2, #0
 801111c:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 801111e:	4b0b      	ldr	r3, [pc, #44]	; (801114c <ILI9341_SPI_Init+0x68>)
 8011120:	2200      	movs	r2, #0
 8011122:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8011124:	4b09      	ldr	r3, [pc, #36]	; (801114c <ILI9341_SPI_Init+0x68>)
 8011126:	2200      	movs	r2, #0
 8011128:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 801112a:	4b08      	ldr	r3, [pc, #32]	; (801114c <ILI9341_SPI_Init+0x68>)
 801112c:	2200      	movs	r2, #0
 801112e:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8011130:	4b06      	ldr	r3, [pc, #24]	; (801114c <ILI9341_SPI_Init+0x68>)
 8011132:	220a      	movs	r2, #10
 8011134:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK)
 8011136:	4805      	ldr	r0, [pc, #20]	; (801114c <ILI9341_SPI_Init+0x68>)
 8011138:	f7f9 fa14 	bl	800a564 <HAL_SPI_Init>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d001      	beq.n	8011146 <ILI9341_SPI_Init+0x62>
	{
		Error_Handler();
 8011142:	f7f3 fa27 	bl	8004594 <Error_Handler>
	}
}
 8011146:	bf00      	nop
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20009978 	.word	0x20009978
 8011150:	40003c00 	.word	0x40003c00

08011154 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 801115e:	1df9      	adds	r1, r7, #7
 8011160:	2301      	movs	r3, #1
 8011162:	2201      	movs	r2, #1
 8011164:	4803      	ldr	r0, [pc, #12]	; (8011174 <ILI9341_SPI_Send+0x20>)
 8011166:	f7f9 faa8 	bl	800a6ba <HAL_SPI_Transmit>
}
 801116a:	bf00      	nop
 801116c:	3708      	adds	r7, #8
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	20009978 	.word	0x20009978

08011178 <ILI9341_Reset>:
	TFT_CS_ON;
	HAL_SPI_Transmit(&lcd_spi, &data, size, 10);
}

void ILI9341_Reset()
{
 8011178:	b580      	push	{r7, lr}
 801117a:	af00      	add	r7, sp, #0
	SD_CS_OFF;
 801117c:	2201      	movs	r2, #1
 801117e:	2108      	movs	r1, #8
 8011180:	4811      	ldr	r0, [pc, #68]	; (80111c8 <ILI9341_Reset+0x50>)
 8011182:	f7f6 f851 	bl	8007228 <HAL_GPIO_WritePin>

	TFT_RESET_ON;
 8011186:	2200      	movs	r2, #0
 8011188:	f44f 7180 	mov.w	r1, #256	; 0x100
 801118c:	480e      	ldr	r0, [pc, #56]	; (80111c8 <ILI9341_Reset+0x50>)
 801118e:	f7f6 f84b 	bl	8007228 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8011192:	2032      	movs	r0, #50	; 0x32
 8011194:	f7f4 f858 	bl	8005248 <HAL_Delay>
	TFT_RESET_OFF;
 8011198:	2201      	movs	r2, #1
 801119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801119e:	480a      	ldr	r0, [pc, #40]	; (80111c8 <ILI9341_Reset+0x50>)
 80111a0:	f7f6 f842 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80111a4:	2200      	movs	r2, #0
 80111a6:	2180      	movs	r1, #128	; 0x80
 80111a8:	4807      	ldr	r0, [pc, #28]	; (80111c8 <ILI9341_Reset+0x50>)
 80111aa:	f7f6 f83d 	bl	8007228 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80111ae:	2032      	movs	r0, #50	; 0x32
 80111b0:	f7f4 f84a 	bl	8005248 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80111b4:	2001      	movs	r0, #1
 80111b6:	f000 fc07 	bl	80119c8 <ILI9341_Send_Command>
	TFT_CS_OFF;
 80111ba:	2201      	movs	r2, #1
 80111bc:	2180      	movs	r1, #128	; 0x80
 80111be:	4802      	ldr	r0, [pc, #8]	; (80111c8 <ILI9341_Reset+0x50>)
 80111c0:	f7f6 f832 	bl	8007228 <HAL_GPIO_WritePin>
}
 80111c4:	bf00      	nop
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	48000800 	.word	0x48000800

080111cc <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	4603      	mov	r3, r0
 80111d4:	71fb      	strb	r3, [r7, #7]
	SD_CS_OFF;
 80111d6:	2201      	movs	r2, #1
 80111d8:	2108      	movs	r1, #8
 80111da:	483a      	ldr	r0, [pc, #232]	; (80112c4 <ILI9341_Set_Rotation+0xf8>)
 80111dc:	f7f6 f824 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80111e0:	2200      	movs	r2, #0
 80111e2:	2180      	movs	r1, #128	; 0x80
 80111e4:	4837      	ldr	r0, [pc, #220]	; (80112c4 <ILI9341_Set_Rotation+0xf8>)
 80111e6:	f7f6 f81f 	bl	8007228 <HAL_GPIO_WritePin>
	m_rotacion=rotation;
 80111ea:	4a37      	ldr	r2, [pc, #220]	; (80112c8 <ILI9341_Set_Rotation+0xfc>)
 80111ec:	79fb      	ldrb	r3, [r7, #7]
 80111ee:	7013      	strb	r3, [r2, #0]
	ILI9341_Send_Command(0x36);
 80111f0:	2036      	movs	r0, #54	; 0x36
 80111f2:	f000 fbe9 	bl	80119c8 <ILI9341_Send_Command>
	switch (rotation)
 80111f6:	79fb      	ldrb	r3, [r7, #7]
 80111f8:	2b06      	cmp	r3, #6
 80111fa:	d85e      	bhi.n	80112ba <ILI9341_Set_Rotation+0xee>
 80111fc:	a201      	add	r2, pc, #4	; (adr r2, 8011204 <ILI9341_Set_Rotation+0x38>)
 80111fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011202:	bf00      	nop
 8011204:	08011221 	.word	0x08011221
 8011208:	08011237 	.word	0x08011237
 801120c:	0801124d 	.word	0x0801124d
 8011210:	08011263 	.word	0x08011263
 8011214:	08011279 	.word	0x08011279
 8011218:	0801128f 	.word	0x0801128f
 801121c:	080112a5 	.word	0x080112a5
	{
	case 0:
	//	ILI9341_Send_Data(0x048);
		ILI9341_Send_Data(0x088);
 8011220:	2088      	movs	r0, #136	; 0x88
 8011222:	f000 fbed 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 240;
 8011226:	4b29      	ldr	r3, [pc, #164]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 8011228:	22f0      	movs	r2, #240	; 0xf0
 801122a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 801122c:	4b28      	ldr	r3, [pc, #160]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 801122e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011232:	601a      	str	r2, [r3, #0]
		break;
 8011234:	e041      	b.n	80112ba <ILI9341_Set_Rotation+0xee>
	case 1:
		ILI9341_Send_Data(0x28);
 8011236:	2028      	movs	r0, #40	; 0x28
 8011238:	f000 fbe2 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 320;
 801123c:	4b23      	ldr	r3, [pc, #140]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 801123e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011242:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8011244:	4b22      	ldr	r3, [pc, #136]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 8011246:	22f0      	movs	r2, #240	; 0xf0
 8011248:	601a      	str	r2, [r3, #0]
		break;
 801124a:	e036      	b.n	80112ba <ILI9341_Set_Rotation+0xee>
	case 2:
		ILI9341_Send_Data(0x88);
 801124c:	2088      	movs	r0, #136	; 0x88
 801124e:	f000 fbd7 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 240;
 8011252:	4b1e      	ldr	r3, [pc, #120]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 8011254:	22f0      	movs	r2, #240	; 0xf0
 8011256:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8011258:	4b1d      	ldr	r3, [pc, #116]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 801125a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801125e:	601a      	str	r2, [r3, #0]
		break;
 8011260:	e02b      	b.n	80112ba <ILI9341_Set_Rotation+0xee>
	case 3:
		ILI9341_Send_Data(0xE8);
 8011262:	20e8      	movs	r0, #232	; 0xe8
 8011264:	f000 fbcc 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 320;
 8011268:	4b18      	ldr	r3, [pc, #96]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 801126a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801126e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8011270:	4b17      	ldr	r3, [pc, #92]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 8011272:	22f0      	movs	r2, #240	; 0xf0
 8011274:	601a      	str	r2, [r3, #0]
		break;
 8011276:	e020      	b.n	80112ba <ILI9341_Set_Rotation+0xee>
	case 4:
		ILI9341_Send_Data(0xB8);
 8011278:	20b8      	movs	r0, #184	; 0xb8
 801127a:	f000 fbc1 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 320;
 801127e:	4b13      	ldr	r3, [pc, #76]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 8011280:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011284:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8011286:	4b12      	ldr	r3, [pc, #72]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 8011288:	22f0      	movs	r2, #240	; 0xf0
 801128a:	601a      	str	r2, [r3, #0]
		break;
 801128c:	e015      	b.n	80112ba <ILI9341_Set_Rotation+0xee>
	case 5:
		ILI9341_Send_Data(0x6c);
 801128e:	206c      	movs	r0, #108	; 0x6c
 8011290:	f000 fbb6 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 320;
 8011294:	4b0d      	ldr	r3, [pc, #52]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 8011296:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801129a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 801129c:	4b0c      	ldr	r3, [pc, #48]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 801129e:	22f0      	movs	r2, #240	; 0xf0
 80112a0:	601a      	str	r2, [r3, #0]
		break;
 80112a2:	e00a      	b.n	80112ba <ILI9341_Set_Rotation+0xee>
	case 6:
		ILI9341_Send_Data(0x08);
 80112a4:	2008      	movs	r0, #8
 80112a6:	f000 fbab 	bl	8011a00 <ILI9341_Send_Data>
		X_SIZE = 240;
 80112aa:	4b08      	ldr	r3, [pc, #32]	; (80112cc <ILI9341_Set_Rotation+0x100>)
 80112ac:	22f0      	movs	r2, #240	; 0xf0
 80112ae:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80112b0:	4b07      	ldr	r3, [pc, #28]	; (80112d0 <ILI9341_Set_Rotation+0x104>)
 80112b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112b6:	601a      	str	r2, [r3, #0]
		break;
 80112b8:	bf00      	nop
	}
}
 80112ba:	bf00      	nop
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	48000800 	.word	0x48000800
 80112c8:	20009974 	.word	0x20009974
 80112cc:	20000028 	.word	0x20000028
 80112d0:	2000002c 	.word	0x2000002c

080112d4 <ILI9341_Set_Address>:
	ILI9341_SPI_Send(data >> 8);
	ILI9341_SPI_Send(data);
}

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	603b      	str	r3, [r7, #0]
	unsigned char data[3];

	SD_CS_OFF;
 80112e2:	2201      	movs	r2, #1
 80112e4:	2108      	movs	r1, #8
 80112e6:	4830      	ldr	r0, [pc, #192]	; (80113a8 <ILI9341_Set_Address+0xd4>)
 80112e8:	f7f5 ff9e 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80112ec:	2200      	movs	r2, #0
 80112ee:	2180      	movs	r1, #128	; 0x80
 80112f0:	482d      	ldr	r0, [pc, #180]	; (80113a8 <ILI9341_Set_Address+0xd4>)
 80112f2:	f7f5 ff99 	bl	8007228 <HAL_GPIO_WritePin>

	TFT_DC_COMMAND;
 80112f6:	2200      	movs	r2, #0
 80112f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80112fc:	482a      	ldr	r0, [pc, #168]	; (80113a8 <ILI9341_Set_Address+0xd4>)
 80112fe:	f7f5 ff93 	bl	8007228 <HAL_GPIO_WritePin>
	data[0]=0x2A;
 8011302:	232a      	movs	r3, #42	; 0x2a
 8011304:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(&lcd_spi, data,1, 5);
 8011306:	f107 0114 	add.w	r1, r7, #20
 801130a:	2305      	movs	r3, #5
 801130c:	2201      	movs	r2, #1
 801130e:	4827      	ldr	r0, [pc, #156]	; (80113ac <ILI9341_Set_Address+0xd8>)
 8011310:	f7f9 f9d3 	bl	800a6ba <HAL_SPI_Transmit>

	TFT_DC_DATA;
 8011314:	2201      	movs	r2, #1
 8011316:	f44f 7100 	mov.w	r1, #512	; 0x200
 801131a:	4823      	ldr	r0, [pc, #140]	; (80113a8 <ILI9341_Set_Address+0xd4>)
 801131c:	f7f5 ff84 	bl	8007228 <HAL_GPIO_WritePin>
	data[0]=x1>>8;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	0a1b      	lsrs	r3, r3, #8
 8011324:	b2db      	uxtb	r3, r3
 8011326:	753b      	strb	r3, [r7, #20]
	data[1]=x1;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	b2db      	uxtb	r3, r3
 801132c:	757b      	strb	r3, [r7, #21]
	data[2]=x2>>8;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	0a1b      	lsrs	r3, r3, #8
 8011332:	b2db      	uxtb	r3, r3
 8011334:	75bb      	strb	r3, [r7, #22]
	data[3]=x2;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(&lcd_spi,data,4,5);
 801133c:	f107 0114 	add.w	r1, r7, #20
 8011340:	2305      	movs	r3, #5
 8011342:	2204      	movs	r2, #4
 8011344:	4819      	ldr	r0, [pc, #100]	; (80113ac <ILI9341_Set_Address+0xd8>)
 8011346:	f7f9 f9b8 	bl	800a6ba <HAL_SPI_Transmit>

	TFT_DC_COMMAND;
 801134a:	2200      	movs	r2, #0
 801134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011350:	4815      	ldr	r0, [pc, #84]	; (80113a8 <ILI9341_Set_Address+0xd4>)
 8011352:	f7f5 ff69 	bl	8007228 <HAL_GPIO_WritePin>
	data[0]=0x2B;
 8011356:	232b      	movs	r3, #43	; 0x2b
 8011358:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(&lcd_spi,data,1,1);
 801135a:	f107 0114 	add.w	r1, r7, #20
 801135e:	2301      	movs	r3, #1
 8011360:	2201      	movs	r2, #1
 8011362:	4812      	ldr	r0, [pc, #72]	; (80113ac <ILI9341_Set_Address+0xd8>)
 8011364:	f7f9 f9a9 	bl	800a6ba <HAL_SPI_Transmit>

	TFT_DC_DATA;
 8011368:	2201      	movs	r2, #1
 801136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801136e:	480e      	ldr	r0, [pc, #56]	; (80113a8 <ILI9341_Set_Address+0xd4>)
 8011370:	f7f5 ff5a 	bl	8007228 <HAL_GPIO_WritePin>
	data[0]=y1>>8;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	0a1b      	lsrs	r3, r3, #8
 8011378:	b2db      	uxtb	r3, r3
 801137a:	753b      	strb	r3, [r7, #20]
	data[1]=y1;
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	b2db      	uxtb	r3, r3
 8011380:	757b      	strb	r3, [r7, #21]
	data[2]=y2>>8;
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	0a1b      	lsrs	r3, r3, #8
 8011386:	b2db      	uxtb	r3, r3
 8011388:	75bb      	strb	r3, [r7, #22]
	data[3]=y2;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	b2db      	uxtb	r3, r3
 801138e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(&lcd_spi,data,4,5);
 8011390:	f107 0114 	add.w	r1, r7, #20
 8011394:	2305      	movs	r3, #5
 8011396:	2204      	movs	r2, #4
 8011398:	4804      	ldr	r0, [pc, #16]	; (80113ac <ILI9341_Set_Address+0xd8>)
 801139a:	f7f9 f98e 	bl	800a6ba <HAL_SPI_Transmit>
}
 801139e:	bf00      	nop
 80113a0:	3718      	adds	r7, #24
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	48000800 	.word	0x48000800
 80113ac:	20009978 	.word	0x20009978

080113b0 <ILI9341_Draw_Pixel>:
	ILI9341_Set_Address(0,0,X_SIZE-1,Y_SIZE-1);
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
}
*/
void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
	SD_CS_OFF;
 80113bc:	2201      	movs	r2, #1
 80113be:	2108      	movs	r1, #8
 80113c0:	4819      	ldr	r0, [pc, #100]	; (8011428 <ILI9341_Draw_Pixel+0x78>)
 80113c2:	f7f5 ff31 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80113c6:	2200      	movs	r2, #0
 80113c8:	2180      	movs	r1, #128	; 0x80
 80113ca:	4817      	ldr	r0, [pc, #92]	; (8011428 <ILI9341_Draw_Pixel+0x78>)
 80113cc:	f7f5 ff2c 	bl	8007228 <HAL_GPIO_WritePin>

	y=239-y;
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80113d6:	60bb      	str	r3, [r7, #8]
	ILI9341_Set_Address(x,y,X_SIZE-1,Y_SIZE-1);
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	68b9      	ldr	r1, [r7, #8]
 80113dc:	4b13      	ldr	r3, [pc, #76]	; (801142c <ILI9341_Draw_Pixel+0x7c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	1e5a      	subs	r2, r3, #1
 80113e2:	4b13      	ldr	r3, [pc, #76]	; (8011430 <ILI9341_Draw_Pixel+0x80>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	3b01      	subs	r3, #1
 80113e8:	f7ff ff74 	bl	80112d4 <ILI9341_Set_Address>
	TFT_DC_COMMAND;
 80113ec:	2200      	movs	r2, #0
 80113ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80113f2:	480d      	ldr	r0, [pc, #52]	; (8011428 <ILI9341_Draw_Pixel+0x78>)
 80113f4:	f7f5 ff18 	bl	8007228 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80113f8:	202c      	movs	r0, #44	; 0x2c
 80113fa:	f7ff feab 	bl	8011154 <ILI9341_SPI_Send>
	TFT_DC_DATA;
 80113fe:	2201      	movs	r2, #1
 8011400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011404:	4808      	ldr	r0, [pc, #32]	; (8011428 <ILI9341_Draw_Pixel+0x78>)
 8011406:	f7f5 ff0f 	bl	8007228 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	0a1b      	lsrs	r3, r3, #8
 801140e:	b2db      	uxtb	r3, r3
 8011410:	4618      	mov	r0, r3
 8011412:	f7ff fe9f 	bl	8011154 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	b2db      	uxtb	r3, r3
 801141a:	4618      	mov	r0, r3
 801141c:	f7ff fe9a 	bl	8011154 <ILI9341_SPI_Send>
}
 8011420:	bf00      	nop
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	48000800 	.word	0x48000800
 801142c:	20000028 	.word	0x20000028
 8011430:	2000002c 	.word	0x2000002c

08011434 <ILI9341_Draw_Circle>:
		}
	}
}

void ILI9341_Draw_Circle(unsigned int x0, unsigned int y0, int r, unsigned int color, unsigned char flood)
{
 8011434:	b590      	push	{r4, r7, lr}
 8011436:	b08f      	sub	sp, #60	; 0x3c
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	607a      	str	r2, [r7, #4]
 8011440:	603b      	str	r3, [r7, #0]
	SD_CS_OFF;
 8011442:	2201      	movs	r2, #1
 8011444:	2108      	movs	r1, #8
 8011446:	4899      	ldr	r0, [pc, #612]	; (80116ac <ILI9341_Draw_Circle+0x278>)
 8011448:	f7f5 feee 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801144c:	2200      	movs	r2, #0
 801144e:	2180      	movs	r1, #128	; 0x80
 8011450:	4896      	ldr	r0, [pc, #600]	; (80116ac <ILI9341_Draw_Circle+0x278>)
 8011452:	f7f5 fee9 	bl	8007228 <HAL_GPIO_WritePin>

	y0=240-y0;
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 801145c:	60bb      	str	r3, [r7, #8]

	int f = 1 - r;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f1c3 0301 	rsb	r3, r3, #1
 8011464:	637b      	str	r3, [r7, #52]	; 0x34
	int ddF_x = 1;
 8011466:	2301      	movs	r3, #1
 8011468:	633b      	str	r3, [r7, #48]	; 0x30
	int ddF_y = -2 * r;
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	4613      	mov	r3, r2
 801146e:	07db      	lsls	r3, r3, #31
 8011470:	1a9b      	subs	r3, r3, r2
 8011472:	005b      	lsls	r3, r3, #1
 8011474:	62fb      	str	r3, [r7, #44]	; 0x2c
	int x = 0;
 8011476:	2300      	movs	r3, #0
 8011478:	62bb      	str	r3, [r7, #40]	; 0x28
	int y = r;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	627b      	str	r3, [r7, #36]	; 0x24
	if (flood == 0)
 801147e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011482:	2b00      	cmp	r3, #0
 8011484:	f040 8097 	bne.w	80115b6 <ILI9341_Draw_Circle+0x182>
	{
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	4413      	add	r3, r2
 8011490:	683a      	ldr	r2, [r7, #0]
 8011492:	4619      	mov	r1, r3
 8011494:	f7ff ff8c 	bl	80113b0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	4619      	mov	r1, r3
 80114a4:	f7ff ff84 	bl	80113b0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 + r, y0, color);
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	4413      	add	r3, r2
 80114ae:	4618      	mov	r0, r3
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	683a      	ldr	r2, [r7, #0]
 80114b4:	4619      	mov	r1, r3
 80114b6:	f7ff ff7b 	bl	80113b0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 - r, y0, color);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68fa      	ldr	r2, [r7, #12]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	4618      	mov	r0, r3
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	4619      	mov	r1, r3
 80114c8:	f7ff ff72 	bl	80113b0 <ILI9341_Draw_Pixel>
		while (x < y) {
 80114cc:	e06e      	b.n	80115ac <ILI9341_Draw_Circle+0x178>
			if (f >= 0) {
 80114ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	db09      	blt.n	80114e8 <ILI9341_Draw_Circle+0xb4>
				y--;
 80114d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d6:	3b01      	subs	r3, #1
 80114d8:	627b      	str	r3, [r7, #36]	; 0x24
				ddF_y += 2;
 80114da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114dc:	3302      	adds	r3, #2
 80114de:	62fb      	str	r3, [r7, #44]	; 0x2c
				f += ddF_y;
 80114e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e4:	4413      	add	r3, r2
 80114e6:	637b      	str	r3, [r7, #52]	; 0x34
			}
			x++;
 80114e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ea:	3301      	adds	r3, #1
 80114ec:	62bb      	str	r3, [r7, #40]	; 0x28
			ddF_x += 2;
 80114ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f0:	3302      	adds	r3, #2
 80114f2:	633b      	str	r3, [r7, #48]	; 0x30
			f += ddF_x;
 80114f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	4413      	add	r3, r2
 80114fa:	637b      	str	r3, [r7, #52]	; 0x34
			ILI9341_Draw_Pixel(x0 + x, y0 + y, color);
 80114fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	4413      	add	r3, r2
 8011502:	4618      	mov	r0, r3
 8011504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	4413      	add	r3, r2
 801150a:	683a      	ldr	r2, [r7, #0]
 801150c:	4619      	mov	r1, r3
 801150e:	f7ff ff4f 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 + y, color);
 8011512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	4618      	mov	r0, r3
 801151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	4413      	add	r3, r2
 8011520:	683a      	ldr	r2, [r7, #0]
 8011522:	4619      	mov	r1, r3
 8011524:	f7ff ff44 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + x, y0 - y, color);
 8011528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	4413      	add	r3, r2
 801152e:	4618      	mov	r0, r3
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	683a      	ldr	r2, [r7, #0]
 8011538:	4619      	mov	r1, r3
 801153a:	f7ff ff39 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 - y, color);
 801153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011540:	68fa      	ldr	r2, [r7, #12]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	4618      	mov	r0, r3
 8011546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011548:	68ba      	ldr	r2, [r7, #8]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	4619      	mov	r1, r3
 8011550:	f7ff ff2e 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 + x, color);
 8011554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	4413      	add	r3, r2
 801155a:	4618      	mov	r0, r3
 801155c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	4413      	add	r3, r2
 8011562:	683a      	ldr	r2, [r7, #0]
 8011564:	4619      	mov	r1, r3
 8011566:	f7ff ff23 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 + x, color);
 801156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	1ad3      	subs	r3, r2, r3
 8011570:	4618      	mov	r0, r3
 8011572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	4413      	add	r3, r2
 8011578:	683a      	ldr	r2, [r7, #0]
 801157a:	4619      	mov	r1, r3
 801157c:	f7ff ff18 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 - x, color);
 8011580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	4413      	add	r3, r2
 8011586:	4618      	mov	r0, r3
 8011588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158a:	68ba      	ldr	r2, [r7, #8]
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	4619      	mov	r1, r3
 8011592:	f7ff ff0d 	bl	80113b0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 - x, color);
 8011596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011598:	68fa      	ldr	r2, [r7, #12]
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	4618      	mov	r0, r3
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	683a      	ldr	r2, [r7, #0]
 80115a6:	4619      	mov	r1, r3
 80115a8:	f7ff ff02 	bl	80113b0 <ILI9341_Draw_Pixel>
		while (x < y) {
 80115ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b0:	429a      	cmp	r2, r3
 80115b2:	db8c      	blt.n	80114ce <ILI9341_Draw_Circle+0x9a>
				ILI9341_SPI_Send(color >> 8);
				ILI9341_SPI_Send(color);
			}
		}
	}
}
 80115b4:	e138      	b.n	8011828 <ILI9341_Draw_Circle+0x3f4>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	4413      	add	r3, r2
 80115be:	683a      	ldr	r2, [r7, #0]
 80115c0:	4619      	mov	r1, r3
 80115c2:	f7ff fef5 	bl	80113b0 <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4619      	mov	r1, r3
 80115d2:	f7ff feed 	bl	80113b0 <ILI9341_Draw_Pixel>
		ILI9341_Set_Address(x0 - r, y0, x0 + r, y0);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	1ad0      	subs	r0, r2, r3
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	441a      	add	r2, r3
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	68b9      	ldr	r1, [r7, #8]
 80115e6:	f7ff fe75 	bl	80112d4 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 80115ea:	2200      	movs	r2, #0
 80115ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115f0:	482e      	ldr	r0, [pc, #184]	; (80116ac <ILI9341_Draw_Circle+0x278>)
 80115f2:	f7f5 fe19 	bl	8007228 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 80115f6:	202c      	movs	r0, #44	; 0x2c
 80115f8:	f7ff fdac 	bl	8011154 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 80115fc:	2201      	movs	r2, #1
 80115fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011602:	482a      	ldr	r0, [pc, #168]	; (80116ac <ILI9341_Draw_Circle+0x278>)
 8011604:	f7f5 fe10 	bl	8007228 <HAL_GPIO_WritePin>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++)
 8011608:	2300      	movs	r3, #0
 801160a:	623b      	str	r3, [r7, #32]
 801160c:	e00d      	b.n	801162a <ILI9341_Draw_Circle+0x1f6>
			ILI9341_SPI_Send(color >> 8);
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	0a1b      	lsrs	r3, r3, #8
 8011612:	b2db      	uxtb	r3, r3
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff fd9d 	bl	8011154 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(color);
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	b2db      	uxtb	r3, r3
 801161e:	4618      	mov	r0, r3
 8011620:	f7ff fd98 	bl	8011154 <ILI9341_SPI_Send>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++)
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	3301      	adds	r3, #1
 8011628:	623b      	str	r3, [r7, #32]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	005b      	lsls	r3, r3, #1
 801162e:	3301      	adds	r3, #1
 8011630:	461a      	mov	r2, r3
 8011632:	6a3b      	ldr	r3, [r7, #32]
 8011634:	4293      	cmp	r3, r2
 8011636:	d3ea      	bcc.n	801160e <ILI9341_Draw_Circle+0x1da>
		while (x < y) {
 8011638:	e0f1      	b.n	801181e <ILI9341_Draw_Circle+0x3ea>
			if (f >= 0) {
 801163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801163c:	2b00      	cmp	r3, #0
 801163e:	db09      	blt.n	8011654 <ILI9341_Draw_Circle+0x220>
				y--;
 8011640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011642:	3b01      	subs	r3, #1
 8011644:	627b      	str	r3, [r7, #36]	; 0x24
				ddF_y += 2;
 8011646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011648:	3302      	adds	r3, #2
 801164a:	62fb      	str	r3, [r7, #44]	; 0x2c
				f += ddF_y;
 801164c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011650:	4413      	add	r3, r2
 8011652:	637b      	str	r3, [r7, #52]	; 0x34
			x++;
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	3301      	adds	r3, #1
 8011658:	62bb      	str	r3, [r7, #40]	; 0x28
			ddF_x += 2;
 801165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165c:	3302      	adds	r3, #2
 801165e:	633b      	str	r3, [r7, #48]	; 0x30
			f += ddF_x;
 8011660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011664:	4413      	add	r3, r2
 8011666:	637b      	str	r3, [r7, #52]	; 0x34
			ILI9341_Set_Address(x0 - x, y0 + y, x0 + x, y0 + y);
 8011668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	1ad0      	subs	r0, r2, r3
 801166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	18d1      	adds	r1, r2, r3
 8011674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	18d4      	adds	r4, r2, r3
 801167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	4413      	add	r3, r2
 8011680:	4622      	mov	r2, r4
 8011682:	f7ff fe27 	bl	80112d4 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 8011686:	2200      	movs	r2, #0
 8011688:	f44f 7100 	mov.w	r1, #512	; 0x200
 801168c:	4807      	ldr	r0, [pc, #28]	; (80116ac <ILI9341_Draw_Circle+0x278>)
 801168e:	f7f5 fdcb 	bl	8007228 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8011692:	202c      	movs	r0, #44	; 0x2c
 8011694:	f7ff fd5e 	bl	8011154 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 8011698:	2201      	movs	r2, #1
 801169a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801169e:	4803      	ldr	r0, [pc, #12]	; (80116ac <ILI9341_Draw_Circle+0x278>)
 80116a0:	f7f5 fdc2 	bl	8007228 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 80116a4:	2300      	movs	r3, #0
 80116a6:	61fb      	str	r3, [r7, #28]
 80116a8:	e010      	b.n	80116cc <ILI9341_Draw_Circle+0x298>
 80116aa:	bf00      	nop
 80116ac:	48000800 	.word	0x48000800
				ILI9341_SPI_Send(color >> 8);
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	0a1b      	lsrs	r3, r3, #8
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7ff fd4c 	bl	8011154 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7ff fd47 	bl	8011154 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	3301      	adds	r3, #1
 80116ca:	61fb      	str	r3, [r7, #28]
 80116cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	3301      	adds	r3, #1
 80116d2:	461a      	mov	r2, r3
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d3ea      	bcc.n	80116b0 <ILI9341_Draw_Circle+0x27c>
			ILI9341_Set_Address(x0 - x, y0 - y, x0 + x, y0 - y);
 80116da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	1ad0      	subs	r0, r2, r3
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	68ba      	ldr	r2, [r7, #8]
 80116e4:	1ad1      	subs	r1, r2, r3
 80116e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	18d4      	adds	r4, r2, r3
 80116ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	4622      	mov	r2, r4
 80116f4:	f7ff fdee 	bl	80112d4 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 80116f8:	2200      	movs	r2, #0
 80116fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80116fe:	484c      	ldr	r0, [pc, #304]	; (8011830 <ILI9341_Draw_Circle+0x3fc>)
 8011700:	f7f5 fd92 	bl	8007228 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8011704:	202c      	movs	r0, #44	; 0x2c
 8011706:	f7ff fd25 	bl	8011154 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 801170a:	2201      	movs	r2, #1
 801170c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011710:	4847      	ldr	r0, [pc, #284]	; (8011830 <ILI9341_Draw_Circle+0x3fc>)
 8011712:	f7f5 fd89 	bl	8007228 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8011716:	2300      	movs	r3, #0
 8011718:	61bb      	str	r3, [r7, #24]
 801171a:	e00d      	b.n	8011738 <ILI9341_Draw_Circle+0x304>
				ILI9341_SPI_Send(color >> 8);
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	0a1b      	lsrs	r3, r3, #8
 8011720:	b2db      	uxtb	r3, r3
 8011722:	4618      	mov	r0, r3
 8011724:	f7ff fd16 	bl	8011154 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	b2db      	uxtb	r3, r3
 801172c:	4618      	mov	r0, r3
 801172e:	f7ff fd11 	bl	8011154 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	3301      	adds	r3, #1
 8011736:	61bb      	str	r3, [r7, #24]
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	005b      	lsls	r3, r3, #1
 801173c:	3301      	adds	r3, #1
 801173e:	461a      	mov	r2, r3
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	4293      	cmp	r3, r2
 8011744:	d3ea      	bcc.n	801171c <ILI9341_Draw_Circle+0x2e8>
			ILI9341_Set_Address(x0 - y, y0 + x, x0 + y, y0 + x);
 8011746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	1ad0      	subs	r0, r2, r3
 801174c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	18d1      	adds	r1, r2, r3
 8011752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	18d4      	adds	r4, r2, r3
 8011758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	4413      	add	r3, r2
 801175e:	4622      	mov	r2, r4
 8011760:	f7ff fdb8 	bl	80112d4 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 8011764:	2200      	movs	r2, #0
 8011766:	f44f 7100 	mov.w	r1, #512	; 0x200
 801176a:	4831      	ldr	r0, [pc, #196]	; (8011830 <ILI9341_Draw_Circle+0x3fc>)
 801176c:	f7f5 fd5c 	bl	8007228 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8011770:	202c      	movs	r0, #44	; 0x2c
 8011772:	f7ff fcef 	bl	8011154 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 8011776:	2201      	movs	r2, #1
 8011778:	f44f 7100 	mov.w	r1, #512	; 0x200
 801177c:	482c      	ldr	r0, [pc, #176]	; (8011830 <ILI9341_Draw_Circle+0x3fc>)
 801177e:	f7f5 fd53 	bl	8007228 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8011782:	2300      	movs	r3, #0
 8011784:	617b      	str	r3, [r7, #20]
 8011786:	e00d      	b.n	80117a4 <ILI9341_Draw_Circle+0x370>
				ILI9341_SPI_Send(color >> 8);
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	0a1b      	lsrs	r3, r3, #8
 801178c:	b2db      	uxtb	r3, r3
 801178e:	4618      	mov	r0, r3
 8011790:	f7ff fce0 	bl	8011154 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	b2db      	uxtb	r3, r3
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff fcdb 	bl	8011154 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	3301      	adds	r3, #1
 80117a2:	617b      	str	r3, [r7, #20]
 80117a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	3301      	adds	r3, #1
 80117aa:	461a      	mov	r2, r3
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d3ea      	bcc.n	8011788 <ILI9341_Draw_Circle+0x354>
			ILI9341_Set_Address(x0 - y, y0 - x, x0 + y, y0 - x);
 80117b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	1ad0      	subs	r0, r2, r3
 80117b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ba:	68ba      	ldr	r2, [r7, #8]
 80117bc:	1ad1      	subs	r1, r2, r3
 80117be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	18d4      	adds	r4, r2, r3
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	68ba      	ldr	r2, [r7, #8]
 80117c8:	1ad3      	subs	r3, r2, r3
 80117ca:	4622      	mov	r2, r4
 80117cc:	f7ff fd82 	bl	80112d4 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 80117d0:	2200      	movs	r2, #0
 80117d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80117d6:	4816      	ldr	r0, [pc, #88]	; (8011830 <ILI9341_Draw_Circle+0x3fc>)
 80117d8:	f7f5 fd26 	bl	8007228 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 80117dc:	202c      	movs	r0, #44	; 0x2c
 80117de:	f7ff fcb9 	bl	8011154 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 80117e2:	2201      	movs	r2, #1
 80117e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80117e8:	4811      	ldr	r0, [pc, #68]	; (8011830 <ILI9341_Draw_Circle+0x3fc>)
 80117ea:	f7f5 fd1d 	bl	8007228 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 80117ee:	2300      	movs	r3, #0
 80117f0:	613b      	str	r3, [r7, #16]
 80117f2:	e00d      	b.n	8011810 <ILI9341_Draw_Circle+0x3dc>
				ILI9341_SPI_Send(color >> 8);
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	0a1b      	lsrs	r3, r3, #8
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7ff fcaa 	bl	8011154 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	b2db      	uxtb	r3, r3
 8011804:	4618      	mov	r0, r3
 8011806:	f7ff fca5 	bl	8011154 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	3301      	adds	r3, #1
 801180e:	613b      	str	r3, [r7, #16]
 8011810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	3301      	adds	r3, #1
 8011816:	461a      	mov	r2, r3
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	4293      	cmp	r3, r2
 801181c:	d3ea      	bcc.n	80117f4 <ILI9341_Draw_Circle+0x3c0>
		while (x < y) {
 801181e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011822:	429a      	cmp	r2, r3
 8011824:	f6ff af09 	blt.w	801163a <ILI9341_Draw_Circle+0x206>
}
 8011828:	bf00      	nop
 801182a:	373c      	adds	r7, #60	; 0x3c
 801182c:	46bd      	mov	sp, r7
 801182e:	bd90      	pop	{r4, r7, pc}
 8011830:	48000800 	.word	0x48000800

08011834 <ILI9341_Draw_String>:

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char* str, unsigned char size)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b086      	sub	sp, #24
 8011838:	af02      	add	r7, sp, #8
 801183a:	60f8      	str	r0, [r7, #12]
 801183c:	60b9      	str	r1, [r7, #8]
 801183e:	607a      	str	r2, [r7, #4]
 8011840:	603b      	str	r3, [r7, #0]
	SD_CS_OFF;
 8011842:	2201      	movs	r2, #1
 8011844:	2108      	movs	r1, #8
 8011846:	485d      	ldr	r0, [pc, #372]	; (80119bc <ILI9341_Draw_String+0x188>)
 8011848:	f7f5 fcee 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801184c:	2200      	movs	r2, #0
 801184e:	2180      	movs	r1, #128	; 0x80
 8011850:	485a      	ldr	r0, [pc, #360]	; (80119bc <ILI9341_Draw_String+0x188>)
 8011852:	f7f5 fce9 	bl	8007228 <HAL_GPIO_WritePin>

m_rotacion=0;
 8011856:	4b5a      	ldr	r3, [pc, #360]	; (80119c0 <ILI9341_Draw_String+0x18c>)
 8011858:	2200      	movs	r2, #0
 801185a:	701a      	strb	r2, [r3, #0]

	if(m_rotacion!=6) y=239-y-size*8;
 801185c:	4b58      	ldr	r3, [pc, #352]	; (80119c0 <ILI9341_Draw_String+0x18c>)
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	2b06      	cmp	r3, #6
 8011862:	d008      	beq.n	8011876 <ILI9341_Draw_String+0x42>
 8011864:	7f3b      	ldrb	r3, [r7, #28]
 8011866:	00db      	lsls	r3, r3, #3
 8011868:	461a      	mov	r2, r3
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	4413      	add	r3, r2
 801186e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8011872:	60bb      	str	r3, [r7, #8]
 8011874:	e008      	b.n	8011888 <ILI9341_Draw_String+0x54>
	else 			y=319-y-size*8;
 8011876:	7f3b      	ldrb	r3, [r7, #28]
 8011878:	00db      	lsls	r3, r3, #3
 801187a:	461a      	mov	r2, r3
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	4413      	add	r3, r2
 8011880:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8011884:	3301      	adds	r3, #1
 8011886:	60bb      	str	r3, [r7, #8]
	switch (size)
 8011888:	7f3b      	ldrb	r3, [r7, #28]
 801188a:	2b04      	cmp	r3, #4
 801188c:	d05f      	beq.n	801194e <ILI9341_Draw_String+0x11a>
 801188e:	2b04      	cmp	r3, #4
 8011890:	f300 808f 	bgt.w	80119b2 <ILI9341_Draw_String+0x17e>
 8011894:	2b01      	cmp	r3, #1
 8011896:	d027      	beq.n	80118e8 <ILI9341_Draw_String+0xb4>
 8011898:	2b02      	cmp	r3, #2
 801189a:	d02a      	beq.n	80118f2 <ILI9341_Draw_String+0xbe>
				x += hh*14;
				str++;
		}
		break;
	}
}
 801189c:	e089      	b.n	80119b2 <ILI9341_Draw_String+0x17e>
			if ((x+(size*8))>320)
 801189e:	7f3b      	ldrb	r3, [r7, #28]
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	461a      	mov	r2, r3
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	4413      	add	r3, r2
 80118a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80118ac:	d907      	bls.n	80118be <ILI9341_Draw_String+0x8a>
				x = 1;
 80118ae:	2301      	movs	r3, #1
 80118b0:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80118b2:	7f3b      	ldrb	r3, [r7, #28]
 80118b4:	00db      	lsls	r3, r3, #3
 80118b6:	461a      	mov	r2, r3
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	4413      	add	r3, r2
 80118bc:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	68b9      	ldr	r1, [r7, #8]
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	7f3a      	ldrb	r2, [r7, #28]
 80118c8:	9201      	str	r2, [sp, #4]
 80118ca:	9300      	str	r3, [sp, #0]
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	f000 f8b2 	bl	8011a38 <ILI9341_Draw_Char>
			x += size*8-2;
 80118d4:	7f3b      	ldrb	r3, [r7, #28]
 80118d6:	00db      	lsls	r3, r3, #3
 80118d8:	461a      	mov	r2, r3
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4413      	add	r3, r2
 80118de:	3b02      	subs	r3, #2
 80118e0:	60fb      	str	r3, [r7, #12]
			str++;
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	3301      	adds	r3, #1
 80118e6:	61bb      	str	r3, [r7, #24]
		while (*str)
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1d6      	bne.n	801189e <ILI9341_Draw_String+0x6a>
		break;
 80118f0:	e05f      	b.n	80119b2 <ILI9341_Draw_String+0x17e>
		hh=1;
 80118f2:	4b34      	ldr	r3, [pc, #208]	; (80119c4 <ILI9341_Draw_String+0x190>)
 80118f4:	2201      	movs	r2, #1
 80118f6:	701a      	strb	r2, [r3, #0]
		while (*str)
 80118f8:	e024      	b.n	8011944 <ILI9341_Draw_String+0x110>
			if ((x+(size*8))>320)
 80118fa:	7f3b      	ldrb	r3, [r7, #28]
 80118fc:	00db      	lsls	r3, r3, #3
 80118fe:	461a      	mov	r2, r3
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	4413      	add	r3, r2
 8011904:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011908:	d907      	bls.n	801191a <ILI9341_Draw_String+0xe6>
				x = 1;
 801190a:	2301      	movs	r3, #1
 801190c:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 801190e:	7f3b      	ldrb	r3, [r7, #28]
 8011910:	00db      	lsls	r3, r3, #3
 8011912:	461a      	mov	r2, r3
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	4413      	add	r3, r2
 8011918:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	68b9      	ldr	r1, [r7, #8]
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	7f3a      	ldrb	r2, [r7, #28]
 8011924:	9201      	str	r2, [sp, #4]
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	f000 f884 	bl	8011a38 <ILI9341_Draw_Char>
			x += hh*8;
 8011930:	4b24      	ldr	r3, [pc, #144]	; (80119c4 <ILI9341_Draw_String+0x190>)
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	461a      	mov	r2, r3
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	4413      	add	r3, r2
 801193c:	60fb      	str	r3, [r7, #12]
			str++;
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	3301      	adds	r3, #1
 8011942:	61bb      	str	r3, [r7, #24]
		while (*str)
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1d6      	bne.n	80118fa <ILI9341_Draw_String+0xc6>
		break;
 801194c:	e031      	b.n	80119b2 <ILI9341_Draw_String+0x17e>
		hh=1;
 801194e:	4b1d      	ldr	r3, [pc, #116]	; (80119c4 <ILI9341_Draw_String+0x190>)
 8011950:	2201      	movs	r2, #1
 8011952:	701a      	strb	r2, [r3, #0]
		while (*str)
 8011954:	e028      	b.n	80119a8 <ILI9341_Draw_String+0x174>
				if ((x+(size*8))>320)
 8011956:	7f3b      	ldrb	r3, [r7, #28]
 8011958:	00db      	lsls	r3, r3, #3
 801195a:	461a      	mov	r2, r3
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	4413      	add	r3, r2
 8011960:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011964:	d907      	bls.n	8011976 <ILI9341_Draw_String+0x142>
					x = 1;
 8011966:	2301      	movs	r3, #1
 8011968:	60fb      	str	r3, [r7, #12]
					y = y + (size*8);
 801196a:	7f3b      	ldrb	r3, [r7, #28]
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	461a      	mov	r2, r3
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	4413      	add	r3, r2
 8011974:	60bb      	str	r3, [r7, #8]
				ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	68b9      	ldr	r1, [r7, #8]
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	7f3a      	ldrb	r2, [r7, #28]
 8011980:	9201      	str	r2, [sp, #4]
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	f000 f856 	bl	8011a38 <ILI9341_Draw_Char>
				x += hh*14;
 801198c:	4b0d      	ldr	r3, [pc, #52]	; (80119c4 <ILI9341_Draw_String+0x190>)
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	461a      	mov	r2, r3
 8011992:	4613      	mov	r3, r2
 8011994:	00db      	lsls	r3, r3, #3
 8011996:	1a9b      	subs	r3, r3, r2
 8011998:	005b      	lsls	r3, r3, #1
 801199a:	461a      	mov	r2, r3
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	4413      	add	r3, r2
 80119a0:	60fb      	str	r3, [r7, #12]
				str++;
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	3301      	adds	r3, #1
 80119a6:	61bb      	str	r3, [r7, #24]
		while (*str)
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d1d2      	bne.n	8011956 <ILI9341_Draw_String+0x122>
		break;
 80119b0:	bf00      	nop
}
 80119b2:	bf00      	nop
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	48000800 	.word	0x48000800
 80119c0:	20009974 	.word	0x20009974
 80119c4:	20009975 	.word	0x20009975

080119c8 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	4603      	mov	r3, r0
 80119d0:	71fb      	strb	r3, [r7, #7]
	SD_CS_OFF;
 80119d2:	2201      	movs	r2, #1
 80119d4:	2108      	movs	r1, #8
 80119d6:	4809      	ldr	r0, [pc, #36]	; (80119fc <ILI9341_Send_Command+0x34>)
 80119d8:	f7f5 fc26 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80119dc:	2200      	movs	r2, #0
 80119de:	2180      	movs	r1, #128	; 0x80
 80119e0:	4806      	ldr	r0, [pc, #24]	; (80119fc <ILI9341_Send_Command+0x34>)
 80119e2:	f7f5 fc21 	bl	8007228 <HAL_GPIO_WritePin>

	Before_Sending_Command();
 80119e6:	f000 fa83 	bl	8011ef0 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 80119ea:	79fb      	ldrb	r3, [r7, #7]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ff fbb1 	bl	8011154 <ILI9341_SPI_Send>
}
 80119f2:	bf00      	nop
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	48000800 	.word	0x48000800

08011a00 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	4603      	mov	r3, r0
 8011a08:	71fb      	strb	r3, [r7, #7]
	SD_CS_OFF;
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	2108      	movs	r1, #8
 8011a0e:	4809      	ldr	r0, [pc, #36]	; (8011a34 <ILI9341_Send_Data+0x34>)
 8011a10:	f7f5 fc0a 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8011a14:	2200      	movs	r2, #0
 8011a16:	2180      	movs	r1, #128	; 0x80
 8011a18:	4806      	ldr	r0, [pc, #24]	; (8011a34 <ILI9341_Send_Data+0x34>)
 8011a1a:	f7f5 fc05 	bl	8007228 <HAL_GPIO_WritePin>

	Before_Sending_Data();
 8011a1e:	f000 fa4b 	bl	8011eb8 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8011a22:	79fb      	ldrb	r3, [r7, #7]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7ff fb95 	bl	8011154 <ILI9341_SPI_Send>
}
 8011a2a:	bf00      	nop
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	48000800 	.word	0x48000800

08011a38 <ILI9341_Draw_Char>:


void ILI9341_Draw_Char(int x, int y, unsigned int colorT, unsigned int colorF, unsigned char charcode, unsigned char size)
{
 8011a38:	b590      	push	{r4, r7, lr}
 8011a3a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	f507 7408 	add.w	r4, r7, #544	; 0x220
 8011a44:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8011a48:	6020      	str	r0, [r4, #0]
 8011a4a:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8011a4e:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
 8011a52:	6001      	str	r1, [r0, #0]
 8011a54:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8011a58:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 8011a5c:	600a      	str	r2, [r1, #0]
 8011a5e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011a62:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8011a66:	6013      	str	r3, [r2, #0]
	SD_CS_OFF;
 8011a68:	2201      	movs	r2, #1
 8011a6a:	2108      	movs	r1, #8
 8011a6c:	48b2      	ldr	r0, [pc, #712]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011a6e:	f7f5 fbdb 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8011a72:	2200      	movs	r2, #0
 8011a74:	2180      	movs	r1, #128	; 0x80
 8011a76:	48b0      	ldr	r0, [pc, #704]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011a78:	f7f5 fbd6 	bl	8007228 <HAL_GPIO_WritePin>

	int i,h;
	unsigned char data[512];
	unsigned char Ch=colorT>>8;
 8011a7c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011a80:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	0a1b      	lsrs	r3, r3, #8
 8011a88:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	unsigned char Cl=colorT;
 8011a8c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011a90:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	unsigned char Fh=colorF>>8;
 8011a9a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011a9e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	0a1b      	lsrs	r3, r3, #8
 8011aa6:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
	unsigned char Fl=colorF;
 8011aaa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011aae:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214

	switch(size)
 8011ab8:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8011abc:	2b04      	cmp	r3, #4
 8011abe:	f000 810a 	beq.w	8011cd6 <ILI9341_Draw_Char+0x29e>
 8011ac2:	2b04      	cmp	r3, #4
 8011ac4:	f300 81ee 	bgt.w	8011ea4 <ILI9341_Draw_Char+0x46c>
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d003      	beq.n	8011ad4 <ILI9341_Draw_Char+0x9c>
 8011acc:	2b02      	cmp	r3, #2
 8011ace:	f000 8083 	beq.w	8011bd8 <ILI9341_Draw_Char+0x1a0>
			}
		}
		HAL_SPI_Transmit(&lcd_spi,data,512,10);
		break;
	}
}
 8011ad2:	e1e7      	b.n	8011ea4 <ILI9341_Draw_Char+0x46c>
		ILI9341_Set_Address(x, y, x+5, y+8);
 8011ad4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011ad8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011adc:	6818      	ldr	r0, [r3, #0]
 8011ade:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011ae2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011ae6:	6819      	ldr	r1, [r3, #0]
 8011ae8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011aec:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	3305      	adds	r3, #5
 8011af4:	461a      	mov	r2, r3
 8011af6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011afa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	3308      	adds	r3, #8
 8011b02:	f7ff fbe7 	bl	80112d4 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8011b06:	2200      	movs	r2, #0
 8011b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b0c:	488a      	ldr	r0, [pc, #552]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011b0e:	f7f5 fb8b 	bl	8007228 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8011b12:	202c      	movs	r0, #44	; 0x2c
 8011b14:	f7ff fb1e 	bl	8011154 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b1e:	4886      	ldr	r0, [pc, #536]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011b20:	f7f5 fb82 	bl	8007228 <HAL_GPIO_WritePin>
		for(h=7;h>-1;h--)
 8011b24:	2307      	movs	r3, #7
 8011b26:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011b2a:	e050      	b.n	8011bce <ILI9341_Draw_Char+0x196>
			for(i=2;i<8;i++)
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011b32:	e043      	b.n	8011bbc <ILI9341_Draw_Char+0x184>
				if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8011b34:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8011b38:	3b20      	subs	r3, #32
 8011b3a:	4a80      	ldr	r2, [pc, #512]	; (8011d3c <ILI9341_Draw_Char+0x304>)
 8011b3c:	00db      	lsls	r3, r3, #3
 8011b3e:	441a      	add	r2, r3
 8011b40:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011b44:	4413      	add	r3, r2
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	461a      	mov	r2, r3
 8011b4a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011b4e:	f1c3 0307 	rsb	r3, r3, #7
 8011b52:	fa42 f303 	asr.w	r3, r2, r3
 8011b56:	f003 0301 	and.w	r3, r3, #1
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d016      	beq.n	8011b8c <ILI9341_Draw_Char+0x154>
					ILI9341_SPI_Send(colorT>8);
 8011b5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011b62:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b08      	cmp	r3, #8
 8011b6a:	bf8c      	ite	hi
 8011b6c:	2301      	movhi	r3, #1
 8011b6e:	2300      	movls	r3, #0
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7ff faee 	bl	8011154 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorT);
 8011b78:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011b7c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	b2db      	uxtb	r3, r3
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7ff fae5 	bl	8011154 <ILI9341_SPI_Send>
 8011b8a:	e012      	b.n	8011bb2 <ILI9341_Draw_Char+0x17a>
					ILI9341_SPI_Send(colorF>>8);
 8011b8c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011b90:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	0a1b      	lsrs	r3, r3, #8
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7ff fada 	bl	8011154 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorF);
 8011ba0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011ba4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff fad1 	bl	8011154 <ILI9341_SPI_Send>
			for(i=2;i<8;i++)
 8011bb2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011bbc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011bc0:	2b07      	cmp	r3, #7
 8011bc2:	ddb7      	ble.n	8011b34 <ILI9341_Draw_Char+0xfc>
		for(h=7;h>-1;h--)
 8011bc4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011bce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	daaa      	bge.n	8011b2c <ILI9341_Draw_Char+0xf4>
		break;
 8011bd6:	e165      	b.n	8011ea4 <ILI9341_Draw_Char+0x46c>
		ILI9341_Set_Address(x, y, x+7, y+26);
 8011bd8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011bdc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011be0:	6818      	ldr	r0, [r3, #0]
 8011be2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011be6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011bea:	6819      	ldr	r1, [r3, #0]
 8011bec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011bf0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	3307      	adds	r3, #7
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011bfe:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	331a      	adds	r3, #26
 8011c06:	f7ff fb65 	bl	80112d4 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c10:	4849      	ldr	r0, [pc, #292]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011c12:	f7f5 fb09 	bl	8007228 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8011c16:	202c      	movs	r0, #44	; 0x2c
 8011c18:	f7ff fa9c 	bl	8011154 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c22:	4845      	ldr	r0, [pc, #276]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011c24:	f7f5 fb00 	bl	8007228 <HAL_GPIO_WritePin>
		for(h=15;h>-1;h--)
 8011c28:	230f      	movs	r3, #15
 8011c2a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011c2e:	e04d      	b.n	8011ccc <ILI9341_Draw_Char+0x294>
			for(i=0;i<8;i++)
 8011c30:	2300      	movs	r3, #0
 8011c32:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011c36:	e040      	b.n	8011cba <ILI9341_Draw_Char+0x282>
				if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8011c38:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8011c3c:	3b20      	subs	r3, #32
 8011c3e:	4a40      	ldr	r2, [pc, #256]	; (8011d40 <ILI9341_Draw_Char+0x308>)
 8011c40:	011b      	lsls	r3, r3, #4
 8011c42:	441a      	add	r2, r3
 8011c44:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011c48:	4413      	add	r3, r2
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011c52:	f1c3 0307 	rsb	r3, r3, #7
 8011c56:	fa42 f303 	asr.w	r3, r2, r3
 8011c5a:	f003 0301 	and.w	r3, r3, #1
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d013      	beq.n	8011c8a <ILI9341_Draw_Char+0x252>
					ILI9341_SPI_Send(colorT>>8);
 8011c62:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011c66:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	0a1b      	lsrs	r3, r3, #8
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff fa6f 	bl	8011154 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorT);
 8011c76:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011c7a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7ff fa66 	bl	8011154 <ILI9341_SPI_Send>
 8011c88:	e012      	b.n	8011cb0 <ILI9341_Draw_Char+0x278>
					ILI9341_SPI_Send(colorF>>8);
 8011c8a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011c8e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	0a1b      	lsrs	r3, r3, #8
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7ff fa5b 	bl	8011154 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorF);
 8011c9e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011ca2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7ff fa52 	bl	8011154 <ILI9341_SPI_Send>
			for(i=0;i<8;i++)
 8011cb0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011cba:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011cbe:	2b07      	cmp	r3, #7
 8011cc0:	ddba      	ble.n	8011c38 <ILI9341_Draw_Char+0x200>
		for(h=15;h>-1;h--)
 8011cc2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011ccc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	daad      	bge.n	8011c30 <ILI9341_Draw_Char+0x1f8>
		break;
 8011cd4:	e0e6      	b.n	8011ea4 <ILI9341_Draw_Char+0x46c>
		ILI9341_Set_Address(x, y, x+7, y+32);
 8011cd6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cda:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011cde:	6818      	ldr	r0, [r3, #0]
 8011ce0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011ce4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011ce8:	6819      	ldr	r1, [r3, #0]
 8011cea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cee:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	3307      	adds	r3, #7
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cfc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3320      	adds	r3, #32
 8011d04:	f7ff fae6 	bl	80112d4 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d0e:	480a      	ldr	r0, [pc, #40]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011d10:	f7f5 fa8a 	bl	8007228 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8011d14:	202c      	movs	r0, #44	; 0x2c
 8011d16:	f7ff fa1d 	bl	8011154 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d20:	4805      	ldr	r0, [pc, #20]	; (8011d38 <ILI9341_Draw_Char+0x300>)
 8011d22:	f7f5 fa81 	bl	8007228 <HAL_GPIO_WritePin>
		for(h=0;h<16;h++)
 8011d26:	2300      	movs	r3, #0
 8011d28:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011d2c:	e0ac      	b.n	8011e88 <ILI9341_Draw_Char+0x450>
			for(i=0;i<8;i++)
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011d34:	e09e      	b.n	8011e74 <ILI9341_Draw_Char+0x43c>
 8011d36:	bf00      	nop
 8011d38:	48000800 	.word	0x48000800
 8011d3c:	0801c674 	.word	0x0801c674
 8011d40:	0801c94c 	.word	0x0801c94c
				if( (chars16[charcode-0x20][15-h]>>(7-i) )&0x01) data[i*2+32*h]=Ch,data[i*2+1+32*h]=Cl,data[i*2+16+32*h]=Ch,data[i*2+17+32*h]=Cl;
 8011d44:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8011d48:	f1a3 0220 	sub.w	r2, r3, #32
 8011d4c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011d50:	f1c3 030f 	rsb	r3, r3, #15
 8011d54:	4956      	ldr	r1, [pc, #344]	; (8011eb0 <ILI9341_Draw_Char+0x478>)
 8011d56:	0112      	lsls	r2, r2, #4
 8011d58:	440a      	add	r2, r1
 8011d5a:	4413      	add	r3, r2
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011d64:	f1c3 0307 	rsb	r3, r3, #7
 8011d68:	fa42 f303 	asr.w	r3, r2, r3
 8011d6c:	f003 0301 	and.w	r3, r3, #1
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d03d      	beq.n	8011df0 <ILI9341_Draw_Char+0x3b8>
 8011d74:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011d78:	011a      	lsls	r2, r3, #4
 8011d7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011d7e:	4413      	add	r3, r2
 8011d80:	005b      	lsls	r3, r3, #1
 8011d82:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011d86:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011d8a:	f897 1217 	ldrb.w	r1, [r7, #535]	; 0x217
 8011d8e:	54d1      	strb	r1, [r2, r3]
 8011d90:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011d94:	005b      	lsls	r3, r3, #1
 8011d96:	1c5a      	adds	r2, r3, #1
 8011d98:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011d9c:	015b      	lsls	r3, r3, #5
 8011d9e:	4413      	add	r3, r2
 8011da0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011da4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011da8:	f897 1216 	ldrb.w	r1, [r7, #534]	; 0x216
 8011dac:	54d1      	strb	r1, [r2, r3]
 8011dae:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011db2:	f103 0208 	add.w	r2, r3, #8
 8011db6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011dba:	011b      	lsls	r3, r3, #4
 8011dbc:	4413      	add	r3, r2
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011dc4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011dc8:	f897 1217 	ldrb.w	r1, [r7, #535]	; 0x217
 8011dcc:	54d1      	strb	r1, [r2, r3]
 8011dce:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	f103 0211 	add.w	r2, r3, #17
 8011dd8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011ddc:	015b      	lsls	r3, r3, #5
 8011dde:	4413      	add	r3, r2
 8011de0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011de4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011de8:	f897 1216 	ldrb.w	r1, [r7, #534]	; 0x216
 8011dec:	54d1      	strb	r1, [r2, r3]
 8011dee:	e03c      	b.n	8011e6a <ILI9341_Draw_Char+0x432>
				else data[i*2+32*h]=Fh,data[i*2+1+32*h]=Fl,data[i*2+16+32*h]=Fh,data[i*2+17+32*h]=Fl;
 8011df0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011df4:	011a      	lsls	r2, r3, #4
 8011df6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011dfa:	4413      	add	r3, r2
 8011dfc:	005b      	lsls	r3, r3, #1
 8011dfe:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011e02:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011e06:	f897 1215 	ldrb.w	r1, [r7, #533]	; 0x215
 8011e0a:	54d1      	strb	r1, [r2, r3]
 8011e0c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011e10:	005b      	lsls	r3, r3, #1
 8011e12:	1c5a      	adds	r2, r3, #1
 8011e14:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011e18:	015b      	lsls	r3, r3, #5
 8011e1a:	4413      	add	r3, r2
 8011e1c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011e20:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011e24:	f897 1214 	ldrb.w	r1, [r7, #532]	; 0x214
 8011e28:	54d1      	strb	r1, [r2, r3]
 8011e2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011e2e:	f103 0208 	add.w	r2, r3, #8
 8011e32:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011e36:	011b      	lsls	r3, r3, #4
 8011e38:	4413      	add	r3, r2
 8011e3a:	005b      	lsls	r3, r3, #1
 8011e3c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011e40:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011e44:	f897 1215 	ldrb.w	r1, [r7, #533]	; 0x215
 8011e48:	54d1      	strb	r1, [r2, r3]
 8011e4a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	f103 0211 	add.w	r2, r3, #17
 8011e54:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011e58:	015b      	lsls	r3, r3, #5
 8011e5a:	4413      	add	r3, r2
 8011e5c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011e60:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011e64:	f897 1214 	ldrb.w	r1, [r7, #532]	; 0x214
 8011e68:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<8;i++)
 8011e6a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011e6e:	3301      	adds	r3, #1
 8011e70:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011e74:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011e78:	2b07      	cmp	r3, #7
 8011e7a:	f77f af63 	ble.w	8011d44 <ILI9341_Draw_Char+0x30c>
		for(h=0;h<16;h++)
 8011e7e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011e82:	3301      	adds	r3, #1
 8011e84:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011e88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011e8c:	2b0f      	cmp	r3, #15
 8011e8e:	f77f af4e 	ble.w	8011d2e <ILI9341_Draw_Char+0x2f6>
		HAL_SPI_Transmit(&lcd_spi,data,512,10);
 8011e92:	f107 0114 	add.w	r1, r7, #20
 8011e96:	230a      	movs	r3, #10
 8011e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e9c:	4805      	ldr	r0, [pc, #20]	; (8011eb4 <ILI9341_Draw_Char+0x47c>)
 8011e9e:	f7f8 fc0c 	bl	800a6ba <HAL_SPI_Transmit>
		break;
 8011ea2:	bf00      	nop
}
 8011ea4:	bf00      	nop
 8011ea6:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd90      	pop	{r4, r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	0801c94c 	.word	0x0801c94c
 8011eb4:	20009978 	.word	0x20009978

08011eb8 <Before_Sending_Data>:

static void Before_Sending_Data()
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
	SD_CS_OFF;
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	2108      	movs	r1, #8
 8011ec0:	480a      	ldr	r0, [pc, #40]	; (8011eec <Before_Sending_Data+0x34>)
 8011ec2:	f7f5 f9b1 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	2180      	movs	r1, #128	; 0x80
 8011eca:	4808      	ldr	r0, [pc, #32]	; (8011eec <Before_Sending_Data+0x34>)
 8011ecc:	f7f5 f9ac 	bl	8007228 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ed6:	4805      	ldr	r0, [pc, #20]	; (8011eec <Before_Sending_Data+0x34>)
 8011ed8:	f7f5 f9a6 	bl	8007228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8011edc:	2200      	movs	r2, #0
 8011ede:	2180      	movs	r1, #128	; 0x80
 8011ee0:	4802      	ldr	r0, [pc, #8]	; (8011eec <Before_Sending_Data+0x34>)
 8011ee2:	f7f5 f9a1 	bl	8007228 <HAL_GPIO_WritePin>
}
 8011ee6:	bf00      	nop
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	48000800 	.word	0x48000800

08011ef0 <Before_Sending_Command>:

static void Before_Sending_Command()
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	af00      	add	r7, sp, #0
	SD_CS_OFF;
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	2108      	movs	r1, #8
 8011ef8:	480a      	ldr	r0, [pc, #40]	; (8011f24 <Before_Sending_Command+0x34>)
 8011efa:	f7f5 f995 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8011efe:	2200      	movs	r2, #0
 8011f00:	2180      	movs	r1, #128	; 0x80
 8011f02:	4808      	ldr	r0, [pc, #32]	; (8011f24 <Before_Sending_Command+0x34>)
 8011f04:	f7f5 f990 	bl	8007228 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f0e:	4805      	ldr	r0, [pc, #20]	; (8011f24 <Before_Sending_Command+0x34>)
 8011f10:	f7f5 f98a 	bl	8007228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8011f14:	2200      	movs	r2, #0
 8011f16:	2180      	movs	r1, #128	; 0x80
 8011f18:	4802      	ldr	r0, [pc, #8]	; (8011f24 <Before_Sending_Command+0x34>)
 8011f1a:	f7f5 f985 	bl	8007228 <HAL_GPIO_WritePin>
}
 8011f1e:	bf00      	nop
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	48000800 	.word	0x48000800

08011f28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	460b      	mov	r3, r1
 8011f32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011f34:	2300      	movs	r3, #0
 8011f36:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	7c1b      	ldrb	r3, [r3, #16]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d115      	bne.n	8011f6c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f44:	2202      	movs	r2, #2
 8011f46:	2181      	movs	r1, #129	; 0x81
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f007 fefe 	bl	8019d4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2201      	movs	r2, #1
 8011f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f58:	2202      	movs	r2, #2
 8011f5a:	2101      	movs	r1, #1
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f007 fef4 	bl	8019d4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2201      	movs	r2, #1
 8011f66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8011f6a:	e012      	b.n	8011f92 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011f6c:	2340      	movs	r3, #64	; 0x40
 8011f6e:	2202      	movs	r2, #2
 8011f70:	2181      	movs	r1, #129	; 0x81
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f007 fee9 	bl	8019d4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011f7e:	2340      	movs	r3, #64	; 0x40
 8011f80:	2202      	movs	r2, #2
 8011f82:	2101      	movs	r1, #1
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f007 fee0 	bl	8019d4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011f92:	2308      	movs	r3, #8
 8011f94:	2203      	movs	r2, #3
 8011f96:	2182      	movs	r1, #130	; 0x82
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f007 fed6 	bl	8019d4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011fa4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011fa8:	f007 fff8 	bl	8019f9c <USBD_static_malloc>
 8011fac:	4602      	mov	r2, r0
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d102      	bne.n	8011fc4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	73fb      	strb	r3, [r7, #15]
 8011fc2:	e026      	b.n	8012012 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	7c1b      	ldrb	r3, [r3, #16]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d109      	bne.n	8012002 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ff8:	2101      	movs	r1, #1
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f007 ff97 	bl	8019f2e <USBD_LL_PrepareReceive>
 8012000:	e007      	b.n	8012012 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012008:	2340      	movs	r3, #64	; 0x40
 801200a:	2101      	movs	r1, #1
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f007 ff8e 	bl	8019f2e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8012012:	7bfb      	ldrb	r3, [r7, #15]
}
 8012014:	4618      	mov	r0, r3
 8012016:	3710      	adds	r7, #16
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	460b      	mov	r3, r1
 8012026:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8012028:	2300      	movs	r3, #0
 801202a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801202c:	2181      	movs	r1, #129	; 0x81
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f007 feb1 	bl	8019d96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801203a:	2101      	movs	r1, #1
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f007 feaa 	bl	8019d96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2200      	movs	r2, #0
 8012046:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801204a:	2182      	movs	r1, #130	; 0x82
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f007 fea2 	bl	8019d96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2200      	movs	r2, #0
 8012056:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00e      	beq.n	8012080 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012072:	4618      	mov	r0, r3
 8012074:	f007 ffa0 	bl	8019fb8 <USBD_static_free>
    pdev->pClassData = NULL;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8012080:	7bfb      	ldrb	r3, [r7, #15]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3710      	adds	r7, #16
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801208a:	b580      	push	{r7, lr}
 801208c:	b086      	sub	sp, #24
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801209a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801209c:	2300      	movs	r3, #0
 801209e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80120a0:	2300      	movs	r3, #0
 80120a2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80120a4:	2300      	movs	r3, #0
 80120a6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d039      	beq.n	8012128 <USBD_CDC_Setup+0x9e>
 80120b4:	2b20      	cmp	r3, #32
 80120b6:	d17f      	bne.n	80121b8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	88db      	ldrh	r3, [r3, #6]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d029      	beq.n	8012114 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	b25b      	sxtb	r3, r3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	da11      	bge.n	80120ee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80120d0:	689b      	ldr	r3, [r3, #8]
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80120d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	88d2      	ldrh	r2, [r2, #6]
 80120dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80120de:	6939      	ldr	r1, [r7, #16]
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	88db      	ldrh	r3, [r3, #6]
 80120e4:	461a      	mov	r2, r3
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f001 f9e3 	bl	80134b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80120ec:	e06b      	b.n	80121c6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	785a      	ldrb	r2, [r3, #1]
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	88db      	ldrh	r3, [r3, #6]
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8012104:	6939      	ldr	r1, [r7, #16]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	88db      	ldrh	r3, [r3, #6]
 801210a:	461a      	mov	r2, r3
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f001 f9fe 	bl	801350e <USBD_CtlPrepareRx>
      break;
 8012112:	e058      	b.n	80121c6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	683a      	ldr	r2, [r7, #0]
 801211e:	7850      	ldrb	r0, [r2, #1]
 8012120:	2200      	movs	r2, #0
 8012122:	6839      	ldr	r1, [r7, #0]
 8012124:	4798      	blx	r3
      break;
 8012126:	e04e      	b.n	80121c6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	785b      	ldrb	r3, [r3, #1]
 801212c:	2b0b      	cmp	r3, #11
 801212e:	d02e      	beq.n	801218e <USBD_CDC_Setup+0x104>
 8012130:	2b0b      	cmp	r3, #11
 8012132:	dc38      	bgt.n	80121a6 <USBD_CDC_Setup+0x11c>
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <USBD_CDC_Setup+0xb4>
 8012138:	2b0a      	cmp	r3, #10
 801213a:	d014      	beq.n	8012166 <USBD_CDC_Setup+0xdc>
 801213c:	e033      	b.n	80121a6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012144:	2b03      	cmp	r3, #3
 8012146:	d107      	bne.n	8012158 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8012148:	f107 030c 	add.w	r3, r7, #12
 801214c:	2202      	movs	r2, #2
 801214e:	4619      	mov	r1, r3
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f001 f9ae 	bl	80134b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012156:	e02e      	b.n	80121b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f001 f93e 	bl	80133dc <USBD_CtlError>
            ret = USBD_FAIL;
 8012160:	2302      	movs	r3, #2
 8012162:	75fb      	strb	r3, [r7, #23]
          break;
 8012164:	e027      	b.n	80121b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801216c:	2b03      	cmp	r3, #3
 801216e:	d107      	bne.n	8012180 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8012170:	f107 030f 	add.w	r3, r7, #15
 8012174:	2201      	movs	r2, #1
 8012176:	4619      	mov	r1, r3
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f001 f99a 	bl	80134b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801217e:	e01a      	b.n	80121b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f001 f92a 	bl	80133dc <USBD_CtlError>
            ret = USBD_FAIL;
 8012188:	2302      	movs	r3, #2
 801218a:	75fb      	strb	r3, [r7, #23]
          break;
 801218c:	e013      	b.n	80121b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012194:	2b03      	cmp	r3, #3
 8012196:	d00d      	beq.n	80121b4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8012198:	6839      	ldr	r1, [r7, #0]
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f001 f91e 	bl	80133dc <USBD_CtlError>
            ret = USBD_FAIL;
 80121a0:	2302      	movs	r3, #2
 80121a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80121a4:	e006      	b.n	80121b4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80121a6:	6839      	ldr	r1, [r7, #0]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f001 f917 	bl	80133dc <USBD_CtlError>
          ret = USBD_FAIL;
 80121ae:	2302      	movs	r3, #2
 80121b0:	75fb      	strb	r3, [r7, #23]
          break;
 80121b2:	e000      	b.n	80121b6 <USBD_CDC_Setup+0x12c>
          break;
 80121b4:	bf00      	nop
      }
      break;
 80121b6:	e006      	b.n	80121c6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80121b8:	6839      	ldr	r1, [r7, #0]
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f001 f90e 	bl	80133dc <USBD_CtlError>
      ret = USBD_FAIL;
 80121c0:	2302      	movs	r3, #2
 80121c2:	75fb      	strb	r3, [r7, #23]
      break;
 80121c4:	bf00      	nop
  }

  return ret;
 80121c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3718      	adds	r7, #24
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	460b      	mov	r3, r1
 80121da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d03a      	beq.n	801226c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80121f6:	78fa      	ldrb	r2, [r7, #3]
 80121f8:	6879      	ldr	r1, [r7, #4]
 80121fa:	4613      	mov	r3, r2
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	4413      	add	r3, r2
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	440b      	add	r3, r1
 8012204:	331c      	adds	r3, #28
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d029      	beq.n	8012260 <USBD_CDC_DataIn+0x90>
 801220c:	78fa      	ldrb	r2, [r7, #3]
 801220e:	6879      	ldr	r1, [r7, #4]
 8012210:	4613      	mov	r3, r2
 8012212:	009b      	lsls	r3, r3, #2
 8012214:	4413      	add	r3, r2
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	440b      	add	r3, r1
 801221a:	331c      	adds	r3, #28
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	78f9      	ldrb	r1, [r7, #3]
 8012220:	68b8      	ldr	r0, [r7, #8]
 8012222:	460b      	mov	r3, r1
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	440b      	add	r3, r1
 8012228:	00db      	lsls	r3, r3, #3
 801222a:	4403      	add	r3, r0
 801222c:	3338      	adds	r3, #56	; 0x38
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	fbb2 f1f3 	udiv	r1, r2, r3
 8012234:	fb01 f303 	mul.w	r3, r1, r3
 8012238:	1ad3      	subs	r3, r2, r3
 801223a:	2b00      	cmp	r3, #0
 801223c:	d110      	bne.n	8012260 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801223e:	78fa      	ldrb	r2, [r7, #3]
 8012240:	6879      	ldr	r1, [r7, #4]
 8012242:	4613      	mov	r3, r2
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	4413      	add	r3, r2
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	440b      	add	r3, r1
 801224c:	331c      	adds	r3, #28
 801224e:	2200      	movs	r2, #0
 8012250:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012252:	78f9      	ldrb	r1, [r7, #3]
 8012254:	2300      	movs	r3, #0
 8012256:	2200      	movs	r2, #0
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f007 fe45 	bl	8019ee8 <USBD_LL_Transmit>
 801225e:	e003      	b.n	8012268 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2200      	movs	r2, #0
 8012264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8012268:	2300      	movs	r3, #0
 801226a:	e000      	b.n	801226e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801226c:	2302      	movs	r3, #2
  }
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b084      	sub	sp, #16
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	460b      	mov	r3, r1
 8012280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012288:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801228a:	78fb      	ldrb	r3, [r7, #3]
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f007 fe70 	bl	8019f74 <USBD_LL_GetRxDataSize>
 8012294:	4602      	mov	r2, r0
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d00d      	beq.n	80122c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80122ba:	4611      	mov	r1, r2
 80122bc:	4798      	blx	r3

    return USBD_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	e000      	b.n	80122c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80122c2:	2302      	movs	r3, #2
  }
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3710      	adds	r7, #16
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d015      	beq.n	8012312 <USBD_CDC_EP0_RxReady+0x46>
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80122ec:	2bff      	cmp	r3, #255	; 0xff
 80122ee:	d010      	beq.n	8012312 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	68fa      	ldr	r2, [r7, #12]
 80122fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80122fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012306:	b292      	uxth	r2, r2
 8012308:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	22ff      	movs	r2, #255	; 0xff
 801230e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2243      	movs	r2, #67	; 0x43
 8012328:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801232a:	4b03      	ldr	r3, [pc, #12]	; (8012338 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801232c:	4618      	mov	r0, r3
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr
 8012338:	200000b8 	.word	0x200000b8

0801233c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2243      	movs	r2, #67	; 0x43
 8012348:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801234a:	4b03      	ldr	r3, [pc, #12]	; (8012358 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801234c:	4618      	mov	r0, r3
 801234e:	370c      	adds	r7, #12
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr
 8012358:	20000074 	.word	0x20000074

0801235c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2243      	movs	r2, #67	; 0x43
 8012368:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801236a:	4b03      	ldr	r3, [pc, #12]	; (8012378 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801236c:	4618      	mov	r0, r3
 801236e:	370c      	adds	r7, #12
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr
 8012378:	200000fc 	.word	0x200000fc

0801237c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	220a      	movs	r2, #10
 8012388:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801238a:	4b03      	ldr	r3, [pc, #12]	; (8012398 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801238c:	4618      	mov	r0, r3
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	20000030 	.word	0x20000030

0801239c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80123a6:	2302      	movs	r3, #2
 80123a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d005      	beq.n	80123bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	683a      	ldr	r2, [r7, #0]
 80123b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80123bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3714      	adds	r7, #20
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr

080123ca <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80123ca:	b480      	push	{r7}
 80123cc:	b087      	sub	sp, #28
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	60f8      	str	r0, [r7, #12]
 80123d2:	60b9      	str	r1, [r7, #8]
 80123d4:	4613      	mov	r3, r2
 80123d6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123de:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80123e8:	88fa      	ldrh	r2, [r7, #6]
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80123f0:	2300      	movs	r3, #0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	371c      	adds	r7, #28
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr

080123fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80123fe:	b480      	push	{r7}
 8012400:	b085      	sub	sp, #20
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
 8012406:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801240e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	683a      	ldr	r2, [r7, #0]
 8012414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012426:	b580      	push	{r7, lr}
 8012428:	b084      	sub	sp, #16
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012434:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801243c:	2b00      	cmp	r3, #0
 801243e:	d017      	beq.n	8012470 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	7c1b      	ldrb	r3, [r3, #16]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d109      	bne.n	801245c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801244e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012452:	2101      	movs	r1, #1
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f007 fd6a 	bl	8019f2e <USBD_LL_PrepareReceive>
 801245a:	e007      	b.n	801246c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012462:	2340      	movs	r3, #64	; 0x40
 8012464:	2101      	movs	r1, #1
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f007 fd61 	bl	8019f2e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801246c:	2300      	movs	r3, #0
 801246e:	e000      	b.n	8012472 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8012470:	2302      	movs	r3, #2
  }
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801247a:	b580      	push	{r7, lr}
 801247c:	b084      	sub	sp, #16
 801247e:	af00      	add	r7, sp, #0
 8012480:	60f8      	str	r0, [r7, #12]
 8012482:	60b9      	str	r1, [r7, #8]
 8012484:	4613      	mov	r3, r2
 8012486:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d101      	bne.n	8012492 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801248e:	2302      	movs	r3, #2
 8012490:	e01a      	b.n	80124c8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012498:	2b00      	cmp	r3, #0
 801249a:	d003      	beq.n	80124a4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2200      	movs	r2, #0
 80124a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d003      	beq.n	80124b2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	68ba      	ldr	r2, [r7, #8]
 80124ae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2201      	movs	r2, #1
 80124b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	79fa      	ldrb	r2, [r7, #7]
 80124be:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80124c0:	68f8      	ldr	r0, [r7, #12]
 80124c2:	f007 fbcb 	bl	8019c5c <USBD_LL_Init>

  return USBD_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b085      	sub	sp, #20
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d006      	beq.n	80124f2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	683a      	ldr	r2, [r7, #0]
 80124e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80124ec:	2300      	movs	r3, #0
 80124ee:	73fb      	strb	r3, [r7, #15]
 80124f0:	e001      	b.n	80124f6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80124f2:	2302      	movs	r3, #2
 80124f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80124f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3714      	adds	r7, #20
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f007 fc01 	bl	8019d14 <USBD_LL_Start>

  return USBD_OK;
 8012512:	2300      	movs	r3, #0
}
 8012514:	4618      	mov	r0, r3
 8012516:	3708      	adds	r7, #8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	370c      	adds	r7, #12
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr

08012532 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b084      	sub	sp, #16
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	460b      	mov	r3, r1
 801253c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801253e:	2302      	movs	r3, #2
 8012540:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00c      	beq.n	8012566 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	78fa      	ldrb	r2, [r7, #3]
 8012556:	4611      	mov	r1, r2
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	4798      	blx	r3
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d101      	bne.n	8012566 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8012562:	2300      	movs	r3, #0
 8012564:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012566:	7bfb      	ldrb	r3, [r7, #15]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3710      	adds	r7, #16
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	460b      	mov	r3, r1
 801257a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	78fa      	ldrb	r2, [r7, #3]
 8012586:	4611      	mov	r1, r2
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	4798      	blx	r3

  return USBD_OK;
 801258c:	2300      	movs	r3, #0
}
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80125a6:	6839      	ldr	r1, [r7, #0]
 80125a8:	4618      	mov	r0, r3
 80125aa:	f000 feda 	bl	8013362 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2201      	movs	r2, #1
 80125b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80125bc:	461a      	mov	r2, r3
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80125ca:	f003 031f 	and.w	r3, r3, #31
 80125ce:	2b02      	cmp	r3, #2
 80125d0:	d016      	beq.n	8012600 <USBD_LL_SetupStage+0x6a>
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d81c      	bhi.n	8012610 <USBD_LL_SetupStage+0x7a>
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d002      	beq.n	80125e0 <USBD_LL_SetupStage+0x4a>
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d008      	beq.n	80125f0 <USBD_LL_SetupStage+0x5a>
 80125de:	e017      	b.n	8012610 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80125e6:	4619      	mov	r1, r3
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 f9cd 	bl	8012988 <USBD_StdDevReq>
      break;
 80125ee:	e01a      	b.n	8012626 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80125f6:	4619      	mov	r1, r3
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 fa2f 	bl	8012a5c <USBD_StdItfReq>
      break;
 80125fe:	e012      	b.n	8012626 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012606:	4619      	mov	r1, r3
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 fa6f 	bl	8012aec <USBD_StdEPReq>
      break;
 801260e:	e00a      	b.n	8012626 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801261a:	b2db      	uxtb	r3, r3
 801261c:	4619      	mov	r1, r3
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f007 fbd8 	bl	8019dd4 <USBD_LL_StallEP>
      break;
 8012624:	bf00      	nop
  }

  return USBD_OK;
 8012626:	2300      	movs	r3, #0
}
 8012628:	4618      	mov	r0, r3
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b086      	sub	sp, #24
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	460b      	mov	r3, r1
 801263a:	607a      	str	r2, [r7, #4]
 801263c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801263e:	7afb      	ldrb	r3, [r7, #11]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d14b      	bne.n	80126dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801264a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012652:	2b03      	cmp	r3, #3
 8012654:	d134      	bne.n	80126c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	68da      	ldr	r2, [r3, #12]
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	691b      	ldr	r3, [r3, #16]
 801265e:	429a      	cmp	r2, r3
 8012660:	d919      	bls.n	8012696 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	68da      	ldr	r2, [r3, #12]
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	691b      	ldr	r3, [r3, #16]
 801266a:	1ad2      	subs	r2, r2, r3
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	68da      	ldr	r2, [r3, #12]
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012678:	429a      	cmp	r2, r3
 801267a:	d203      	bcs.n	8012684 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012680:	b29b      	uxth	r3, r3
 8012682:	e002      	b.n	801268a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012688:	b29b      	uxth	r3, r3
 801268a:	461a      	mov	r2, r3
 801268c:	6879      	ldr	r1, [r7, #4]
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f000 ff5b 	bl	801354a <USBD_CtlContinueRx>
 8012694:	e038      	b.n	8012708 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801269c:	691b      	ldr	r3, [r3, #16]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d00a      	beq.n	80126b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80126a8:	2b03      	cmp	r3, #3
 80126aa:	d105      	bne.n	80126b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126b2:	691b      	ldr	r3, [r3, #16]
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80126b8:	68f8      	ldr	r0, [r7, #12]
 80126ba:	f000 ff58 	bl	801356e <USBD_CtlSendStatus>
 80126be:	e023      	b.n	8012708 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80126c6:	2b05      	cmp	r3, #5
 80126c8:	d11e      	bne.n	8012708 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2200      	movs	r2, #0
 80126ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80126d2:	2100      	movs	r1, #0
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f007 fb7d 	bl	8019dd4 <USBD_LL_StallEP>
 80126da:	e015      	b.n	8012708 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126e2:	699b      	ldr	r3, [r3, #24]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d00d      	beq.n	8012704 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80126ee:	2b03      	cmp	r3, #3
 80126f0:	d108      	bne.n	8012704 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126f8:	699b      	ldr	r3, [r3, #24]
 80126fa:	7afa      	ldrb	r2, [r7, #11]
 80126fc:	4611      	mov	r1, r2
 80126fe:	68f8      	ldr	r0, [r7, #12]
 8012700:	4798      	blx	r3
 8012702:	e001      	b.n	8012708 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012704:	2302      	movs	r3, #2
 8012706:	e000      	b.n	801270a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012708:	2300      	movs	r3, #0
}
 801270a:	4618      	mov	r0, r3
 801270c:	3718      	adds	r7, #24
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012712:	b580      	push	{r7, lr}
 8012714:	b086      	sub	sp, #24
 8012716:	af00      	add	r7, sp, #0
 8012718:	60f8      	str	r0, [r7, #12]
 801271a:	460b      	mov	r3, r1
 801271c:	607a      	str	r2, [r7, #4]
 801271e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012720:	7afb      	ldrb	r3, [r7, #11]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d17f      	bne.n	8012826 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	3314      	adds	r3, #20
 801272a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012732:	2b02      	cmp	r3, #2
 8012734:	d15c      	bne.n	80127f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	68da      	ldr	r2, [r3, #12]
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	691b      	ldr	r3, [r3, #16]
 801273e:	429a      	cmp	r2, r3
 8012740:	d915      	bls.n	801276e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	68da      	ldr	r2, [r3, #12]
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	691b      	ldr	r3, [r3, #16]
 801274a:	1ad2      	subs	r2, r2, r3
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	b29b      	uxth	r3, r3
 8012756:	461a      	mov	r2, r3
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f000 fec5 	bl	80134ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012760:	2300      	movs	r3, #0
 8012762:	2200      	movs	r2, #0
 8012764:	2100      	movs	r1, #0
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f007 fbe1 	bl	8019f2e <USBD_LL_PrepareReceive>
 801276c:	e04e      	b.n	801280c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	697a      	ldr	r2, [r7, #20]
 8012774:	6912      	ldr	r2, [r2, #16]
 8012776:	fbb3 f1f2 	udiv	r1, r3, r2
 801277a:	fb01 f202 	mul.w	r2, r1, r2
 801277e:	1a9b      	subs	r3, r3, r2
 8012780:	2b00      	cmp	r3, #0
 8012782:	d11c      	bne.n	80127be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	689a      	ldr	r2, [r3, #8]
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801278c:	429a      	cmp	r2, r3
 801278e:	d316      	bcc.n	80127be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	689a      	ldr	r2, [r3, #8]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801279a:	429a      	cmp	r2, r3
 801279c:	d20f      	bcs.n	80127be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801279e:	2200      	movs	r2, #0
 80127a0:	2100      	movs	r1, #0
 80127a2:	68f8      	ldr	r0, [r7, #12]
 80127a4:	f000 fea1 	bl	80134ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2200      	movs	r2, #0
 80127ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127b0:	2300      	movs	r3, #0
 80127b2:	2200      	movs	r2, #0
 80127b4:	2100      	movs	r1, #0
 80127b6:	68f8      	ldr	r0, [r7, #12]
 80127b8:	f007 fbb9 	bl	8019f2e <USBD_LL_PrepareReceive>
 80127bc:	e026      	b.n	801280c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00a      	beq.n	80127e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80127d0:	2b03      	cmp	r3, #3
 80127d2:	d105      	bne.n	80127e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80127e0:	2180      	movs	r1, #128	; 0x80
 80127e2:	68f8      	ldr	r0, [r7, #12]
 80127e4:	f007 faf6 	bl	8019dd4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f000 fed3 	bl	8013594 <USBD_CtlReceiveStatus>
 80127ee:	e00d      	b.n	801280c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80127f6:	2b04      	cmp	r3, #4
 80127f8:	d004      	beq.n	8012804 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012800:	2b00      	cmp	r3, #0
 8012802:	d103      	bne.n	801280c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012804:	2180      	movs	r1, #128	; 0x80
 8012806:	68f8      	ldr	r0, [r7, #12]
 8012808:	f007 fae4 	bl	8019dd4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012812:	2b01      	cmp	r3, #1
 8012814:	d11d      	bne.n	8012852 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012816:	68f8      	ldr	r0, [r7, #12]
 8012818:	f7ff fe80 	bl	801251c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2200      	movs	r2, #0
 8012820:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012824:	e015      	b.n	8012852 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801282c:	695b      	ldr	r3, [r3, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00d      	beq.n	801284e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012838:	2b03      	cmp	r3, #3
 801283a:	d108      	bne.n	801284e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012842:	695b      	ldr	r3, [r3, #20]
 8012844:	7afa      	ldrb	r2, [r7, #11]
 8012846:	4611      	mov	r1, r2
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	4798      	blx	r3
 801284c:	e001      	b.n	8012852 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801284e:	2302      	movs	r3, #2
 8012850:	e000      	b.n	8012854 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012852:	2300      	movs	r3, #0
}
 8012854:	4618      	mov	r0, r3
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012864:	2340      	movs	r3, #64	; 0x40
 8012866:	2200      	movs	r2, #0
 8012868:	2100      	movs	r1, #0
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f007 fa6d 	bl	8019d4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2201      	movs	r2, #1
 8012874:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2240      	movs	r2, #64	; 0x40
 801287c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012880:	2340      	movs	r3, #64	; 0x40
 8012882:	2200      	movs	r2, #0
 8012884:	2180      	movs	r1, #128	; 0x80
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f007 fa5f 	bl	8019d4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2201      	movs	r2, #1
 8012890:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2240      	movs	r2, #64	; 0x40
 8012896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2201      	movs	r2, #1
 801289c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2200      	movs	r2, #0
 80128ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2200      	movs	r2, #0
 80128b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d009      	beq.n	80128d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	6852      	ldr	r2, [r2, #4]
 80128cc:	b2d2      	uxtb	r2, r2
 80128ce:	4611      	mov	r1, r2
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	4798      	blx	r3
  }

  return USBD_OK;
 80128d4:	2300      	movs	r3, #0
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}

080128de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80128de:	b480      	push	{r7}
 80128e0:	b083      	sub	sp, #12
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
 80128e6:	460b      	mov	r3, r1
 80128e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	78fa      	ldrb	r2, [r7, #3]
 80128ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	370c      	adds	r7, #12
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr

080128fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80128fe:	b480      	push	{r7}
 8012900:	b083      	sub	sp, #12
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2204      	movs	r2, #4
 8012916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801291a:	2300      	movs	r3, #0
}
 801291c:	4618      	mov	r0, r3
 801291e:	370c      	adds	r7, #12
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012936:	2b04      	cmp	r3, #4
 8012938:	d105      	bne.n	8012946 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012962:	2b03      	cmp	r3, #3
 8012964:	d10b      	bne.n	801297e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801296c:	69db      	ldr	r3, [r3, #28]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d005      	beq.n	801297e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012978:	69db      	ldr	r3, [r3, #28]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801297e:	2300      	movs	r3, #0
}
 8012980:	4618      	mov	r0, r3
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012992:	2300      	movs	r3, #0
 8012994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801299e:	2b40      	cmp	r3, #64	; 0x40
 80129a0:	d005      	beq.n	80129ae <USBD_StdDevReq+0x26>
 80129a2:	2b40      	cmp	r3, #64	; 0x40
 80129a4:	d84f      	bhi.n	8012a46 <USBD_StdDevReq+0xbe>
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d009      	beq.n	80129be <USBD_StdDevReq+0x36>
 80129aa:	2b20      	cmp	r3, #32
 80129ac:	d14b      	bne.n	8012a46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129b4:	689b      	ldr	r3, [r3, #8]
 80129b6:	6839      	ldr	r1, [r7, #0]
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	4798      	blx	r3
      break;
 80129bc:	e048      	b.n	8012a50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	785b      	ldrb	r3, [r3, #1]
 80129c2:	2b09      	cmp	r3, #9
 80129c4:	d839      	bhi.n	8012a3a <USBD_StdDevReq+0xb2>
 80129c6:	a201      	add	r2, pc, #4	; (adr r2, 80129cc <USBD_StdDevReq+0x44>)
 80129c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129cc:	08012a1d 	.word	0x08012a1d
 80129d0:	08012a31 	.word	0x08012a31
 80129d4:	08012a3b 	.word	0x08012a3b
 80129d8:	08012a27 	.word	0x08012a27
 80129dc:	08012a3b 	.word	0x08012a3b
 80129e0:	080129ff 	.word	0x080129ff
 80129e4:	080129f5 	.word	0x080129f5
 80129e8:	08012a3b 	.word	0x08012a3b
 80129ec:	08012a13 	.word	0x08012a13
 80129f0:	08012a09 	.word	0x08012a09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80129f4:	6839      	ldr	r1, [r7, #0]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 f9dc 	bl	8012db4 <USBD_GetDescriptor>
          break;
 80129fc:	e022      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80129fe:	6839      	ldr	r1, [r7, #0]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 fb3f 	bl	8013084 <USBD_SetAddress>
          break;
 8012a06:	e01d      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 fb7e 	bl	801310c <USBD_SetConfig>
          break;
 8012a10:	e018      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012a12:	6839      	ldr	r1, [r7, #0]
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 fc07 	bl	8013228 <USBD_GetConfig>
          break;
 8012a1a:	e013      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012a1c:	6839      	ldr	r1, [r7, #0]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 fc37 	bl	8013292 <USBD_GetStatus>
          break;
 8012a24:	e00e      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012a26:	6839      	ldr	r1, [r7, #0]
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f000 fc65 	bl	80132f8 <USBD_SetFeature>
          break;
 8012a2e:	e009      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012a30:	6839      	ldr	r1, [r7, #0]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 fc74 	bl	8013320 <USBD_ClrFeature>
          break;
 8012a38:	e004      	b.n	8012a44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012a3a:	6839      	ldr	r1, [r7, #0]
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f000 fccd 	bl	80133dc <USBD_CtlError>
          break;
 8012a42:	bf00      	nop
      }
      break;
 8012a44:	e004      	b.n	8012a50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012a46:	6839      	ldr	r1, [r7, #0]
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fcc7 	bl	80133dc <USBD_CtlError>
      break;
 8012a4e:	bf00      	nop
  }

  return ret;
 8012a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3710      	adds	r7, #16
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop

08012a5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a66:	2300      	movs	r3, #0
 8012a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a72:	2b40      	cmp	r3, #64	; 0x40
 8012a74:	d005      	beq.n	8012a82 <USBD_StdItfReq+0x26>
 8012a76:	2b40      	cmp	r3, #64	; 0x40
 8012a78:	d82e      	bhi.n	8012ad8 <USBD_StdItfReq+0x7c>
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <USBD_StdItfReq+0x26>
 8012a7e:	2b20      	cmp	r3, #32
 8012a80:	d12a      	bne.n	8012ad8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a88:	3b01      	subs	r3, #1
 8012a8a:	2b02      	cmp	r3, #2
 8012a8c:	d81d      	bhi.n	8012aca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	889b      	ldrh	r3, [r3, #4]
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d813      	bhi.n	8012ac0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a9e:	689b      	ldr	r3, [r3, #8]
 8012aa0:	6839      	ldr	r1, [r7, #0]
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	4798      	blx	r3
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	88db      	ldrh	r3, [r3, #6]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d110      	bne.n	8012ad4 <USBD_StdItfReq+0x78>
 8012ab2:	7bfb      	ldrb	r3, [r7, #15]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d10d      	bne.n	8012ad4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 fd58 	bl	801356e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012abe:	e009      	b.n	8012ad4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012ac0:	6839      	ldr	r1, [r7, #0]
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f000 fc8a 	bl	80133dc <USBD_CtlError>
          break;
 8012ac8:	e004      	b.n	8012ad4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8012aca:	6839      	ldr	r1, [r7, #0]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 fc85 	bl	80133dc <USBD_CtlError>
          break;
 8012ad2:	e000      	b.n	8012ad6 <USBD_StdItfReq+0x7a>
          break;
 8012ad4:	bf00      	nop
      }
      break;
 8012ad6:	e004      	b.n	8012ae2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012ad8:	6839      	ldr	r1, [r7, #0]
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f000 fc7e 	bl	80133dc <USBD_CtlError>
      break;
 8012ae0:	bf00      	nop
  }

  return USBD_OK;
 8012ae2:	2300      	movs	r3, #0
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3710      	adds	r7, #16
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012af6:	2300      	movs	r3, #0
 8012af8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	889b      	ldrh	r3, [r3, #4]
 8012afe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012b08:	2b40      	cmp	r3, #64	; 0x40
 8012b0a:	d007      	beq.n	8012b1c <USBD_StdEPReq+0x30>
 8012b0c:	2b40      	cmp	r3, #64	; 0x40
 8012b0e:	f200 8146 	bhi.w	8012d9e <USBD_StdEPReq+0x2b2>
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d00a      	beq.n	8012b2c <USBD_StdEPReq+0x40>
 8012b16:	2b20      	cmp	r3, #32
 8012b18:	f040 8141 	bne.w	8012d9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b22:	689b      	ldr	r3, [r3, #8]
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	4798      	blx	r3
      break;
 8012b2a:	e13d      	b.n	8012da8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012b34:	2b20      	cmp	r3, #32
 8012b36:	d10a      	bne.n	8012b4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	6839      	ldr	r1, [r7, #0]
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	4798      	blx	r3
 8012b46:	4603      	mov	r3, r0
 8012b48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8012b4a:	7bfb      	ldrb	r3, [r7, #15]
 8012b4c:	e12d      	b.n	8012daa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	785b      	ldrb	r3, [r3, #1]
 8012b52:	2b03      	cmp	r3, #3
 8012b54:	d007      	beq.n	8012b66 <USBD_StdEPReq+0x7a>
 8012b56:	2b03      	cmp	r3, #3
 8012b58:	f300 811b 	bgt.w	8012d92 <USBD_StdEPReq+0x2a6>
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d072      	beq.n	8012c46 <USBD_StdEPReq+0x15a>
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d03a      	beq.n	8012bda <USBD_StdEPReq+0xee>
 8012b64:	e115      	b.n	8012d92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d002      	beq.n	8012b76 <USBD_StdEPReq+0x8a>
 8012b70:	2b03      	cmp	r3, #3
 8012b72:	d015      	beq.n	8012ba0 <USBD_StdEPReq+0xb4>
 8012b74:	e02b      	b.n	8012bce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012b76:	7bbb      	ldrb	r3, [r7, #14]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d00c      	beq.n	8012b96 <USBD_StdEPReq+0xaa>
 8012b7c:	7bbb      	ldrb	r3, [r7, #14]
 8012b7e:	2b80      	cmp	r3, #128	; 0x80
 8012b80:	d009      	beq.n	8012b96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012b82:	7bbb      	ldrb	r3, [r7, #14]
 8012b84:	4619      	mov	r1, r3
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f007 f924 	bl	8019dd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012b8c:	2180      	movs	r1, #128	; 0x80
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f007 f920 	bl	8019dd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012b94:	e020      	b.n	8012bd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8012b96:	6839      	ldr	r1, [r7, #0]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f000 fc1f 	bl	80133dc <USBD_CtlError>
              break;
 8012b9e:	e01b      	b.n	8012bd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	885b      	ldrh	r3, [r3, #2]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d10e      	bne.n	8012bc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8012ba8:	7bbb      	ldrb	r3, [r7, #14]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00b      	beq.n	8012bc6 <USBD_StdEPReq+0xda>
 8012bae:	7bbb      	ldrb	r3, [r7, #14]
 8012bb0:	2b80      	cmp	r3, #128	; 0x80
 8012bb2:	d008      	beq.n	8012bc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	88db      	ldrh	r3, [r3, #6]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d104      	bne.n	8012bc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8012bbc:	7bbb      	ldrb	r3, [r7, #14]
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f007 f907 	bl	8019dd4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f000 fcd1 	bl	801356e <USBD_CtlSendStatus>

              break;
 8012bcc:	e004      	b.n	8012bd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8012bce:	6839      	ldr	r1, [r7, #0]
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f000 fc03 	bl	80133dc <USBD_CtlError>
              break;
 8012bd6:	bf00      	nop
          }
          break;
 8012bd8:	e0e0      	b.n	8012d9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	d002      	beq.n	8012bea <USBD_StdEPReq+0xfe>
 8012be4:	2b03      	cmp	r3, #3
 8012be6:	d015      	beq.n	8012c14 <USBD_StdEPReq+0x128>
 8012be8:	e026      	b.n	8012c38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012bea:	7bbb      	ldrb	r3, [r7, #14]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d00c      	beq.n	8012c0a <USBD_StdEPReq+0x11e>
 8012bf0:	7bbb      	ldrb	r3, [r7, #14]
 8012bf2:	2b80      	cmp	r3, #128	; 0x80
 8012bf4:	d009      	beq.n	8012c0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012bf6:	7bbb      	ldrb	r3, [r7, #14]
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f007 f8ea 	bl	8019dd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012c00:	2180      	movs	r1, #128	; 0x80
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f007 f8e6 	bl	8019dd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012c08:	e01c      	b.n	8012c44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8012c0a:	6839      	ldr	r1, [r7, #0]
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f000 fbe5 	bl	80133dc <USBD_CtlError>
              break;
 8012c12:	e017      	b.n	8012c44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	885b      	ldrh	r3, [r3, #2]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d112      	bne.n	8012c42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012c1c:	7bbb      	ldrb	r3, [r7, #14]
 8012c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d004      	beq.n	8012c30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8012c26:	7bbb      	ldrb	r3, [r7, #14]
 8012c28:	4619      	mov	r1, r3
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f007 f8f1 	bl	8019e12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f000 fc9c 	bl	801356e <USBD_CtlSendStatus>
              }
              break;
 8012c36:	e004      	b.n	8012c42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8012c38:	6839      	ldr	r1, [r7, #0]
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f000 fbce 	bl	80133dc <USBD_CtlError>
              break;
 8012c40:	e000      	b.n	8012c44 <USBD_StdEPReq+0x158>
              break;
 8012c42:	bf00      	nop
          }
          break;
 8012c44:	e0aa      	b.n	8012d9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	d002      	beq.n	8012c56 <USBD_StdEPReq+0x16a>
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d032      	beq.n	8012cba <USBD_StdEPReq+0x1ce>
 8012c54:	e097      	b.n	8012d86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012c56:	7bbb      	ldrb	r3, [r7, #14]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d007      	beq.n	8012c6c <USBD_StdEPReq+0x180>
 8012c5c:	7bbb      	ldrb	r3, [r7, #14]
 8012c5e:	2b80      	cmp	r3, #128	; 0x80
 8012c60:	d004      	beq.n	8012c6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8012c62:	6839      	ldr	r1, [r7, #0]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 fbb9 	bl	80133dc <USBD_CtlError>
                break;
 8012c6a:	e091      	b.n	8012d90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	da0b      	bge.n	8012c8c <USBD_StdEPReq+0x1a0>
 8012c74:	7bbb      	ldrb	r3, [r7, #14]
 8012c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	3310      	adds	r3, #16
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	4413      	add	r3, r2
 8012c88:	3304      	adds	r3, #4
 8012c8a:	e00b      	b.n	8012ca4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012c8c:	7bbb      	ldrb	r3, [r7, #14]
 8012c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012c92:	4613      	mov	r3, r2
 8012c94:	009b      	lsls	r3, r3, #2
 8012c96:	4413      	add	r3, r2
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	3304      	adds	r3, #4
 8012ca4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	2202      	movs	r2, #2
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 fbfd 	bl	80134b2 <USBD_CtlSendData>
              break;
 8012cb8:	e06a      	b.n	8012d90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	da11      	bge.n	8012ce6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012cc2:	7bbb      	ldrb	r3, [r7, #14]
 8012cc4:	f003 020f 	and.w	r2, r3, #15
 8012cc8:	6879      	ldr	r1, [r7, #4]
 8012cca:	4613      	mov	r3, r2
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	4413      	add	r3, r2
 8012cd0:	009b      	lsls	r3, r3, #2
 8012cd2:	440b      	add	r3, r1
 8012cd4:	3318      	adds	r3, #24
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d117      	bne.n	8012d0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012cdc:	6839      	ldr	r1, [r7, #0]
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 fb7c 	bl	80133dc <USBD_CtlError>
                  break;
 8012ce4:	e054      	b.n	8012d90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012ce6:	7bbb      	ldrb	r3, [r7, #14]
 8012ce8:	f003 020f 	and.w	r2, r3, #15
 8012cec:	6879      	ldr	r1, [r7, #4]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4413      	add	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	440b      	add	r3, r1
 8012cf8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d104      	bne.n	8012d0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012d02:	6839      	ldr	r1, [r7, #0]
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 fb69 	bl	80133dc <USBD_CtlError>
                  break;
 8012d0a:	e041      	b.n	8012d90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	da0b      	bge.n	8012d2c <USBD_StdEPReq+0x240>
 8012d14:	7bbb      	ldrb	r3, [r7, #14]
 8012d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	4413      	add	r3, r2
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	3310      	adds	r3, #16
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	4413      	add	r3, r2
 8012d28:	3304      	adds	r3, #4
 8012d2a:	e00b      	b.n	8012d44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012d2c:	7bbb      	ldrb	r3, [r7, #14]
 8012d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d32:	4613      	mov	r3, r2
 8012d34:	009b      	lsls	r3, r3, #2
 8012d36:	4413      	add	r3, r2
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	4413      	add	r3, r2
 8012d42:	3304      	adds	r3, #4
 8012d44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012d46:	7bbb      	ldrb	r3, [r7, #14]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <USBD_StdEPReq+0x266>
 8012d4c:	7bbb      	ldrb	r3, [r7, #14]
 8012d4e:	2b80      	cmp	r3, #128	; 0x80
 8012d50:	d103      	bne.n	8012d5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	2200      	movs	r2, #0
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	e00e      	b.n	8012d78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8012d5a:	7bbb      	ldrb	r3, [r7, #14]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f007 f876 	bl	8019e50 <USBD_LL_IsStallEP>
 8012d64:	4603      	mov	r3, r0
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d003      	beq.n	8012d72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	e002      	b.n	8012d78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	2200      	movs	r2, #0
 8012d76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	2202      	movs	r2, #2
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f000 fb97 	bl	80134b2 <USBD_CtlSendData>
              break;
 8012d84:	e004      	b.n	8012d90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8012d86:	6839      	ldr	r1, [r7, #0]
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fb27 	bl	80133dc <USBD_CtlError>
              break;
 8012d8e:	bf00      	nop
          }
          break;
 8012d90:	e004      	b.n	8012d9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 fb21 	bl	80133dc <USBD_CtlError>
          break;
 8012d9a:	bf00      	nop
      }
      break;
 8012d9c:	e004      	b.n	8012da8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8012d9e:	6839      	ldr	r1, [r7, #0]
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 fb1b 	bl	80133dc <USBD_CtlError>
      break;
 8012da6:	bf00      	nop
  }

  return ret;
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3710      	adds	r7, #16
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
	...

08012db4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	885b      	ldrh	r3, [r3, #2]
 8012dce:	0a1b      	lsrs	r3, r3, #8
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	3b01      	subs	r3, #1
 8012dd4:	2b06      	cmp	r3, #6
 8012dd6:	f200 8128 	bhi.w	801302a <USBD_GetDescriptor+0x276>
 8012dda:	a201      	add	r2, pc, #4	; (adr r2, 8012de0 <USBD_GetDescriptor+0x2c>)
 8012ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de0:	08012dfd 	.word	0x08012dfd
 8012de4:	08012e15 	.word	0x08012e15
 8012de8:	08012e55 	.word	0x08012e55
 8012dec:	0801302b 	.word	0x0801302b
 8012df0:	0801302b 	.word	0x0801302b
 8012df4:	08012fcb 	.word	0x08012fcb
 8012df8:	08012ff7 	.word	0x08012ff7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	7c12      	ldrb	r2, [r2, #16]
 8012e08:	f107 0108 	add.w	r1, r7, #8
 8012e0c:	4610      	mov	r0, r2
 8012e0e:	4798      	blx	r3
 8012e10:	60f8      	str	r0, [r7, #12]
      break;
 8012e12:	e112      	b.n	801303a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	7c1b      	ldrb	r3, [r3, #16]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d10d      	bne.n	8012e38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e24:	f107 0208 	add.w	r2, r7, #8
 8012e28:	4610      	mov	r0, r2
 8012e2a:	4798      	blx	r3
 8012e2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	3301      	adds	r3, #1
 8012e32:	2202      	movs	r2, #2
 8012e34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012e36:	e100      	b.n	801303a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e40:	f107 0208 	add.w	r2, r7, #8
 8012e44:	4610      	mov	r0, r2
 8012e46:	4798      	blx	r3
 8012e48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	2202      	movs	r2, #2
 8012e50:	701a      	strb	r2, [r3, #0]
      break;
 8012e52:	e0f2      	b.n	801303a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	885b      	ldrh	r3, [r3, #2]
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	2b05      	cmp	r3, #5
 8012e5c:	f200 80ac 	bhi.w	8012fb8 <USBD_GetDescriptor+0x204>
 8012e60:	a201      	add	r2, pc, #4	; (adr r2, 8012e68 <USBD_GetDescriptor+0xb4>)
 8012e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e66:	bf00      	nop
 8012e68:	08012e81 	.word	0x08012e81
 8012e6c:	08012eb5 	.word	0x08012eb5
 8012e70:	08012ee9 	.word	0x08012ee9
 8012e74:	08012f1d 	.word	0x08012f1d
 8012e78:	08012f51 	.word	0x08012f51
 8012e7c:	08012f85 	.word	0x08012f85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d00b      	beq.n	8012ea4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	7c12      	ldrb	r2, [r2, #16]
 8012e98:	f107 0108 	add.w	r1, r7, #8
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	4798      	blx	r3
 8012ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ea2:	e091      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012ea4:	6839      	ldr	r1, [r7, #0]
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 fa98 	bl	80133dc <USBD_CtlError>
            err++;
 8012eac:	7afb      	ldrb	r3, [r7, #11]
 8012eae:	3301      	adds	r3, #1
 8012eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8012eb2:	e089      	b.n	8012fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d00b      	beq.n	8012ed8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	687a      	ldr	r2, [r7, #4]
 8012eca:	7c12      	ldrb	r2, [r2, #16]
 8012ecc:	f107 0108 	add.w	r1, r7, #8
 8012ed0:	4610      	mov	r0, r2
 8012ed2:	4798      	blx	r3
 8012ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ed6:	e077      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012ed8:	6839      	ldr	r1, [r7, #0]
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f000 fa7e 	bl	80133dc <USBD_CtlError>
            err++;
 8012ee0:	7afb      	ldrb	r3, [r7, #11]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ee6:	e06f      	b.n	8012fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00b      	beq.n	8012f0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012efa:	68db      	ldr	r3, [r3, #12]
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	7c12      	ldrb	r2, [r2, #16]
 8012f00:	f107 0108 	add.w	r1, r7, #8
 8012f04:	4610      	mov	r0, r2
 8012f06:	4798      	blx	r3
 8012f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f0a:	e05d      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012f0c:	6839      	ldr	r1, [r7, #0]
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f000 fa64 	bl	80133dc <USBD_CtlError>
            err++;
 8012f14:	7afb      	ldrb	r3, [r7, #11]
 8012f16:	3301      	adds	r3, #1
 8012f18:	72fb      	strb	r3, [r7, #11]
          break;
 8012f1a:	e055      	b.n	8012fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012f22:	691b      	ldr	r3, [r3, #16]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00b      	beq.n	8012f40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012f2e:	691b      	ldr	r3, [r3, #16]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	7c12      	ldrb	r2, [r2, #16]
 8012f34:	f107 0108 	add.w	r1, r7, #8
 8012f38:	4610      	mov	r0, r2
 8012f3a:	4798      	blx	r3
 8012f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f3e:	e043      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012f40:	6839      	ldr	r1, [r7, #0]
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 fa4a 	bl	80133dc <USBD_CtlError>
            err++;
 8012f48:	7afb      	ldrb	r3, [r7, #11]
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8012f4e:	e03b      	b.n	8012fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012f56:	695b      	ldr	r3, [r3, #20]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00b      	beq.n	8012f74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012f62:	695b      	ldr	r3, [r3, #20]
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	7c12      	ldrb	r2, [r2, #16]
 8012f68:	f107 0108 	add.w	r1, r7, #8
 8012f6c:	4610      	mov	r0, r2
 8012f6e:	4798      	blx	r3
 8012f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f72:	e029      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012f74:	6839      	ldr	r1, [r7, #0]
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 fa30 	bl	80133dc <USBD_CtlError>
            err++;
 8012f7c:	7afb      	ldrb	r3, [r7, #11]
 8012f7e:	3301      	adds	r3, #1
 8012f80:	72fb      	strb	r3, [r7, #11]
          break;
 8012f82:	e021      	b.n	8012fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012f8a:	699b      	ldr	r3, [r3, #24]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00b      	beq.n	8012fa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012f96:	699b      	ldr	r3, [r3, #24]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	7c12      	ldrb	r2, [r2, #16]
 8012f9c:	f107 0108 	add.w	r1, r7, #8
 8012fa0:	4610      	mov	r0, r2
 8012fa2:	4798      	blx	r3
 8012fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012fa6:	e00f      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012fa8:	6839      	ldr	r1, [r7, #0]
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f000 fa16 	bl	80133dc <USBD_CtlError>
            err++;
 8012fb0:	7afb      	ldrb	r3, [r7, #11]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8012fb6:	e007      	b.n	8012fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 fa0e 	bl	80133dc <USBD_CtlError>
          err++;
 8012fc0:	7afb      	ldrb	r3, [r7, #11]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8012fc6:	e038      	b.n	801303a <USBD_GetDescriptor+0x286>
 8012fc8:	e037      	b.n	801303a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	7c1b      	ldrb	r3, [r3, #16]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d109      	bne.n	8012fe6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fda:	f107 0208 	add.w	r2, r7, #8
 8012fde:	4610      	mov	r0, r2
 8012fe0:	4798      	blx	r3
 8012fe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012fe4:	e029      	b.n	801303a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012fe6:	6839      	ldr	r1, [r7, #0]
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 f9f7 	bl	80133dc <USBD_CtlError>
        err++;
 8012fee:	7afb      	ldrb	r3, [r7, #11]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8012ff4:	e021      	b.n	801303a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	7c1b      	ldrb	r3, [r3, #16]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d10d      	bne.n	801301a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013006:	f107 0208 	add.w	r2, r7, #8
 801300a:	4610      	mov	r0, r2
 801300c:	4798      	blx	r3
 801300e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	3301      	adds	r3, #1
 8013014:	2207      	movs	r2, #7
 8013016:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013018:	e00f      	b.n	801303a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f000 f9dd 	bl	80133dc <USBD_CtlError>
        err++;
 8013022:	7afb      	ldrb	r3, [r7, #11]
 8013024:	3301      	adds	r3, #1
 8013026:	72fb      	strb	r3, [r7, #11]
      break;
 8013028:	e007      	b.n	801303a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801302a:	6839      	ldr	r1, [r7, #0]
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f000 f9d5 	bl	80133dc <USBD_CtlError>
      err++;
 8013032:	7afb      	ldrb	r3, [r7, #11]
 8013034:	3301      	adds	r3, #1
 8013036:	72fb      	strb	r3, [r7, #11]
      break;
 8013038:	bf00      	nop
  }

  if (err != 0U)
 801303a:	7afb      	ldrb	r3, [r7, #11]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d11c      	bne.n	801307a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8013040:	893b      	ldrh	r3, [r7, #8]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d011      	beq.n	801306a <USBD_GetDescriptor+0x2b6>
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	88db      	ldrh	r3, [r3, #6]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d00d      	beq.n	801306a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	88da      	ldrh	r2, [r3, #6]
 8013052:	893b      	ldrh	r3, [r7, #8]
 8013054:	4293      	cmp	r3, r2
 8013056:	bf28      	it	cs
 8013058:	4613      	movcs	r3, r2
 801305a:	b29b      	uxth	r3, r3
 801305c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801305e:	893b      	ldrh	r3, [r7, #8]
 8013060:	461a      	mov	r2, r3
 8013062:	68f9      	ldr	r1, [r7, #12]
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f000 fa24 	bl	80134b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	88db      	ldrh	r3, [r3, #6]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d104      	bne.n	801307c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f000 fa7b 	bl	801356e <USBD_CtlSendStatus>
 8013078:	e000      	b.n	801307c <USBD_GetDescriptor+0x2c8>
    return;
 801307a:	bf00      	nop
    }
  }
}
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop

08013084 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	889b      	ldrh	r3, [r3, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d130      	bne.n	80130f8 <USBD_SetAddress+0x74>
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	88db      	ldrh	r3, [r3, #6]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d12c      	bne.n	80130f8 <USBD_SetAddress+0x74>
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	885b      	ldrh	r3, [r3, #2]
 80130a2:	2b7f      	cmp	r3, #127	; 0x7f
 80130a4:	d828      	bhi.n	80130f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	885b      	ldrh	r3, [r3, #2]
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130b8:	2b03      	cmp	r3, #3
 80130ba:	d104      	bne.n	80130c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80130bc:	6839      	ldr	r1, [r7, #0]
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 f98c 	bl	80133dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130c4:	e01d      	b.n	8013102 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	7bfa      	ldrb	r2, [r7, #15]
 80130ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80130ce:	7bfb      	ldrb	r3, [r7, #15]
 80130d0:	4619      	mov	r1, r3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f006 fee9 	bl	8019eaa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fa48 	bl	801356e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80130de:	7bfb      	ldrb	r3, [r7, #15]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d004      	beq.n	80130ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2202      	movs	r2, #2
 80130e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130ec:	e009      	b.n	8013102 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2201      	movs	r2, #1
 80130f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130f6:	e004      	b.n	8013102 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80130f8:	6839      	ldr	r1, [r7, #0]
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f000 f96e 	bl	80133dc <USBD_CtlError>
  }
}
 8013100:	bf00      	nop
 8013102:	bf00      	nop
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	885b      	ldrh	r3, [r3, #2]
 801311a:	b2da      	uxtb	r2, r3
 801311c:	4b41      	ldr	r3, [pc, #260]	; (8013224 <USBD_SetConfig+0x118>)
 801311e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013120:	4b40      	ldr	r3, [pc, #256]	; (8013224 <USBD_SetConfig+0x118>)
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	2b01      	cmp	r3, #1
 8013126:	d904      	bls.n	8013132 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8013128:	6839      	ldr	r1, [r7, #0]
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 f956 	bl	80133dc <USBD_CtlError>
 8013130:	e075      	b.n	801321e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013138:	2b02      	cmp	r3, #2
 801313a:	d002      	beq.n	8013142 <USBD_SetConfig+0x36>
 801313c:	2b03      	cmp	r3, #3
 801313e:	d023      	beq.n	8013188 <USBD_SetConfig+0x7c>
 8013140:	e062      	b.n	8013208 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8013142:	4b38      	ldr	r3, [pc, #224]	; (8013224 <USBD_SetConfig+0x118>)
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d01a      	beq.n	8013180 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801314a:	4b36      	ldr	r3, [pc, #216]	; (8013224 <USBD_SetConfig+0x118>)
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	461a      	mov	r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2203      	movs	r2, #3
 8013158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801315c:	4b31      	ldr	r3, [pc, #196]	; (8013224 <USBD_SetConfig+0x118>)
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	4619      	mov	r1, r3
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7ff f9e5 	bl	8012532 <USBD_SetClassConfig>
 8013168:	4603      	mov	r3, r0
 801316a:	2b02      	cmp	r3, #2
 801316c:	d104      	bne.n	8013178 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801316e:	6839      	ldr	r1, [r7, #0]
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 f933 	bl	80133dc <USBD_CtlError>
            return;
 8013176:	e052      	b.n	801321e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f000 f9f8 	bl	801356e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801317e:	e04e      	b.n	801321e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f000 f9f4 	bl	801356e <USBD_CtlSendStatus>
        break;
 8013186:	e04a      	b.n	801321e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013188:	4b26      	ldr	r3, [pc, #152]	; (8013224 <USBD_SetConfig+0x118>)
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d112      	bne.n	80131b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2202      	movs	r2, #2
 8013194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8013198:	4b22      	ldr	r3, [pc, #136]	; (8013224 <USBD_SetConfig+0x118>)
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	461a      	mov	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80131a2:	4b20      	ldr	r3, [pc, #128]	; (8013224 <USBD_SetConfig+0x118>)
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	4619      	mov	r1, r3
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ff f9e1 	bl	8012570 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 f9dd 	bl	801356e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80131b4:	e033      	b.n	801321e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80131b6:	4b1b      	ldr	r3, [pc, #108]	; (8013224 <USBD_SetConfig+0x118>)
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	461a      	mov	r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d01d      	beq.n	8013200 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	4619      	mov	r1, r3
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f7ff f9cf 	bl	8012570 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80131d2:	4b14      	ldr	r3, [pc, #80]	; (8013224 <USBD_SetConfig+0x118>)
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	461a      	mov	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80131dc:	4b11      	ldr	r3, [pc, #68]	; (8013224 <USBD_SetConfig+0x118>)
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	4619      	mov	r1, r3
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f7ff f9a5 	bl	8012532 <USBD_SetClassConfig>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b02      	cmp	r3, #2
 80131ec:	d104      	bne.n	80131f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80131ee:	6839      	ldr	r1, [r7, #0]
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f000 f8f3 	bl	80133dc <USBD_CtlError>
            return;
 80131f6:	e012      	b.n	801321e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f000 f9b8 	bl	801356e <USBD_CtlSendStatus>
        break;
 80131fe:	e00e      	b.n	801321e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f000 f9b4 	bl	801356e <USBD_CtlSendStatus>
        break;
 8013206:	e00a      	b.n	801321e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f000 f8e6 	bl	80133dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013210:	4b04      	ldr	r3, [pc, #16]	; (8013224 <USBD_SetConfig+0x118>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	4619      	mov	r1, r3
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7ff f9aa 	bl	8012570 <USBD_ClrClassConfig>
        break;
 801321c:	bf00      	nop
    }
  }
}
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	200099dc 	.word	0x200099dc

08013228 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	88db      	ldrh	r3, [r3, #6]
 8013236:	2b01      	cmp	r3, #1
 8013238:	d004      	beq.n	8013244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801323a:	6839      	ldr	r1, [r7, #0]
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 f8cd 	bl	80133dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013242:	e022      	b.n	801328a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801324a:	2b02      	cmp	r3, #2
 801324c:	dc02      	bgt.n	8013254 <USBD_GetConfig+0x2c>
 801324e:	2b00      	cmp	r3, #0
 8013250:	dc03      	bgt.n	801325a <USBD_GetConfig+0x32>
 8013252:	e015      	b.n	8013280 <USBD_GetConfig+0x58>
 8013254:	2b03      	cmp	r3, #3
 8013256:	d00b      	beq.n	8013270 <USBD_GetConfig+0x48>
 8013258:	e012      	b.n	8013280 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2200      	movs	r2, #0
 801325e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	3308      	adds	r3, #8
 8013264:	2201      	movs	r2, #1
 8013266:	4619      	mov	r1, r3
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f000 f922 	bl	80134b2 <USBD_CtlSendData>
        break;
 801326e:	e00c      	b.n	801328a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	3304      	adds	r3, #4
 8013274:	2201      	movs	r2, #1
 8013276:	4619      	mov	r1, r3
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f000 f91a 	bl	80134b2 <USBD_CtlSendData>
        break;
 801327e:	e004      	b.n	801328a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8013280:	6839      	ldr	r1, [r7, #0]
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 f8aa 	bl	80133dc <USBD_CtlError>
        break;
 8013288:	bf00      	nop
}
 801328a:	bf00      	nop
 801328c:	3708      	adds	r7, #8
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013292:	b580      	push	{r7, lr}
 8013294:	b082      	sub	sp, #8
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
 801329a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132a2:	3b01      	subs	r3, #1
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	d81e      	bhi.n	80132e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	88db      	ldrh	r3, [r3, #6]
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d004      	beq.n	80132ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80132b0:	6839      	ldr	r1, [r7, #0]
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 f892 	bl	80133dc <USBD_CtlError>
        break;
 80132b8:	e01a      	b.n	80132f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d005      	beq.n	80132d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	68db      	ldr	r3, [r3, #12]
 80132ce:	f043 0202 	orr.w	r2, r3, #2
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	330c      	adds	r3, #12
 80132da:	2202      	movs	r2, #2
 80132dc:	4619      	mov	r1, r3
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f000 f8e7 	bl	80134b2 <USBD_CtlSendData>
      break;
 80132e4:	e004      	b.n	80132f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80132e6:	6839      	ldr	r1, [r7, #0]
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f000 f877 	bl	80133dc <USBD_CtlError>
      break;
 80132ee:	bf00      	nop
  }
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	885b      	ldrh	r3, [r3, #2]
 8013306:	2b01      	cmp	r3, #1
 8013308:	d106      	bne.n	8013318 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2201      	movs	r2, #1
 801330e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 f92b 	bl	801356e <USBD_CtlSendStatus>
  }
}
 8013318:	bf00      	nop
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013330:	3b01      	subs	r3, #1
 8013332:	2b02      	cmp	r3, #2
 8013334:	d80b      	bhi.n	801334e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	885b      	ldrh	r3, [r3, #2]
 801333a:	2b01      	cmp	r3, #1
 801333c:	d10c      	bne.n	8013358 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2200      	movs	r2, #0
 8013342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f000 f911 	bl	801356e <USBD_CtlSendStatus>
      }
      break;
 801334c:	e004      	b.n	8013358 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801334e:	6839      	ldr	r1, [r7, #0]
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 f843 	bl	80133dc <USBD_CtlError>
      break;
 8013356:	e000      	b.n	801335a <USBD_ClrFeature+0x3a>
      break;
 8013358:	bf00      	nop
  }
}
 801335a:	bf00      	nop
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013362:	b480      	push	{r7}
 8013364:	b083      	sub	sp, #12
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	781a      	ldrb	r2, [r3, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	785a      	ldrb	r2, [r3, #1]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	3302      	adds	r3, #2
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	b29a      	uxth	r2, r3
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	3303      	adds	r3, #3
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	b29b      	uxth	r3, r3
 801338c:	021b      	lsls	r3, r3, #8
 801338e:	b29b      	uxth	r3, r3
 8013390:	4413      	add	r3, r2
 8013392:	b29a      	uxth	r2, r3
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	3304      	adds	r3, #4
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	b29a      	uxth	r2, r3
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	3305      	adds	r3, #5
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	021b      	lsls	r3, r3, #8
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	4413      	add	r3, r2
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	3306      	adds	r3, #6
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	b29a      	uxth	r2, r3
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	3307      	adds	r3, #7
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	021b      	lsls	r3, r3, #8
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	4413      	add	r3, r2
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	80da      	strh	r2, [r3, #6]

}
 80133d0:	bf00      	nop
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80133e6:	2180      	movs	r1, #128	; 0x80
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f006 fcf3 	bl	8019dd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80133ee:	2100      	movs	r1, #0
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f006 fcef 	bl	8019dd4 <USBD_LL_StallEP>
}
 80133f6:	bf00      	nop
 80133f8:	3708      	adds	r7, #8
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80133fe:	b580      	push	{r7, lr}
 8013400:	b086      	sub	sp, #24
 8013402:	af00      	add	r7, sp, #0
 8013404:	60f8      	str	r0, [r7, #12]
 8013406:	60b9      	str	r1, [r7, #8]
 8013408:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801340a:	2300      	movs	r3, #0
 801340c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d032      	beq.n	801347a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8013414:	68f8      	ldr	r0, [r7, #12]
 8013416:	f000 f834 	bl	8013482 <USBD_GetLen>
 801341a:	4603      	mov	r3, r0
 801341c:	3301      	adds	r3, #1
 801341e:	b29b      	uxth	r3, r3
 8013420:	005b      	lsls	r3, r3, #1
 8013422:	b29a      	uxth	r2, r3
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8013428:	7dfb      	ldrb	r3, [r7, #23]
 801342a:	1c5a      	adds	r2, r3, #1
 801342c:	75fa      	strb	r2, [r7, #23]
 801342e:	461a      	mov	r2, r3
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	4413      	add	r3, r2
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	7812      	ldrb	r2, [r2, #0]
 8013438:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	1c5a      	adds	r2, r3, #1
 801343e:	75fa      	strb	r2, [r7, #23]
 8013440:	461a      	mov	r2, r3
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	4413      	add	r3, r2
 8013446:	2203      	movs	r2, #3
 8013448:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801344a:	e012      	b.n	8013472 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	1c5a      	adds	r2, r3, #1
 8013450:	60fa      	str	r2, [r7, #12]
 8013452:	7dfa      	ldrb	r2, [r7, #23]
 8013454:	1c51      	adds	r1, r2, #1
 8013456:	75f9      	strb	r1, [r7, #23]
 8013458:	4611      	mov	r1, r2
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	440a      	add	r2, r1
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8013462:	7dfb      	ldrb	r3, [r7, #23]
 8013464:	1c5a      	adds	r2, r3, #1
 8013466:	75fa      	strb	r2, [r7, #23]
 8013468:	461a      	mov	r2, r3
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	4413      	add	r3, r2
 801346e:	2200      	movs	r2, #0
 8013470:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d1e8      	bne.n	801344c <USBD_GetString+0x4e>
    }
  }
}
 801347a:	bf00      	nop
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013482:	b480      	push	{r7}
 8013484:	b085      	sub	sp, #20
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801348a:	2300      	movs	r3, #0
 801348c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801348e:	e005      	b.n	801349c <USBD_GetLen+0x1a>
  {
    len++;
 8013490:	7bfb      	ldrb	r3, [r7, #15]
 8013492:	3301      	adds	r3, #1
 8013494:	73fb      	strb	r3, [r7, #15]
    buf++;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	3301      	adds	r3, #1
 801349a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d1f5      	bne.n	8013490 <USBD_GetLen+0xe>
  }

  return len;
 80134a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3714      	adds	r7, #20
 80134aa:	46bd      	mov	sp, r7
 80134ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b0:	4770      	bx	lr

080134b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b084      	sub	sp, #16
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	60f8      	str	r0, [r7, #12]
 80134ba:	60b9      	str	r1, [r7, #8]
 80134bc:	4613      	mov	r3, r2
 80134be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2202      	movs	r2, #2
 80134c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80134c8:	88fa      	ldrh	r2, [r7, #6]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80134ce:	88fa      	ldrh	r2, [r7, #6]
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134d4:	88fb      	ldrh	r3, [r7, #6]
 80134d6:	68ba      	ldr	r2, [r7, #8]
 80134d8:	2100      	movs	r1, #0
 80134da:	68f8      	ldr	r0, [r7, #12]
 80134dc:	f006 fd04 	bl	8019ee8 <USBD_LL_Transmit>

  return USBD_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b084      	sub	sp, #16
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	60f8      	str	r0, [r7, #12]
 80134f2:	60b9      	str	r1, [r7, #8]
 80134f4:	4613      	mov	r3, r2
 80134f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134f8:	88fb      	ldrh	r3, [r7, #6]
 80134fa:	68ba      	ldr	r2, [r7, #8]
 80134fc:	2100      	movs	r1, #0
 80134fe:	68f8      	ldr	r0, [r7, #12]
 8013500:	f006 fcf2 	bl	8019ee8 <USBD_LL_Transmit>

  return USBD_OK;
 8013504:	2300      	movs	r3, #0
}
 8013506:	4618      	mov	r0, r3
 8013508:	3710      	adds	r7, #16
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801350e:	b580      	push	{r7, lr}
 8013510:	b084      	sub	sp, #16
 8013512:	af00      	add	r7, sp, #0
 8013514:	60f8      	str	r0, [r7, #12]
 8013516:	60b9      	str	r1, [r7, #8]
 8013518:	4613      	mov	r3, r2
 801351a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2203      	movs	r2, #3
 8013520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013524:	88fa      	ldrh	r2, [r7, #6]
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801352c:	88fa      	ldrh	r2, [r7, #6]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013534:	88fb      	ldrh	r3, [r7, #6]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	2100      	movs	r1, #0
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f006 fcf7 	bl	8019f2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013540:	2300      	movs	r3, #0
}
 8013542:	4618      	mov	r0, r3
 8013544:	3710      	adds	r7, #16
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801354a:	b580      	push	{r7, lr}
 801354c:	b084      	sub	sp, #16
 801354e:	af00      	add	r7, sp, #0
 8013550:	60f8      	str	r0, [r7, #12]
 8013552:	60b9      	str	r1, [r7, #8]
 8013554:	4613      	mov	r3, r2
 8013556:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013558:	88fb      	ldrh	r3, [r7, #6]
 801355a:	68ba      	ldr	r2, [r7, #8]
 801355c:	2100      	movs	r1, #0
 801355e:	68f8      	ldr	r0, [r7, #12]
 8013560:	f006 fce5 	bl	8019f2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013564:	2300      	movs	r3, #0
}
 8013566:	4618      	mov	r0, r3
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}

0801356e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b082      	sub	sp, #8
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2204      	movs	r2, #4
 801357a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801357e:	2300      	movs	r3, #0
 8013580:	2200      	movs	r2, #0
 8013582:	2100      	movs	r1, #0
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f006 fcaf 	bl	8019ee8 <USBD_LL_Transmit>

  return USBD_OK;
 801358a:	2300      	movs	r3, #0
}
 801358c:	4618      	mov	r0, r3
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2205      	movs	r2, #5
 80135a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135a4:	2300      	movs	r3, #0
 80135a6:	2200      	movs	r2, #0
 80135a8:	2100      	movs	r1, #0
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f006 fcbf 	bl	8019f2e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80135b0:	2300      	movs	r3, #0
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
	...

080135bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	4603      	mov	r3, r0
 80135c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	4a08      	ldr	r2, [pc, #32]	; (80135ec <disk_status+0x30>)
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	4413      	add	r3, r2
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	79fa      	ldrb	r2, [r7, #7]
 80135d4:	4905      	ldr	r1, [pc, #20]	; (80135ec <disk_status+0x30>)
 80135d6:	440a      	add	r2, r1
 80135d8:	7a12      	ldrb	r2, [r2, #8]
 80135da:	4610      	mov	r0, r2
 80135dc:	4798      	blx	r3
 80135de:	4603      	mov	r3, r0
 80135e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	20009d50 	.word	0x20009d50

080135f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	4603      	mov	r3, r0
 80135f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80135fa:	2300      	movs	r3, #0
 80135fc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	4a0d      	ldr	r2, [pc, #52]	; (8013638 <disk_initialize+0x48>)
 8013602:	5cd3      	ldrb	r3, [r2, r3]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d111      	bne.n	801362c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8013608:	79fb      	ldrb	r3, [r7, #7]
 801360a:	4a0b      	ldr	r2, [pc, #44]	; (8013638 <disk_initialize+0x48>)
 801360c:	2101      	movs	r1, #1
 801360e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013610:	79fb      	ldrb	r3, [r7, #7]
 8013612:	4a09      	ldr	r2, [pc, #36]	; (8013638 <disk_initialize+0x48>)
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	4413      	add	r3, r2
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	79fa      	ldrb	r2, [r7, #7]
 801361e:	4906      	ldr	r1, [pc, #24]	; (8013638 <disk_initialize+0x48>)
 8013620:	440a      	add	r2, r1
 8013622:	7a12      	ldrb	r2, [r2, #8]
 8013624:	4610      	mov	r0, r2
 8013626:	4798      	blx	r3
 8013628:	4603      	mov	r3, r0
 801362a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801362c:	7bfb      	ldrb	r3, [r7, #15]
}
 801362e:	4618      	mov	r0, r3
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	20009d50 	.word	0x20009d50

0801363c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801363c:	b590      	push	{r4, r7, lr}
 801363e:	b087      	sub	sp, #28
 8013640:	af00      	add	r7, sp, #0
 8013642:	60b9      	str	r1, [r7, #8]
 8013644:	607a      	str	r2, [r7, #4]
 8013646:	603b      	str	r3, [r7, #0]
 8013648:	4603      	mov	r3, r0
 801364a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801364c:	7bfb      	ldrb	r3, [r7, #15]
 801364e:	4a0a      	ldr	r2, [pc, #40]	; (8013678 <disk_read+0x3c>)
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	4413      	add	r3, r2
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	689c      	ldr	r4, [r3, #8]
 8013658:	7bfb      	ldrb	r3, [r7, #15]
 801365a:	4a07      	ldr	r2, [pc, #28]	; (8013678 <disk_read+0x3c>)
 801365c:	4413      	add	r3, r2
 801365e:	7a18      	ldrb	r0, [r3, #8]
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	68b9      	ldr	r1, [r7, #8]
 8013666:	47a0      	blx	r4
 8013668:	4603      	mov	r3, r0
 801366a:	75fb      	strb	r3, [r7, #23]
  return res;
 801366c:	7dfb      	ldrb	r3, [r7, #23]
}
 801366e:	4618      	mov	r0, r3
 8013670:	371c      	adds	r7, #28
 8013672:	46bd      	mov	sp, r7
 8013674:	bd90      	pop	{r4, r7, pc}
 8013676:	bf00      	nop
 8013678:	20009d50 	.word	0x20009d50

0801367c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801367c:	b590      	push	{r4, r7, lr}
 801367e:	b087      	sub	sp, #28
 8013680:	af00      	add	r7, sp, #0
 8013682:	60b9      	str	r1, [r7, #8]
 8013684:	607a      	str	r2, [r7, #4]
 8013686:	603b      	str	r3, [r7, #0]
 8013688:	4603      	mov	r3, r0
 801368a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801368c:	7bfb      	ldrb	r3, [r7, #15]
 801368e:	4a0a      	ldr	r2, [pc, #40]	; (80136b8 <disk_write+0x3c>)
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	4413      	add	r3, r2
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	68dc      	ldr	r4, [r3, #12]
 8013698:	7bfb      	ldrb	r3, [r7, #15]
 801369a:	4a07      	ldr	r2, [pc, #28]	; (80136b8 <disk_write+0x3c>)
 801369c:	4413      	add	r3, r2
 801369e:	7a18      	ldrb	r0, [r3, #8]
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	68b9      	ldr	r1, [r7, #8]
 80136a6:	47a0      	blx	r4
 80136a8:	4603      	mov	r3, r0
 80136aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80136ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	371c      	adds	r7, #28
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd90      	pop	{r4, r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20009d50 	.word	0x20009d50

080136bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	4603      	mov	r3, r0
 80136c4:	603a      	str	r2, [r7, #0]
 80136c6:	71fb      	strb	r3, [r7, #7]
 80136c8:	460b      	mov	r3, r1
 80136ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80136cc:	79fb      	ldrb	r3, [r7, #7]
 80136ce:	4a09      	ldr	r2, [pc, #36]	; (80136f4 <disk_ioctl+0x38>)
 80136d0:	009b      	lsls	r3, r3, #2
 80136d2:	4413      	add	r3, r2
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	79fa      	ldrb	r2, [r7, #7]
 80136da:	4906      	ldr	r1, [pc, #24]	; (80136f4 <disk_ioctl+0x38>)
 80136dc:	440a      	add	r2, r1
 80136de:	7a10      	ldrb	r0, [r2, #8]
 80136e0:	79b9      	ldrb	r1, [r7, #6]
 80136e2:	683a      	ldr	r2, [r7, #0]
 80136e4:	4798      	blx	r3
 80136e6:	4603      	mov	r3, r0
 80136e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3710      	adds	r7, #16
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	20009d50 	.word	0x20009d50

080136f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80136f8:	b480      	push	{r7}
 80136fa:	b087      	sub	sp, #28
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 801370c:	e007      	b.n	801371e <mem_cpy+0x26>
		*d++ = *s++;
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	1c53      	adds	r3, r2, #1
 8013712:	613b      	str	r3, [r7, #16]
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	1c59      	adds	r1, r3, #1
 8013718:	6179      	str	r1, [r7, #20]
 801371a:	7812      	ldrb	r2, [r2, #0]
 801371c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	1e5a      	subs	r2, r3, #1
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1f2      	bne.n	801370e <mem_cpy+0x16>
}
 8013728:	bf00      	nop
 801372a:	bf00      	nop
 801372c:	371c      	adds	r7, #28
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr

08013736 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013736:	b480      	push	{r7}
 8013738:	b087      	sub	sp, #28
 801373a:	af00      	add	r7, sp, #0
 801373c:	60f8      	str	r0, [r7, #12]
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8013746:	e005      	b.n	8013754 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	617a      	str	r2, [r7, #20]
 801374e:	68ba      	ldr	r2, [r7, #8]
 8013750:	b2d2      	uxtb	r2, r2
 8013752:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	1e5a      	subs	r2, r3, #1
 8013758:	607a      	str	r2, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d1f4      	bne.n	8013748 <mem_set+0x12>
}
 801375e:	bf00      	nop
 8013760:	bf00      	nop
 8013762:	371c      	adds	r7, #28
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr

0801376c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 801376c:	b480      	push	{r7}
 801376e:	b089      	sub	sp, #36	; 0x24
 8013770:	af00      	add	r7, sp, #0
 8013772:	60f8      	str	r0, [r7, #12]
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	61fb      	str	r3, [r7, #28]
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013780:	2300      	movs	r3, #0
 8013782:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8013784:	bf00      	nop
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	1e5a      	subs	r2, r3, #1
 801378a:	607a      	str	r2, [r7, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00d      	beq.n	80137ac <mem_cmp+0x40>
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	1c5a      	adds	r2, r3, #1
 8013794:	61fa      	str	r2, [r7, #28]
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	4619      	mov	r1, r3
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	1c5a      	adds	r2, r3, #1
 801379e:	61ba      	str	r2, [r7, #24]
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	1acb      	subs	r3, r1, r3
 80137a4:	617b      	str	r3, [r7, #20]
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d0ec      	beq.n	8013786 <mem_cmp+0x1a>
	return r;
 80137ac:	697b      	ldr	r3, [r7, #20]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3724      	adds	r7, #36	; 0x24
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr

080137ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80137ba:	b480      	push	{r7}
 80137bc:	b083      	sub	sp, #12
 80137be:	af00      	add	r7, sp, #0
 80137c0:	6078      	str	r0, [r7, #4]
 80137c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80137c4:	e002      	b.n	80137cc <chk_chr+0x12>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	3301      	adds	r3, #1
 80137ca:	607b      	str	r3, [r7, #4]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d005      	beq.n	80137e0 <chk_chr+0x26>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	461a      	mov	r2, r3
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	4293      	cmp	r3, r2
 80137de:	d1f2      	bne.n	80137c6 <chk_chr+0xc>
	return *str;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	781b      	ldrb	r3, [r3, #0]
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	370c      	adds	r7, #12
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr

080137f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80137fa:	2300      	movs	r3, #0
 80137fc:	60bb      	str	r3, [r7, #8]
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	60fb      	str	r3, [r7, #12]
 8013802:	e038      	b.n	8013876 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8013804:	4930      	ldr	r1, [pc, #192]	; (80138c8 <chk_lock+0xd8>)
 8013806:	68fa      	ldr	r2, [r7, #12]
 8013808:	4613      	mov	r3, r2
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	4413      	add	r3, r2
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	440b      	add	r3, r1
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d029      	beq.n	801386c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8013818:	492b      	ldr	r1, [pc, #172]	; (80138c8 <chk_lock+0xd8>)
 801381a:	68fa      	ldr	r2, [r7, #12]
 801381c:	4613      	mov	r3, r2
 801381e:	005b      	lsls	r3, r3, #1
 8013820:	4413      	add	r3, r2
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	440b      	add	r3, r1
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801382e:	429a      	cmp	r2, r3
 8013830:	d11e      	bne.n	8013870 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8013832:	4925      	ldr	r1, [pc, #148]	; (80138c8 <chk_lock+0xd8>)
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	4613      	mov	r3, r2
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	4413      	add	r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	440b      	add	r3, r1
 8013840:	3304      	adds	r3, #4
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801384a:	429a      	cmp	r2, r3
 801384c:	d110      	bne.n	8013870 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801384e:	491e      	ldr	r1, [pc, #120]	; (80138c8 <chk_lock+0xd8>)
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	4613      	mov	r3, r2
 8013854:	005b      	lsls	r3, r3, #1
 8013856:	4413      	add	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	440b      	add	r3, r1
 801385c:	3308      	adds	r3, #8
 801385e:	881a      	ldrh	r2, [r3, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8013866:	429a      	cmp	r2, r3
 8013868:	d102      	bne.n	8013870 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801386a:	e007      	b.n	801387c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 801386c:	2301      	movs	r3, #1
 801386e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	3301      	adds	r3, #1
 8013874:	60fb      	str	r3, [r7, #12]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2b1d      	cmp	r3, #29
 801387a:	d9c3      	bls.n	8013804 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b1e      	cmp	r3, #30
 8013880:	d109      	bne.n	8013896 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d102      	bne.n	801388e <chk_lock+0x9e>
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	2b02      	cmp	r3, #2
 801388c:	d101      	bne.n	8013892 <chk_lock+0xa2>
 801388e:	2300      	movs	r3, #0
 8013890:	e013      	b.n	80138ba <chk_lock+0xca>
 8013892:	2312      	movs	r3, #18
 8013894:	e011      	b.n	80138ba <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d10b      	bne.n	80138b4 <chk_lock+0xc4>
 801389c:	490a      	ldr	r1, [pc, #40]	; (80138c8 <chk_lock+0xd8>)
 801389e:	68fa      	ldr	r2, [r7, #12]
 80138a0:	4613      	mov	r3, r2
 80138a2:	005b      	lsls	r3, r3, #1
 80138a4:	4413      	add	r3, r2
 80138a6:	009b      	lsls	r3, r3, #2
 80138a8:	440b      	add	r3, r1
 80138aa:	330a      	adds	r3, #10
 80138ac:	881b      	ldrh	r3, [r3, #0]
 80138ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138b2:	d101      	bne.n	80138b8 <chk_lock+0xc8>
 80138b4:	2310      	movs	r3, #16
 80138b6:	e000      	b.n	80138ba <chk_lock+0xca>
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3714      	adds	r7, #20
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	200099e8 	.word	0x200099e8

080138cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80138d2:	2300      	movs	r3, #0
 80138d4:	607b      	str	r3, [r7, #4]
 80138d6:	e002      	b.n	80138de <enq_lock+0x12>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	3301      	adds	r3, #1
 80138dc:	607b      	str	r3, [r7, #4]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2b1d      	cmp	r3, #29
 80138e2:	d809      	bhi.n	80138f8 <enq_lock+0x2c>
 80138e4:	490a      	ldr	r1, [pc, #40]	; (8013910 <enq_lock+0x44>)
 80138e6:	687a      	ldr	r2, [r7, #4]
 80138e8:	4613      	mov	r3, r2
 80138ea:	005b      	lsls	r3, r3, #1
 80138ec:	4413      	add	r3, r2
 80138ee:	009b      	lsls	r3, r3, #2
 80138f0:	440b      	add	r3, r1
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d1ef      	bne.n	80138d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b1e      	cmp	r3, #30
 80138fc:	bf14      	ite	ne
 80138fe:	2301      	movne	r3, #1
 8013900:	2300      	moveq	r3, #0
 8013902:	b2db      	uxtb	r3, r3
}
 8013904:	4618      	mov	r0, r3
 8013906:	370c      	adds	r7, #12
 8013908:	46bd      	mov	sp, r7
 801390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390e:	4770      	bx	lr
 8013910:	200099e8 	.word	0x200099e8

08013914 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013914:	b480      	push	{r7}
 8013916:	b085      	sub	sp, #20
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801391e:	2300      	movs	r3, #0
 8013920:	60fb      	str	r3, [r7, #12]
 8013922:	e02b      	b.n	801397c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8013924:	4956      	ldr	r1, [pc, #344]	; (8013a80 <inc_lock+0x16c>)
 8013926:	68fa      	ldr	r2, [r7, #12]
 8013928:	4613      	mov	r3, r2
 801392a:	005b      	lsls	r3, r3, #1
 801392c:	4413      	add	r3, r2
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	440b      	add	r3, r1
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801393a:	429a      	cmp	r2, r3
 801393c:	d11b      	bne.n	8013976 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 801393e:	4950      	ldr	r1, [pc, #320]	; (8013a80 <inc_lock+0x16c>)
 8013940:	68fa      	ldr	r2, [r7, #12]
 8013942:	4613      	mov	r3, r2
 8013944:	005b      	lsls	r3, r3, #1
 8013946:	4413      	add	r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	440b      	add	r3, r1
 801394c:	3304      	adds	r3, #4
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8013956:	429a      	cmp	r2, r3
 8013958:	d10d      	bne.n	8013976 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 801395a:	4949      	ldr	r1, [pc, #292]	; (8013a80 <inc_lock+0x16c>)
 801395c:	68fa      	ldr	r2, [r7, #12]
 801395e:	4613      	mov	r3, r2
 8013960:	005b      	lsls	r3, r3, #1
 8013962:	4413      	add	r3, r2
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	440b      	add	r3, r1
 8013968:	3308      	adds	r3, #8
 801396a:	881a      	ldrh	r2, [r3, #0]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8013972:	429a      	cmp	r2, r3
 8013974:	d006      	beq.n	8013984 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	3301      	adds	r3, #1
 801397a:	60fb      	str	r3, [r7, #12]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2b1d      	cmp	r3, #29
 8013980:	d9d0      	bls.n	8013924 <inc_lock+0x10>
 8013982:	e000      	b.n	8013986 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8013984:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2b1e      	cmp	r3, #30
 801398a:	d145      	bne.n	8013a18 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801398c:	2300      	movs	r3, #0
 801398e:	60fb      	str	r3, [r7, #12]
 8013990:	e002      	b.n	8013998 <inc_lock+0x84>
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	3301      	adds	r3, #1
 8013996:	60fb      	str	r3, [r7, #12]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2b1d      	cmp	r3, #29
 801399c:	d809      	bhi.n	80139b2 <inc_lock+0x9e>
 801399e:	4938      	ldr	r1, [pc, #224]	; (8013a80 <inc_lock+0x16c>)
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	4613      	mov	r3, r2
 80139a4:	005b      	lsls	r3, r3, #1
 80139a6:	4413      	add	r3, r2
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	440b      	add	r3, r1
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1ef      	bne.n	8013992 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2b1e      	cmp	r3, #30
 80139b6:	d101      	bne.n	80139bc <inc_lock+0xa8>
 80139b8:	2300      	movs	r3, #0
 80139ba:	e05a      	b.n	8013a72 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80139c2:	482f      	ldr	r0, [pc, #188]	; (8013a80 <inc_lock+0x16c>)
 80139c4:	68fa      	ldr	r2, [r7, #12]
 80139c6:	4613      	mov	r3, r2
 80139c8:	005b      	lsls	r3, r3, #1
 80139ca:	4413      	add	r3, r2
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	4403      	add	r3, r0
 80139d0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80139d8:	4829      	ldr	r0, [pc, #164]	; (8013a80 <inc_lock+0x16c>)
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	4613      	mov	r3, r2
 80139de:	005b      	lsls	r3, r3, #1
 80139e0:	4413      	add	r3, r2
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	4403      	add	r3, r0
 80139e6:	3304      	adds	r3, #4
 80139e8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80139f0:	4923      	ldr	r1, [pc, #140]	; (8013a80 <inc_lock+0x16c>)
 80139f2:	68fa      	ldr	r2, [r7, #12]
 80139f4:	4613      	mov	r3, r2
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	4413      	add	r3, r2
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	440b      	add	r3, r1
 80139fe:	3308      	adds	r3, #8
 8013a00:	4602      	mov	r2, r0
 8013a02:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8013a04:	491e      	ldr	r1, [pc, #120]	; (8013a80 <inc_lock+0x16c>)
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	4613      	mov	r3, r2
 8013a0a:	005b      	lsls	r3, r3, #1
 8013a0c:	4413      	add	r3, r2
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	440b      	add	r3, r1
 8013a12:	330a      	adds	r3, #10
 8013a14:	2200      	movs	r2, #0
 8013a16:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00c      	beq.n	8013a38 <inc_lock+0x124>
 8013a1e:	4918      	ldr	r1, [pc, #96]	; (8013a80 <inc_lock+0x16c>)
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	4613      	mov	r3, r2
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	4413      	add	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	440b      	add	r3, r1
 8013a2c:	330a      	adds	r3, #10
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d001      	beq.n	8013a38 <inc_lock+0x124>
 8013a34:	2300      	movs	r3, #0
 8013a36:	e01c      	b.n	8013a72 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d10b      	bne.n	8013a56 <inc_lock+0x142>
 8013a3e:	4910      	ldr	r1, [pc, #64]	; (8013a80 <inc_lock+0x16c>)
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	4613      	mov	r3, r2
 8013a44:	005b      	lsls	r3, r3, #1
 8013a46:	4413      	add	r3, r2
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	440b      	add	r3, r1
 8013a4c:	330a      	adds	r3, #10
 8013a4e:	881b      	ldrh	r3, [r3, #0]
 8013a50:	3301      	adds	r3, #1
 8013a52:	b299      	uxth	r1, r3
 8013a54:	e001      	b.n	8013a5a <inc_lock+0x146>
 8013a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013a5a:	4809      	ldr	r0, [pc, #36]	; (8013a80 <inc_lock+0x16c>)
 8013a5c:	68fa      	ldr	r2, [r7, #12]
 8013a5e:	4613      	mov	r3, r2
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	4413      	add	r3, r2
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	4403      	add	r3, r0
 8013a68:	330a      	adds	r3, #10
 8013a6a:	460a      	mov	r2, r1
 8013a6c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	3301      	adds	r3, #1
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3714      	adds	r7, #20
 8013a76:	46bd      	mov	sp, r7
 8013a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7c:	4770      	bx	lr
 8013a7e:	bf00      	nop
 8013a80:	200099e8 	.word	0x200099e8

08013a84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013a84:	b480      	push	{r7}
 8013a86:	b085      	sub	sp, #20
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	607b      	str	r3, [r7, #4]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b1d      	cmp	r3, #29
 8013a96:	d82e      	bhi.n	8013af6 <dec_lock+0x72>
		n = Files[i].ctr;
 8013a98:	491b      	ldr	r1, [pc, #108]	; (8013b08 <dec_lock+0x84>)
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	4413      	add	r3, r2
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	440b      	add	r3, r1
 8013aa6:	330a      	adds	r3, #10
 8013aa8:	881b      	ldrh	r3, [r3, #0]
 8013aaa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013aac:	89fb      	ldrh	r3, [r7, #14]
 8013aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ab2:	d101      	bne.n	8013ab8 <dec_lock+0x34>
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8013ab8:	89fb      	ldrh	r3, [r7, #14]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <dec_lock+0x40>
 8013abe:	89fb      	ldrh	r3, [r7, #14]
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013ac4:	4910      	ldr	r1, [pc, #64]	; (8013b08 <dec_lock+0x84>)
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	4613      	mov	r3, r2
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	4413      	add	r3, r2
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	440b      	add	r3, r1
 8013ad2:	330a      	adds	r3, #10
 8013ad4:	89fa      	ldrh	r2, [r7, #14]
 8013ad6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013ad8:	89fb      	ldrh	r3, [r7, #14]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d108      	bne.n	8013af0 <dec_lock+0x6c>
 8013ade:	490a      	ldr	r1, [pc, #40]	; (8013b08 <dec_lock+0x84>)
 8013ae0:	687a      	ldr	r2, [r7, #4]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	005b      	lsls	r3, r3, #1
 8013ae6:	4413      	add	r3, r2
 8013ae8:	009b      	lsls	r3, r3, #2
 8013aea:	440b      	add	r3, r1
 8013aec:	2200      	movs	r2, #0
 8013aee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013af0:	2300      	movs	r3, #0
 8013af2:	737b      	strb	r3, [r7, #13]
 8013af4:	e001      	b.n	8013afa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013af6:	2302      	movs	r3, #2
 8013af8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013afa:	7b7b      	ldrb	r3, [r7, #13]
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3714      	adds	r7, #20
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr
 8013b08:	200099e8 	.word	0x200099e8

08013b0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b085      	sub	sp, #20
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013b14:	2300      	movs	r3, #0
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	e016      	b.n	8013b48 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013b1a:	4910      	ldr	r1, [pc, #64]	; (8013b5c <clear_lock+0x50>)
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	4613      	mov	r3, r2
 8013b20:	005b      	lsls	r3, r3, #1
 8013b22:	4413      	add	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	440b      	add	r3, r1
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d108      	bne.n	8013b42 <clear_lock+0x36>
 8013b30:	490a      	ldr	r1, [pc, #40]	; (8013b5c <clear_lock+0x50>)
 8013b32:	68fa      	ldr	r2, [r7, #12]
 8013b34:	4613      	mov	r3, r2
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	4413      	add	r3, r2
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	440b      	add	r3, r1
 8013b3e:	2200      	movs	r2, #0
 8013b40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	3301      	adds	r3, #1
 8013b46:	60fb      	str	r3, [r7, #12]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2b1d      	cmp	r3, #29
 8013b4c:	d9e5      	bls.n	8013b1a <clear_lock+0xe>
	}
}
 8013b4e:	bf00      	nop
 8013b50:	bf00      	nop
 8013b52:	3714      	adds	r7, #20
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr
 8013b5c:	200099e8 	.word	0x200099e8

08013b60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d038      	beq.n	8013be8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8013b7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013b84:	6879      	ldr	r1, [r7, #4]
 8013b86:	2301      	movs	r3, #1
 8013b88:	697a      	ldr	r2, [r7, #20]
 8013b8a:	f7ff fd77 	bl	801367c <disk_write>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d002      	beq.n	8013b9a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8013b94:	2301      	movs	r3, #1
 8013b96:	73fb      	strb	r3, [r7, #15]
 8013b98:	e026      	b.n	8013be8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013ba8:	697a      	ldr	r2, [r7, #20]
 8013baa:	1ad2      	subs	r2, r2, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d218      	bcs.n	8013be8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8013bbc:	613b      	str	r3, [r7, #16]
 8013bbe:	e010      	b.n	8013be2 <sync_window+0x82>
					wsect += fs->fsize;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013bc6:	697a      	ldr	r2, [r7, #20]
 8013bc8:	4413      	add	r3, r2
 8013bca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013bd2:	6879      	ldr	r1, [r7, #4]
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	697a      	ldr	r2, [r7, #20]
 8013bd8:	f7ff fd50 	bl	801367c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	3b01      	subs	r3, #1
 8013be0:	613b      	str	r3, [r7, #16]
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d8eb      	bhi.n	8013bc0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8013be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3718      	adds	r7, #24
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b084      	sub	sp, #16
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
 8013bfa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8013c06:	683a      	ldr	r2, [r7, #0]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d01b      	beq.n	8013c44 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7ff ffa7 	bl	8013b60 <sync_window>
 8013c12:	4603      	mov	r3, r0
 8013c14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013c16:	7bfb      	ldrb	r3, [r7, #15]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d113      	bne.n	8013c44 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013c22:	6879      	ldr	r1, [r7, #4]
 8013c24:	2301      	movs	r3, #1
 8013c26:	683a      	ldr	r2, [r7, #0]
 8013c28:	f7ff fd08 	bl	801363c <disk_read>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d004      	beq.n	8013c3c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013c32:	f04f 33ff 	mov.w	r3, #4294967295
 8013c36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013c38:	2301      	movs	r3, #1
 8013c3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	683a      	ldr	r2, [r7, #0]
 8013c40:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8013c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b084      	sub	sp, #16
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7ff ff82 	bl	8013b60 <sync_window>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013c60:	7bfb      	ldrb	r3, [r7, #15]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f040 809b 	bne.w	8013d9e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013c6e:	2b03      	cmp	r3, #3
 8013c70:	f040 8088 	bne.w	8013d84 <sync_fs+0x136>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	f040 8082 	bne.w	8013d84 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c86:	2100      	movs	r1, #0
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7ff fd54 	bl	8013736 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2255      	movs	r2, #85	; 0x55
 8013c92:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	22aa      	movs	r2, #170	; 0xaa
 8013c9a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2252      	movs	r2, #82	; 0x52
 8013ca2:	701a      	strb	r2, [r3, #0]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2252      	movs	r2, #82	; 0x52
 8013ca8:	705a      	strb	r2, [r3, #1]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2261      	movs	r2, #97	; 0x61
 8013cae:	709a      	strb	r2, [r3, #2]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2241      	movs	r2, #65	; 0x41
 8013cb4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2272      	movs	r2, #114	; 0x72
 8013cba:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2272      	movs	r2, #114	; 0x72
 8013cc2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2241      	movs	r2, #65	; 0x41
 8013cca:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2261      	movs	r2, #97	; 0x61
 8013cd2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013cdc:	b2da      	uxtb	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	0a1b      	lsrs	r3, r3, #8
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	b2da      	uxtb	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013cfe:	0c1b      	lsrs	r3, r3, #16
 8013d00:	b2da      	uxtb	r2, r3
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013d0e:	0e1b      	lsrs	r3, r3, #24
 8013d10:	b2da      	uxtb	r2, r3
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013d1e:	b2da      	uxtb	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	0a1b      	lsrs	r3, r3, #8
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	b2da      	uxtb	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013d40:	0c1b      	lsrs	r3, r3, #16
 8013d42:	b2da      	uxtb	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013d50:	0e1b      	lsrs	r3, r3, #24
 8013d52:	b2da      	uxtb	r2, r3
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8013d60:	1c5a      	adds	r2, r3, #1
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013d6e:	6879      	ldr	r1, [r7, #4]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8013d76:	2301      	movs	r3, #1
 8013d78:	f7ff fc80 	bl	801367c <disk_write>
			fs->fsi_flag = 0;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ff fc94 	bl	80136bc <disk_ioctl>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d001      	beq.n	8013d9e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3710      	adds	r7, #16
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	3b02      	subs	r3, #2
 8013db6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013dbe:	3b02      	subs	r3, #2
 8013dc0:	683a      	ldr	r2, [r7, #0]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d301      	bcc.n	8013dca <clust2sect+0x22>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	e00a      	b.n	8013de0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	fb03 f202 	mul.w	r2, r3, r2
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8013dde:	4413      	add	r3, r2
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	370c      	adds	r7, #12
 8013de4:	46bd      	mov	sp, r7
 8013de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dea:	4770      	bx	lr

08013dec <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d905      	bls.n	8013e08 <get_fat+0x1c>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d302      	bcc.n	8013e0e <get_fat+0x22>
		val = 1;	/* Internal error */
 8013e08:	2301      	movs	r3, #1
 8013e0a:	617b      	str	r3, [r7, #20]
 8013e0c:	e0a3      	b.n	8013f56 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e12:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013e1a:	2b03      	cmp	r3, #3
 8013e1c:	d068      	beq.n	8013ef0 <get_fat+0x104>
 8013e1e:	2b03      	cmp	r3, #3
 8013e20:	f300 808f 	bgt.w	8013f42 <get_fat+0x156>
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	d002      	beq.n	8013e2e <get_fat+0x42>
 8013e28:	2b02      	cmp	r3, #2
 8013e2a:	d040      	beq.n	8013eae <get_fat+0xc2>
 8013e2c:	e089      	b.n	8013f42 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	60fb      	str	r3, [r7, #12]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	085b      	lsrs	r3, r3, #1
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	0a5b      	lsrs	r3, r3, #9
 8013e46:	4413      	add	r3, r2
 8013e48:	4619      	mov	r1, r3
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f7ff fed1 	bl	8013bf2 <move_window>
 8013e50:	4603      	mov	r3, r0
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d178      	bne.n	8013f48 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	60fa      	str	r2, [r7, #12]
 8013e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	5cd3      	ldrb	r3, [r2, r3]
 8013e64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	0a5b      	lsrs	r3, r3, #9
 8013e70:	4413      	add	r3, r2
 8013e72:	4619      	mov	r1, r3
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7ff febc 	bl	8013bf2 <move_window>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d165      	bne.n	8013f4c <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	5cd3      	ldrb	r3, [r2, r3]
 8013e8a:	021b      	lsls	r3, r3, #8
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	4313      	orrs	r3, r2
 8013e92:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	f003 0301 	and.w	r3, r3, #1
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d002      	beq.n	8013ea4 <get_fat+0xb8>
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	091b      	lsrs	r3, r3, #4
 8013ea2:	e002      	b.n	8013eaa <get_fat+0xbe>
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013eaa:	617b      	str	r3, [r7, #20]
			break;
 8013eac:	e053      	b.n	8013f56 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	0a1b      	lsrs	r3, r3, #8
 8013eb8:	4413      	add	r3, r2
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f7ff fe98 	bl	8013bf2 <move_window>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d143      	bne.n	8013f50 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	005b      	lsls	r3, r3, #1
 8013ecc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013ed0:	687a      	ldr	r2, [r7, #4]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	3301      	adds	r3, #1
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	021b      	lsls	r3, r3, #8
 8013ede:	b21a      	sxth	r2, r3
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	b21b      	sxth	r3, r3
 8013ee6:	4313      	orrs	r3, r2
 8013ee8:	b21b      	sxth	r3, r3
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	617b      	str	r3, [r7, #20]
			break;
 8013eee:	e032      	b.n	8013f56 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	09db      	lsrs	r3, r3, #7
 8013efa:	4413      	add	r3, r2
 8013efc:	4619      	mov	r1, r3
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ff fe77 	bl	8013bf2 <move_window>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d124      	bne.n	8013f54 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	4413      	add	r3, r2
 8013f16:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	3303      	adds	r3, #3
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	061a      	lsls	r2, r3, #24
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	3302      	adds	r3, #2
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	041b      	lsls	r3, r3, #16
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	693a      	ldr	r2, [r7, #16]
 8013f2c:	3201      	adds	r2, #1
 8013f2e:	7812      	ldrb	r2, [r2, #0]
 8013f30:	0212      	lsls	r2, r2, #8
 8013f32:	4313      	orrs	r3, r2
 8013f34:	693a      	ldr	r2, [r7, #16]
 8013f36:	7812      	ldrb	r2, [r2, #0]
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013f3e:	617b      	str	r3, [r7, #20]
			break;
 8013f40:	e009      	b.n	8013f56 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8013f42:	2301      	movs	r3, #1
 8013f44:	617b      	str	r3, [r7, #20]
 8013f46:	e006      	b.n	8013f56 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f48:	bf00      	nop
 8013f4a:	e004      	b.n	8013f56 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f4c:	bf00      	nop
 8013f4e:	e002      	b.n	8013f56 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013f50:	bf00      	nop
 8013f52:	e000      	b.n	8013f56 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013f54:	bf00      	nop
		}
	}

	return val;
 8013f56:	697b      	ldr	r3, [r7, #20]
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3718      	adds	r7, #24
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b088      	sub	sp, #32
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d905      	bls.n	8013f7e <put_fat+0x1e>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f78:	68ba      	ldr	r2, [r7, #8]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d302      	bcc.n	8013f84 <put_fat+0x24>
		res = FR_INT_ERR;
 8013f7e:	2302      	movs	r3, #2
 8013f80:	77fb      	strb	r3, [r7, #31]
 8013f82:	e0f6      	b.n	8014172 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013f8a:	2b03      	cmp	r3, #3
 8013f8c:	f000 809e 	beq.w	80140cc <put_fat+0x16c>
 8013f90:	2b03      	cmp	r3, #3
 8013f92:	f300 80e4 	bgt.w	801415e <put_fat+0x1fe>
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d002      	beq.n	8013fa0 <put_fat+0x40>
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d06f      	beq.n	801407e <put_fat+0x11e>
 8013f9e:	e0de      	b.n	801415e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	617b      	str	r3, [r7, #20]
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	085b      	lsrs	r3, r3, #1
 8013fa8:	697a      	ldr	r2, [r7, #20]
 8013faa:	4413      	add	r3, r2
 8013fac:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	0a5b      	lsrs	r3, r3, #9
 8013fb8:	4413      	add	r3, r2
 8013fba:	4619      	mov	r1, r3
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	f7ff fe18 	bl	8013bf2 <move_window>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013fc6:	7ffb      	ldrb	r3, [r7, #31]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f040 80cb 	bne.w	8014164 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	1c5a      	adds	r2, r3, #1
 8013fd2:	617a      	str	r2, [r7, #20]
 8013fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd8:	68fa      	ldr	r2, [r7, #12]
 8013fda:	4413      	add	r3, r2
 8013fdc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	f003 0301 	and.w	r3, r3, #1
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00d      	beq.n	8014004 <put_fat+0xa4>
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	781b      	ldrb	r3, [r3, #0]
 8013fec:	b25b      	sxtb	r3, r3
 8013fee:	f003 030f 	and.w	r3, r3, #15
 8013ff2:	b25a      	sxtb	r2, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	011b      	lsls	r3, r3, #4
 8013ffa:	b25b      	sxtb	r3, r3
 8013ffc:	4313      	orrs	r3, r2
 8013ffe:	b25b      	sxtb	r3, r3
 8014000:	b2db      	uxtb	r3, r3
 8014002:	e001      	b.n	8014008 <put_fat+0xa8>
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	b2db      	uxtb	r3, r3
 8014008:	69ba      	ldr	r2, [r7, #24]
 801400a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2201      	movs	r2, #1
 8014010:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	0a5b      	lsrs	r3, r3, #9
 801401e:	4413      	add	r3, r2
 8014020:	4619      	mov	r1, r3
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f7ff fde5 	bl	8013bf2 <move_window>
 8014028:	4603      	mov	r3, r0
 801402a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801402c:	7ffb      	ldrb	r3, [r7, #31]
 801402e:	2b00      	cmp	r3, #0
 8014030:	f040 809a 	bne.w	8014168 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	4413      	add	r3, r2
 801403e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	f003 0301 	and.w	r3, r3, #1
 8014046:	2b00      	cmp	r3, #0
 8014048:	d003      	beq.n	8014052 <put_fat+0xf2>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	091b      	lsrs	r3, r3, #4
 801404e:	b2db      	uxtb	r3, r3
 8014050:	e00e      	b.n	8014070 <put_fat+0x110>
 8014052:	69bb      	ldr	r3, [r7, #24]
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	b25b      	sxtb	r3, r3
 8014058:	f023 030f 	bic.w	r3, r3, #15
 801405c:	b25a      	sxtb	r2, r3
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	0a1b      	lsrs	r3, r3, #8
 8014062:	b25b      	sxtb	r3, r3
 8014064:	f003 030f 	and.w	r3, r3, #15
 8014068:	b25b      	sxtb	r3, r3
 801406a:	4313      	orrs	r3, r2
 801406c:	b25b      	sxtb	r3, r3
 801406e:	b2db      	uxtb	r3, r3
 8014070:	69ba      	ldr	r2, [r7, #24]
 8014072:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2201      	movs	r2, #1
 8014078:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 801407c:	e079      	b.n	8014172 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	0a1b      	lsrs	r3, r3, #8
 8014088:	4413      	add	r3, r2
 801408a:	4619      	mov	r1, r3
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f7ff fdb0 	bl	8013bf2 <move_window>
 8014092:	4603      	mov	r3, r0
 8014094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014096:	7ffb      	ldrb	r3, [r7, #31]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d167      	bne.n	801416c <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	005b      	lsls	r3, r3, #1
 80140a0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80140a4:	68fa      	ldr	r2, [r7, #12]
 80140a6:	4413      	add	r3, r2
 80140a8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	b2da      	uxtb	r2, r3
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	701a      	strb	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	0a1b      	lsrs	r3, r3, #8
 80140b8:	b29a      	uxth	r2, r3
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	3301      	adds	r3, #1
 80140be:	b2d2      	uxtb	r2, r2
 80140c0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2201      	movs	r2, #1
 80140c6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80140ca:	e052      	b.n	8014172 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	09db      	lsrs	r3, r3, #7
 80140d6:	4413      	add	r3, r2
 80140d8:	4619      	mov	r1, r3
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f7ff fd89 	bl	8013bf2 <move_window>
 80140e0:	4603      	mov	r3, r0
 80140e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80140e4:	7ffb      	ldrb	r3, [r7, #31]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d142      	bne.n	8014170 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	4413      	add	r3, r2
 80140f6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80140f8:	69bb      	ldr	r3, [r7, #24]
 80140fa:	3303      	adds	r3, #3
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	061a      	lsls	r2, r3, #24
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	3302      	adds	r3, #2
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	041b      	lsls	r3, r3, #16
 8014108:	4313      	orrs	r3, r2
 801410a:	69ba      	ldr	r2, [r7, #24]
 801410c:	3201      	adds	r2, #1
 801410e:	7812      	ldrb	r2, [r2, #0]
 8014110:	0212      	lsls	r2, r2, #8
 8014112:	4313      	orrs	r3, r2
 8014114:	69ba      	ldr	r2, [r7, #24]
 8014116:	7812      	ldrb	r2, [r2, #0]
 8014118:	4313      	orrs	r3, r2
 801411a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4313      	orrs	r3, r2
 8014122:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	b2da      	uxtb	r2, r3
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	701a      	strb	r2, [r3, #0]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	b29b      	uxth	r3, r3
 8014130:	0a1b      	lsrs	r3, r3, #8
 8014132:	b29a      	uxth	r2, r3
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	3301      	adds	r3, #1
 8014138:	b2d2      	uxtb	r2, r2
 801413a:	701a      	strb	r2, [r3, #0]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	0c1a      	lsrs	r2, r3, #16
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	3302      	adds	r3, #2
 8014144:	b2d2      	uxtb	r2, r2
 8014146:	701a      	strb	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	0e1a      	lsrs	r2, r3, #24
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	3303      	adds	r3, #3
 8014150:	b2d2      	uxtb	r2, r2
 8014152:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2201      	movs	r2, #1
 8014158:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 801415c:	e009      	b.n	8014172 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 801415e:	2302      	movs	r3, #2
 8014160:	77fb      	strb	r3, [r7, #31]
 8014162:	e006      	b.n	8014172 <put_fat+0x212>
			if (res != FR_OK) break;
 8014164:	bf00      	nop
 8014166:	e004      	b.n	8014172 <put_fat+0x212>
			if (res != FR_OK) break;
 8014168:	bf00      	nop
 801416a:	e002      	b.n	8014172 <put_fat+0x212>
			if (res != FR_OK) break;
 801416c:	bf00      	nop
 801416e:	e000      	b.n	8014172 <put_fat+0x212>
			if (res != FR_OK) break;
 8014170:	bf00      	nop
		}
	}

	return res;
 8014172:	7ffb      	ldrb	r3, [r7, #31]
}
 8014174:	4618      	mov	r0, r3
 8014176:	3720      	adds	r7, #32
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d905      	bls.n	8014198 <remove_chain+0x1c>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	429a      	cmp	r2, r3
 8014196:	d302      	bcc.n	801419e <remove_chain+0x22>
		res = FR_INT_ERR;
 8014198:	2302      	movs	r3, #2
 801419a:	73fb      	strb	r3, [r7, #15]
 801419c:	e043      	b.n	8014226 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80141a2:	e036      	b.n	8014212 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80141a4:	6839      	ldr	r1, [r7, #0]
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f7ff fe20 	bl	8013dec <get_fat>
 80141ac:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d035      	beq.n	8014220 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	d102      	bne.n	80141c0 <remove_chain+0x44>
 80141ba:	2302      	movs	r3, #2
 80141bc:	73fb      	strb	r3, [r7, #15]
 80141be:	e032      	b.n	8014226 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141c6:	d102      	bne.n	80141ce <remove_chain+0x52>
 80141c8:	2301      	movs	r3, #1
 80141ca:	73fb      	strb	r3, [r7, #15]
 80141cc:	e02b      	b.n	8014226 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80141ce:	2200      	movs	r2, #0
 80141d0:	6839      	ldr	r1, [r7, #0]
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7ff fec4 	bl	8013f60 <put_fat>
 80141d8:	4603      	mov	r3, r0
 80141da:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80141dc:	7bfb      	ldrb	r3, [r7, #15]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d120      	bne.n	8014224 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80141e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ec:	d00f      	beq.n	801420e <remove_chain+0x92>
				fs->free_clust++;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80141f4:	1c5a      	adds	r2, r3, #1
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8014202:	f043 0301 	orr.w	r3, r3, #1
 8014206:	b2da      	uxtb	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014218:	683a      	ldr	r2, [r7, #0]
 801421a:	429a      	cmp	r2, r3
 801421c:	d3c2      	bcc.n	80141a4 <remove_chain+0x28>
 801421e:	e002      	b.n	8014226 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8014220:	bf00      	nop
 8014222:	e000      	b.n	8014226 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8014224:	bf00      	nop
		}
	}

	return res;
 8014226:	7bfb      	ldrb	r3, [r7, #15]
}
 8014228:	4618      	mov	r0, r3
 801422a:	3710      	adds	r7, #16
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b086      	sub	sp, #24
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10f      	bne.n	8014260 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014246:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d005      	beq.n	801425a <create_chain+0x2a>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014254:	693a      	ldr	r2, [r7, #16]
 8014256:	429a      	cmp	r2, r3
 8014258:	d31c      	bcc.n	8014294 <create_chain+0x64>
 801425a:	2301      	movs	r3, #1
 801425c:	613b      	str	r3, [r7, #16]
 801425e:	e019      	b.n	8014294 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8014260:	6839      	ldr	r1, [r7, #0]
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7ff fdc2 	bl	8013dec <get_fat>
 8014268:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d801      	bhi.n	8014274 <create_chain+0x44>
 8014270:	2301      	movs	r3, #1
 8014272:	e076      	b.n	8014362 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801427a:	d101      	bne.n	8014280 <create_chain+0x50>
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	e070      	b.n	8014362 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	429a      	cmp	r2, r3
 801428a:	d201      	bcs.n	8014290 <create_chain+0x60>
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	e068      	b.n	8014362 <create_chain+0x132>
		scl = clst;
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	3301      	adds	r3, #1
 801429c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80142a4:	697a      	ldr	r2, [r7, #20]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d307      	bcc.n	80142ba <create_chain+0x8a>
			ncl = 2;
 80142aa:	2302      	movs	r3, #2
 80142ac:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d901      	bls.n	80142ba <create_chain+0x8a>
 80142b6:	2300      	movs	r3, #0
 80142b8:	e053      	b.n	8014362 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80142ba:	6979      	ldr	r1, [r7, #20]
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7ff fd95 	bl	8013dec <get_fat>
 80142c2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d00e      	beq.n	80142e8 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142d0:	d002      	beq.n	80142d8 <create_chain+0xa8>
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	d101      	bne.n	80142dc <create_chain+0xac>
			return cs;
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	e042      	b.n	8014362 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80142dc:	697a      	ldr	r2, [r7, #20]
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d1d9      	bne.n	8014298 <create_chain+0x68>
 80142e4:	2300      	movs	r3, #0
 80142e6:	e03c      	b.n	8014362 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80142e8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80142ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80142ee:	6979      	ldr	r1, [r7, #20]
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f7ff fe35 	bl	8013f60 <put_fat>
 80142f6:	4603      	mov	r3, r0
 80142f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80142fa:	7bfb      	ldrb	r3, [r7, #15]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d109      	bne.n	8014314 <create_chain+0xe4>
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d006      	beq.n	8014314 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8014306:	697a      	ldr	r2, [r7, #20]
 8014308:	6839      	ldr	r1, [r7, #0]
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f7ff fe28 	bl	8013f60 <put_fat>
 8014310:	4603      	mov	r3, r0
 8014312:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8014314:	7bfb      	ldrb	r3, [r7, #15]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d11a      	bne.n	8014350 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	697a      	ldr	r2, [r7, #20]
 801431e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801432c:	d018      	beq.n	8014360 <create_chain+0x130>
			fs->free_clust--;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014334:	1e5a      	subs	r2, r3, #1
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8014342:	f043 0301 	orr.w	r3, r3, #1
 8014346:	b2da      	uxtb	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 801434e:	e007      	b.n	8014360 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8014350:	7bfb      	ldrb	r3, [r7, #15]
 8014352:	2b01      	cmp	r3, #1
 8014354:	d102      	bne.n	801435c <create_chain+0x12c>
 8014356:	f04f 33ff 	mov.w	r3, #4294967295
 801435a:	e000      	b.n	801435e <create_chain+0x12e>
 801435c:	2301      	movs	r3, #1
 801435e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8014360:	697b      	ldr	r3, [r7, #20]
}
 8014362:	4618      	mov	r0, r3
 8014364:	3718      	adds	r7, #24
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}

0801436a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 801436a:	b480      	push	{r7}
 801436c:	b087      	sub	sp, #28
 801436e:	af00      	add	r7, sp, #0
 8014370:	6078      	str	r0, [r7, #4]
 8014372:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801437a:	3304      	adds	r3, #4
 801437c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	0a5b      	lsrs	r3, r3, #9
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8014388:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801438c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014390:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	1d1a      	adds	r2, r3, #4
 8014396:	613a      	str	r2, [r7, #16]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d101      	bne.n	80143a6 <clmt_clust+0x3c>
 80143a2:	2300      	movs	r3, #0
 80143a4:	e010      	b.n	80143c8 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80143a6:	697a      	ldr	r2, [r7, #20]
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d307      	bcc.n	80143be <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80143ae:	697a      	ldr	r2, [r7, #20]
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	1ad3      	subs	r3, r2, r3
 80143b4:	617b      	str	r3, [r7, #20]
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	3304      	adds	r3, #4
 80143ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80143bc:	e7e9      	b.n	8014392 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80143be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	4413      	add	r3, r2
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	371c      	adds	r7, #28
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80143ee:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d007      	beq.n	8014406 <dir_sdi+0x32>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80143fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014400:	697a      	ldr	r2, [r7, #20]
 8014402:	429a      	cmp	r2, r3
 8014404:	d301      	bcc.n	801440a <dir_sdi+0x36>
		return FR_INT_ERR;
 8014406:	2302      	movs	r3, #2
 8014408:	e074      	b.n	80144f4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d10c      	bne.n	801442a <dir_sdi+0x56>
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014416:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801441a:	2b03      	cmp	r3, #3
 801441c:	d105      	bne.n	801442a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014424:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8014428:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d111      	bne.n	8014454 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014436:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801443a:	461a      	mov	r2, r3
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	4293      	cmp	r3, r2
 8014440:	d301      	bcc.n	8014446 <dir_sdi+0x72>
			return FR_INT_ERR;
 8014442:	2302      	movs	r3, #2
 8014444:	e056      	b.n	80144f4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801444c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8014450:	613b      	str	r3, [r7, #16]
 8014452:	e032      	b.n	80144ba <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801445a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801445e:	011b      	lsls	r3, r3, #4
 8014460:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8014462:	e01e      	b.n	80144a2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801446a:	6979      	ldr	r1, [r7, #20]
 801446c:	4618      	mov	r0, r3
 801446e:	f7ff fcbd 	bl	8013dec <get_fat>
 8014472:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801447a:	d101      	bne.n	8014480 <dir_sdi+0xac>
 801447c:	2301      	movs	r3, #1
 801447e:	e039      	b.n	80144f4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	2b01      	cmp	r3, #1
 8014484:	d907      	bls.n	8014496 <dir_sdi+0xc2>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801448c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014490:	697a      	ldr	r2, [r7, #20]
 8014492:	429a      	cmp	r2, r3
 8014494:	d301      	bcc.n	801449a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8014496:	2302      	movs	r3, #2
 8014498:	e02c      	b.n	80144f4 <dir_sdi+0x120>
			idx -= ic;
 801449a:	683a      	ldr	r2, [r7, #0]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	1ad3      	subs	r3, r2, r3
 80144a0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80144a2:	683a      	ldr	r2, [r7, #0]
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d2dc      	bcs.n	8014464 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80144b0:	6979      	ldr	r1, [r7, #20]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7ff fc78 	bl	8013da8 <clust2sect>
 80144b8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	697a      	ldr	r2, [r7, #20]
 80144be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d101      	bne.n	80144cc <dir_sdi+0xf8>
 80144c8:	2302      	movs	r3, #2
 80144ca:	e013      	b.n	80144f4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	091a      	lsrs	r2, r3, #4
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	441a      	add	r2, r3
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80144e0:	461a      	mov	r2, r3
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	f003 030f 	and.w	r3, r3, #15
 80144e8:	015b      	lsls	r3, r3, #5
 80144ea:	441a      	add	r2, r3
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3718      	adds	r7, #24
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80144fc:	b590      	push	{r4, r7, lr}
 80144fe:	b087      	sub	sp, #28
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 801450c:	3301      	adds	r3, #1
 801450e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	b29b      	uxth	r3, r3
 8014514:	2b00      	cmp	r3, #0
 8014516:	d004      	beq.n	8014522 <dir_next+0x26>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <dir_next+0x2a>
		return FR_NO_FILE;
 8014522:	2304      	movs	r3, #4
 8014524:	e0dd      	b.n	80146e2 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f003 030f 	and.w	r3, r3, #15
 801452c:	2b00      	cmp	r3, #0
 801452e:	f040 80c6 	bne.w	80146be <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014546:	2b00      	cmp	r3, #0
 8014548:	d10b      	bne.n	8014562 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014550:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8014554:	461a      	mov	r2, r3
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	4293      	cmp	r3, r2
 801455a:	f0c0 80b0 	bcc.w	80146be <dir_next+0x1c2>
				return FR_NO_FILE;
 801455e:	2304      	movs	r3, #4
 8014560:	e0bf      	b.n	80146e2 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	091b      	lsrs	r3, r3, #4
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801456c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8014570:	3a01      	subs	r2, #1
 8014572:	4013      	ands	r3, r2
 8014574:	2b00      	cmp	r3, #0
 8014576:	f040 80a2 	bne.w	80146be <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014586:	4619      	mov	r1, r3
 8014588:	4610      	mov	r0, r2
 801458a:	f7ff fc2f 	bl	8013dec <get_fat>
 801458e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2b01      	cmp	r3, #1
 8014594:	d801      	bhi.n	801459a <dir_next+0x9e>
 8014596:	2302      	movs	r3, #2
 8014598:	e0a3      	b.n	80146e2 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a0:	d101      	bne.n	80145a6 <dir_next+0xaa>
 80145a2:	2301      	movs	r3, #1
 80145a4:	e09d      	b.n	80146e2 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80145ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80145b0:	697a      	ldr	r2, [r7, #20]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d374      	bcc.n	80146a0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d101      	bne.n	80145c0 <dir_next+0xc4>
 80145bc:	2304      	movs	r3, #4
 80145be:	e090      	b.n	80146e2 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80145cc:	4619      	mov	r1, r3
 80145ce:	4610      	mov	r0, r2
 80145d0:	f7ff fe2e 	bl	8014230 <create_chain>
 80145d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d101      	bne.n	80145e0 <dir_next+0xe4>
 80145dc:	2307      	movs	r3, #7
 80145de:	e080      	b.n	80146e2 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d101      	bne.n	80145ea <dir_next+0xee>
 80145e6:	2302      	movs	r3, #2
 80145e8:	e07b      	b.n	80146e2 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f0:	d101      	bne.n	80145f6 <dir_next+0xfa>
 80145f2:	2301      	movs	r3, #1
 80145f4:	e075      	b.n	80146e2 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7ff faaf 	bl	8013b60 <sync_window>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d001      	beq.n	801460c <dir_next+0x110>
 8014608:	2301      	movs	r3, #1
 801460a:	e06a      	b.n	80146e2 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014616:	2100      	movs	r1, #0
 8014618:	4618      	mov	r0, r3
 801461a:	f7ff f88c 	bl	8013736 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 801462a:	6979      	ldr	r1, [r7, #20]
 801462c:	4610      	mov	r0, r2
 801462e:	f7ff fbbb 	bl	8013da8 <clust2sect>
 8014632:	4603      	mov	r3, r0
 8014634:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8014638:	2300      	movs	r3, #0
 801463a:	613b      	str	r3, [r7, #16]
 801463c:	e01b      	b.n	8014676 <dir_next+0x17a>
						dp->fs->wflag = 1;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014644:	2201      	movs	r2, #1
 8014646:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014650:	4618      	mov	r0, r3
 8014652:	f7ff fa85 	bl	8013b60 <sync_window>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d001      	beq.n	8014660 <dir_next+0x164>
 801465c:	2301      	movs	r3, #1
 801465e:	e040      	b.n	80146e2 <dir_next+0x1e6>
						dp->fs->winsect++;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014666:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 801466a:	3201      	adds	r2, #1
 801466c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	3301      	adds	r3, #1
 8014674:	613b      	str	r3, [r7, #16]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801467c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8014680:	461a      	mov	r2, r3
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	4293      	cmp	r3, r2
 8014686:	d3da      	bcc.n	801463e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801468e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014698:	693a      	ldr	r2, [r7, #16]
 801469a:	1a8a      	subs	r2, r1, r2
 801469c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	697a      	ldr	r2, [r7, #20]
 80146a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80146ae:	6979      	ldr	r1, [r7, #20]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7ff fb79 	bl	8013da8 <clust2sect>
 80146b6:	4602      	mov	r2, r0
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80146ce:	461a      	mov	r2, r3
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	f003 030f 	and.w	r3, r3, #15
 80146d6:	015b      	lsls	r3, r3, #5
 80146d8:	441a      	add	r2, r3
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	371c      	adds	r7, #28
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd90      	pop	{r4, r7, pc}

080146ea <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b084      	sub	sp, #16
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
 80146f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80146f4:	2100      	movs	r1, #0
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f7ff fe6c 	bl	80143d4 <dir_sdi>
 80146fc:	4603      	mov	r3, r0
 80146fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014700:	7bfb      	ldrb	r3, [r7, #15]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d131      	bne.n	801476a <dir_alloc+0x80>
		n = 0;
 8014706:	2300      	movs	r3, #0
 8014708:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014716:	4619      	mov	r1, r3
 8014718:	4610      	mov	r0, r2
 801471a:	f7ff fa6a 	bl	8013bf2 <move_window>
 801471e:	4603      	mov	r3, r0
 8014720:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8014722:	7bfb      	ldrb	r3, [r7, #15]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d11f      	bne.n	8014768 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	2be5      	cmp	r3, #229	; 0xe5
 8014732:	d005      	beq.n	8014740 <dir_alloc+0x56>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d107      	bne.n	8014750 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	3301      	adds	r3, #1
 8014744:	60bb      	str	r3, [r7, #8]
 8014746:	68ba      	ldr	r2, [r7, #8]
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	429a      	cmp	r2, r3
 801474c:	d102      	bne.n	8014754 <dir_alloc+0x6a>
 801474e:	e00c      	b.n	801476a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014750:	2300      	movs	r3, #0
 8014752:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8014754:	2101      	movs	r1, #1
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7ff fed0 	bl	80144fc <dir_next>
 801475c:	4603      	mov	r3, r0
 801475e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8014760:	7bfb      	ldrb	r3, [r7, #15]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d0d1      	beq.n	801470a <dir_alloc+0x20>
 8014766:	e000      	b.n	801476a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8014768:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801476a:	7bfb      	ldrb	r3, [r7, #15]
 801476c:	2b04      	cmp	r3, #4
 801476e:	d101      	bne.n	8014774 <dir_alloc+0x8a>
 8014770:	2307      	movs	r3, #7
 8014772:	73fb      	strb	r3, [r7, #15]
	return res;
 8014774:	7bfb      	ldrb	r3, [r7, #15]
}
 8014776:	4618      	mov	r0, r3
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 801477e:	b480      	push	{r7}
 8014780:	b085      	sub	sp, #20
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
 8014786:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	331b      	adds	r3, #27
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	021b      	lsls	r3, r3, #8
 8014790:	b21a      	sxth	r2, r3
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	331a      	adds	r3, #26
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	b21b      	sxth	r3, r3
 801479a:	4313      	orrs	r3, r2
 801479c:	b21b      	sxth	r3, r3
 801479e:	b29b      	uxth	r3, r3
 80147a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80147a8:	2b03      	cmp	r3, #3
 80147aa:	d10f      	bne.n	80147cc <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	3315      	adds	r3, #21
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	021b      	lsls	r3, r3, #8
 80147b4:	b21a      	sxth	r2, r3
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	3314      	adds	r3, #20
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	b21b      	sxth	r3, r3
 80147be:	4313      	orrs	r3, r2
 80147c0:	b21b      	sxth	r3, r3
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	041b      	lsls	r3, r3, #16
 80147c6:	68fa      	ldr	r2, [r7, #12]
 80147c8:	4313      	orrs	r3, r2
 80147ca:	60fb      	str	r3, [r7, #12]

	return cl;
 80147cc:	68fb      	ldr	r3, [r7, #12]
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3714      	adds	r7, #20
 80147d2:	46bd      	mov	sp, r7
 80147d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d8:	4770      	bx	lr

080147da <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80147da:	b480      	push	{r7}
 80147dc:	b083      	sub	sp, #12
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
 80147e2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	331a      	adds	r3, #26
 80147e8:	683a      	ldr	r2, [r7, #0]
 80147ea:	b2d2      	uxtb	r2, r2
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	0a1b      	lsrs	r3, r3, #8
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	331b      	adds	r3, #27
 80147fa:	b2d2      	uxtb	r2, r2
 80147fc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	0c1a      	lsrs	r2, r3, #16
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	3314      	adds	r3, #20
 8014806:	b2d2      	uxtb	r2, r2
 8014808:	701a      	strb	r2, [r3, #0]
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	0c1b      	lsrs	r3, r3, #16
 801480e:	b29b      	uxth	r3, r3
 8014810:	0a1b      	lsrs	r3, r3, #8
 8014812:	b29a      	uxth	r2, r3
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	3315      	adds	r3, #21
 8014818:	b2d2      	uxtb	r2, r2
 801481a:	701a      	strb	r2, [r3, #0]
}
 801481c:	bf00      	nop
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr

08014828 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801483a:	1e5a      	subs	r2, r3, #1
 801483c:	4613      	mov	r3, r2
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	4413      	add	r3, r2
 8014842:	009b      	lsls	r3, r3, #2
 8014844:	4413      	add	r3, r2
 8014846:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8014848:	2300      	movs	r3, #0
 801484a:	613b      	str	r3, [r7, #16]
 801484c:	2301      	movs	r3, #1
 801484e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8014850:	4a2b      	ldr	r2, [pc, #172]	; (8014900 <cmp_lfn+0xd8>)
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	4413      	add	r3, r2
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	3301      	adds	r3, #1
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	4413      	add	r3, r2
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	021b      	lsls	r3, r3, #8
 8014862:	b21a      	sxth	r2, r3
 8014864:	4926      	ldr	r1, [pc, #152]	; (8014900 <cmp_lfn+0xd8>)
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	440b      	add	r3, r1
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	4619      	mov	r1, r3
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	440b      	add	r3, r1
 8014872:	781b      	ldrb	r3, [r3, #0]
 8014874:	b21b      	sxth	r3, r3
 8014876:	4313      	orrs	r3, r2
 8014878:	b21b      	sxth	r3, r3
 801487a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 801487c:	89fb      	ldrh	r3, [r7, #14]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d019      	beq.n	80148b6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8014882:	89bb      	ldrh	r3, [r7, #12]
 8014884:	4618      	mov	r0, r3
 8014886:	f002 f90f 	bl	8016aa8 <ff_wtoupper>
 801488a:	4603      	mov	r3, r0
 801488c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	2bfe      	cmp	r3, #254	; 0xfe
 8014892:	d80e      	bhi.n	80148b2 <cmp_lfn+0x8a>
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	1c5a      	adds	r2, r3, #1
 8014898:	617a      	str	r2, [r7, #20]
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	4413      	add	r3, r2
 80148a0:	881b      	ldrh	r3, [r3, #0]
 80148a2:	4618      	mov	r0, r3
 80148a4:	f002 f900 	bl	8016aa8 <ff_wtoupper>
 80148a8:	4603      	mov	r3, r0
 80148aa:	461a      	mov	r2, r3
 80148ac:	89fb      	ldrh	r3, [r7, #14]
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d008      	beq.n	80148c4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80148b2:	2300      	movs	r3, #0
 80148b4:	e01f      	b.n	80148f6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80148b6:	89bb      	ldrh	r3, [r7, #12]
 80148b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148bc:	4293      	cmp	r3, r2
 80148be:	d001      	beq.n	80148c4 <cmp_lfn+0x9c>
 80148c0:	2300      	movs	r3, #0
 80148c2:	e018      	b.n	80148f6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	3301      	adds	r3, #1
 80148c8:	613b      	str	r3, [r7, #16]
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	2b0c      	cmp	r3, #12
 80148ce:	d9bf      	bls.n	8014850 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d00b      	beq.n	80148f4 <cmp_lfn+0xcc>
 80148dc:	89fb      	ldrh	r3, [r7, #14]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d008      	beq.n	80148f4 <cmp_lfn+0xcc>
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	687a      	ldr	r2, [r7, #4]
 80148e8:	4413      	add	r3, r2
 80148ea:	881b      	ldrh	r3, [r3, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d001      	beq.n	80148f4 <cmp_lfn+0xcc>
		return 0;
 80148f0:	2300      	movs	r3, #0
 80148f2:	e000      	b.n	80148f6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80148f4:	2301      	movs	r3, #1
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3718      	adds	r7, #24
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	0801d8d4 	.word	0x0801d8d4

08014904 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8014904:	b480      	push	{r7}
 8014906:	b089      	sub	sp, #36	; 0x24
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	4611      	mov	r1, r2
 8014910:	461a      	mov	r2, r3
 8014912:	460b      	mov	r3, r1
 8014914:	71fb      	strb	r3, [r7, #7]
 8014916:	4613      	mov	r3, r2
 8014918:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	330d      	adds	r3, #13
 801491e:	79ba      	ldrb	r2, [r7, #6]
 8014920:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	330b      	adds	r3, #11
 8014926:	220f      	movs	r2, #15
 8014928:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	330c      	adds	r3, #12
 801492e:	2200      	movs	r2, #0
 8014930:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	331a      	adds	r3, #26
 8014936:	2200      	movs	r2, #0
 8014938:	701a      	strb	r2, [r3, #0]
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	331b      	adds	r3, #27
 801493e:	2200      	movs	r2, #0
 8014940:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8014942:	79fb      	ldrb	r3, [r7, #7]
 8014944:	1e5a      	subs	r2, r3, #1
 8014946:	4613      	mov	r3, r2
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	4413      	add	r3, r2
 801494c:	009b      	lsls	r3, r3, #2
 801494e:	4413      	add	r3, r2
 8014950:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8014952:	2300      	movs	r3, #0
 8014954:	82fb      	strh	r3, [r7, #22]
 8014956:	2300      	movs	r3, #0
 8014958:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 801495a:	8afb      	ldrh	r3, [r7, #22]
 801495c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014960:	4293      	cmp	r3, r2
 8014962:	d007      	beq.n	8014974 <fit_lfn+0x70>
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	1c5a      	adds	r2, r3, #1
 8014968:	61fa      	str	r2, [r7, #28]
 801496a:	005b      	lsls	r3, r3, #1
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	4413      	add	r3, r2
 8014970:	881b      	ldrh	r3, [r3, #0]
 8014972:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8014974:	4a1d      	ldr	r2, [pc, #116]	; (80149ec <fit_lfn+0xe8>)
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	4413      	add	r3, r2
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	461a      	mov	r2, r3
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	4413      	add	r3, r2
 8014982:	8afa      	ldrh	r2, [r7, #22]
 8014984:	b2d2      	uxtb	r2, r2
 8014986:	701a      	strb	r2, [r3, #0]
 8014988:	8afb      	ldrh	r3, [r7, #22]
 801498a:	0a1b      	lsrs	r3, r3, #8
 801498c:	b299      	uxth	r1, r3
 801498e:	4a17      	ldr	r2, [pc, #92]	; (80149ec <fit_lfn+0xe8>)
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	4413      	add	r3, r2
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	3301      	adds	r3, #1
 8014998:	68ba      	ldr	r2, [r7, #8]
 801499a:	4413      	add	r3, r2
 801499c:	b2ca      	uxtb	r2, r1
 801499e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80149a0:	8afb      	ldrh	r3, [r7, #22]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d102      	bne.n	80149ac <fit_lfn+0xa8>
 80149a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	3301      	adds	r3, #1
 80149b0:	61bb      	str	r3, [r7, #24]
 80149b2:	69bb      	ldr	r3, [r7, #24]
 80149b4:	2b0c      	cmp	r3, #12
 80149b6:	d9d0      	bls.n	801495a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80149b8:	8afb      	ldrh	r3, [r7, #22]
 80149ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149be:	4293      	cmp	r3, r2
 80149c0:	d006      	beq.n	80149d0 <fit_lfn+0xcc>
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	005b      	lsls	r3, r3, #1
 80149c6:	68fa      	ldr	r2, [r7, #12]
 80149c8:	4413      	add	r3, r2
 80149ca:	881b      	ldrh	r3, [r3, #0]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d103      	bne.n	80149d8 <fit_lfn+0xd4>
 80149d0:	79fb      	ldrb	r3, [r7, #7]
 80149d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	79fa      	ldrb	r2, [r7, #7]
 80149dc:	701a      	strb	r2, [r3, #0]
}
 80149de:	bf00      	nop
 80149e0:	3724      	adds	r7, #36	; 0x24
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	0801d8d4 	.word	0x0801d8d4

080149f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b08c      	sub	sp, #48	; 0x30
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	60b9      	str	r1, [r7, #8]
 80149fa:	607a      	str	r2, [r7, #4]
 80149fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80149fe:	220b      	movs	r2, #11
 8014a00:	68b9      	ldr	r1, [r7, #8]
 8014a02:	68f8      	ldr	r0, [r7, #12]
 8014a04:	f7fe fe78 	bl	80136f8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	2b05      	cmp	r3, #5
 8014a0c:	d92b      	bls.n	8014a66 <gen_numname+0x76>
		sr = seq;
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014a12:	e022      	b.n	8014a5a <gen_numname+0x6a>
			wc = *lfn++;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	1c9a      	adds	r2, r3, #2
 8014a18:	607a      	str	r2, [r7, #4]
 8014a1a:	881b      	ldrh	r3, [r3, #0]
 8014a1c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014a1e:	2300      	movs	r3, #0
 8014a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a22:	e017      	b.n	8014a54 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	005a      	lsls	r2, r3, #1
 8014a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a2a:	f003 0301 	and.w	r3, r3, #1
 8014a2e:	4413      	add	r3, r2
 8014a30:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014a32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a34:	085b      	lsrs	r3, r3, #1
 8014a36:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014a38:	69fb      	ldr	r3, [r7, #28]
 8014a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d005      	beq.n	8014a4e <gen_numname+0x5e>
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014a48:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8014a4c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8014a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a50:	3301      	adds	r3, #1
 8014a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a56:	2b0f      	cmp	r3, #15
 8014a58:	d9e4      	bls.n	8014a24 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	881b      	ldrh	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1d8      	bne.n	8014a14 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014a66:	2307      	movs	r3, #7
 8014a68:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	f003 030f 	and.w	r3, r3, #15
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	3330      	adds	r3, #48	; 0x30
 8014a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a7e:	2b39      	cmp	r3, #57	; 0x39
 8014a80:	d904      	bls.n	8014a8c <gen_numname+0x9c>
 8014a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a86:	3307      	adds	r3, #7
 8014a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8e:	1e5a      	subs	r2, r3, #1
 8014a90:	62ba      	str	r2, [r7, #40]	; 0x28
 8014a92:	3330      	adds	r3, #48	; 0x30
 8014a94:	443b      	add	r3, r7
 8014a96:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014a9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	091b      	lsrs	r3, r3, #4
 8014aa2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d1df      	bne.n	8014a6a <gen_numname+0x7a>
	ns[i] = '~';
 8014aaa:	f107 0214 	add.w	r2, r7, #20
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	4413      	add	r3, r2
 8014ab2:	227e      	movs	r2, #126	; 0x7e
 8014ab4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8014aba:	e002      	b.n	8014ac2 <gen_numname+0xd2>
 8014abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abe:	3301      	adds	r3, #1
 8014ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8014ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d205      	bcs.n	8014ad6 <gen_numname+0xe6>
 8014aca:	68fa      	ldr	r2, [r7, #12]
 8014acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ace:	4413      	add	r3, r2
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	2b20      	cmp	r3, #32
 8014ad4:	d1f2      	bne.n	8014abc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad8:	2b07      	cmp	r3, #7
 8014ada:	d807      	bhi.n	8014aec <gen_numname+0xfc>
 8014adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ade:	1c5a      	adds	r2, r3, #1
 8014ae0:	62ba      	str	r2, [r7, #40]	; 0x28
 8014ae2:	3330      	adds	r3, #48	; 0x30
 8014ae4:	443b      	add	r3, r7
 8014ae6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8014aea:	e000      	b.n	8014aee <gen_numname+0xfe>
 8014aec:	2120      	movs	r1, #32
 8014aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af0:	1c5a      	adds	r2, r3, #1
 8014af2:	627a      	str	r2, [r7, #36]	; 0x24
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	4413      	add	r3, r2
 8014af8:	460a      	mov	r2, r1
 8014afa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afe:	2b07      	cmp	r3, #7
 8014b00:	d9e9      	bls.n	8014ad6 <gen_numname+0xe6>
}
 8014b02:	bf00      	nop
 8014b04:	bf00      	nop
 8014b06:	3730      	adds	r7, #48	; 0x30
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b085      	sub	sp, #20
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014b18:	230b      	movs	r3, #11
 8014b1a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8014b1c:	7bfb      	ldrb	r3, [r7, #15]
 8014b1e:	b2da      	uxtb	r2, r3
 8014b20:	0852      	lsrs	r2, r2, #1
 8014b22:	01db      	lsls	r3, r3, #7
 8014b24:	4313      	orrs	r3, r2
 8014b26:	b2da      	uxtb	r2, r3
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	1c59      	adds	r1, r3, #1
 8014b2c:	6079      	str	r1, [r7, #4]
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	4413      	add	r3, r2
 8014b32:	73fb      	strb	r3, [r7, #15]
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	3b01      	subs	r3, #1
 8014b38:	60bb      	str	r3, [r7, #8]
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d1ed      	bne.n	8014b1c <sum_sfn+0x10>
	return sum;
 8014b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3714      	adds	r7, #20
 8014b46:	46bd      	mov	sp, r7
 8014b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4c:	4770      	bx	lr

08014b4e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b086      	sub	sp, #24
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014b56:	2100      	movs	r1, #0
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f7ff fc3b 	bl	80143d4 <dir_sdi>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014b62:	7dfb      	ldrb	r3, [r7, #23]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d001      	beq.n	8014b6c <dir_find+0x1e>
 8014b68:	7dfb      	ldrb	r3, [r7, #23]
 8014b6a:	e0ac      	b.n	8014cc6 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8014b6c:	23ff      	movs	r3, #255	; 0xff
 8014b6e:	753b      	strb	r3, [r7, #20]
 8014b70:	7d3b      	ldrb	r3, [r7, #20]
 8014b72:	757b      	strb	r3, [r7, #21]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b7a:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	4610      	mov	r0, r2
 8014b8e:	f7ff f830 	bl	8013bf2 <move_window>
 8014b92:	4603      	mov	r3, r0
 8014b94:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014b96:	7dfb      	ldrb	r3, [r7, #23]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	f040 808e 	bne.w	8014cba <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ba4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014bac:	7dbb      	ldrb	r3, [r7, #22]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d102      	bne.n	8014bb8 <dir_find+0x6a>
 8014bb2:	2304      	movs	r3, #4
 8014bb4:	75fb      	strb	r3, [r7, #23]
 8014bb6:	e085      	b.n	8014cc4 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	330b      	adds	r3, #11
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014bc2:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014bc4:	7dbb      	ldrb	r3, [r7, #22]
 8014bc6:	2be5      	cmp	r3, #229	; 0xe5
 8014bc8:	d007      	beq.n	8014bda <dir_find+0x8c>
 8014bca:	7bfb      	ldrb	r3, [r7, #15]
 8014bcc:	f003 0308 	and.w	r3, r3, #8
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00a      	beq.n	8014bea <dir_find+0x9c>
 8014bd4:	7bfb      	ldrb	r3, [r7, #15]
 8014bd6:	2b0f      	cmp	r3, #15
 8014bd8:	d007      	beq.n	8014bea <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8014bda:	23ff      	movs	r3, #255	; 0xff
 8014bdc:	757b      	strb	r3, [r7, #21]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014be4:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 8014be8:	e05c      	b.n	8014ca4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014bea:	7bfb      	ldrb	r3, [r7, #15]
 8014bec:	2b0f      	cmp	r3, #15
 8014bee:	d133      	bne.n	8014c58 <dir_find+0x10a>
				if (dp->lfn) {
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d054      	beq.n	8014ca4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014bfa:	7dbb      	ldrb	r3, [r7, #22]
 8014bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d00e      	beq.n	8014c22 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	7b5b      	ldrb	r3, [r3, #13]
 8014c08:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8014c0a:	7dbb      	ldrb	r3, [r7, #22]
 8014c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c10:	75bb      	strb	r3, [r7, #22]
 8014c12:	7dbb      	ldrb	r3, [r7, #22]
 8014c14:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8014c22:	7dba      	ldrb	r2, [r7, #22]
 8014c24:	7d7b      	ldrb	r3, [r7, #21]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d113      	bne.n	8014c52 <dir_find+0x104>
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	330d      	adds	r3, #13
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	7d3a      	ldrb	r2, [r7, #20]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d10d      	bne.n	8014c52 <dir_find+0x104>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014c3c:	6939      	ldr	r1, [r7, #16]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7ff fdf2 	bl	8014828 <cmp_lfn>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d003      	beq.n	8014c52 <dir_find+0x104>
 8014c4a:	7d7b      	ldrb	r3, [r7, #21]
 8014c4c:	3b01      	subs	r3, #1
 8014c4e:	b2db      	uxtb	r3, r3
 8014c50:	e000      	b.n	8014c54 <dir_find+0x106>
 8014c52:	23ff      	movs	r3, #255	; 0xff
 8014c54:	757b      	strb	r3, [r7, #21]
 8014c56:	e025      	b.n	8014ca4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8014c58:	7d7b      	ldrb	r3, [r7, #21]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d107      	bne.n	8014c6e <dir_find+0x120>
 8014c5e:	6938      	ldr	r0, [r7, #16]
 8014c60:	f7ff ff54 	bl	8014b0c <sum_sfn>
 8014c64:	4603      	mov	r3, r0
 8014c66:	461a      	mov	r2, r3
 8014c68:	7d3b      	ldrb	r3, [r7, #20]
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d027      	beq.n	8014cbe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014c74:	330b      	adds	r3, #11
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 0301 	and.w	r3, r3, #1
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d10a      	bne.n	8014c96 <dir_find+0x148>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014c86:	220b      	movs	r2, #11
 8014c88:	4619      	mov	r1, r3
 8014c8a:	6938      	ldr	r0, [r7, #16]
 8014c8c:	f7fe fd6e 	bl	801376c <mem_cmp>
 8014c90:	4603      	mov	r3, r0
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d015      	beq.n	8014cc2 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8014c96:	23ff      	movs	r3, #255	; 0xff
 8014c98:	757b      	strb	r3, [r7, #21]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ca0:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f7ff fc28 	bl	80144fc <dir_next>
 8014cac:	4603      	mov	r3, r0
 8014cae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014cb0:	7dfb      	ldrb	r3, [r7, #23]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f43f af63 	beq.w	8014b7e <dir_find+0x30>
 8014cb8:	e004      	b.n	8014cc4 <dir_find+0x176>
		if (res != FR_OK) break;
 8014cba:	bf00      	nop
 8014cbc:	e002      	b.n	8014cc4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8014cbe:	bf00      	nop
 8014cc0:	e000      	b.n	8014cc4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8014cc2:	bf00      	nop

	return res;
 8014cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3718      	adds	r7, #24
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
	...

08014cd0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b08c      	sub	sp, #48	; 0x30
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014cde:	623b      	str	r3, [r7, #32]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014ce6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8014ce8:	f107 030c 	add.w	r3, r7, #12
 8014cec:	220c      	movs	r2, #12
 8014cee:	6a39      	ldr	r1, [r7, #32]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7fe fd01 	bl	80136f8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8014cf6:	7dfb      	ldrb	r3, [r7, #23]
 8014cf8:	f003 0301 	and.w	r3, r3, #1
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d037      	beq.n	8014d70 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8014d00:	6a3b      	ldr	r3, [r7, #32]
 8014d02:	330b      	adds	r3, #11
 8014d04:	2200      	movs	r2, #0
 8014d06:	701a      	strb	r2, [r3, #0]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 8014d10:	2301      	movs	r3, #1
 8014d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d14:	e013      	b.n	8014d3e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8014d16:	f107 010c 	add.w	r1, r7, #12
 8014d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d1c:	69fa      	ldr	r2, [r7, #28]
 8014d1e:	6a38      	ldr	r0, [r7, #32]
 8014d20:	f7ff fe66 	bl	80149f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f7ff ff12 	bl	8014b4e <dir_find>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8014d30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d106      	bne.n	8014d46 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8014d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d40:	2b63      	cmp	r3, #99	; 0x63
 8014d42:	d9e8      	bls.n	8014d16 <dir_register+0x46>
 8014d44:	e000      	b.n	8014d48 <dir_register+0x78>
			if (res != FR_OK) break;
 8014d46:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8014d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4a:	2b64      	cmp	r3, #100	; 0x64
 8014d4c:	d101      	bne.n	8014d52 <dir_register+0x82>
 8014d4e:	2307      	movs	r3, #7
 8014d50:	e0c5      	b.n	8014ede <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8014d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d56:	2b04      	cmp	r3, #4
 8014d58:	d002      	beq.n	8014d60 <dir_register+0x90>
 8014d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d5e:	e0be      	b.n	8014ede <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8014d60:	6a3b      	ldr	r3, [r7, #32]
 8014d62:	330b      	adds	r3, #11
 8014d64:	7dfa      	ldrb	r2, [r7, #23]
 8014d66:	701a      	strb	r2, [r3, #0]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	69fa      	ldr	r2, [r7, #28]
 8014d6c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8014d70:	7dfb      	ldrb	r3, [r7, #23]
 8014d72:	f003 0302 	and.w	r3, r3, #2
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d014      	beq.n	8014da4 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d7e:	e002      	b.n	8014d86 <dir_register+0xb6>
 8014d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d82:	3301      	adds	r3, #1
 8014d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	69fa      	ldr	r2, [r7, #28]
 8014d8c:	4413      	add	r3, r2
 8014d8e:	881b      	ldrh	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d1f5      	bne.n	8014d80 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8014d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d96:	3319      	adds	r3, #25
 8014d98:	4a53      	ldr	r2, [pc, #332]	; (8014ee8 <dir_register+0x218>)
 8014d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8014d9e:	089b      	lsrs	r3, r3, #2
 8014da0:	627b      	str	r3, [r7, #36]	; 0x24
 8014da2:	e001      	b.n	8014da8 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8014da4:	2301      	movs	r3, #1
 8014da6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8014da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7ff fc9d 	bl	80146ea <dir_alloc>
 8014db0:	4603      	mov	r3, r0
 8014db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8014db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d153      	bne.n	8014e66 <dir_register+0x196>
 8014dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc0:	3b01      	subs	r3, #1
 8014dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d04d      	beq.n	8014e66 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f7ff fafb 	bl	80143d4 <dir_sdi>
 8014dde:	4603      	mov	r3, r0
 8014de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d13c      	bne.n	8014e66 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff fe8a 	bl	8014b0c <sum_sfn>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e08:	4619      	mov	r1, r3
 8014e0a:	4610      	mov	r0, r2
 8014e0c:	f7fe fef1 	bl	8013bf2 <move_window>
 8014e10:	4603      	mov	r3, r0
 8014e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8014e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d122      	bne.n	8014e64 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8014e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e2c:	b2da      	uxtb	r2, r3
 8014e2e:	7efb      	ldrb	r3, [r7, #27]
 8014e30:	f7ff fd68 	bl	8014904 <fit_lfn>
				dp->fs->wflag = 1;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8014e40:	2100      	movs	r1, #0
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f7ff fb5a 	bl	80144fc <dir_next>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8014e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d107      	bne.n	8014e66 <dir_register+0x196>
 8014e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e58:	3b01      	subs	r3, #1
 8014e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8014e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1cc      	bne.n	8014dfc <dir_register+0x12c>
 8014e62:	e000      	b.n	8014e66 <dir_register+0x196>
				if (res != FR_OK) break;
 8014e64:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8014e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d135      	bne.n	8014eda <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	f7fe feb8 	bl	8013bf2 <move_window>
 8014e82:	4603      	mov	r3, r0
 8014e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d124      	bne.n	8014eda <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e96:	2220      	movs	r2, #32
 8014e98:	2100      	movs	r1, #0
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7fe fc4b 	bl	8013736 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014eac:	220b      	movs	r2, #11
 8014eae:	4619      	mov	r1, r3
 8014eb0:	f7fe fc22 	bl	80136f8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014eba:	330b      	adds	r3, #11
 8014ebc:	781a      	ldrb	r2, [r3, #0]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ec4:	330c      	adds	r3, #12
 8014ec6:	f002 0218 	and.w	r2, r2, #24
 8014eca:	b2d2      	uxtb	r2, r2
 8014ecc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8014eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3730      	adds	r7, #48	; 0x30
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	4ec4ec4f 	.word	0x4ec4ec4f

08014eec <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b08a      	sub	sp, #40	; 0x28
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	613b      	str	r3, [r7, #16]
 8014efc:	e002      	b.n	8014f04 <create_name+0x18>
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	3301      	adds	r3, #1
 8014f02:	613b      	str	r3, [r7, #16]
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	2b2f      	cmp	r3, #47	; 0x2f
 8014f0a:	d0f8      	beq.n	8014efe <create_name+0x12>
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	2b5c      	cmp	r3, #92	; 0x5c
 8014f12:	d0f4      	beq.n	8014efe <create_name+0x12>
	lfn = dp->lfn;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014f1a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	617b      	str	r3, [r7, #20]
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	1c5a      	adds	r2, r3, #1
 8014f28:	61ba      	str	r2, [r7, #24]
 8014f2a:	693a      	ldr	r2, [r7, #16]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8014f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f34:	2b1f      	cmp	r3, #31
 8014f36:	d92f      	bls.n	8014f98 <create_name+0xac>
 8014f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f3a:	2b2f      	cmp	r3, #47	; 0x2f
 8014f3c:	d02c      	beq.n	8014f98 <create_name+0xac>
 8014f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f40:	2b5c      	cmp	r3, #92	; 0x5c
 8014f42:	d029      	beq.n	8014f98 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	2bfe      	cmp	r3, #254	; 0xfe
 8014f48:	d901      	bls.n	8014f4e <create_name+0x62>
			return FR_INVALID_NAME;
 8014f4a:	2306      	movs	r3, #6
 8014f4c:	e182      	b.n	8015254 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8014f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8014f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f56:	2101      	movs	r1, #1
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f001 fd69 	bl	8016a30 <ff_convert>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8014f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d101      	bne.n	8014f6c <create_name+0x80>
 8014f68:	2306      	movs	r3, #6
 8014f6a:	e173      	b.n	8015254 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8014f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8014f70:	d809      	bhi.n	8014f86 <create_name+0x9a>
 8014f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f74:	4619      	mov	r1, r3
 8014f76:	488e      	ldr	r0, [pc, #568]	; (80151b0 <create_name+0x2c4>)
 8014f78:	f7fe fc1f 	bl	80137ba <chk_chr>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d001      	beq.n	8014f86 <create_name+0x9a>
			return FR_INVALID_NAME;
 8014f82:	2306      	movs	r3, #6
 8014f84:	e166      	b.n	8015254 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	1c5a      	adds	r2, r3, #1
 8014f8a:	617a      	str	r2, [r7, #20]
 8014f8c:	005b      	lsls	r3, r3, #1
 8014f8e:	68fa      	ldr	r2, [r7, #12]
 8014f90:	4413      	add	r3, r2
 8014f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f94:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8014f96:	e7c5      	b.n	8014f24 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8014f98:	693a      	ldr	r2, [r7, #16]
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	441a      	add	r2, r3
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8014fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014fa4:	2b1f      	cmp	r3, #31
 8014fa6:	d801      	bhi.n	8014fac <create_name+0xc0>
 8014fa8:	2304      	movs	r3, #4
 8014faa:	e000      	b.n	8014fae <create_name+0xc2>
 8014fac:	2300      	movs	r3, #0
 8014fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8014fb2:	e011      	b.n	8014fd8 <create_name+0xec>
		w = lfn[di - 1];
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014fba:	3b01      	subs	r3, #1
 8014fbc:	005b      	lsls	r3, r3, #1
 8014fbe:	68fa      	ldr	r2, [r7, #12]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8014fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014fc8:	2b20      	cmp	r3, #32
 8014fca:	d002      	beq.n	8014fd2 <create_name+0xe6>
 8014fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014fce:	2b2e      	cmp	r3, #46	; 0x2e
 8014fd0:	d106      	bne.n	8014fe0 <create_name+0xf4>
		di--;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	3b01      	subs	r3, #1
 8014fd6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d1ea      	bne.n	8014fb4 <create_name+0xc8>
 8014fde:	e000      	b.n	8014fe2 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8014fe0:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d101      	bne.n	8014fec <create_name+0x100>
 8014fe8:	2306      	movs	r3, #6
 8014fea:	e133      	b.n	8015254 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	005b      	lsls	r3, r3, #1
 8014ff0:	68fa      	ldr	r2, [r7, #12]
 8014ff2:	4413      	add	r3, r2
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014ffe:	220b      	movs	r2, #11
 8015000:	2120      	movs	r1, #32
 8015002:	4618      	mov	r0, r3
 8015004:	f7fe fb97 	bl	8013736 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015008:	2300      	movs	r3, #0
 801500a:	61bb      	str	r3, [r7, #24]
 801500c:	e002      	b.n	8015014 <create_name+0x128>
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	3301      	adds	r3, #1
 8015012:	61bb      	str	r3, [r7, #24]
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	005b      	lsls	r3, r3, #1
 8015018:	68fa      	ldr	r2, [r7, #12]
 801501a:	4413      	add	r3, r2
 801501c:	881b      	ldrh	r3, [r3, #0]
 801501e:	2b20      	cmp	r3, #32
 8015020:	d0f5      	beq.n	801500e <create_name+0x122>
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	005b      	lsls	r3, r3, #1
 8015026:	68fa      	ldr	r2, [r7, #12]
 8015028:	4413      	add	r3, r2
 801502a:	881b      	ldrh	r3, [r3, #0]
 801502c:	2b2e      	cmp	r3, #46	; 0x2e
 801502e:	d0ee      	beq.n	801500e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d009      	beq.n	801504a <create_name+0x15e>
 8015036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801503a:	f043 0303 	orr.w	r3, r3, #3
 801503e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015042:	e002      	b.n	801504a <create_name+0x15e>
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	3b01      	subs	r3, #1
 8015048:	617b      	str	r3, [r7, #20]
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d009      	beq.n	8015064 <create_name+0x178>
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015056:	3b01      	subs	r3, #1
 8015058:	005b      	lsls	r3, r3, #1
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	4413      	add	r3, r2
 801505e:	881b      	ldrh	r3, [r3, #0]
 8015060:	2b2e      	cmp	r3, #46	; 0x2e
 8015062:	d1ef      	bne.n	8015044 <create_name+0x158>

	b = i = 0; ni = 8;
 8015064:	2300      	movs	r3, #0
 8015066:	623b      	str	r3, [r7, #32]
 8015068:	2300      	movs	r3, #0
 801506a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801506e:	2308      	movs	r3, #8
 8015070:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015072:	69bb      	ldr	r3, [r7, #24]
 8015074:	1c5a      	adds	r2, r3, #1
 8015076:	61ba      	str	r2, [r7, #24]
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	68fa      	ldr	r2, [r7, #12]
 801507c:	4413      	add	r3, r2
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015084:	2b00      	cmp	r3, #0
 8015086:	f000 8090 	beq.w	80151aa <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801508a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801508c:	2b20      	cmp	r3, #32
 801508e:	d006      	beq.n	801509e <create_name+0x1b2>
 8015090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015092:	2b2e      	cmp	r3, #46	; 0x2e
 8015094:	d10a      	bne.n	80150ac <create_name+0x1c0>
 8015096:	69ba      	ldr	r2, [r7, #24]
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	429a      	cmp	r2, r3
 801509c:	d006      	beq.n	80150ac <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 801509e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150a2:	f043 0303 	orr.w	r3, r3, #3
 80150a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150aa:	e07d      	b.n	80151a8 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80150ac:	6a3a      	ldr	r2, [r7, #32]
 80150ae:	69fb      	ldr	r3, [r7, #28]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d203      	bcs.n	80150bc <create_name+0x1d0>
 80150b4:	69ba      	ldr	r2, [r7, #24]
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d123      	bne.n	8015104 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	2b0b      	cmp	r3, #11
 80150c0:	d106      	bne.n	80150d0 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 80150c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150c6:	f043 0303 	orr.w	r3, r3, #3
 80150ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150ce:	e076      	b.n	80151be <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80150d0:	69ba      	ldr	r2, [r7, #24]
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d005      	beq.n	80150e4 <create_name+0x1f8>
 80150d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150dc:	f043 0303 	orr.w	r3, r3, #3
 80150e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80150e4:	69ba      	ldr	r2, [r7, #24]
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d867      	bhi.n	80151bc <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	61bb      	str	r3, [r7, #24]
 80150f0:	2308      	movs	r3, #8
 80150f2:	623b      	str	r3, [r7, #32]
 80150f4:	230b      	movs	r3, #11
 80150f6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80150f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015102:	e051      	b.n	80151a8 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015106:	2b7f      	cmp	r3, #127	; 0x7f
 8015108:	d914      	bls.n	8015134 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801510a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801510c:	2100      	movs	r1, #0
 801510e:	4618      	mov	r0, r3
 8015110:	f001 fc8e 	bl	8016a30 <ff_convert>
 8015114:	4603      	mov	r3, r0
 8015116:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801511a:	2b00      	cmp	r3, #0
 801511c:	d004      	beq.n	8015128 <create_name+0x23c>
 801511e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015120:	3b80      	subs	r3, #128	; 0x80
 8015122:	4a24      	ldr	r2, [pc, #144]	; (80151b4 <create_name+0x2c8>)
 8015124:	5cd3      	ldrb	r3, [r2, r3]
 8015126:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801512c:	f043 0302 	orr.w	r3, r3, #2
 8015130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015136:	2b00      	cmp	r3, #0
 8015138:	d007      	beq.n	801514a <create_name+0x25e>
 801513a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801513c:	4619      	mov	r1, r3
 801513e:	481e      	ldr	r0, [pc, #120]	; (80151b8 <create_name+0x2cc>)
 8015140:	f7fe fb3b 	bl	80137ba <chk_chr>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d008      	beq.n	801515c <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801514a:	235f      	movs	r3, #95	; 0x5f
 801514c:	84bb      	strh	r3, [r7, #36]	; 0x24
 801514e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015152:	f043 0303 	orr.w	r3, r3, #3
 8015156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801515a:	e01b      	b.n	8015194 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801515c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801515e:	2b40      	cmp	r3, #64	; 0x40
 8015160:	d909      	bls.n	8015176 <create_name+0x28a>
 8015162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015164:	2b5a      	cmp	r3, #90	; 0x5a
 8015166:	d806      	bhi.n	8015176 <create_name+0x28a>
					b |= 2;
 8015168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801516c:	f043 0302 	orr.w	r3, r3, #2
 8015170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015174:	e00e      	b.n	8015194 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8015176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015178:	2b60      	cmp	r3, #96	; 0x60
 801517a:	d90b      	bls.n	8015194 <create_name+0x2a8>
 801517c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801517e:	2b7a      	cmp	r3, #122	; 0x7a
 8015180:	d808      	bhi.n	8015194 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8015182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015186:	f043 0301 	orr.w	r3, r3, #1
 801518a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801518e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015190:	3b20      	subs	r3, #32
 8015192:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801519a:	6a3b      	ldr	r3, [r7, #32]
 801519c:	1c59      	adds	r1, r3, #1
 801519e:	6239      	str	r1, [r7, #32]
 80151a0:	4413      	add	r3, r2
 80151a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80151a4:	b2d2      	uxtb	r2, r2
 80151a6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80151a8:	e763      	b.n	8015072 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 80151aa:	bf00      	nop
 80151ac:	e007      	b.n	80151be <create_name+0x2d2>
 80151ae:	bf00      	nop
 80151b0:	0801bf58 	.word	0x0801bf58
 80151b4:	0801d854 	.word	0x0801d854
 80151b8:	0801bf64 	.word	0x0801bf64
			if (si > di) break;			/* No extension */
 80151bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	2be5      	cmp	r3, #229	; 0xe5
 80151c8:	d104      	bne.n	80151d4 <create_name+0x2e8>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80151d0:	2205      	movs	r2, #5
 80151d2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	2b08      	cmp	r3, #8
 80151d8:	d104      	bne.n	80151e4 <create_name+0x2f8>
 80151da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80151e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151e8:	f003 030c 	and.w	r3, r3, #12
 80151ec:	2b0c      	cmp	r3, #12
 80151ee:	d005      	beq.n	80151fc <create_name+0x310>
 80151f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151f4:	f003 0303 	and.w	r3, r3, #3
 80151f8:	2b03      	cmp	r3, #3
 80151fa:	d105      	bne.n	8015208 <create_name+0x31c>
		cf |= NS_LFN;
 80151fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015200:	f043 0302 	orr.w	r3, r3, #2
 8015204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801520c:	f003 0302 	and.w	r3, r3, #2
 8015210:	2b00      	cmp	r3, #0
 8015212:	d117      	bne.n	8015244 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015218:	f003 0303 	and.w	r3, r3, #3
 801521c:	2b01      	cmp	r3, #1
 801521e:	d105      	bne.n	801522c <create_name+0x340>
 8015220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015224:	f043 0310 	orr.w	r3, r3, #16
 8015228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801522c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015230:	f003 030c 	and.w	r3, r3, #12
 8015234:	2b04      	cmp	r3, #4
 8015236:	d105      	bne.n	8015244 <create_name+0x358>
 8015238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801523c:	f043 0308 	orr.w	r3, r3, #8
 8015240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801524a:	330b      	adds	r3, #11
 801524c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015250:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8015252:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8015254:	4618      	mov	r0, r3
 8015256:	3728      	adds	r7, #40	; 0x28
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	2b2f      	cmp	r3, #47	; 0x2f
 801526c:	d003      	beq.n	8015276 <follow_path+0x1a>
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	2b5c      	cmp	r3, #92	; 0x5c
 8015274:	d102      	bne.n	801527c <follow_path+0x20>
		path++;
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	3301      	adds	r3, #1
 801527a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2200      	movs	r2, #0
 8015280:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	781b      	ldrb	r3, [r3, #0]
 8015288:	2b1f      	cmp	r3, #31
 801528a:	d80a      	bhi.n	80152a2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 801528c:	2100      	movs	r1, #0
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f7ff f8a0 	bl	80143d4 <dir_sdi>
 8015294:	4603      	mov	r3, r0
 8015296:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80152a0:	e045      	b.n	801532e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80152a2:	463b      	mov	r3, r7
 80152a4:	4619      	mov	r1, r3
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f7ff fe20 	bl	8014eec <create_name>
 80152ac:	4603      	mov	r3, r0
 80152ae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80152b0:	7bfb      	ldrb	r3, [r7, #15]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d136      	bne.n	8015324 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f7ff fc49 	bl	8014b4e <dir_find>
 80152bc:	4603      	mov	r3, r0
 80152be:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80152c6:	7adb      	ldrb	r3, [r3, #11]
 80152c8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80152ca:	7bfb      	ldrb	r3, [r7, #15]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d00a      	beq.n	80152e6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80152d0:	7bfb      	ldrb	r3, [r7, #15]
 80152d2:	2b04      	cmp	r3, #4
 80152d4:	d128      	bne.n	8015328 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80152d6:	7bbb      	ldrb	r3, [r7, #14]
 80152d8:	f003 0304 	and.w	r3, r3, #4
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d123      	bne.n	8015328 <follow_path+0xcc>
 80152e0:	2305      	movs	r3, #5
 80152e2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80152e4:	e020      	b.n	8015328 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80152e6:	7bbb      	ldrb	r3, [r7, #14]
 80152e8:	f003 0304 	and.w	r3, r3, #4
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d11d      	bne.n	801532c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80152f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	330b      	adds	r3, #11
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	f003 0310 	and.w	r3, r3, #16
 8015302:	2b00      	cmp	r3, #0
 8015304:	d102      	bne.n	801530c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8015306:	2305      	movs	r3, #5
 8015308:	73fb      	strb	r3, [r7, #15]
 801530a:	e010      	b.n	801532e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	4618      	mov	r0, r3
 8015316:	f7ff fa32 	bl	801477e <ld_clust>
 801531a:	4602      	mov	r2, r0
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015322:	e7be      	b.n	80152a2 <follow_path+0x46>
			if (res != FR_OK) break;
 8015324:	bf00      	nop
 8015326:	e002      	b.n	801532e <follow_path+0xd2>
				break;
 8015328:	bf00      	nop
 801532a:	e000      	b.n	801532e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801532c:	bf00      	nop
		}
	}

	return res;
 801532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015330:	4618      	mov	r0, r3
 8015332:	3710      	adds	r7, #16
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015338:	b480      	push	{r7}
 801533a:	b087      	sub	sp, #28
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015340:	f04f 33ff 	mov.w	r3, #4294967295
 8015344:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d031      	beq.n	80153b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	617b      	str	r3, [r7, #20]
 8015354:	e002      	b.n	801535c <get_ldnumber+0x24>
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	3301      	adds	r3, #1
 801535a:	617b      	str	r3, [r7, #20]
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	2b1f      	cmp	r3, #31
 8015362:	d903      	bls.n	801536c <get_ldnumber+0x34>
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b3a      	cmp	r3, #58	; 0x3a
 801536a:	d1f4      	bne.n	8015356 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	2b3a      	cmp	r3, #58	; 0x3a
 8015372:	d11c      	bne.n	80153ae <get_ldnumber+0x76>
			tp = *path;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	1c5a      	adds	r2, r3, #1
 801537e:	60fa      	str	r2, [r7, #12]
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	3b30      	subs	r3, #48	; 0x30
 8015384:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	2b09      	cmp	r3, #9
 801538a:	d80e      	bhi.n	80153aa <get_ldnumber+0x72>
 801538c:	68fa      	ldr	r2, [r7, #12]
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	429a      	cmp	r2, r3
 8015392:	d10a      	bne.n	80153aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d107      	bne.n	80153aa <get_ldnumber+0x72>
					vol = (int)i;
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	3301      	adds	r3, #1
 80153a2:	617b      	str	r3, [r7, #20]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	697a      	ldr	r2, [r7, #20]
 80153a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	e002      	b.n	80153b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80153ae:	2300      	movs	r3, #0
 80153b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80153b2:	693b      	ldr	r3, [r7, #16]
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	371c      	adds	r7, #28
 80153b8:	46bd      	mov	sp, r7
 80153ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153be:	4770      	bx	lr

080153c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
 80153c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2200      	movs	r2, #0
 80153ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f04f 32ff 	mov.w	r2, #4294967295
 80153d8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80153dc:	6839      	ldr	r1, [r7, #0]
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7fe fc07 	bl	8013bf2 <move_window>
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d001      	beq.n	80153ee <check_fs+0x2e>
		return 3;
 80153ea:	2303      	movs	r3, #3
 80153ec:	e04a      	b.n	8015484 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80153f4:	3301      	adds	r3, #1
 80153f6:	781b      	ldrb	r3, [r3, #0]
 80153f8:	021b      	lsls	r3, r3, #8
 80153fa:	b21a      	sxth	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8015402:	b21b      	sxth	r3, r3
 8015404:	4313      	orrs	r3, r2
 8015406:	b21b      	sxth	r3, r3
 8015408:	4a20      	ldr	r2, [pc, #128]	; (801548c <check_fs+0xcc>)
 801540a:	4293      	cmp	r3, r2
 801540c:	d001      	beq.n	8015412 <check_fs+0x52>
		return 2;
 801540e:	2302      	movs	r3, #2
 8015410:	e038      	b.n	8015484 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	3336      	adds	r3, #54	; 0x36
 8015416:	3303      	adds	r3, #3
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	061a      	lsls	r2, r3, #24
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	3336      	adds	r3, #54	; 0x36
 8015420:	3302      	adds	r3, #2
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	041b      	lsls	r3, r3, #16
 8015426:	4313      	orrs	r3, r2
 8015428:	687a      	ldr	r2, [r7, #4]
 801542a:	3236      	adds	r2, #54	; 0x36
 801542c:	3201      	adds	r2, #1
 801542e:	7812      	ldrb	r2, [r2, #0]
 8015430:	0212      	lsls	r2, r2, #8
 8015432:	4313      	orrs	r3, r2
 8015434:	687a      	ldr	r2, [r7, #4]
 8015436:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 801543a:	4313      	orrs	r3, r2
 801543c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015440:	4a13      	ldr	r2, [pc, #76]	; (8015490 <check_fs+0xd0>)
 8015442:	4293      	cmp	r3, r2
 8015444:	d101      	bne.n	801544a <check_fs+0x8a>
		return 0;
 8015446:	2300      	movs	r3, #0
 8015448:	e01c      	b.n	8015484 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	3352      	adds	r3, #82	; 0x52
 801544e:	3303      	adds	r3, #3
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	061a      	lsls	r2, r3, #24
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	3352      	adds	r3, #82	; 0x52
 8015458:	3302      	adds	r3, #2
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	041b      	lsls	r3, r3, #16
 801545e:	4313      	orrs	r3, r2
 8015460:	687a      	ldr	r2, [r7, #4]
 8015462:	3252      	adds	r2, #82	; 0x52
 8015464:	3201      	adds	r2, #1
 8015466:	7812      	ldrb	r2, [r2, #0]
 8015468:	0212      	lsls	r2, r2, #8
 801546a:	4313      	orrs	r3, r2
 801546c:	687a      	ldr	r2, [r7, #4]
 801546e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8015472:	4313      	orrs	r3, r2
 8015474:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015478:	4a05      	ldr	r2, [pc, #20]	; (8015490 <check_fs+0xd0>)
 801547a:	4293      	cmp	r3, r2
 801547c:	d101      	bne.n	8015482 <check_fs+0xc2>
		return 0;
 801547e:	2300      	movs	r3, #0
 8015480:	e000      	b.n	8015484 <check_fs+0xc4>

	return 1;
 8015482:	2301      	movs	r3, #1
}
 8015484:	4618      	mov	r0, r3
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	ffffaa55 	.word	0xffffaa55
 8015490:	00544146 	.word	0x00544146

08015494 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b096      	sub	sp, #88	; 0x58
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	4613      	mov	r3, r2
 80154a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2200      	movs	r2, #0
 80154a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80154a8:	68b8      	ldr	r0, [r7, #8]
 80154aa:	f7ff ff45 	bl	8015338 <get_ldnumber>
 80154ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80154b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	da01      	bge.n	80154ba <find_volume+0x26>
 80154b6:	230b      	movs	r3, #11
 80154b8:	e2a8      	b.n	8015a0c <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80154ba:	4a9d      	ldr	r2, [pc, #628]	; (8015730 <find_volume+0x29c>)
 80154bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80154c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d101      	bne.n	80154ce <find_volume+0x3a>
 80154ca:	230c      	movs	r3, #12
 80154cc:	e29e      	b.n	8015a0c <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80154d2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80154d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d01b      	beq.n	8015516 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80154de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154e0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7fe f869 	bl	80135bc <disk_status>
 80154ea:	4603      	mov	r3, r0
 80154ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80154f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80154f4:	f003 0301 	and.w	r3, r3, #1
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d10c      	bne.n	8015516 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80154fc:	79fb      	ldrb	r3, [r7, #7]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d007      	beq.n	8015512 <find_volume+0x7e>
 8015502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015506:	f003 0304 	and.w	r3, r3, #4
 801550a:	2b00      	cmp	r3, #0
 801550c:	d001      	beq.n	8015512 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 801550e:	230a      	movs	r3, #10
 8015510:	e27c      	b.n	8015a0c <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8015512:	2300      	movs	r3, #0
 8015514:	e27a      	b.n	8015a0c <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015518:	2200      	movs	r2, #0
 801551a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015520:	b2da      	uxtb	r2, r3
 8015522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015524:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801552a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801552e:	4618      	mov	r0, r3
 8015530:	f7fe f85e 	bl	80135f0 <disk_initialize>
 8015534:	4603      	mov	r3, r0
 8015536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 801553a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801553e:	f003 0301 	and.w	r3, r3, #1
 8015542:	2b00      	cmp	r3, #0
 8015544:	d001      	beq.n	801554a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015546:	2303      	movs	r3, #3
 8015548:	e260      	b.n	8015a0c <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801554a:	79fb      	ldrb	r3, [r7, #7]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d007      	beq.n	8015560 <find_volume+0xcc>
 8015550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015554:	f003 0304 	and.w	r3, r3, #4
 8015558:	2b00      	cmp	r3, #0
 801555a:	d001      	beq.n	8015560 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 801555c:	230a      	movs	r3, #10
 801555e:	e255      	b.n	8015a0c <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8015560:	2300      	movs	r3, #0
 8015562:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8015564:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015566:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015568:	f7ff ff2a 	bl	80153c0 <check_fs>
 801556c:	4603      	mov	r3, r0
 801556e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8015572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015576:	2b01      	cmp	r3, #1
 8015578:	d153      	bne.n	8015622 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801557a:	2300      	movs	r3, #0
 801557c:	643b      	str	r3, [r7, #64]	; 0x40
 801557e:	e028      	b.n	80155d2 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8015580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015584:	011b      	lsls	r3, r3, #4
 8015586:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801558a:	4413      	add	r3, r2
 801558c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015590:	3304      	adds	r3, #4
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d012      	beq.n	80155be <find_volume+0x12a>
 8015598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801559a:	330b      	adds	r3, #11
 801559c:	781b      	ldrb	r3, [r3, #0]
 801559e:	061a      	lsls	r2, r3, #24
 80155a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a2:	330a      	adds	r3, #10
 80155a4:	781b      	ldrb	r3, [r3, #0]
 80155a6:	041b      	lsls	r3, r3, #16
 80155a8:	4313      	orrs	r3, r2
 80155aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155ac:	3209      	adds	r2, #9
 80155ae:	7812      	ldrb	r2, [r2, #0]
 80155b0:	0212      	lsls	r2, r2, #8
 80155b2:	4313      	orrs	r3, r2
 80155b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155b6:	3208      	adds	r2, #8
 80155b8:	7812      	ldrb	r2, [r2, #0]
 80155ba:	431a      	orrs	r2, r3
 80155bc:	e000      	b.n	80155c0 <find_volume+0x12c>
 80155be:	2200      	movs	r2, #0
 80155c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	3358      	adds	r3, #88	; 0x58
 80155c6:	443b      	add	r3, r7
 80155c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80155cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155ce:	3301      	adds	r3, #1
 80155d0:	643b      	str	r3, [r7, #64]	; 0x40
 80155d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155d4:	2b03      	cmp	r3, #3
 80155d6:	d9d3      	bls.n	8015580 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80155d8:	2300      	movs	r3, #0
 80155da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80155dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d002      	beq.n	80155e8 <find_volume+0x154>
 80155e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155e4:	3b01      	subs	r3, #1
 80155e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80155e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155ea:	009b      	lsls	r3, r3, #2
 80155ec:	3358      	adds	r3, #88	; 0x58
 80155ee:	443b      	add	r3, r7
 80155f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80155f4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80155f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d005      	beq.n	8015608 <find_volume+0x174>
 80155fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80155fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015600:	f7ff fede 	bl	80153c0 <check_fs>
 8015604:	4603      	mov	r3, r0
 8015606:	e000      	b.n	801560a <find_volume+0x176>
 8015608:	2302      	movs	r3, #2
 801560a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 801560e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015612:	2b00      	cmp	r3, #0
 8015614:	d005      	beq.n	8015622 <find_volume+0x18e>
 8015616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015618:	3301      	adds	r3, #1
 801561a:	643b      	str	r3, [r7, #64]	; 0x40
 801561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801561e:	2b03      	cmp	r3, #3
 8015620:	d9e2      	bls.n	80155e8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015626:	2b03      	cmp	r3, #3
 8015628:	d101      	bne.n	801562e <find_volume+0x19a>
 801562a:	2301      	movs	r3, #1
 801562c:	e1ee      	b.n	8015a0c <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 801562e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015632:	2b00      	cmp	r3, #0
 8015634:	d001      	beq.n	801563a <find_volume+0x1a6>
 8015636:	230d      	movs	r3, #13
 8015638:	e1e8      	b.n	8015a0c <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801563c:	7b1b      	ldrb	r3, [r3, #12]
 801563e:	021b      	lsls	r3, r3, #8
 8015640:	b21a      	sxth	r2, r3
 8015642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015644:	7adb      	ldrb	r3, [r3, #11]
 8015646:	b21b      	sxth	r3, r3
 8015648:	4313      	orrs	r3, r2
 801564a:	b21b      	sxth	r3, r3
 801564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015650:	d001      	beq.n	8015656 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8015652:	230d      	movs	r3, #13
 8015654:	e1da      	b.n	8015a0c <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8015656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015658:	7ddb      	ldrb	r3, [r3, #23]
 801565a:	021b      	lsls	r3, r3, #8
 801565c:	b21a      	sxth	r2, r3
 801565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015660:	7d9b      	ldrb	r3, [r3, #22]
 8015662:	b21b      	sxth	r3, r3
 8015664:	4313      	orrs	r3, r2
 8015666:	b21b      	sxth	r3, r3
 8015668:	b29b      	uxth	r3, r3
 801566a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 801566c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801566e:	2b00      	cmp	r3, #0
 8015670:	d112      	bne.n	8015698 <find_volume+0x204>
 8015672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015674:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8015678:	061a      	lsls	r2, r3, #24
 801567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801567c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015680:	041b      	lsls	r3, r3, #16
 8015682:	4313      	orrs	r3, r2
 8015684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015686:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 801568a:	0212      	lsls	r2, r2, #8
 801568c:	4313      	orrs	r3, r2
 801568e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015690:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8015694:	4313      	orrs	r3, r2
 8015696:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8015698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801569a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801569c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80156a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a2:	7c1a      	ldrb	r2, [r3, #16]
 80156a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80156aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ac:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d006      	beq.n	80156c2 <find_volume+0x22e>
 80156b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156b6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80156ba:	2b02      	cmp	r3, #2
 80156bc:	d001      	beq.n	80156c2 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 80156be:	230d      	movs	r3, #13
 80156c0:	e1a4      	b.n	8015a0c <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80156c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80156c8:	461a      	mov	r2, r3
 80156ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156cc:	fb02 f303 	mul.w	r3, r2, r3
 80156d0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80156d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d4:	7b5a      	ldrb	r2, [r3, #13]
 80156d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80156dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00a      	beq.n	80156fc <find_volume+0x268>
 80156e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80156ec:	461a      	mov	r2, r3
 80156ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80156f4:	3b01      	subs	r3, #1
 80156f6:	4013      	ands	r3, r2
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d001      	beq.n	8015700 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 80156fc:	230d      	movs	r3, #13
 80156fe:	e185      	b.n	8015a0c <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8015700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015702:	7c9b      	ldrb	r3, [r3, #18]
 8015704:	021b      	lsls	r3, r3, #8
 8015706:	b21a      	sxth	r2, r3
 8015708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801570a:	7c5b      	ldrb	r3, [r3, #17]
 801570c:	b21b      	sxth	r3, r3
 801570e:	4313      	orrs	r3, r2
 8015710:	b21b      	sxth	r3, r3
 8015712:	b29a      	uxth	r2, r3
 8015714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015716:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 801571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801571c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8015720:	f003 030f 	and.w	r3, r3, #15
 8015724:	b29b      	uxth	r3, r3
 8015726:	2b00      	cmp	r3, #0
 8015728:	d004      	beq.n	8015734 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 801572a:	230d      	movs	r3, #13
 801572c:	e16e      	b.n	8015a0c <find_volume+0x578>
 801572e:	bf00      	nop
 8015730:	200099e0 	.word	0x200099e0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8015734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015736:	7d1b      	ldrb	r3, [r3, #20]
 8015738:	021b      	lsls	r3, r3, #8
 801573a:	b21a      	sxth	r2, r3
 801573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801573e:	7cdb      	ldrb	r3, [r3, #19]
 8015740:	b21b      	sxth	r3, r3
 8015742:	4313      	orrs	r3, r2
 8015744:	b21b      	sxth	r3, r3
 8015746:	b29b      	uxth	r3, r3
 8015748:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 801574a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801574c:	2b00      	cmp	r3, #0
 801574e:	d112      	bne.n	8015776 <find_volume+0x2e2>
 8015750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015752:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8015756:	061a      	lsls	r2, r3, #24
 8015758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801575a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801575e:	041b      	lsls	r3, r3, #16
 8015760:	4313      	orrs	r3, r2
 8015762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015764:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8015768:	0212      	lsls	r2, r2, #8
 801576a:	4313      	orrs	r3, r2
 801576c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801576e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015772:	4313      	orrs	r3, r2
 8015774:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8015776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015778:	7bdb      	ldrb	r3, [r3, #15]
 801577a:	021b      	lsls	r3, r3, #8
 801577c:	b21a      	sxth	r2, r3
 801577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015780:	7b9b      	ldrb	r3, [r3, #14]
 8015782:	b21b      	sxth	r3, r3
 8015784:	4313      	orrs	r3, r2
 8015786:	b21b      	sxth	r3, r3
 8015788:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 801578a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <find_volume+0x300>
 8015790:	230d      	movs	r3, #13
 8015792:	e13b      	b.n	8015a0c <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8015794:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015798:	4413      	add	r3, r2
 801579a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801579c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80157a0:	0912      	lsrs	r2, r2, #4
 80157a2:	b292      	uxth	r2, r2
 80157a4:	4413      	add	r3, r2
 80157a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80157a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80157aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d201      	bcs.n	80157b4 <find_volume+0x320>
 80157b0:	230d      	movs	r3, #13
 80157b2:	e12b      	b.n	8015a0c <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80157b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80157b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b8:	1ad3      	subs	r3, r2, r3
 80157ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80157bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80157c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80157c4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80157c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d101      	bne.n	80157d0 <find_volume+0x33c>
 80157cc:	230d      	movs	r3, #13
 80157ce:	e11d      	b.n	8015a0c <find_volume+0x578>
	fmt = FS_FAT12;
 80157d0:	2301      	movs	r3, #1
 80157d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80157d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80157dc:	4293      	cmp	r3, r2
 80157de:	d902      	bls.n	80157e6 <find_volume+0x352>
 80157e0:	2302      	movs	r3, #2
 80157e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80157e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80157ec:	4293      	cmp	r3, r2
 80157ee:	d902      	bls.n	80157f6 <find_volume+0x362>
 80157f0:	2303      	movs	r3, #3
 80157f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80157f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f8:	1c9a      	adds	r2, r3, #2
 80157fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8015800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015804:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8015808:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801580c:	441a      	add	r2, r3
 801580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015810:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8015814:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015818:	441a      	add	r2, r3
 801581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801581c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8015820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015824:	2b03      	cmp	r3, #3
 8015826:	d121      	bne.n	801586c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8015828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801582a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801582e:	2b00      	cmp	r3, #0
 8015830:	d001      	beq.n	8015836 <find_volume+0x3a2>
 8015832:	230d      	movs	r3, #13
 8015834:	e0ea      	b.n	8015a0c <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8015836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015838:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801583c:	061a      	lsls	r2, r3, #24
 801583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015840:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8015844:	041b      	lsls	r3, r3, #16
 8015846:	4313      	orrs	r3, r2
 8015848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801584a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801584e:	0212      	lsls	r2, r2, #8
 8015850:	4313      	orrs	r3, r2
 8015852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015854:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8015858:	431a      	orrs	r2, r3
 801585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801585c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8015860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015862:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015866:	009b      	lsls	r3, r3, #2
 8015868:	647b      	str	r3, [r7, #68]	; 0x44
 801586a:	e025      	b.n	80158b8 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 801586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801586e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8015872:	2b00      	cmp	r3, #0
 8015874:	d101      	bne.n	801587a <find_volume+0x3e6>
 8015876:	230d      	movs	r3, #13
 8015878:	e0c8      	b.n	8015a0c <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 801587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801587c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8015880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015882:	441a      	add	r2, r3
 8015884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015886:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801588a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801588e:	2b02      	cmp	r3, #2
 8015890:	d104      	bne.n	801589c <find_volume+0x408>
 8015892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015894:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	e00c      	b.n	80158b6 <find_volume+0x422>
 801589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801589e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80158a2:	4613      	mov	r3, r2
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	4413      	add	r3, r2
 80158a8:	085a      	lsrs	r2, r3, #1
 80158aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80158b0:	f003 0301 	and.w	r3, r3, #1
 80158b4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80158b6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80158b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80158be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80158c4:	0a5b      	lsrs	r3, r3, #9
 80158c6:	429a      	cmp	r2, r3
 80158c8:	d201      	bcs.n	80158ce <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80158ca:	230d      	movs	r3, #13
 80158cc:	e09e      	b.n	8015a0c <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80158ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158d0:	f04f 32ff 	mov.w	r2, #4294967295
 80158d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80158d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80158de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80158e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158e6:	2280      	movs	r2, #128	; 0x80
 80158e8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80158ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80158f0:	2b03      	cmp	r3, #3
 80158f2:	d177      	bne.n	80159e4 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80158f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158fa:	021b      	lsls	r3, r3, #8
 80158fc:	b21a      	sxth	r2, r3
 80158fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015904:	b21b      	sxth	r3, r3
 8015906:	4313      	orrs	r3, r2
 8015908:	b21b      	sxth	r3, r3
 801590a:	2b01      	cmp	r3, #1
 801590c:	d16a      	bne.n	80159e4 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 801590e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015910:	3301      	adds	r3, #1
 8015912:	4619      	mov	r1, r3
 8015914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015916:	f7fe f96c 	bl	8013bf2 <move_window>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d161      	bne.n	80159e4 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8015920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015922:	2200      	movs	r2, #0
 8015924:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801592a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 801592e:	021b      	lsls	r3, r3, #8
 8015930:	b21a      	sxth	r2, r3
 8015932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015934:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8015938:	b21b      	sxth	r3, r3
 801593a:	4313      	orrs	r3, r2
 801593c:	b21b      	sxth	r3, r3
 801593e:	4a35      	ldr	r2, [pc, #212]	; (8015a14 <find_volume+0x580>)
 8015940:	4293      	cmp	r3, r2
 8015942:	d14f      	bne.n	80159e4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8015944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015946:	78db      	ldrb	r3, [r3, #3]
 8015948:	061a      	lsls	r2, r3, #24
 801594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801594c:	789b      	ldrb	r3, [r3, #2]
 801594e:	041b      	lsls	r3, r3, #16
 8015950:	4313      	orrs	r3, r2
 8015952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015954:	7852      	ldrb	r2, [r2, #1]
 8015956:	0212      	lsls	r2, r2, #8
 8015958:	4313      	orrs	r3, r2
 801595a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801595c:	7812      	ldrb	r2, [r2, #0]
 801595e:	4313      	orrs	r3, r2
 8015960:	4a2d      	ldr	r2, [pc, #180]	; (8015a18 <find_volume+0x584>)
 8015962:	4293      	cmp	r3, r2
 8015964:	d13e      	bne.n	80159e4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8015966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015968:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 801596c:	061a      	lsls	r2, r3, #24
 801596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015970:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8015974:	041b      	lsls	r3, r3, #16
 8015976:	4313      	orrs	r3, r2
 8015978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801597a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 801597e:	0212      	lsls	r2, r2, #8
 8015980:	4313      	orrs	r3, r2
 8015982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015984:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8015988:	4313      	orrs	r3, r2
 801598a:	4a24      	ldr	r2, [pc, #144]	; (8015a1c <find_volume+0x588>)
 801598c:	4293      	cmp	r3, r2
 801598e:	d129      	bne.n	80159e4 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8015990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015992:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8015996:	061a      	lsls	r2, r3, #24
 8015998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801599a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801599e:	041b      	lsls	r3, r3, #16
 80159a0:	4313      	orrs	r3, r2
 80159a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159a4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80159a8:	0212      	lsls	r2, r2, #8
 80159aa:	4313      	orrs	r3, r2
 80159ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159ae:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80159b2:	431a      	orrs	r2, r3
 80159b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80159ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159bc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80159c0:	061a      	lsls	r2, r3, #24
 80159c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80159c8:	041b      	lsls	r3, r3, #16
 80159ca:	4313      	orrs	r3, r2
 80159cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159ce:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80159d2:	0212      	lsls	r2, r2, #8
 80159d4:	4313      	orrs	r3, r2
 80159d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159d8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80159dc:	431a      	orrs	r2, r3
 80159de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80159e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80159ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80159ee:	4b0c      	ldr	r3, [pc, #48]	; (8015a20 <find_volume+0x58c>)
 80159f0:	881b      	ldrh	r3, [r3, #0]
 80159f2:	3301      	adds	r3, #1
 80159f4:	b29a      	uxth	r2, r3
 80159f6:	4b0a      	ldr	r3, [pc, #40]	; (8015a20 <find_volume+0x58c>)
 80159f8:	801a      	strh	r2, [r3, #0]
 80159fa:	4b09      	ldr	r3, [pc, #36]	; (8015a20 <find_volume+0x58c>)
 80159fc:	881a      	ldrh	r2, [r3, #0]
 80159fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a00:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8015a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015a06:	f7fe f881 	bl	8013b0c <clear_lock>
#endif

	return FR_OK;
 8015a0a:	2300      	movs	r3, #0
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3758      	adds	r7, #88	; 0x58
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	ffffaa55 	.word	0xffffaa55
 8015a18:	41615252 	.word	0x41615252
 8015a1c:	61417272 	.word	0x61417272
 8015a20:	200099e4 	.word	0x200099e4

08015a24 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d022      	beq.n	8015a7c <validate+0x58>
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d01d      	beq.n	8015a7c <validate+0x58>
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d016      	beq.n	8015a7c <validate+0x58>
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a54:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d10c      	bne.n	8015a7c <validate+0x58>
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a68:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fd fda5 	bl	80135bc <disk_status>
 8015a72:	4603      	mov	r3, r0
 8015a74:	f003 0301 	and.w	r3, r3, #1
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d001      	beq.n	8015a80 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8015a7c:	2309      	movs	r3, #9
 8015a7e:	e000      	b.n	8015a82 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3710      	adds	r7, #16
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
	...

08015a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b088      	sub	sp, #32
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	4613      	mov	r3, r2
 8015a98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8015a9e:	f107 0310 	add.w	r3, r7, #16
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7ff fc48 	bl	8015338 <get_ldnumber>
 8015aa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015aaa:	69fb      	ldr	r3, [r7, #28]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	da01      	bge.n	8015ab4 <f_mount+0x28>
 8015ab0:	230b      	movs	r3, #11
 8015ab2:	e02d      	b.n	8015b10 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015ab4:	4a18      	ldr	r2, [pc, #96]	; (8015b18 <f_mount+0x8c>)
 8015ab6:	69fb      	ldr	r3, [r7, #28]
 8015ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015abc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d006      	beq.n	8015ad2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8015ac4:	69b8      	ldr	r0, [r7, #24]
 8015ac6:	f7fe f821 	bl	8013b0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	2200      	movs	r2, #0
 8015ace:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d003      	beq.n	8015ae0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	2200      	movs	r2, #0
 8015adc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015ae0:	68fa      	ldr	r2, [r7, #12]
 8015ae2:	490d      	ldr	r1, [pc, #52]	; (8015b18 <f_mount+0x8c>)
 8015ae4:	69fb      	ldr	r3, [r7, #28]
 8015ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d002      	beq.n	8015af6 <f_mount+0x6a>
 8015af0:	79fb      	ldrb	r3, [r7, #7]
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d001      	beq.n	8015afa <f_mount+0x6e>
 8015af6:	2300      	movs	r3, #0
 8015af8:	e00a      	b.n	8015b10 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8015afa:	f107 0108 	add.w	r1, r7, #8
 8015afe:	f107 030c 	add.w	r3, r7, #12
 8015b02:	2200      	movs	r2, #0
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7ff fcc5 	bl	8015494 <find_volume>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3720      	adds	r7, #32
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	200099e0 	.word	0x200099e0

08015b1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015b2c:	6018      	str	r0, [r3, #0]
 8015b2e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b32:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8015b36:	6019      	str	r1, [r3, #0]
 8015b38:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b3c:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015b40:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8015b42:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d101      	bne.n	8015b54 <f_open+0x38>
 8015b50:	2309      	movs	r3, #9
 8015b52:	e260      	b.n	8016016 <f_open+0x4fa>
	fp->fs = 0;			/* Clear file object */
 8015b54:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8015b64:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b68:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015b6c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8015b70:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8015b74:	7812      	ldrb	r2, [r2, #0]
 8015b76:	f002 021f 	and.w	r2, r2, #31
 8015b7a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8015b7c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015b80:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	f023 0301 	bic.w	r3, r3, #1
 8015b8a:	b2da      	uxtb	r2, r3
 8015b8c:	f107 0108 	add.w	r1, r7, #8
 8015b90:	f107 0320 	add.w	r3, r7, #32
 8015b94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f7ff fc7b 	bl	8015494 <find_volume>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8015ba4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	f040 8232 	bne.w	8016012 <f_open+0x4f6>
		INIT_BUF(dj);
 8015bae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015bb2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015bb6:	f107 0214 	add.w	r2, r7, #20
 8015bba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8015bbe:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015bc2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015bc6:	4a9d      	ldr	r2, [pc, #628]	; (8015e3c <f_open+0x320>)
 8015bc8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 8015bcc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015bd0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8015bd4:	681a      	ldr	r2, [r3, #0]
 8015bd6:	f107 0320 	add.w	r3, r7, #32
 8015bda:	4611      	mov	r1, r2
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7ff fb3d 	bl	801525c <follow_path>
 8015be2:	4603      	mov	r3, r0
 8015be4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 8015be8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015bec:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015bf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015bf4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015bf8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d11d      	bne.n	8015c3c <f_open+0x120>
			if (!dir)	/* Default directory itself */
 8015c00:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d103      	bne.n	8015c10 <f_open+0xf4>
				res = FR_INVALID_NAME;
 8015c08:	2306      	movs	r3, #6
 8015c0a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8015c0e:	e015      	b.n	8015c3c <f_open+0x120>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015c10:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015c14:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015c18:	781b      	ldrb	r3, [r3, #0]
 8015c1a:	f023 0301 	bic.w	r3, r3, #1
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	bf14      	ite	ne
 8015c22:	2301      	movne	r3, #1
 8015c24:	2300      	moveq	r3, #0
 8015c26:	b2db      	uxtb	r3, r3
 8015c28:	461a      	mov	r2, r3
 8015c2a:	f107 0320 	add.w	r3, r7, #32
 8015c2e:	4611      	mov	r1, r2
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7fd fddd 	bl	80137f0 <chk_lock>
 8015c36:	4603      	mov	r3, r0
 8015c38:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015c3c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015c40:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015c44:	781b      	ldrb	r3, [r3, #0]
 8015c46:	f003 031c 	and.w	r3, r3, #28
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	f000 80e6 	beq.w	8015e1c <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 8015c50:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d027      	beq.n	8015ca8 <f_open+0x18c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8015c58:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015c5c:	2b04      	cmp	r3, #4
 8015c5e:	d10e      	bne.n	8015c7e <f_open+0x162>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015c60:	f7fd fe34 	bl	80138cc <enq_lock>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d006      	beq.n	8015c78 <f_open+0x15c>
 8015c6a:	f107 0320 	add.w	r3, r7, #32
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff f82e 	bl	8014cd0 <dir_register>
 8015c74:	4603      	mov	r3, r0
 8015c76:	e000      	b.n	8015c7a <f_open+0x15e>
 8015c78:	2312      	movs	r3, #18
 8015c7a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015c7e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015c82:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015c86:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8015c8a:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8015c8e:	7812      	ldrb	r2, [r2, #0]
 8015c90:	f042 0208 	orr.w	r2, r2, #8
 8015c94:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8015c96:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015c9a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015c9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015ca2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8015ca6:	e017      	b.n	8015cd8 <f_open+0x1bc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015ca8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015cac:	330b      	adds	r3, #11
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	f003 0311 	and.w	r3, r3, #17
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d003      	beq.n	8015cc0 <f_open+0x1a4>
					res = FR_DENIED;
 8015cb8:	2307      	movs	r3, #7
 8015cba:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8015cbe:	e00b      	b.n	8015cd8 <f_open+0x1bc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8015cc0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015cc4:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	f003 0304 	and.w	r3, r3, #4
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d002      	beq.n	8015cd8 <f_open+0x1bc>
						res = FR_EXIST;
 8015cd2:	2308      	movs	r3, #8
 8015cd4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015cd8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	f040 80c3 	bne.w	8015e68 <f_open+0x34c>
 8015ce2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015ce6:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	f003 0308 	and.w	r3, r3, #8
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	f000 80b9 	beq.w	8015e68 <f_open+0x34c>
				dw = GET_FATTIME();				/* Created time */
 8015cf6:	f7fa faf3 	bl	80102e0 <get_fattime>
 8015cfa:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8015cfe:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d02:	330e      	adds	r3, #14
 8015d04:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8015d08:	b2d2      	uxtb	r2, r2
 8015d0a:	701a      	strb	r2, [r3, #0]
 8015d0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	0a1b      	lsrs	r3, r3, #8
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d1a:	330f      	adds	r3, #15
 8015d1c:	b2d2      	uxtb	r2, r2
 8015d1e:	701a      	strb	r2, [r3, #0]
 8015d20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015d24:	0c1a      	lsrs	r2, r3, #16
 8015d26:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d2a:	3310      	adds	r3, #16
 8015d2c:	b2d2      	uxtb	r2, r2
 8015d2e:	701a      	strb	r2, [r3, #0]
 8015d30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015d34:	0e1a      	lsrs	r2, r3, #24
 8015d36:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d3a:	3311      	adds	r3, #17
 8015d3c:	b2d2      	uxtb	r2, r2
 8015d3e:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8015d40:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d44:	330b      	adds	r3, #11
 8015d46:	2200      	movs	r2, #0
 8015d48:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8015d4a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d4e:	331c      	adds	r3, #28
 8015d50:	2200      	movs	r2, #0
 8015d52:	701a      	strb	r2, [r3, #0]
 8015d54:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d58:	331d      	adds	r3, #29
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	701a      	strb	r2, [r3, #0]
 8015d5e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d62:	331e      	adds	r3, #30
 8015d64:	2200      	movs	r2, #0
 8015d66:	701a      	strb	r2, [r3, #0]
 8015d68:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015d6c:	331f      	adds	r3, #31
 8015d6e:	2200      	movs	r2, #0
 8015d70:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8015d72:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015d76:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015d7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015d7e:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7fe fcfb 	bl	801477e <ld_clust>
 8015d88:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 8015d8c:	2100      	movs	r1, #0
 8015d8e:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8015d92:	f7fe fd22 	bl	80147da <st_clust>
				dj.fs->wflag = 1;
 8015d96:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015d9a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015da2:	2201      	movs	r2, #1
 8015da4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8015da8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d05b      	beq.n	8015e68 <f_open+0x34c>
					dw = dj.fs->winsect;
 8015db0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015db4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015dbc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8015dc0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 8015dc4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015dc8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015dd0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fe f9d1 	bl	801417c <remove_chain>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 8015de0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d13f      	bne.n	8015e68 <f_open+0x34c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8015de8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015dec:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015df0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015df4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8015df8:	3a01      	subs	r2, #1
 8015dfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8015dfe:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015e02:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e0a:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7fd feef 	bl	8013bf2 <move_window>
 8015e14:	4603      	mov	r3, r0
 8015e16:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8015e1a:	e025      	b.n	8015e68 <f_open+0x34c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8015e1c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d121      	bne.n	8015e68 <f_open+0x34c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8015e24:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015e28:	330b      	adds	r3, #11
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	f003 0310 	and.w	r3, r3, #16
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d005      	beq.n	8015e40 <f_open+0x324>
					res = FR_NO_FILE;
 8015e34:	2304      	movs	r3, #4
 8015e36:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8015e3a:	e015      	b.n	8015e68 <f_open+0x34c>
 8015e3c:	20009b50 	.word	0x20009b50
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8015e40:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015e44:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	f003 0302 	and.w	r3, r3, #2
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d00a      	beq.n	8015e68 <f_open+0x34c>
 8015e52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015e56:	330b      	adds	r3, #11
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	f003 0301 	and.w	r3, r3, #1
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d002      	beq.n	8015e68 <f_open+0x34c>
						res = FR_DENIED;
 8015e62:	2307      	movs	r3, #7
 8015e64:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 8015e68:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d153      	bne.n	8015f18 <f_open+0x3fc>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015e70:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015e74:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	f003 0308 	and.w	r3, r3, #8
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d00b      	beq.n	8015e9a <f_open+0x37e>
				mode |= FA__WRITTEN;
 8015e82:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015e86:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015e8a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8015e8e:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8015e92:	7812      	ldrb	r2, [r2, #0]
 8015e94:	f042 0220 	orr.w	r2, r2, #32
 8015e98:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8015e9a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015e9e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015ea6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8015eaa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015eae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8015eb8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015ec6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015eca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015ece:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	f023 0301 	bic.w	r3, r3, #1
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	bf14      	ite	ne
 8015edc:	2301      	movne	r3, #1
 8015ede:	2300      	moveq	r3, #0
 8015ee0:	b2db      	uxtb	r3, r3
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	f107 0320 	add.w	r3, r7, #32
 8015ee8:	4611      	mov	r1, r2
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7fd fd12 	bl	8013914 <inc_lock>
 8015ef0:	4602      	mov	r2, r0
 8015ef2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8015f00:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d102      	bne.n	8015f18 <f_open+0x3fc>
 8015f12:	2302      	movs	r3, #2
 8015f14:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8015f18:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d178      	bne.n	8016012 <f_open+0x4f6>
			fp->flag = mode;					/* File access mode */
 8015f20:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8015f2e:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8015f32:	7812      	ldrb	r2, [r2, #0]
 8015f34:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8015f38:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2200      	movs	r2, #0
 8015f44:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8015f48:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015f4c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015f54:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7fe fc10 	bl	801477e <ld_clust>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8015f6e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015f72:	331f      	adds	r3, #31
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	061a      	lsls	r2, r3, #24
 8015f78:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015f7c:	331e      	adds	r3, #30
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	041b      	lsls	r3, r3, #16
 8015f82:	4313      	orrs	r3, r2
 8015f84:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015f88:	321d      	adds	r2, #29
 8015f8a:	7812      	ldrb	r2, [r2, #0]
 8015f8c:	0212      	lsls	r2, r2, #8
 8015f8e:	4313      	orrs	r3, r2
 8015f90:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015f94:	321c      	adds	r2, #28
 8015f96:	7812      	ldrb	r2, [r2, #0]
 8015f98:	431a      	orrs	r2, r3
 8015f9a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015f9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8015fa8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015fac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8015fb8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015fbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8015fc8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8015fd8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015fdc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015fe0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015fe4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8015ff2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016000:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8016004:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8016008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8016012:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 8016016:	4618      	mov	r0, r3
 8016018:	f507 7716 	add.w	r7, r7, #600	; 0x258
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}

08016020 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b08c      	sub	sp, #48	; 0x30
 8016024:	af00      	add	r7, sp, #0
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
 801602c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	2200      	movs	r2, #0
 8016036:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8016038:	68f8      	ldr	r0, [r7, #12]
 801603a:	f7ff fcf3 	bl	8015a24 <validate>
 801603e:	4603      	mov	r3, r0
 8016040:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8016042:	7ffb      	ldrb	r3, [r7, #31]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d001      	beq.n	801604c <f_read+0x2c>
 8016048:	7ffb      	ldrb	r3, [r7, #31]
 801604a:	e150      	b.n	80162ee <f_read+0x2ce>
	if (fp->err)								/* Check error */
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8016052:	2b00      	cmp	r3, #0
 8016054:	d003      	beq.n	801605e <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801605c:	e147      	b.n	80162ee <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016064:	f003 0301 	and.w	r3, r3, #1
 8016068:	2b00      	cmp	r3, #0
 801606a:	d101      	bne.n	8016070 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 801606c:	2307      	movs	r3, #7
 801606e:	e13e      	b.n	80162ee <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801607c:	1ad3      	subs	r3, r2, r3
 801607e:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	429a      	cmp	r2, r3
 8016086:	f240 812d 	bls.w	80162e4 <f_read+0x2c4>
 801608a:	69bb      	ldr	r3, [r7, #24]
 801608c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801608e:	e129      	b.n	80162e4 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8016096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801609a:	2b00      	cmp	r3, #0
 801609c:	f040 80f2 	bne.w	8016284 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80160a6:	0a5b      	lsrs	r3, r3, #9
 80160a8:	b2da      	uxtb	r2, r3
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80160b0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80160b4:	3b01      	subs	r3, #1
 80160b6:	b2db      	uxtb	r3, r3
 80160b8:	4013      	ands	r3, r2
 80160ba:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80160bc:	7dfb      	ldrb	r3, [r7, #23]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d139      	bne.n	8016136 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d104      	bne.n	80160d6 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80160d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160d4:	e018      	b.n	8016108 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d008      	beq.n	80160f2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80160e6:	4619      	mov	r1, r3
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f7fe f93e 	bl	801436a <clmt_clust>
 80160ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80160f0:	e00a      	b.n	8016108 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80160fe:	4619      	mov	r1, r3
 8016100:	4610      	mov	r0, r2
 8016102:	f7fd fe73 	bl	8013dec <get_fat>
 8016106:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8016108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610a:	2b01      	cmp	r3, #1
 801610c:	d805      	bhi.n	801611a <f_read+0xfa>
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2202      	movs	r2, #2
 8016112:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016116:	2302      	movs	r3, #2
 8016118:	e0e9      	b.n	80162ee <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016120:	d105      	bne.n	801612e <f_read+0x10e>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2201      	movs	r2, #1
 8016126:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801612a:	2301      	movs	r3, #1
 801612c:	e0df      	b.n	80162ee <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016142:	4619      	mov	r1, r3
 8016144:	4610      	mov	r0, r2
 8016146:	f7fd fe2f 	bl	8013da8 <clust2sect>
 801614a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d105      	bne.n	801615e <f_read+0x13e>
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	2202      	movs	r2, #2
 8016156:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801615a:	2302      	movs	r3, #2
 801615c:	e0c7      	b.n	80162ee <f_read+0x2ce>
			sect += csect;
 801615e:	7dfb      	ldrb	r3, [r7, #23]
 8016160:	693a      	ldr	r2, [r7, #16]
 8016162:	4413      	add	r3, r2
 8016164:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	0a5b      	lsrs	r3, r3, #9
 801616a:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 801616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616e:	2b00      	cmp	r3, #0
 8016170:	d046      	beq.n	8016200 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8016172:	7dfa      	ldrb	r2, [r7, #23]
 8016174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016176:	4413      	add	r3, r2
 8016178:	68fa      	ldr	r2, [r7, #12]
 801617a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801617e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8016182:	4293      	cmp	r3, r2
 8016184:	d908      	bls.n	8016198 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801618c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8016190:	461a      	mov	r2, r3
 8016192:	7dfb      	ldrb	r3, [r7, #23]
 8016194:	1ad3      	subs	r3, r2, r3
 8016196:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801619e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80161a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a4:	693a      	ldr	r2, [r7, #16]
 80161a6:	6a39      	ldr	r1, [r7, #32]
 80161a8:	f7fd fa48 	bl	801363c <disk_read>
 80161ac:	4603      	mov	r3, r0
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d005      	beq.n	80161be <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2201      	movs	r2, #1
 80161b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80161ba:	2301      	movs	r3, #1
 80161bc:	e097      	b.n	80162ee <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80161c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d015      	beq.n	80161f8 <f_read+0x1d8>
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	1ad3      	subs	r3, r2, r3
 80161d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161d8:	429a      	cmp	r2, r3
 80161da:	d90d      	bls.n	80161f8 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	1ad3      	subs	r3, r2, r3
 80161e6:	025b      	lsls	r3, r3, #9
 80161e8:	6a3a      	ldr	r2, [r7, #32]
 80161ea:	4413      	add	r3, r2
 80161ec:	68f9      	ldr	r1, [r7, #12]
 80161ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7fd fa80 	bl	80136f8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80161f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fa:	025b      	lsls	r3, r3, #9
 80161fc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80161fe:	e05b      	b.n	80162b8 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8016206:	693a      	ldr	r2, [r7, #16]
 8016208:	429a      	cmp	r2, r3
 801620a:	d037      	beq.n	801627c <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016216:	2b00      	cmp	r3, #0
 8016218:	d01d      	beq.n	8016256 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016220:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8016224:	68f9      	ldr	r1, [r7, #12]
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801622c:	2301      	movs	r3, #1
 801622e:	f7fd fa25 	bl	801367c <disk_write>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d005      	beq.n	8016244 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	2201      	movs	r2, #1
 801623c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016240:	2301      	movs	r3, #1
 8016242:	e054      	b.n	80162ee <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801624a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801624e:	b2da      	uxtb	r2, r3
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801625c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8016260:	68f9      	ldr	r1, [r7, #12]
 8016262:	2301      	movs	r3, #1
 8016264:	693a      	ldr	r2, [r7, #16]
 8016266:	f7fd f9e9 	bl	801363c <disk_read>
 801626a:	4603      	mov	r3, r0
 801626c:	2b00      	cmp	r3, #0
 801626e:	d005      	beq.n	801627c <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2201      	movs	r2, #1
 8016274:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016278:	2301      	movs	r3, #1
 801627a:	e038      	b.n	80162ee <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	693a      	ldr	r2, [r7, #16]
 8016280:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801628e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016292:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8016294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	429a      	cmp	r2, r3
 801629a:	d901      	bls.n	80162a0 <f_read+0x280>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80162a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162aa:	68fa      	ldr	r2, [r7, #12]
 80162ac:	4413      	add	r3, r2
 80162ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162b0:	4619      	mov	r1, r3
 80162b2:	6a38      	ldr	r0, [r7, #32]
 80162b4:	f7fd fa20 	bl	80136f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80162b8:	6a3a      	ldr	r2, [r7, #32]
 80162ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162bc:	4413      	add	r3, r2
 80162be:	623b      	str	r3, [r7, #32]
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80162c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c8:	441a      	add	r2, r3
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d6:	441a      	add	r2, r3
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	601a      	str	r2, [r3, #0]
 80162dc:	687a      	ldr	r2, [r7, #4]
 80162de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e0:	1ad3      	subs	r3, r2, r3
 80162e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	f47f aed2 	bne.w	8016090 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80162ec:	2300      	movs	r3, #0
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3730      	adds	r7, #48	; 0x30
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b086      	sub	sp, #24
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f7ff fb90 	bl	8015a24 <validate>
 8016304:	4603      	mov	r3, r0
 8016306:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016308:	7dfb      	ldrb	r3, [r7, #23]
 801630a:	2b00      	cmp	r3, #0
 801630c:	f040 80a8 	bne.w	8016460 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016316:	f003 0320 	and.w	r3, r3, #32
 801631a:	2b00      	cmp	r3, #0
 801631c:	f000 80a0 	beq.w	8016460 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801632a:	2b00      	cmp	r3, #0
 801632c:	d019      	beq.n	8016362 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016334:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8016338:	6879      	ldr	r1, [r7, #4]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8016340:	2301      	movs	r3, #1
 8016342:	f7fd f99b 	bl	801367c <disk_write>
 8016346:	4603      	mov	r3, r0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d001      	beq.n	8016350 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801634c:	2301      	movs	r3, #1
 801634e:	e088      	b.n	8016462 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801635a:	b2da      	uxtb	r2, r3
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801636e:	4619      	mov	r1, r3
 8016370:	4610      	mov	r0, r2
 8016372:	f7fd fc3e 	bl	8013bf2 <move_window>
 8016376:	4603      	mov	r3, r0
 8016378:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801637a:	7dfb      	ldrb	r3, [r7, #23]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d16f      	bne.n	8016460 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8016386:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	330b      	adds	r3, #11
 801638c:	781a      	ldrb	r2, [r3, #0]
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	330b      	adds	r3, #11
 8016392:	f042 0220 	orr.w	r2, r2, #32
 8016396:	b2d2      	uxtb	r2, r2
 8016398:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	331c      	adds	r3, #28
 80163a4:	b2d2      	uxtb	r2, r2
 80163a6:	701a      	strb	r2, [r3, #0]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	0a1b      	lsrs	r3, r3, #8
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	331d      	adds	r3, #29
 80163b8:	b2d2      	uxtb	r2, r2
 80163ba:	701a      	strb	r2, [r3, #0]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80163c2:	0c1a      	lsrs	r2, r3, #16
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	331e      	adds	r3, #30
 80163c8:	b2d2      	uxtb	r2, r2
 80163ca:	701a      	strb	r2, [r3, #0]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80163d2:	0e1a      	lsrs	r2, r3, #24
 80163d4:	693b      	ldr	r3, [r7, #16]
 80163d6:	331f      	adds	r3, #31
 80163d8:	b2d2      	uxtb	r2, r2
 80163da:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80163e2:	4619      	mov	r1, r3
 80163e4:	6938      	ldr	r0, [r7, #16]
 80163e6:	f7fe f9f8 	bl	80147da <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80163ea:	f7f9 ff79 	bl	80102e0 <get_fattime>
 80163ee:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	3316      	adds	r3, #22
 80163f4:	68fa      	ldr	r2, [r7, #12]
 80163f6:	b2d2      	uxtb	r2, r2
 80163f8:	701a      	strb	r2, [r3, #0]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	0a1b      	lsrs	r3, r3, #8
 8016400:	b29a      	uxth	r2, r3
 8016402:	693b      	ldr	r3, [r7, #16]
 8016404:	3317      	adds	r3, #23
 8016406:	b2d2      	uxtb	r2, r2
 8016408:	701a      	strb	r2, [r3, #0]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	0c1a      	lsrs	r2, r3, #16
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	3318      	adds	r3, #24
 8016412:	b2d2      	uxtb	r2, r2
 8016414:	701a      	strb	r2, [r3, #0]
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	0e1a      	lsrs	r2, r3, #24
 801641a:	693b      	ldr	r3, [r7, #16]
 801641c:	3319      	adds	r3, #25
 801641e:	b2d2      	uxtb	r2, r2
 8016420:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	3312      	adds	r3, #18
 8016426:	2200      	movs	r2, #0
 8016428:	701a      	strb	r2, [r3, #0]
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	3313      	adds	r3, #19
 801642e:	2200      	movs	r2, #0
 8016430:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016438:	f023 0320 	bic.w	r3, r3, #32
 801643c:	b2da      	uxtb	r2, r3
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801644a:	2201      	movs	r2, #1
 801644c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016456:	4618      	mov	r0, r3
 8016458:	f7fd fbf9 	bl	8013c4e <sync_fs>
 801645c:	4603      	mov	r3, r0
 801645e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8016460:	7dfb      	ldrb	r3, [r7, #23]
}
 8016462:	4618      	mov	r0, r3
 8016464:	3718      	adds	r7, #24
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b084      	sub	sp, #16
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff ff3f 	bl	80162f6 <f_sync>
 8016478:	4603      	mov	r3, r0
 801647a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801647c:	7bfb      	ldrb	r3, [r7, #15]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d116      	bne.n	80164b0 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f7ff face 	bl	8015a24 <validate>
 8016488:	4603      	mov	r3, r0
 801648a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801648c:	7bfb      	ldrb	r3, [r7, #15]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d10e      	bne.n	80164b0 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8016498:	4618      	mov	r0, r3
 801649a:	f7fd faf3 	bl	8013a84 <dec_lock>
 801649e:	4603      	mov	r3, r0
 80164a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80164a2:	7bfb      	ldrb	r3, [r7, #15]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d103      	bne.n	80164b0 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2200      	movs	r2, #0
 80164ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80164b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3710      	adds	r7, #16
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}

080164ba <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80164ba:	b580      	push	{r7, lr}
 80164bc:	b090      	sub	sp, #64	; 0x40
 80164be:	af00      	add	r7, sp, #0
 80164c0:	6078      	str	r0, [r7, #4]
 80164c2:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7ff faad 	bl	8015a24 <validate>
 80164ca:	4603      	mov	r3, r0
 80164cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80164d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d002      	beq.n	80164de <f_lseek+0x24>
 80164d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80164dc:	e247      	b.n	801696e <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d003      	beq.n	80164f0 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80164ee:	e23e      	b.n	801696e <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	f000 80f2 	beq.w	80166e0 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016502:	d164      	bne.n	80165ce <f_lseek+0x114>
			tbl = fp->cltbl;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801650a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650e:	1d1a      	adds	r2, r3, #4
 8016510:	627a      	str	r2, [r7, #36]	; 0x24
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	617b      	str	r3, [r7, #20]
 8016516:	2302      	movs	r3, #2
 8016518:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8016520:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8016522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016524:	2b00      	cmp	r3, #0
 8016526:	d041      	beq.n	80165ac <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8016528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652a:	613b      	str	r3, [r7, #16]
 801652c:	2300      	movs	r3, #0
 801652e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016532:	3302      	adds	r3, #2
 8016534:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8016536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016538:	60fb      	str	r3, [r7, #12]
 801653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653c:	3301      	adds	r3, #1
 801653e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016548:	4618      	mov	r0, r3
 801654a:	f7fd fc4f 	bl	8013dec <get_fat>
 801654e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8016550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016552:	2b01      	cmp	r3, #1
 8016554:	d805      	bhi.n	8016562 <f_lseek+0xa8>
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2202      	movs	r2, #2
 801655a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801655e:	2302      	movs	r3, #2
 8016560:	e205      	b.n	801696e <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016568:	d105      	bne.n	8016576 <f_lseek+0xbc>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2201      	movs	r2, #1
 801656e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016572:	2301      	movs	r3, #1
 8016574:	e1fb      	b.n	801696e <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	3301      	adds	r3, #1
 801657a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801657c:	429a      	cmp	r2, r3
 801657e:	d0da      	beq.n	8016536 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8016580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	429a      	cmp	r2, r3
 8016586:	d809      	bhi.n	801659c <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8016588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658a:	1d1a      	adds	r2, r3, #4
 801658c:	627a      	str	r2, [r7, #36]	; 0x24
 801658e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016590:	601a      	str	r2, [r3, #0]
 8016592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016594:	1d1a      	adds	r2, r3, #4
 8016596:	627a      	str	r2, [r7, #36]	; 0x24
 8016598:	693a      	ldr	r2, [r7, #16]
 801659a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80165a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80165a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d3bd      	bcc.n	8016528 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80165b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165b4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80165b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d803      	bhi.n	80165c6 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 80165be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c0:	2200      	movs	r2, #0
 80165c2:	601a      	str	r2, [r3, #0]
 80165c4:	e1d1      	b.n	801696a <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80165c6:	2311      	movs	r3, #17
 80165c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80165cc:	e1cd      	b.n	801696a <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80165d4:	683a      	ldr	r2, [r7, #0]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d903      	bls.n	80165e2 <f_lseek+0x128>
				ofs = fp->fsize;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80165e0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	683a      	ldr	r2, [r7, #0]
 80165e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	f000 81bc 	beq.w	801696a <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	3b01      	subs	r3, #1
 80165f6:	4619      	mov	r1, r3
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7fd feb6 	bl	801436a <clmt_clust>
 80165fe:	4602      	mov	r2, r0
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016612:	4619      	mov	r1, r3
 8016614:	4610      	mov	r0, r2
 8016616:	f7fd fbc7 	bl	8013da8 <clust2sect>
 801661a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 801661c:	69bb      	ldr	r3, [r7, #24]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d105      	bne.n	801662e <f_lseek+0x174>
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	2202      	movs	r2, #2
 8016626:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801662a:	2302      	movs	r3, #2
 801662c:	e19f      	b.n	801696e <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	3b01      	subs	r3, #1
 8016632:	0a5b      	lsrs	r3, r3, #9
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801663a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801663e:	3a01      	subs	r2, #1
 8016640:	4013      	ands	r3, r2
 8016642:	69ba      	ldr	r2, [r7, #24]
 8016644:	4413      	add	r3, r2
 8016646:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016652:	2b00      	cmp	r3, #0
 8016654:	f000 8189 	beq.w	801696a <f_lseek+0x4b0>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801665e:	69ba      	ldr	r2, [r7, #24]
 8016660:	429a      	cmp	r2, r3
 8016662:	f000 8182 	beq.w	801696a <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016670:	2b00      	cmp	r3, #0
 8016672:	d01d      	beq.n	80166b0 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801667a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8016686:	2301      	movs	r3, #1
 8016688:	f7fc fff8 	bl	801367c <disk_write>
 801668c:	4603      	mov	r3, r0
 801668e:	2b00      	cmp	r3, #0
 8016690:	d005      	beq.n	801669e <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2201      	movs	r2, #1
 8016696:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801669a:	2301      	movs	r3, #1
 801669c:	e167      	b.n	801696e <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80166a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80166a8:	b2da      	uxtb	r2, r3
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80166b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80166ba:	6879      	ldr	r1, [r7, #4]
 80166bc:	2301      	movs	r3, #1
 80166be:	69ba      	ldr	r2, [r7, #24]
 80166c0:	f7fc ffbc 	bl	801363c <disk_read>
 80166c4:	4603      	mov	r3, r0
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d005      	beq.n	80166d6 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2201      	movs	r2, #1
 80166ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80166d2:	2301      	movs	r3, #1
 80166d4:	e14b      	b.n	801696e <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	69ba      	ldr	r2, [r7, #24]
 80166da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80166de:	e144      	b.n	801696a <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80166e6:	683a      	ldr	r2, [r7, #0]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d90a      	bls.n	8016702 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80166f2:	f003 0302 	and.w	r3, r3, #2
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d103      	bne.n	8016702 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8016700:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8016708:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801670a:	2300      	movs	r3, #0
 801670c:	637b      	str	r3, [r7, #52]	; 0x34
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	2b00      	cmp	r3, #0
 801671a:	f000 80c6 	beq.w	80168aa <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016724:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8016728:	025b      	lsls	r3, r3, #9
 801672a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801672c:	6a3b      	ldr	r3, [r7, #32]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d01e      	beq.n	8016770 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	1e5a      	subs	r2, r3, #1
 8016736:	69fb      	ldr	r3, [r7, #28]
 8016738:	fbb2 f2f3 	udiv	r2, r2, r3
 801673c:	6a3b      	ldr	r3, [r7, #32]
 801673e:	1e59      	subs	r1, r3, #1
 8016740:	69fb      	ldr	r3, [r7, #28]
 8016742:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8016746:	429a      	cmp	r2, r3
 8016748:	d312      	bcc.n	8016770 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 801674a:	6a3b      	ldr	r3, [r7, #32]
 801674c:	1e5a      	subs	r2, r3, #1
 801674e:	69fb      	ldr	r3, [r7, #28]
 8016750:	425b      	negs	r3, r3
 8016752:	401a      	ands	r2, r3
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8016760:	683a      	ldr	r2, [r7, #0]
 8016762:	1ad3      	subs	r3, r2, r3
 8016764:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801676c:	63bb      	str	r3, [r7, #56]	; 0x38
 801676e:	e029      	b.n	80167c4 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8016776:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8016778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677a:	2b00      	cmp	r3, #0
 801677c:	d11e      	bne.n	80167bc <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016784:	2100      	movs	r1, #0
 8016786:	4618      	mov	r0, r3
 8016788:	f7fd fd52 	bl	8014230 <create_chain>
 801678c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016790:	2b01      	cmp	r3, #1
 8016792:	d105      	bne.n	80167a0 <f_lseek+0x2e6>
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2202      	movs	r2, #2
 8016798:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801679c:	2302      	movs	r3, #2
 801679e:	e0e6      	b.n	801696e <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80167a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167a6:	d105      	bne.n	80167b4 <f_lseek+0x2fa>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2201      	movs	r2, #1
 80167ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80167b0:	2301      	movs	r3, #1
 80167b2:	e0dc      	b.n	801696e <f_lseek+0x4b4>
					fp->sclust = clst;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80167b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80167c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d06f      	beq.n	80168aa <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 80167ca:	e047      	b.n	801685c <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80167d2:	f003 0302 	and.w	r3, r3, #2
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d00d      	beq.n	80167f6 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80167e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80167e2:	4618      	mov	r0, r3
 80167e4:	f7fd fd24 	bl	8014230 <create_chain>
 80167e8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80167ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d10a      	bne.n	8016806 <f_lseek+0x34c>
							ofs = bcs; break;
 80167f0:	69fb      	ldr	r3, [r7, #28]
 80167f2:	603b      	str	r3, [r7, #0]
 80167f4:	e036      	b.n	8016864 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80167fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80167fe:	4618      	mov	r0, r3
 8016800:	f7fd faf4 	bl	8013dec <get_fat>
 8016804:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801680c:	d105      	bne.n	801681a <f_lseek+0x360>
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	2201      	movs	r2, #1
 8016812:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016816:	2301      	movs	r3, #1
 8016818:	e0a9      	b.n	801696e <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 801681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801681c:	2b01      	cmp	r3, #1
 801681e:	d907      	bls.n	8016830 <f_lseek+0x376>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016826:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801682a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801682c:	429a      	cmp	r2, r3
 801682e:	d305      	bcc.n	801683c <f_lseek+0x382>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2202      	movs	r2, #2
 8016834:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016838:	2302      	movs	r3, #2
 801683a:	e098      	b.n	801696e <f_lseek+0x4b4>
					fp->clust = clst;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801684a:	69fb      	ldr	r3, [r7, #28]
 801684c:	441a      	add	r2, r3
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8016854:	683a      	ldr	r2, [r7, #0]
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	1ad3      	subs	r3, r2, r3
 801685a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 801685c:	683a      	ldr	r2, [r7, #0]
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	429a      	cmp	r2, r3
 8016862:	d8b3      	bhi.n	80167cc <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	441a      	add	r2, r3
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801687a:	2b00      	cmp	r3, #0
 801687c:	d015      	beq.n	80168aa <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016884:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016886:	4618      	mov	r0, r3
 8016888:	f7fd fa8e 	bl	8013da8 <clust2sect>
 801688c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 801688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016890:	2b00      	cmp	r3, #0
 8016892:	d105      	bne.n	80168a0 <f_lseek+0x3e6>
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	2202      	movs	r2, #2
 8016898:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801689c:	2302      	movs	r3, #2
 801689e:	e066      	b.n	801696e <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	0a5b      	lsrs	r3, r3, #9
 80168a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80168a6:	4413      	add	r3, r2
 80168a8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80168b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d041      	beq.n	801693c <f_lseek+0x482>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80168be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d03b      	beq.n	801693c <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80168ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d01d      	beq.n	801690e <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80168d8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80168dc:	6879      	ldr	r1, [r7, #4]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80168e4:	2301      	movs	r3, #1
 80168e6:	f7fc fec9 	bl	801367c <disk_write>
 80168ea:	4603      	mov	r3, r0
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d005      	beq.n	80168fc <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2201      	movs	r2, #1
 80168f4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80168f8:	2301      	movs	r3, #1
 80168fa:	e038      	b.n	801696e <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8016902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016906:	b2da      	uxtb	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016914:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8016918:	6879      	ldr	r1, [r7, #4]
 801691a:	2301      	movs	r3, #1
 801691c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801691e:	f7fc fe8d 	bl	801363c <disk_read>
 8016922:	4603      	mov	r3, r0
 8016924:	2b00      	cmp	r3, #0
 8016926:	d005      	beq.n	8016934 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2201      	movs	r2, #1
 801692c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016930:	2301      	movs	r3, #1
 8016932:	e01c      	b.n	801696e <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016938:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8016948:	429a      	cmp	r2, r3
 801694a:	d90e      	bls.n	801696a <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801695e:	f043 0320 	orr.w	r3, r3, #32
 8016962:	b2da      	uxtb	r2, r3
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 801696a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801696e:	4618      	mov	r0, r3
 8016970:	3740      	adds	r7, #64	; 0x40
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}
	...

08016978 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016978:	b480      	push	{r7}
 801697a:	b087      	sub	sp, #28
 801697c:	af00      	add	r7, sp, #0
 801697e:	60f8      	str	r0, [r7, #12]
 8016980:	60b9      	str	r1, [r7, #8]
 8016982:	4613      	mov	r3, r2
 8016984:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016986:	2301      	movs	r3, #1
 8016988:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801698a:	2300      	movs	r3, #0
 801698c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801698e:	4b1f      	ldr	r3, [pc, #124]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 8016990:	7a5b      	ldrb	r3, [r3, #9]
 8016992:	b2db      	uxtb	r3, r3
 8016994:	2b01      	cmp	r3, #1
 8016996:	d831      	bhi.n	80169fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016998:	4b1c      	ldr	r3, [pc, #112]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 801699a:	7a5b      	ldrb	r3, [r3, #9]
 801699c:	b2db      	uxtb	r3, r3
 801699e:	461a      	mov	r2, r3
 80169a0:	4b1a      	ldr	r3, [pc, #104]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169a2:	2100      	movs	r1, #0
 80169a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80169a6:	4b19      	ldr	r3, [pc, #100]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169a8:	7a5b      	ldrb	r3, [r3, #9]
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	4a17      	ldr	r2, [pc, #92]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	4413      	add	r3, r2
 80169b2:	68fa      	ldr	r2, [r7, #12]
 80169b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80169b6:	4b15      	ldr	r3, [pc, #84]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169b8:	7a5b      	ldrb	r3, [r3, #9]
 80169ba:	b2db      	uxtb	r3, r3
 80169bc:	461a      	mov	r2, r3
 80169be:	4b13      	ldr	r3, [pc, #76]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169c0:	4413      	add	r3, r2
 80169c2:	79fa      	ldrb	r2, [r7, #7]
 80169c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80169c6:	4b11      	ldr	r3, [pc, #68]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169c8:	7a5b      	ldrb	r3, [r3, #9]
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	1c5a      	adds	r2, r3, #1
 80169ce:	b2d1      	uxtb	r1, r2
 80169d0:	4a0e      	ldr	r2, [pc, #56]	; (8016a0c <FATFS_LinkDriverEx+0x94>)
 80169d2:	7251      	strb	r1, [r2, #9]
 80169d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80169d6:	7dbb      	ldrb	r3, [r7, #22]
 80169d8:	3330      	adds	r3, #48	; 0x30
 80169da:	b2da      	uxtb	r2, r3
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	3301      	adds	r3, #1
 80169e4:	223a      	movs	r2, #58	; 0x3a
 80169e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	3302      	adds	r3, #2
 80169ec:	222f      	movs	r2, #47	; 0x2f
 80169ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	3303      	adds	r3, #3
 80169f4:	2200      	movs	r2, #0
 80169f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80169f8:	2300      	movs	r3, #0
 80169fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80169fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	371c      	adds	r7, #28
 8016a02:	46bd      	mov	sp, r7
 8016a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop
 8016a0c:	20009d50 	.word	0x20009d50

08016a10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	6839      	ldr	r1, [r7, #0]
 8016a1e:	6878      	ldr	r0, [r7, #4]
 8016a20:	f7ff ffaa 	bl	8016978 <FATFS_LinkDriverEx>
 8016a24:	4603      	mov	r3, r0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3708      	adds	r7, #8
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
	...

08016a30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8016a30:	b480      	push	{r7}
 8016a32:	b085      	sub	sp, #20
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	4603      	mov	r3, r0
 8016a38:	6039      	str	r1, [r7, #0]
 8016a3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016a3c:	88fb      	ldrh	r3, [r7, #6]
 8016a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8016a40:	d802      	bhi.n	8016a48 <ff_convert+0x18>
		c = chr;
 8016a42:	88fb      	ldrh	r3, [r7, #6]
 8016a44:	81fb      	strh	r3, [r7, #14]
 8016a46:	e025      	b.n	8016a94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d00b      	beq.n	8016a66 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016a4e:	88fb      	ldrh	r3, [r7, #6]
 8016a50:	2bff      	cmp	r3, #255	; 0xff
 8016a52:	d805      	bhi.n	8016a60 <ff_convert+0x30>
 8016a54:	88fb      	ldrh	r3, [r7, #6]
 8016a56:	3b80      	subs	r3, #128	; 0x80
 8016a58:	4a12      	ldr	r2, [pc, #72]	; (8016aa4 <ff_convert+0x74>)
 8016a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016a5e:	e000      	b.n	8016a62 <ff_convert+0x32>
 8016a60:	2300      	movs	r3, #0
 8016a62:	81fb      	strh	r3, [r7, #14]
 8016a64:	e016      	b.n	8016a94 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8016a66:	2300      	movs	r3, #0
 8016a68:	81fb      	strh	r3, [r7, #14]
 8016a6a:	e009      	b.n	8016a80 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016a6c:	89fb      	ldrh	r3, [r7, #14]
 8016a6e:	4a0d      	ldr	r2, [pc, #52]	; (8016aa4 <ff_convert+0x74>)
 8016a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016a74:	88fa      	ldrh	r2, [r7, #6]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d006      	beq.n	8016a88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016a7a:	89fb      	ldrh	r3, [r7, #14]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	81fb      	strh	r3, [r7, #14]
 8016a80:	89fb      	ldrh	r3, [r7, #14]
 8016a82:	2b7f      	cmp	r3, #127	; 0x7f
 8016a84:	d9f2      	bls.n	8016a6c <ff_convert+0x3c>
 8016a86:	e000      	b.n	8016a8a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016a88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016a8a:	89fb      	ldrh	r3, [r7, #14]
 8016a8c:	3380      	adds	r3, #128	; 0x80
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016a94:	89fb      	ldrh	r3, [r7, #14]
}
 8016a96:	4618      	mov	r0, r3
 8016a98:	3714      	adds	r7, #20
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa0:	4770      	bx	lr
 8016aa2:	bf00      	nop
 8016aa4:	0801d8e4 	.word	0x0801d8e4

08016aa8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b085      	sub	sp, #20
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	4603      	mov	r3, r0
 8016ab0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	60fb      	str	r3, [r7, #12]
 8016ab6:	e002      	b.n	8016abe <ff_wtoupper+0x16>
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	3301      	adds	r3, #1
 8016abc:	60fb      	str	r3, [r7, #12]
 8016abe:	4a0f      	ldr	r2, [pc, #60]	; (8016afc <ff_wtoupper+0x54>)
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d006      	beq.n	8016ad8 <ff_wtoupper+0x30>
 8016aca:	4a0c      	ldr	r2, [pc, #48]	; (8016afc <ff_wtoupper+0x54>)
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016ad2:	88fa      	ldrh	r2, [r7, #6]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d1ef      	bne.n	8016ab8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8016ad8:	4a08      	ldr	r2, [pc, #32]	; (8016afc <ff_wtoupper+0x54>)
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d004      	beq.n	8016aee <ff_wtoupper+0x46>
 8016ae4:	4a06      	ldr	r2, [pc, #24]	; (8016b00 <ff_wtoupper+0x58>)
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016aec:	e000      	b.n	8016af0 <ff_wtoupper+0x48>
 8016aee:	88fb      	ldrh	r3, [r7, #6]
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3714      	adds	r7, #20
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr
 8016afc:	0801d9e4 	.word	0x0801d9e4
 8016b00:	0801dbc4 	.word	0x0801dbc4

08016b04 <f_PEL_open>:

//////////////////////////////////////////////////////////
// PELICULAS DESDE SD FILE
//////////////////////////////////////////////////////////
void f_PEL_open(FIL* f,char* Dir,char* Name,unsigned int QEsc)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b094      	sub	sp, #80	; 0x50
 8016b08:	af02      	add	r7, sp, #8
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
 8016b10:	603b      	str	r3, [r7, #0]
	int i;
	TP_CS_OFF;
 8016b12:	2201      	movs	r2, #1
 8016b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016b18:	481b      	ldr	r0, [pc, #108]	; (8016b88 <f_PEL_open+0x84>)
 8016b1a:	f7f0 fb85 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_OFF;
 8016b1e:	2201      	movs	r2, #1
 8016b20:	2180      	movs	r1, #128	; 0x80
 8016b22:	481a      	ldr	r0, [pc, #104]	; (8016b8c <f_PEL_open+0x88>)
 8016b24:	f7f0 fb80 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_ON;
 8016b28:	2200      	movs	r2, #0
 8016b2a:	2108      	movs	r1, #8
 8016b2c:	4817      	ldr	r0, [pc, #92]	; (8016b8c <f_PEL_open+0x88>)
 8016b2e:	f7f0 fb7b 	bl	8007228 <HAL_GPIO_WritePin>

	char File[50];
	for(i=0;i<=QEsc;i++)
 8016b32:	2300      	movs	r3, #0
 8016b34:	647b      	str	r3, [r7, #68]	; 0x44
 8016b36:	e01a      	b.n	8016b6e <f_PEL_open+0x6a>
	{
		sprintf(File,"%s/PEL %s/PEL %s %d.bmp",Dir,Name,Name,i);
 8016b38:	f107 0010 	add.w	r0, r7, #16
 8016b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b3e:	9301      	str	r3, [sp, #4]
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	68ba      	ldr	r2, [r7, #8]
 8016b48:	4911      	ldr	r1, [pc, #68]	; (8016b90 <f_PEL_open+0x8c>)
 8016b4a:	f003 fa77 	bl	801a03c <siprintf>
		f_open(&f[i],File,FA_READ);
 8016b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b50:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8016b54:	fb02 f303 	mul.w	r3, r2, r3
 8016b58:	68fa      	ldr	r2, [r7, #12]
 8016b5a:	4413      	add	r3, r2
 8016b5c:	f107 0110 	add.w	r1, r7, #16
 8016b60:	2201      	movs	r2, #1
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7fe ffda 	bl	8015b1c <f_open>
	for(i=0;i<=QEsc;i++)
 8016b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8016b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b70:	683a      	ldr	r2, [r7, #0]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d2e0      	bcs.n	8016b38 <f_PEL_open+0x34>
	}
	SD_CS_OFF;
 8016b76:	2201      	movs	r2, #1
 8016b78:	2108      	movs	r1, #8
 8016b7a:	4804      	ldr	r0, [pc, #16]	; (8016b8c <f_PEL_open+0x88>)
 8016b7c:	f7f0 fb54 	bl	8007228 <HAL_GPIO_WritePin>
}
 8016b80:	bf00      	nop
 8016b82:	3748      	adds	r7, #72	; 0x48
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	48000400 	.word	0x48000400
 8016b8c:	48000800 	.word	0x48000800
 8016b90:	0801bfa0 	.word	0x0801bfa0

08016b94 <f_PEL>:
void f_PEL(FIL* Pel,unsigned int x,unsigned int y,unsigned int offx,unsigned int offy,unsigned char Esc)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b086      	sub	sp, #24
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	60f8      	str	r0, [r7, #12]
 8016b9c:	60b9      	str	r1, [r7, #8]
 8016b9e:	607a      	str	r2, [r7, #4]
 8016ba0:	603b      	str	r3, [r7, #0]
    unsigned int xx;
    unsigned int yy;

    if(Esc==0)
 8016ba2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d104      	bne.n	8016bb4 <f_PEL+0x20>
    {
      xx=x;
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	617b      	str	r3, [r7, #20]
      yy=y;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	613b      	str	r3, [r7, #16]
 8016bb2:	e007      	b.n	8016bc4 <f_PEL+0x30>
    }
    else
    {
      xx=x+offx;
 8016bb4:	68ba      	ldr	r2, [r7, #8]
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	4413      	add	r3, r2
 8016bba:	617b      	str	r3, [r7, #20]
      yy=y+offy;
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	6a3b      	ldr	r3, [r7, #32]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	613b      	str	r3, [r7, #16]
    }
    f_PIC(&Pel[Esc],xx,yy);
 8016bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016bc8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8016bcc:	fb02 f303 	mul.w	r3, r2, r3
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	693a      	ldr	r2, [r7, #16]
 8016bd6:	6979      	ldr	r1, [r7, #20]
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f000 fb57 	bl	801728c <f_PIC>
}
 8016bde:	bf00      	nop
 8016be0:	3718      	adds	r7, #24
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}
	...

08016be8 <f_TECLADO_ALFA_Input>:

//////////////////////////////////////////////////////////
// TECLADO_ALFA DESDE SD FILE
//////////////////////////////////////////////////////////
void f_TECLADO_ALFA_Input(FIL* fi,unsigned int PantallaSI,unsigned int PantallaNO)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b0a0      	sub	sp, #128	; 0x80
 8016bec:	af02      	add	r7, sp, #8
 8016bee:	60f8      	str	r0, [r7, #12]
 8016bf0:	60b9      	str	r1, [r7, #8]
 8016bf2:	607a      	str	r2, [r7, #4]
   int f,c;
   char str[50];
   char Tecla[41];

   if(m_Teclado==0) sprintf(Tecla,"0123456789QWERTYUIOPASDFGHJKLN#^ZXCVBNM<");
 8016bf4:	4b91      	ldr	r3, [pc, #580]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016bf6:	781b      	ldrb	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d105      	bne.n	8016c08 <f_TECLADO_ALFA_Input+0x20>
 8016bfc:	f107 0310 	add.w	r3, r7, #16
 8016c00:	498f      	ldr	r1, [pc, #572]	; (8016e40 <f_TECLADO_ALFA_Input+0x258>)
 8016c02:	4618      	mov	r0, r3
 8016c04:	f003 fa1a 	bl	801a03c <siprintf>
   if(m_Teclado==1) sprintf(Tecla,"0123456789qwertyuiopasdfghjkLn#^zxcvbnm<");
 8016c08:	4b8c      	ldr	r3, [pc, #560]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d105      	bne.n	8016c1c <f_TECLADO_ALFA_Input+0x34>
 8016c10:	f107 0310 	add.w	r3, r7, #16
 8016c14:	498b      	ldr	r1, [pc, #556]	; (8016e44 <f_TECLADO_ALFA_Input+0x25c>)
 8016c16:	4618      	mov	r0, r3
 8016c18:	f003 fa10 	bl	801a03c <siprintf>
   if(m_Teclado==2) sprintf(Tecla,"~!#$%c&@_?!=+-*%c%c^|xX<>()[]{}oO#^%c'.,:;!<",'%','/','\\','"');
 8016c1c:	4b87      	ldr	r3, [pc, #540]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	2b02      	cmp	r3, #2
 8016c22:	d10a      	bne.n	8016c3a <f_TECLADO_ALFA_Input+0x52>
 8016c24:	f107 0010 	add.w	r0, r7, #16
 8016c28:	2322      	movs	r3, #34	; 0x22
 8016c2a:	9301      	str	r3, [sp, #4]
 8016c2c:	235c      	movs	r3, #92	; 0x5c
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	232f      	movs	r3, #47	; 0x2f
 8016c32:	2225      	movs	r2, #37	; 0x25
 8016c34:	4984      	ldr	r1, [pc, #528]	; (8016e48 <f_TECLADO_ALFA_Input+0x260>)
 8016c36:	f003 fa01 	bl	801a03c <siprintf>


   for(f=0;f<4;f++)
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8016c3e:	e133      	b.n	8016ea8 <f_TECLADO_ALFA_Input+0x2c0>
   {
	   for(c=0;c<10;c++)
 8016c40:	2300      	movs	r3, #0
 8016c42:	673b      	str	r3, [r7, #112]	; 0x70
 8016c44:	e129      	b.n	8016e9a <f_TECLADO_ALFA_Input+0x2b2>
	   {
		   if( m_XPanel>c*32 && m_XPanel<(c+1)*32 && m_YPanel>80+f*32 && m_YPanel<80+(f+1)*32 )
 8016c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016c48:	015b      	lsls	r3, r3, #5
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	4b7f      	ldr	r3, [pc, #508]	; (8016e4c <f_TECLADO_ALFA_Input+0x264>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	429a      	cmp	r2, r3
 8016c52:	f080 811f 	bcs.w	8016e94 <f_TECLADO_ALFA_Input+0x2ac>
 8016c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016c58:	3301      	adds	r3, #1
 8016c5a:	015b      	lsls	r3, r3, #5
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	4b7b      	ldr	r3, [pc, #492]	; (8016e4c <f_TECLADO_ALFA_Input+0x264>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	f240 8116 	bls.w	8016e94 <f_TECLADO_ALFA_Input+0x2ac>
 8016c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c6a:	015b      	lsls	r3, r3, #5
 8016c6c:	3350      	adds	r3, #80	; 0x50
 8016c6e:	461a      	mov	r2, r3
 8016c70:	4b77      	ldr	r3, [pc, #476]	; (8016e50 <f_TECLADO_ALFA_Input+0x268>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	429a      	cmp	r2, r3
 8016c76:	f080 810d 	bcs.w	8016e94 <f_TECLADO_ALFA_Input+0x2ac>
 8016c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c7c:	3301      	adds	r3, #1
 8016c7e:	015b      	lsls	r3, r3, #5
 8016c80:	3350      	adds	r3, #80	; 0x50
 8016c82:	461a      	mov	r2, r3
 8016c84:	4b72      	ldr	r3, [pc, #456]	; (8016e50 <f_TECLADO_ALFA_Input+0x268>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	f240 8103 	bls.w	8016e94 <f_TECLADO_ALFA_Input+0x2ac>
		   {
	   		    f_PIC(&fi[1],c*32,80+f*32);
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 8016c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016c96:	015b      	lsls	r3, r3, #5
 8016c98:	4619      	mov	r1, r3
 8016c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c9c:	015b      	lsls	r3, r3, #5
 8016c9e:	3350      	adds	r3, #80	; 0x50
 8016ca0:	461a      	mov	r2, r3
 8016ca2:	f000 faf3 	bl	801728c <f_PIC>

	   		    ILI9341_Draw_Char(c*32+12,240-f*32-112,0xffff,0x5AF7,Tecla[f*10+c],4);
 8016ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ca8:	015b      	lsls	r3, r3, #5
 8016caa:	f103 000c 	add.w	r0, r3, #12
 8016cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016cb0:	f1c3 0304 	rsb	r3, r3, #4
 8016cb4:	0159      	lsls	r1, r3, #5
 8016cb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016cb8:	4613      	mov	r3, r2
 8016cba:	009b      	lsls	r3, r3, #2
 8016cbc:	4413      	add	r3, r2
 8016cbe:	005b      	lsls	r3, r3, #1
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016cc4:	4413      	add	r3, r2
 8016cc6:	3378      	adds	r3, #120	; 0x78
 8016cc8:	443b      	add	r3, r7
 8016cca:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016cce:	2204      	movs	r2, #4
 8016cd0:	9201      	str	r2, [sp, #4]
 8016cd2:	9300      	str	r3, [sp, #0]
 8016cd4:	f645 23f7 	movw	r3, #23287	; 0x5af7
 8016cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016cdc:	f7fa feac 	bl	8011a38 <ILI9341_Draw_Char>
	   		    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8016ce0:	bf00      	nop
 8016ce2:	2102      	movs	r1, #2
 8016ce4:	485b      	ldr	r0, [pc, #364]	; (8016e54 <f_TECLADO_ALFA_Input+0x26c>)
 8016ce6:	f7f0 fa87 	bl	80071f8 <HAL_GPIO_ReadPin>
 8016cea:	4603      	mov	r3, r0
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d0f8      	beq.n	8016ce2 <f_TECLADO_ALFA_Input+0xfa>
		       	HAL_Delay(255);
 8016cf0:	20ff      	movs	r0, #255	; 0xff
 8016cf2:	f7ee faa9 	bl	8005248 <HAL_Delay>
 			    f_PIC(&fi[0],c*32,80+f*32);
 8016cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016cf8:	015b      	lsls	r3, r3, #5
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016cfe:	015b      	lsls	r3, r3, #5
 8016d00:	3350      	adds	r3, #80	; 0x50
 8016d02:	461a      	mov	r2, r3
 8016d04:	68f8      	ldr	r0, [r7, #12]
 8016d06:	f000 fac1 	bl	801728c <f_PIC>

		    	ILI9341_Draw_Char(c*32+12,240-f*32-112,0xffff,0x0010,Tecla[f*10+c],4);
 8016d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d0c:	015b      	lsls	r3, r3, #5
 8016d0e:	f103 000c 	add.w	r0, r3, #12
 8016d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d14:	f1c3 0304 	rsb	r3, r3, #4
 8016d18:	0159      	lsls	r1, r3, #5
 8016d1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016d1c:	4613      	mov	r3, r2
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	4413      	add	r3, r2
 8016d22:	005b      	lsls	r3, r3, #1
 8016d24:	461a      	mov	r2, r3
 8016d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d28:	4413      	add	r3, r2
 8016d2a:	3378      	adds	r3, #120	; 0x78
 8016d2c:	443b      	add	r3, r7
 8016d2e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016d32:	2204      	movs	r2, #4
 8016d34:	9201      	str	r2, [sp, #4]
 8016d36:	9300      	str	r3, [sp, #0]
 8016d38:	2310      	movs	r3, #16
 8016d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d3e:	f7fa fe7b 	bl	8011a38 <ILI9341_Draw_Char>
 			    if(f*10+c != 30 && f*10+c != 31 && f*10+c != 39 && m_TecladoIndice<22)
 8016d42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016d44:	4613      	mov	r3, r2
 8016d46:	009b      	lsls	r3, r3, #2
 8016d48:	4413      	add	r3, r2
 8016d4a:	005b      	lsls	r3, r3, #1
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d50:	4413      	add	r3, r2
 8016d52:	2b1e      	cmp	r3, #30
 8016d54:	d032      	beq.n	8016dbc <f_TECLADO_ALFA_Input+0x1d4>
 8016d56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016d58:	4613      	mov	r3, r2
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	4413      	add	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	461a      	mov	r2, r3
 8016d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d64:	4413      	add	r3, r2
 8016d66:	2b1f      	cmp	r3, #31
 8016d68:	d028      	beq.n	8016dbc <f_TECLADO_ALFA_Input+0x1d4>
 8016d6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	009b      	lsls	r3, r3, #2
 8016d70:	4413      	add	r3, r2
 8016d72:	005b      	lsls	r3, r3, #1
 8016d74:	461a      	mov	r2, r3
 8016d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d78:	4413      	add	r3, r2
 8016d7a:	2b27      	cmp	r3, #39	; 0x27
 8016d7c:	d01e      	beq.n	8016dbc <f_TECLADO_ALFA_Input+0x1d4>
 8016d7e:	4b36      	ldr	r3, [pc, #216]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	2b15      	cmp	r3, #21
 8016d84:	d81a      	bhi.n	8016dbc <f_TECLADO_ALFA_Input+0x1d4>
 			    {
 			    	m_TecladoStr[m_TecladoIndice]=Tecla[f*10+c];
 8016d86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016d88:	4613      	mov	r3, r2
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	4413      	add	r3, r2
 8016d8e:	005b      	lsls	r3, r3, #1
 8016d90:	461a      	mov	r2, r3
 8016d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d94:	441a      	add	r2, r3
 8016d96:	4b30      	ldr	r3, [pc, #192]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	3278      	adds	r2, #120	; 0x78
 8016d9c:	443a      	add	r2, r7
 8016d9e:	f812 1c68 	ldrb.w	r1, [r2, #-104]
 8016da2:	4a2e      	ldr	r2, [pc, #184]	; (8016e5c <f_TECLADO_ALFA_Input+0x274>)
 8016da4:	54d1      	strb	r1, [r2, r3]
 			    	m_TecladoStr[m_TecladoIndice+1]=0;
 8016da6:	4b2c      	ldr	r3, [pc, #176]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	3301      	adds	r3, #1
 8016dac:	4a2b      	ldr	r2, [pc, #172]	; (8016e5c <f_TECLADO_ALFA_Input+0x274>)
 8016dae:	2100      	movs	r1, #0
 8016db0:	54d1      	strb	r1, [r2, r3]
 			    	m_TecladoIndice++;
 8016db2:	4b29      	ldr	r3, [pc, #164]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	3301      	adds	r3, #1
 8016db8:	4a27      	ldr	r2, [pc, #156]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016dba:	6013      	str	r3, [r2, #0]
 			    }
 			    if(f*10+c == 39 && m_TecladoIndice>0) m_TecladoIndice--,m_TecladoStr[m_TecladoIndice]=0;
 8016dbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016dbe:	4613      	mov	r3, r2
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	4413      	add	r3, r2
 8016dc4:	005b      	lsls	r3, r3, #1
 8016dc6:	461a      	mov	r2, r3
 8016dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016dca:	4413      	add	r3, r2
 8016dcc:	2b27      	cmp	r3, #39	; 0x27
 8016dce:	d10d      	bne.n	8016dec <f_TECLADO_ALFA_Input+0x204>
 8016dd0:	4b21      	ldr	r3, [pc, #132]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d009      	beq.n	8016dec <f_TECLADO_ALFA_Input+0x204>
 8016dd8:	4b1f      	ldr	r3, [pc, #124]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	3b01      	subs	r3, #1
 8016dde:	4a1e      	ldr	r2, [pc, #120]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016de0:	6013      	str	r3, [r2, #0]
 8016de2:	4b1d      	ldr	r3, [pc, #116]	; (8016e58 <f_TECLADO_ALFA_Input+0x270>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	4a1d      	ldr	r2, [pc, #116]	; (8016e5c <f_TECLADO_ALFA_Input+0x274>)
 8016de8:	2100      	movs	r1, #0
 8016dea:	54d1      	strb	r1, [r2, r3]
 			    if(f*10+c == 31)
 8016dec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016dee:	4613      	mov	r3, r2
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	4413      	add	r3, r2
 8016df4:	005b      	lsls	r3, r3, #1
 8016df6:	461a      	mov	r2, r3
 8016df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016dfa:	4413      	add	r3, r2
 8016dfc:	2b1f      	cmp	r3, #31
 8016dfe:	d10a      	bne.n	8016e16 <f_TECLADO_ALFA_Input+0x22e>
 			    {
 			    	if(m_Teclado!=0) m_Teclado=0;
 8016e00:	4b0e      	ldr	r3, [pc, #56]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d003      	beq.n	8016e10 <f_TECLADO_ALFA_Input+0x228>
 8016e08:	4b0c      	ldr	r3, [pc, #48]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	701a      	strb	r2, [r3, #0]
 8016e0e:	e002      	b.n	8016e16 <f_TECLADO_ALFA_Input+0x22e>
 			    	else			 m_Teclado=1;
 8016e10:	4b0a      	ldr	r3, [pc, #40]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016e12:	2201      	movs	r2, #1
 8016e14:	701a      	strb	r2, [r3, #0]
 			    }
 			    if(f*10+c == 30)
 8016e16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016e18:	4613      	mov	r3, r2
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	4413      	add	r3, r2
 8016e1e:	005b      	lsls	r3, r3, #1
 8016e20:	461a      	mov	r2, r3
 8016e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e24:	4413      	add	r3, r2
 8016e26:	2b1e      	cmp	r3, #30
 8016e28:	d11d      	bne.n	8016e66 <f_TECLADO_ALFA_Input+0x27e>
 			    {
 			      	if(m_Teclado!=2) m_Teclado=2;
 8016e2a:	4b04      	ldr	r3, [pc, #16]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	2b02      	cmp	r3, #2
 8016e30:	d016      	beq.n	8016e60 <f_TECLADO_ALFA_Input+0x278>
 8016e32:	4b02      	ldr	r3, [pc, #8]	; (8016e3c <f_TECLADO_ALFA_Input+0x254>)
 8016e34:	2202      	movs	r2, #2
 8016e36:	701a      	strb	r2, [r3, #0]
 8016e38:	e015      	b.n	8016e66 <f_TECLADO_ALFA_Input+0x27e>
 8016e3a:	bf00      	nop
 8016e3c:	20009d9c 	.word	0x20009d9c
 8016e40:	0801c010 	.word	0x0801c010
 8016e44:	0801c03c 	.word	0x0801c03c
 8016e48:	0801c068 	.word	0x0801c068
 8016e4c:	2000a098 	.word	0x2000a098
 8016e50:	2000a09c 	.word	0x2000a09c
 8016e54:	48000400 	.word	0x48000400
 8016e58:	20009d94 	.word	0x20009d94
 8016e5c:	20009d60 	.word	0x20009d60
 			       	else			 m_Teclado=0;
 8016e60:	4b73      	ldr	r3, [pc, #460]	; (8017030 <f_TECLADO_ALFA_Input+0x448>)
 8016e62:	2200      	movs	r2, #0
 8016e64:	701a      	strb	r2, [r3, #0]
 			    }
 			    if(f*10+c == 30 || f*10+c == 31) f_TECLADO_ALFA_fondo(fi);
 8016e66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016e68:	4613      	mov	r3, r2
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	4413      	add	r3, r2
 8016e6e:	005b      	lsls	r3, r3, #1
 8016e70:	461a      	mov	r2, r3
 8016e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e74:	4413      	add	r3, r2
 8016e76:	2b1e      	cmp	r3, #30
 8016e78:	d009      	beq.n	8016e8e <f_TECLADO_ALFA_Input+0x2a6>
 8016e7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	009b      	lsls	r3, r3, #2
 8016e80:	4413      	add	r3, r2
 8016e82:	005b      	lsls	r3, r3, #1
 8016e84:	461a      	mov	r2, r3
 8016e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e88:	4413      	add	r3, r2
 8016e8a:	2b1f      	cmp	r3, #31
 8016e8c:	d102      	bne.n	8016e94 <f_TECLADO_ALFA_Input+0x2ac>
 8016e8e:	68f8      	ldr	r0, [r7, #12]
 8016e90:	f000 f936 	bl	8017100 <f_TECLADO_ALFA_fondo>
	   for(c=0;c<10;c++)
 8016e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e96:	3301      	adds	r3, #1
 8016e98:	673b      	str	r3, [r7, #112]	; 0x70
 8016e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016e9c:	2b09      	cmp	r3, #9
 8016e9e:	f77f aed2 	ble.w	8016c46 <f_TECLADO_ALFA_Input+0x5e>
   for(f=0;f<4;f++)
 8016ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	677b      	str	r3, [r7, #116]	; 0x74
 8016ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016eaa:	2b03      	cmp	r3, #3
 8016eac:	f77f aec8 	ble.w	8016c40 <f_TECLADO_ALFA_Input+0x58>
		   }
	   }
   }
   if( m_XPanel<80 && m_YPanel>208 )
 8016eb0:	4b60      	ldr	r3, [pc, #384]	; (8017034 <f_TECLADO_ALFA_Input+0x44c>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2b4f      	cmp	r3, #79	; 0x4f
 8016eb6:	d838      	bhi.n	8016f2a <f_TECLADO_ALFA_Input+0x342>
 8016eb8:	4b5f      	ldr	r3, [pc, #380]	; (8017038 <f_TECLADO_ALFA_Input+0x450>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	2bd0      	cmp	r3, #208	; 0xd0
 8016ebe:	d934      	bls.n	8016f2a <f_TECLADO_ALFA_Input+0x342>
   {
	    f_PIC(&fi[7],0,208);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 8016ec6:	22d0      	movs	r2, #208	; 0xd0
 8016ec8:	2100      	movs	r1, #0
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f000 f9de 	bl	801728c <f_PIC>
		ILI9341_Draw_String(26,207,0xffff,0x5AF7, "<-",4);
 8016ed0:	2304      	movs	r3, #4
 8016ed2:	9301      	str	r3, [sp, #4]
 8016ed4:	4b59      	ldr	r3, [pc, #356]	; (801703c <f_TECLADO_ALFA_Input+0x454>)
 8016ed6:	9300      	str	r3, [sp, #0]
 8016ed8:	f645 23f7 	movw	r3, #23287	; 0x5af7
 8016edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ee0:	21cf      	movs	r1, #207	; 0xcf
 8016ee2:	201a      	movs	r0, #26
 8016ee4:	f7fa fca6 	bl	8011834 <ILI9341_Draw_String>
	    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8016ee8:	bf00      	nop
 8016eea:	2102      	movs	r1, #2
 8016eec:	4854      	ldr	r0, [pc, #336]	; (8017040 <f_TECLADO_ALFA_Input+0x458>)
 8016eee:	f7f0 f983 	bl	80071f8 <HAL_GPIO_ReadPin>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d0f8      	beq.n	8016eea <f_TECLADO_ALFA_Input+0x302>
      	HAL_Delay(255);
 8016ef8:	20ff      	movs	r0, #255	; 0xff
 8016efa:	f7ee f9a5 	bl	8005248 <HAL_Delay>
        f_PIC(&fi[6],0,208);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8016f04:	22d0      	movs	r2, #208	; 0xd0
 8016f06:	2100      	movs	r1, #0
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f000 f9bf 	bl	801728c <f_PIC>
        ILI9341_Draw_String(26,207,0xffff,0x0010, "<-",4);
 8016f0e:	2304      	movs	r3, #4
 8016f10:	9301      	str	r3, [sp, #4]
 8016f12:	4b4a      	ldr	r3, [pc, #296]	; (801703c <f_TECLADO_ALFA_Input+0x454>)
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	2310      	movs	r3, #16
 8016f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f1c:	21cf      	movs	r1, #207	; 0xcf
 8016f1e:	201a      	movs	r0, #26
 8016f20:	f7fa fc88 	bl	8011834 <ILI9341_Draw_String>
        m_Pantalla=PantallaNO;
 8016f24:	4a47      	ldr	r2, [pc, #284]	; (8017044 <f_TECLADO_ALFA_Input+0x45c>)
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6013      	str	r3, [r2, #0]
   }
   if( m_XPanel>80 && m_XPanel<240 && m_YPanel>208 )
 8016f2a:	4b42      	ldr	r3, [pc, #264]	; (8017034 <f_TECLADO_ALFA_Input+0x44c>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	2b50      	cmp	r3, #80	; 0x50
 8016f30:	d922      	bls.n	8016f78 <f_TECLADO_ALFA_Input+0x390>
 8016f32:	4b40      	ldr	r3, [pc, #256]	; (8017034 <f_TECLADO_ALFA_Input+0x44c>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2bef      	cmp	r3, #239	; 0xef
 8016f38:	d81e      	bhi.n	8016f78 <f_TECLADO_ALFA_Input+0x390>
 8016f3a:	4b3f      	ldr	r3, [pc, #252]	; (8017038 <f_TECLADO_ALFA_Input+0x450>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2bd0      	cmp	r3, #208	; 0xd0
 8016f40:	d91a      	bls.n	8016f78 <f_TECLADO_ALFA_Input+0x390>
   {
	    f_PIC(&fi[5],80,208);
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8016f48:	22d0      	movs	r2, #208	; 0xd0
 8016f4a:	2150      	movs	r1, #80	; 0x50
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f000 f99d 	bl	801728c <f_PIC>
	    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8016f52:	bf00      	nop
 8016f54:	2102      	movs	r1, #2
 8016f56:	483a      	ldr	r0, [pc, #232]	; (8017040 <f_TECLADO_ALFA_Input+0x458>)
 8016f58:	f7f0 f94e 	bl	80071f8 <HAL_GPIO_ReadPin>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d0f8      	beq.n	8016f54 <f_TECLADO_ALFA_Input+0x36c>
      	HAL_Delay(255);
 8016f62:	20ff      	movs	r0, #255	; 0xff
 8016f64:	f7ee f970 	bl	8005248 <HAL_Delay>
        f_PIC(&fi[4],80,208);
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8016f6e:	22d0      	movs	r2, #208	; 0xd0
 8016f70:	2150      	movs	r1, #80	; 0x50
 8016f72:	4618      	mov	r0, r3
 8016f74:	f000 f98a 	bl	801728c <f_PIC>
   }
   if( m_XPanel>240 && m_YPanel>208 )
 8016f78:	4b2e      	ldr	r3, [pc, #184]	; (8017034 <f_TECLADO_ALFA_Input+0x44c>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	2bf0      	cmp	r3, #240	; 0xf0
 8016f7e:	d93a      	bls.n	8016ff6 <f_TECLADO_ALFA_Input+0x40e>
 8016f80:	4b2d      	ldr	r3, [pc, #180]	; (8017038 <f_TECLADO_ALFA_Input+0x450>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	2bd0      	cmp	r3, #208	; 0xd0
 8016f86:	d936      	bls.n	8016ff6 <f_TECLADO_ALFA_Input+0x40e>
   {
	    f_PIC(&fi[7],240,208);
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 8016f8e:	22d0      	movs	r2, #208	; 0xd0
 8016f90:	21f0      	movs	r1, #240	; 0xf0
 8016f92:	4618      	mov	r0, r3
 8016f94:	f000 f97a 	bl	801728c <f_PIC>
		ILI9341_Draw_String(266,207,0xffff,0x5AF7, "OK",4);
 8016f98:	2304      	movs	r3, #4
 8016f9a:	9301      	str	r3, [sp, #4]
 8016f9c:	4b2a      	ldr	r3, [pc, #168]	; (8017048 <f_TECLADO_ALFA_Input+0x460>)
 8016f9e:	9300      	str	r3, [sp, #0]
 8016fa0:	f645 23f7 	movw	r3, #23287	; 0x5af7
 8016fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fa8:	21cf      	movs	r1, #207	; 0xcf
 8016faa:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8016fae:	f7fa fc41 	bl	8011834 <ILI9341_Draw_String>
	    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8016fb2:	bf00      	nop
 8016fb4:	2102      	movs	r1, #2
 8016fb6:	4822      	ldr	r0, [pc, #136]	; (8017040 <f_TECLADO_ALFA_Input+0x458>)
 8016fb8:	f7f0 f91e 	bl	80071f8 <HAL_GPIO_ReadPin>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d0f8      	beq.n	8016fb4 <f_TECLADO_ALFA_Input+0x3cc>
      	HAL_Delay(255);
 8016fc2:	20ff      	movs	r0, #255	; 0xff
 8016fc4:	f7ee f940 	bl	8005248 <HAL_Delay>
        f_PIC(&fi[6],240,208);
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8016fce:	22d0      	movs	r2, #208	; 0xd0
 8016fd0:	21f0      	movs	r1, #240	; 0xf0
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f000 f95a 	bl	801728c <f_PIC>
        ILI9341_Draw_String(266,207,0xffff,0x0010, "OK",4);
 8016fd8:	2304      	movs	r3, #4
 8016fda:	9301      	str	r3, [sp, #4]
 8016fdc:	4b1a      	ldr	r3, [pc, #104]	; (8017048 <f_TECLADO_ALFA_Input+0x460>)
 8016fde:	9300      	str	r3, [sp, #0]
 8016fe0:	2310      	movs	r3, #16
 8016fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fe6:	21cf      	movs	r1, #207	; 0xcf
 8016fe8:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8016fec:	f7fa fc22 	bl	8011834 <ILI9341_Draw_String>
        m_Pantalla=PantallaSI;
 8016ff0:	4a14      	ldr	r2, [pc, #80]	; (8017044 <f_TECLADO_ALFA_Input+0x45c>)
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	6013      	str	r3, [r2, #0]
   }
   sprintf(str,"%s                      ",m_TecladoStr);
 8016ff6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016ffa:	4a14      	ldr	r2, [pc, #80]	; (801704c <f_TECLADO_ALFA_Input+0x464>)
 8016ffc:	4914      	ldr	r1, [pc, #80]	; (8017050 <f_TECLADO_ALFA_Input+0x468>)
 8016ffe:	4618      	mov	r0, r3
 8017000:	f003 f81c 	bl	801a03c <siprintf>
   m_TecladoStr[22]=0;
 8017004:	4b11      	ldr	r3, [pc, #68]	; (801704c <f_TECLADO_ALFA_Input+0x464>)
 8017006:	2200      	movs	r2, #0
 8017008:	759a      	strb	r2, [r3, #22]
   str[21]=0;
 801700a:	2300      	movs	r3, #0
 801700c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
   ILI9341_Draw_String(0,40,0,0x64DF,str,4);
 8017010:	2304      	movs	r3, #4
 8017012:	9301      	str	r3, [sp, #4]
 8017014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017018:	9300      	str	r3, [sp, #0]
 801701a:	f246 43df 	movw	r3, #25823	; 0x64df
 801701e:	2200      	movs	r2, #0
 8017020:	2128      	movs	r1, #40	; 0x28
 8017022:	2000      	movs	r0, #0
 8017024:	f7fa fc06 	bl	8011834 <ILI9341_Draw_String>
}
 8017028:	bf00      	nop
 801702a:	3778      	adds	r7, #120	; 0x78
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}
 8017030:	20009d9c 	.word	0x20009d9c
 8017034:	2000a098 	.word	0x2000a098
 8017038:	2000a09c 	.word	0x2000a09c
 801703c:	0801c098 	.word	0x0801c098
 8017040:	48000400 	.word	0x48000400
 8017044:	200047a4 	.word	0x200047a4
 8017048:	0801c09c 	.word	0x0801c09c
 801704c:	20009d60 	.word	0x20009d60
 8017050:	0801c0a0 	.word	0x0801c0a0

08017054 <f_TECLADO_ALFA_open>:

void f_TECLADO_ALFA_open(FIL* fi)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b08c      	sub	sp, #48	; 0x30
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
   int f,c;
   char str[35];

   m_TecladoIndice=0;
 801705c:	4b1f      	ldr	r3, [pc, #124]	; (80170dc <f_TECLADO_ALFA_open+0x88>)
 801705e:	2200      	movs	r2, #0
 8017060:	601a      	str	r2, [r3, #0]

   f_PIC_open(&fi[0],"REC/TECLADO ALFA/BOT TECLA UP.bmp");
 8017062:	491f      	ldr	r1, [pc, #124]	; (80170e0 <f_TECLADO_ALFA_open+0x8c>)
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 f8e9 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[1],"REC/TECLADO ALFA/BOT TECLA DN.bmp");
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8017070:	491c      	ldr	r1, [pc, #112]	; (80170e4 <f_TECLADO_ALFA_open+0x90>)
 8017072:	4618      	mov	r0, r3
 8017074:	f000 f8e2 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[2],"REC/TECLADO ALFA/BOT BUSCAR UP.bmp");
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801707e:	491a      	ldr	r1, [pc, #104]	; (80170e8 <f_TECLADO_ALFA_open+0x94>)
 8017080:	4618      	mov	r0, r3
 8017082:	f000 f8db 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[3],"REC/TECLADO ALFA/BOT BUSCAR DN.bmp");
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f203 6384 	addw	r3, r3, #1668	; 0x684
 801708c:	4917      	ldr	r1, [pc, #92]	; (80170ec <f_TECLADO_ALFA_open+0x98>)
 801708e:	4618      	mov	r0, r3
 8017090:	f000 f8d4 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[4],"REC/TECLADO ALFA/BOT SP UP.bmp");
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801709a:	4915      	ldr	r1, [pc, #84]	; (80170f0 <f_TECLADO_ALFA_open+0x9c>)
 801709c:	4618      	mov	r0, r3
 801709e:	f000 f8cd 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[5],"REC/TECLADO ALFA/BOT SP DN.bmp");
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 80170a8:	4912      	ldr	r1, [pc, #72]	; (80170f4 <f_TECLADO_ALFA_open+0xa0>)
 80170aa:	4618      	mov	r0, r3
 80170ac:	f000 f8c6 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[6],"REC/TECLADO ALFA/BOT BARRA UP.bmp");
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80170b6:	4910      	ldr	r1, [pc, #64]	; (80170f8 <f_TECLADO_ALFA_open+0xa4>)
 80170b8:	4618      	mov	r0, r3
 80170ba:	f000 f8bf 	bl	801723c <f_PIC_open>
   f_PIC_open(&fi[7],"REC/TECLADO ALFA/BOT BARRA DN.bmp");
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 80170c4:	490d      	ldr	r1, [pc, #52]	; (80170fc <f_TECLADO_ALFA_open+0xa8>)
 80170c6:	4618      	mov	r0, r3
 80170c8:	f000 f8b8 	bl	801723c <f_PIC_open>
// ILI9341_Draw_String(0,80,WHITE,0x0010,str, 4);

   f_TECLADO_ALFA_fondo(fi);
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f000 f817 	bl	8017100 <f_TECLADO_ALFA_fondo>
}
 80170d2:	bf00      	nop
 80170d4:	3730      	adds	r7, #48	; 0x30
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	20009d94 	.word	0x20009d94
 80170e0:	0801c0bc 	.word	0x0801c0bc
 80170e4:	0801c0e0 	.word	0x0801c0e0
 80170e8:	0801c104 	.word	0x0801c104
 80170ec:	0801c128 	.word	0x0801c128
 80170f0:	0801c14c 	.word	0x0801c14c
 80170f4:	0801c16c 	.word	0x0801c16c
 80170f8:	0801c18c 	.word	0x0801c18c
 80170fc:	0801c1b0 	.word	0x0801c1b0

08017100 <f_TECLADO_ALFA_fondo>:

void f_TECLADO_ALFA_fondo(FIL* fi)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b092      	sub	sp, #72	; 0x48
 8017104:	af02      	add	r7, sp, #8
 8017106:	6078      	str	r0, [r7, #4]
	int f,c;

	char Tecla[41];

	if(m_Teclado==0) sprintf(Tecla,"0123456789QWERTYUIOPASDFGHJKLN#^ZXCVBNM<");
 8017108:	4b46      	ldr	r3, [pc, #280]	; (8017224 <f_TECLADO_ALFA_fondo+0x124>)
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d105      	bne.n	801711c <f_TECLADO_ALFA_fondo+0x1c>
 8017110:	f107 030c 	add.w	r3, r7, #12
 8017114:	4944      	ldr	r1, [pc, #272]	; (8017228 <f_TECLADO_ALFA_fondo+0x128>)
 8017116:	4618      	mov	r0, r3
 8017118:	f002 ff90 	bl	801a03c <siprintf>
	if(m_Teclado==1) sprintf(Tecla,"0123456789qwertyuiopasdfghjkLn#^zxcvbnm<");
 801711c:	4b41      	ldr	r3, [pc, #260]	; (8017224 <f_TECLADO_ALFA_fondo+0x124>)
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d105      	bne.n	8017130 <f_TECLADO_ALFA_fondo+0x30>
 8017124:	f107 030c 	add.w	r3, r7, #12
 8017128:	4940      	ldr	r1, [pc, #256]	; (801722c <f_TECLADO_ALFA_fondo+0x12c>)
 801712a:	4618      	mov	r0, r3
 801712c:	f002 ff86 	bl	801a03c <siprintf>
	if(m_Teclado==2) sprintf(Tecla,"~!#$%c&@_?!=+-*%c%c^|xX<>()[]{}oO#^%c'.,:;!<",'%','/','\\','"');
 8017130:	4b3c      	ldr	r3, [pc, #240]	; (8017224 <f_TECLADO_ALFA_fondo+0x124>)
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	2b02      	cmp	r3, #2
 8017136:	d10a      	bne.n	801714e <f_TECLADO_ALFA_fondo+0x4e>
 8017138:	f107 000c 	add.w	r0, r7, #12
 801713c:	2322      	movs	r3, #34	; 0x22
 801713e:	9301      	str	r3, [sp, #4]
 8017140:	235c      	movs	r3, #92	; 0x5c
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	232f      	movs	r3, #47	; 0x2f
 8017146:	2225      	movs	r2, #37	; 0x25
 8017148:	4939      	ldr	r1, [pc, #228]	; (8017230 <f_TECLADO_ALFA_fondo+0x130>)
 801714a:	f002 ff77 	bl	801a03c <siprintf>

	for(f=0;f<4;f++)
 801714e:	2300      	movs	r3, #0
 8017150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017152:	e031      	b.n	80171b8 <f_TECLADO_ALFA_fondo+0xb8>
	{
	   	for(c=0;c<10;c++)
 8017154:	2300      	movs	r3, #0
 8017156:	63bb      	str	r3, [r7, #56]	; 0x38
 8017158:	e028      	b.n	80171ac <f_TECLADO_ALFA_fondo+0xac>
	   	{
	   	   f_PIC(&fi[0],c*32,80+f*32);
 801715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801715c:	015b      	lsls	r3, r3, #5
 801715e:	4619      	mov	r1, r3
 8017160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017162:	015b      	lsls	r3, r3, #5
 8017164:	3350      	adds	r3, #80	; 0x50
 8017166:	461a      	mov	r2, r3
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f000 f88f 	bl	801728c <f_PIC>
	   	   ILI9341_Draw_Char(c*32+12,240-f*32-112,0xffff,0x0010,Tecla[f*10+c],4);
 801716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017170:	015b      	lsls	r3, r3, #5
 8017172:	f103 000c 	add.w	r0, r3, #12
 8017176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017178:	f1c3 0304 	rsb	r3, r3, #4
 801717c:	0159      	lsls	r1, r3, #5
 801717e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017180:	4613      	mov	r3, r2
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	4413      	add	r3, r2
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	461a      	mov	r2, r3
 801718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801718c:	4413      	add	r3, r2
 801718e:	3340      	adds	r3, #64	; 0x40
 8017190:	443b      	add	r3, r7
 8017192:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8017196:	2204      	movs	r2, #4
 8017198:	9201      	str	r2, [sp, #4]
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	2310      	movs	r3, #16
 801719e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171a2:	f7fa fc49 	bl	8011a38 <ILI9341_Draw_Char>
	   	for(c=0;c<10;c++)
 80171a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a8:	3301      	adds	r3, #1
 80171aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80171ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ae:	2b09      	cmp	r3, #9
 80171b0:	ddd3      	ble.n	801715a <f_TECLADO_ALFA_fondo+0x5a>
	for(f=0;f<4;f++)
 80171b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171b4:	3301      	adds	r3, #1
 80171b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80171b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171ba:	2b03      	cmp	r3, #3
 80171bc:	ddca      	ble.n	8017154 <f_TECLADO_ALFA_fondo+0x54>
	   	}
	}
	f_PIC(&fi[6],0,208);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80171c4:	22d0      	movs	r2, #208	; 0xd0
 80171c6:	2100      	movs	r1, #0
 80171c8:	4618      	mov	r0, r3
 80171ca:	f000 f85f 	bl	801728c <f_PIC>
	ILI9341_Draw_String(26,207,0xffff,0x0010, "<-",4);
 80171ce:	2304      	movs	r3, #4
 80171d0:	9301      	str	r3, [sp, #4]
 80171d2:	4b18      	ldr	r3, [pc, #96]	; (8017234 <f_TECLADO_ALFA_fondo+0x134>)
 80171d4:	9300      	str	r3, [sp, #0]
 80171d6:	2310      	movs	r3, #16
 80171d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171dc:	21cf      	movs	r1, #207	; 0xcf
 80171de:	201a      	movs	r0, #26
 80171e0:	f7fa fb28 	bl	8011834 <ILI9341_Draw_String>
	f_PIC(&fi[4],80,208);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80171ea:	22d0      	movs	r2, #208	; 0xd0
 80171ec:	2150      	movs	r1, #80	; 0x50
 80171ee:	4618      	mov	r0, r3
 80171f0:	f000 f84c 	bl	801728c <f_PIC>
	f_PIC(&fi[6],240,208);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80171fa:	22d0      	movs	r2, #208	; 0xd0
 80171fc:	21f0      	movs	r1, #240	; 0xf0
 80171fe:	4618      	mov	r0, r3
 8017200:	f000 f844 	bl	801728c <f_PIC>
	ILI9341_Draw_String(266,207,0xffff,0x0010,"OK",4);
 8017204:	2304      	movs	r3, #4
 8017206:	9301      	str	r3, [sp, #4]
 8017208:	4b0b      	ldr	r3, [pc, #44]	; (8017238 <f_TECLADO_ALFA_fondo+0x138>)
 801720a:	9300      	str	r3, [sp, #0]
 801720c:	2310      	movs	r3, #16
 801720e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017212:	21cf      	movs	r1, #207	; 0xcf
 8017214:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8017218:	f7fa fb0c 	bl	8011834 <ILI9341_Draw_String>
}
 801721c:	bf00      	nop
 801721e:	3740      	adds	r7, #64	; 0x40
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	20009d9c 	.word	0x20009d9c
 8017228:	0801c010 	.word	0x0801c010
 801722c:	0801c03c 	.word	0x0801c03c
 8017230:	0801c068 	.word	0x0801c068
 8017234:	0801c098 	.word	0x0801c098
 8017238:	0801c09c 	.word	0x0801c09c

0801723c <f_PIC_open>:

//////////////////////////////////////////////////////////
// PIC DESDE SD FILE
//////////////////////////////////////////////////////////
void f_PIC_open(FIL* f,char* Name)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b090      	sub	sp, #64	; 0x40
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
 8017244:	6039      	str	r1, [r7, #0]
	char File[50];
	TP_CS_OFF;
 8017246:	2201      	movs	r2, #1
 8017248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801724c:	480d      	ldr	r0, [pc, #52]	; (8017284 <f_PIC_open+0x48>)
 801724e:	f7ef ffeb 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_OFF;
 8017252:	2201      	movs	r2, #1
 8017254:	2180      	movs	r1, #128	; 0x80
 8017256:	480c      	ldr	r0, [pc, #48]	; (8017288 <f_PIC_open+0x4c>)
 8017258:	f7ef ffe6 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_ON;
 801725c:	2200      	movs	r2, #0
 801725e:	2108      	movs	r1, #8
 8017260:	4809      	ldr	r0, [pc, #36]	; (8017288 <f_PIC_open+0x4c>)
 8017262:	f7ef ffe1 	bl	8007228 <HAL_GPIO_WritePin>
	f_open(f,Name,FA_READ);
 8017266:	2201      	movs	r2, #1
 8017268:	6839      	ldr	r1, [r7, #0]
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f7fe fc56 	bl	8015b1c <f_open>
	SD_CS_OFF;
 8017270:	2201      	movs	r2, #1
 8017272:	2108      	movs	r1, #8
 8017274:	4804      	ldr	r0, [pc, #16]	; (8017288 <f_PIC_open+0x4c>)
 8017276:	f7ef ffd7 	bl	8007228 <HAL_GPIO_WritePin>
}
 801727a:	bf00      	nop
 801727c:	3740      	adds	r7, #64	; 0x40
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	48000400 	.word	0x48000400
 8017288:	48000800 	.word	0x48000800

0801728c <f_PIC>:
	SD_CS_ON;
	f_close(f);
	SD_CS_OFF;
}
void f_PIC(FIL* f,unsigned int x,unsigned int y)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 8017292:	af00      	add	r7, sp, #0
 8017294:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017298:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801729c:	6018      	str	r0, [r3, #0]
 801729e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80172a2:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 80172a6:	6019      	str	r1, [r3, #0]
 80172a8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80172ac:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 80172b0:	601a      	str	r2, [r3, #0]
	unsigned char 	dataIn[256],color[4],c;
	unsigned int 	col_16,TablaCol[256];
	UINT 			br,ERROR_SD;
	uint32_t		resto;

	TFT_CS_OFF;
 80172b2:	2201      	movs	r2, #1
 80172b4:	2180      	movs	r1, #128	; 0x80
 80172b6:	48d3      	ldr	r0, [pc, #844]	; (8017604 <f_PIC+0x378>)
 80172b8:	f7ef ffb6 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_ON;
 80172bc:	2200      	movs	r2, #0
 80172be:	2108      	movs	r1, #8
 80172c0:	48d0      	ldr	r0, [pc, #832]	; (8017604 <f_PIC+0x378>)
 80172c2:	f7ef ffb1 	bl	8007228 <HAL_GPIO_WritePin>

	f_lseek(f,0);
 80172c6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80172ca:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 80172ce:	2100      	movs	r1, #0
 80172d0:	6818      	ldr	r0, [r3, #0]
 80172d2:	f7ff f8f2 	bl	80164ba <f_lseek>
	f_read(f,dataIn,54,&br);
 80172d6:	f107 0314 	add.w	r3, r7, #20
 80172da:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 80172de:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 80172e2:	f2a2 7044 	subw	r0, r2, #1860	; 0x744
 80172e6:	2236      	movs	r2, #54	; 0x36
 80172e8:	6800      	ldr	r0, [r0, #0]
 80172ea:	f7fe fe99 	bl	8016020 <f_read>

	uint32_t	AnchoBMP=(unsigned int)dataIn[0x12]+(unsigned int)dataIn[0x13]*256;
 80172ee:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80172f2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80172f6:	7c9b      	ldrb	r3, [r3, #18]
 80172f8:	461a      	mov	r2, r3
 80172fa:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80172fe:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017302:	7cdb      	ldrb	r3, [r3, #19]
 8017304:	021b      	lsls	r3, r3, #8
 8017306:	4413      	add	r3, r2
 8017308:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
	uint32_t	AltoBMP=(unsigned int)dataIn[0x16]+(unsigned int)dataIn[0x17]*256;
 801730c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017310:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017314:	7d9b      	ldrb	r3, [r3, #22]
 8017316:	461a      	mov	r2, r3
 8017318:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801731c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017320:	7ddb      	ldrb	r3, [r3, #23]
 8017322:	021b      	lsls	r3, r3, #8
 8017324:	4413      	add	r3, r2
 8017326:	f8c7 3738 	str.w	r3, [r7, #1848]	; 0x738
	uint32_t	OffsetArray=(unsigned int)dataIn[0x0A]+(unsigned int)dataIn[0x0B]*256;
 801732a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801732e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017332:	7a9b      	ldrb	r3, [r3, #10]
 8017334:	461a      	mov	r2, r3
 8017336:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801733a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801733e:	7adb      	ldrb	r3, [r3, #11]
 8017340:	021b      	lsls	r3, r3, #8
 8017342:	4413      	add	r3, r2
 8017344:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
	uint32_t	LargoTablaColores=(unsigned int)dataIn[0x2E]+(unsigned int)dataIn[0x2F]*256;
 8017348:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801734c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017350:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8017354:	461a      	mov	r2, r3
 8017356:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801735a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801735e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017362:	021b      	lsls	r3, r3, #8
 8017364:	4413      	add	r3, r2
 8017366:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730

	for(i=0;i<LargoTablaColores;i++)
 801736a:	2300      	movs	r3, #0
 801736c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8017370:	e032      	b.n	80173d8 <f_PIC+0x14c>
	{
		f_read(f,color,4,&br);
 8017372:	f107 0314 	add.w	r3, r7, #20
 8017376:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 801737a:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 801737e:	f2a2 7044 	subw	r0, r2, #1860	; 0x744
 8017382:	2204      	movs	r2, #4
 8017384:	6800      	ldr	r0, [r0, #0]
 8017386:	f7fe fe4b 	bl	8016020 <f_read>
		TablaCol[i]=(color[2]/8)*2048+(color[1]/4)*32+(color[0])/8;
 801738a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801738e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017392:	789b      	ldrb	r3, [r3, #2]
 8017394:	08db      	lsrs	r3, r3, #3
 8017396:	b2db      	uxtb	r3, r3
 8017398:	019b      	lsls	r3, r3, #6
 801739a:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 801739e:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80173a2:	7852      	ldrb	r2, [r2, #1]
 80173a4:	0892      	lsrs	r2, r2, #2
 80173a6:	b2d2      	uxtb	r2, r2
 80173a8:	4413      	add	r3, r2
 80173aa:	015b      	lsls	r3, r3, #5
 80173ac:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 80173b0:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 80173b4:	7812      	ldrb	r2, [r2, #0]
 80173b6:	08d2      	lsrs	r2, r2, #3
 80173b8:	b2d2      	uxtb	r2, r2
 80173ba:	4413      	add	r3, r2
 80173bc:	4619      	mov	r1, r3
 80173be:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80173c2:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 80173c6:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 80173ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i=0;i<LargoTablaColores;i++)
 80173ce:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80173d2:	3301      	adds	r3, #1
 80173d4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80173d8:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 80173dc:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d3c6      	bcc.n	8017372 <f_PIC+0xe6>
	}

	f_lseek(f,OffsetArray);
 80173e4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80173e8:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 80173ec:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 80173f0:	6818      	ldr	r0, [r3, #0]
 80173f2:	f7ff f862 	bl	80164ba <f_lseek>
	uint32_t Peso=AnchoBMP*AltoBMP;
 80173f6:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 80173fa:	f8d7 2738 	ldr.w	r2, [r7, #1848]	; 0x738
 80173fe:	fb02 f303 	mul.w	r3, r2, r3
 8017402:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c

	SD_CS_OFF;
 8017406:	2201      	movs	r2, #1
 8017408:	2108      	movs	r1, #8
 801740a:	487e      	ldr	r0, [pc, #504]	; (8017604 <f_PIC+0x378>)
 801740c:	f7ef ff0c 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8017410:	2200      	movs	r2, #0
 8017412:	2180      	movs	r1, #128	; 0x80
 8017414:	487b      	ldr	r0, [pc, #492]	; (8017604 <f_PIC+0x378>)
 8017416:	f7ef ff07 	bl	8007228 <HAL_GPIO_WritePin>
	ILI9341_Set_Rotation(4);
 801741a:	2004      	movs	r0, #4
 801741c:	f7f9 fed6 	bl	80111cc <ILI9341_Set_Rotation>
	unsigned int x1=x;
 8017420:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017424:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
	unsigned int y1=240-(unsigned int)AltoBMP-y;
 801742e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017432:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8017436:	f8d7 2738 	ldr.w	r2, [r7, #1848]	; 0x738
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	4413      	add	r3, r2
 801743e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8017442:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
	unsigned int x2=AnchoBMP+x-1;
 8017446:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801744a:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801744e:	f8d7 273c 	ldr.w	r2, [r7, #1852]	; 0x73c
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	4413      	add	r3, r2
 8017456:	3b01      	subs	r3, #1
 8017458:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
	unsigned int y2=239-y;
 801745c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017460:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 801746a:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
	ILI9341_Set_Address(x1,y1,x2,y2);
 801746e:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8017472:	f8d7 2720 	ldr.w	r2, [r7, #1824]	; 0x720
 8017476:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 801747a:	f8d7 0728 	ldr.w	r0, [r7, #1832]	; 0x728
 801747e:	f7f9 ff29 	bl	80112d4 <ILI9341_Set_Address>
	TFT_DC_COMMAND;
 8017482:	2200      	movs	r2, #0
 8017484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017488:	485e      	ldr	r0, [pc, #376]	; (8017604 <f_PIC+0x378>)
 801748a:	f7ef fecd 	bl	8007228 <HAL_GPIO_WritePin>
	dataIn[0]=0x2C;
 801748e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017492:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017496:	222c      	movs	r2, #44	; 0x2c
 8017498:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, dataIn, 1, 1);
 801749a:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 801749e:	2301      	movs	r3, #1
 80174a0:	2201      	movs	r2, #1
 80174a2:	4859      	ldr	r0, [pc, #356]	; (8017608 <f_PIC+0x37c>)
 80174a4:	f7f3 f909 	bl	800a6ba <HAL_SPI_Transmit>
	DWORD sect ;

	for(i=0;i<Peso;i=i+256)
 80174a8:	2300      	movs	r3, #0
 80174aa:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80174ae:	e09c      	b.n	80175ea <f_PIC+0x35e>
	{
		TFT_CS_OFF;
 80174b0:	2201      	movs	r2, #1
 80174b2:	2180      	movs	r1, #128	; 0x80
 80174b4:	4853      	ldr	r0, [pc, #332]	; (8017604 <f_PIC+0x378>)
 80174b6:	f7ef feb7 	bl	8007228 <HAL_GPIO_WritePin>
		SD_CS_ON;
 80174ba:	2200      	movs	r2, #0
 80174bc:	2108      	movs	r1, #8
 80174be:	4851      	ldr	r0, [pc, #324]	; (8017604 <f_PIC+0x378>)
 80174c0:	f7ef feb2 	bl	8007228 <HAL_GPIO_WritePin>

		resto = Peso-i;
 80174c4:	f8d7 272c 	ldr.w	r2, [r7, #1836]	; 0x72c
 80174c8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80174cc:	1ad3      	subs	r3, r2, r3
 80174ce:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
		if(resto>256) resto=256;
 80174d2:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 80174d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80174da:	d903      	bls.n	80174e4 <f_PIC+0x258>
 80174dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80174e0:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740

		f_read(f,dataIn,resto,&br);
 80174e4:	f107 0314 	add.w	r3, r7, #20
 80174e8:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 80174ec:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 80174f0:	f2a2 7044 	subw	r0, r2, #1860	; 0x744
 80174f4:	f8d7 2740 	ldr.w	r2, [r7, #1856]	; 0x740
 80174f8:	6800      	ldr	r0, [r0, #0]
 80174fa:	f7fe fd91 	bl	8016020 <f_read>
		for(ii=0,iii=0;ii<resto;ii++,iii++)
 80174fe:	2300      	movs	r3, #0
 8017500:	f8c7 3748 	str.w	r3, [r7, #1864]	; 0x748
 8017504:	2300      	movs	r3, #0
 8017506:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 801750a:	e041      	b.n	8017590 <f_PIC+0x304>
		{
			dataOut[iii]=TablaCol[dataIn[ii]]>>8;
 801750c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017510:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017514:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8017518:	4413      	add	r3, r2
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	461a      	mov	r2, r3
 801751e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017522:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8017526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801752a:	0a1b      	lsrs	r3, r3, #8
 801752c:	b2d9      	uxtb	r1, r3
 801752e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017532:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8017536:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 801753a:	4413      	add	r3, r2
 801753c:	460a      	mov	r2, r1
 801753e:	701a      	strb	r2, [r3, #0]
			iii++;
 8017540:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8017544:	3301      	adds	r3, #1
 8017546:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
			dataOut[iii]=TablaCol[dataIn[ii]];
 801754a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801754e:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017552:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8017556:	4413      	add	r3, r2
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	461a      	mov	r2, r3
 801755c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8017560:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8017564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017568:	b2d9      	uxtb	r1, r3
 801756a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801756e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8017572:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8017576:	4413      	add	r3, r2
 8017578:	460a      	mov	r2, r1
 801757a:	701a      	strb	r2, [r3, #0]
		for(ii=0,iii=0;ii<resto;ii++,iii++)
 801757c:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8017580:	3301      	adds	r3, #1
 8017582:	f8c7 3748 	str.w	r3, [r7, #1864]	; 0x748
 8017586:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 801758a:	3301      	adds	r3, #1
 801758c:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 8017590:	f8d7 2748 	ldr.w	r2, [r7, #1864]	; 0x748
 8017594:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 8017598:	429a      	cmp	r2, r3
 801759a:	d3b7      	bcc.n	801750c <f_PIC+0x280>
		}

		SD_CS_OFF;
 801759c:	2201      	movs	r2, #1
 801759e:	2108      	movs	r1, #8
 80175a0:	4818      	ldr	r0, [pc, #96]	; (8017604 <f_PIC+0x378>)
 80175a2:	f7ef fe41 	bl	8007228 <HAL_GPIO_WritePin>
		TFT_CS_ON;
 80175a6:	2200      	movs	r2, #0
 80175a8:	2180      	movs	r1, #128	; 0x80
 80175aa:	4816      	ldr	r0, [pc, #88]	; (8017604 <f_PIC+0x378>)
 80175ac:	f7ef fe3c 	bl	8007228 <HAL_GPIO_WritePin>
		TFT_DC_DATA;
 80175b0:	2201      	movs	r2, #1
 80175b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80175b6:	4813      	ldr	r0, [pc, #76]	; (8017604 <f_PIC+0x378>)
 80175b8:	f7ef fe36 	bl	8007228 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&lcd_spi,dataOut,resto*2,300);
 80175bc:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 80175c0:	b29b      	uxth	r3, r3
 80175c2:	005b      	lsls	r3, r3, #1
 80175c4:	b29a      	uxth	r2, r3
 80175c6:	f207 511c 	addw	r1, r7, #1308	; 0x51c
 80175ca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80175ce:	480e      	ldr	r0, [pc, #56]	; (8017608 <f_PIC+0x37c>)
 80175d0:	f7f3 f873 	bl	800a6ba <HAL_SPI_Transmit>
		TFT_CS_OFF;
 80175d4:	2201      	movs	r2, #1
 80175d6:	2180      	movs	r1, #128	; 0x80
 80175d8:	480a      	ldr	r0, [pc, #40]	; (8017604 <f_PIC+0x378>)
 80175da:	f7ef fe25 	bl	8007228 <HAL_GPIO_WritePin>
	for(i=0;i<Peso;i=i+256)
 80175de:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80175e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80175e6:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80175ea:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 80175ee:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 80175f2:	429a      	cmp	r2, r3
 80175f4:	f4ff af5c 	bcc.w	80174b0 <f_PIC+0x224>
	}
}
 80175f8:	bf00      	nop
 80175fa:	bf00      	nop
 80175fc:	f507 67ea 	add.w	r7, r7, #1872	; 0x750
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	48000800 	.word	0x48000800
 8017608:	20009978 	.word	0x20009978

0801760c <BCO>:

//////////////////////////////////////////////////////////
// BOTON CORREDERA DESDE FLASH INTERNA
//////////////////////////////////////////////////////////
void BCO(unsigned char* Bot,unsigned int x,unsigned int y,unsigned char Est,unsigned char Largo,unsigned char Pos,char* str)
{
 801760c:	b590      	push	{r4, r7, lr}
 801760e:	b08b      	sub	sp, #44	; 0x2c
 8017610:	af02      	add	r7, sp, #8
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
 8017618:	70fb      	strb	r3, [r7, #3]
	TP_CS_OFF;
 801761a:	2201      	movs	r2, #1
 801761c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017620:	48bc      	ldr	r0, [pc, #752]	; (8017914 <BCO+0x308>)
 8017622:	f7ef fe01 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_OFF;
 8017626:	2201      	movs	r2, #1
 8017628:	2108      	movs	r1, #8
 801762a:	48bb      	ldr	r0, [pc, #748]	; (8017918 <BCO+0x30c>)
 801762c:	f7ef fdfc 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8017630:	2200      	movs	r2, #0
 8017632:	2180      	movs	r1, #128	; 0x80
 8017634:	48b8      	ldr	r0, [pc, #736]	; (8017918 <BCO+0x30c>)
 8017636:	f7ef fdf7 	bl	8007228 <HAL_GPIO_WritePin>
    uint16_t colorF=0x64DF;
 801763a:	f246 43df 	movw	r3, #25823	; 0x64df
 801763e:	83fb      	strh	r3, [r7, #30]
    uint16_t colorT=0x0000;
 8017640:	2300      	movs	r3, #0
 8017642:	83bb      	strh	r3, [r7, #28]
    uint16_t xt=x+6+(Largo*3-(unsigned char)strlen(str))*7;
 8017644:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017648:	4613      	mov	r3, r2
 801764a:	005b      	lsls	r3, r3, #1
 801764c:	189c      	adds	r4, r3, r2
 801764e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017650:	f7e8 fdc6 	bl	80001e0 <strlen>
 8017654:	4603      	mov	r3, r0
 8017656:	b2db      	uxtb	r3, r3
 8017658:	1ae3      	subs	r3, r4, r3
 801765a:	b29b      	uxth	r3, r3
 801765c:	461a      	mov	r2, r3
 801765e:	00d2      	lsls	r2, r2, #3
 8017660:	1ad3      	subs	r3, r2, r3
 8017662:	b29a      	uxth	r2, r3
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	b29b      	uxth	r3, r3
 8017668:	4413      	add	r3, r2
 801766a:	b29b      	uxth	r3, r3
 801766c:	3306      	adds	r3, #6
 801766e:	837b      	strh	r3, [r7, #26]
    uint16_t yt=y;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	833b      	strh	r3, [r7, #24]
    uint16_t w=Largo*14*3;
 8017674:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017678:	b29b      	uxth	r3, r3
 801767a:	461a      	mov	r2, r3
 801767c:	0052      	lsls	r2, r2, #1
 801767e:	4413      	add	r3, r2
 8017680:	461a      	mov	r2, r3
 8017682:	00d2      	lsls	r2, r2, #3
 8017684:	1ad3      	subs	r3, r2, r3
 8017686:	005b      	lsls	r3, r3, #1
 8017688:	82fb      	strh	r3, [r7, #22]
    Pos--;
 801768a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801768e:	3b01      	subs	r3, #1
 8017690:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    switch(Est)
 8017694:	78fb      	ldrb	r3, [r7, #3]
 8017696:	2b03      	cmp	r3, #3
 8017698:	f200 8137 	bhi.w	801790a <BCO+0x2fe>
 801769c:	a201      	add	r2, pc, #4	; (adr r2, 80176a4 <BCO+0x98>)
 801769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176a2:	bf00      	nop
 80176a4:	080176b5 	.word	0x080176b5
 80176a8:	08017767 	.word	0x08017767
 80176ac:	0801783f 	.word	0x0801783f
 80176b0:	080178e7 	.word	0x080178e7
    {
    	case 0://H
   		ILI9341_Draw_String(xt,yt,colorT,colorF,str,4);
 80176b4:	8b78      	ldrh	r0, [r7, #26]
 80176b6:	8b39      	ldrh	r1, [r7, #24]
 80176b8:	8bba      	ldrh	r2, [r7, #28]
 80176ba:	8bfc      	ldrh	r4, [r7, #30]
 80176bc:	2304      	movs	r3, #4
 80176be:	9301      	str	r3, [sp, #4]
 80176c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176c2:	9300      	str	r3, [sp, #0]
 80176c4:	4623      	mov	r3, r4
 80176c6:	f7fa f8b5 	bl	8011834 <ILI9341_Draw_String>
   		FillReg(x   ,40+y   ,w  ,8 ,0xFC00);
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80176d0:	8afa      	ldrh	r2, [r7, #22]
 80176d2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80176d6:	9300      	str	r3, [sp, #0]
 80176d8:	2308      	movs	r3, #8
 80176da:	68b8      	ldr	r0, [r7, #8]
 80176dc:	f001 f826 	bl	801872c <FillReg>
   		FillReg(x+8 ,40+y+8 ,w-8,8 ,BLACK);
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	f103 0008 	add.w	r0, r3, #8
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80176ec:	8afb      	ldrh	r3, [r7, #22]
 80176ee:	3b08      	subs	r3, #8
 80176f0:	461a      	mov	r2, r3
 80176f2:	2300      	movs	r3, #0
 80176f4:	9300      	str	r3, [sp, #0]
 80176f6:	2308      	movs	r3, #8
 80176f8:	f001 f818 	bl	801872c <FillReg>
   		FillReg(x	,40+y	,8	,24,0xFC00);
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8017702:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	2318      	movs	r3, #24
 801770a:	2208      	movs	r2, #8
 801770c:	68b8      	ldr	r0, [r7, #8]
 801770e:	f001 f80d 	bl	801872c <FillReg>
   		FillReg(x+w ,40+y	,8	,24,0xFC00);
 8017712:	8afa      	ldrh	r2, [r7, #22]
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	18d0      	adds	r0, r2, r3
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801771e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8017722:	9300      	str	r3, [sp, #0]
 8017724:	2318      	movs	r3, #24
 8017726:	2208      	movs	r2, #8
 8017728:	f001 f800 	bl	801872c <FillReg>
   		FillReg(x	,40+y+16,w  ,8 ,0xFC00);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017732:	8afa      	ldrh	r2, [r7, #22]
 8017734:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8017738:	9300      	str	r3, [sp, #0]
 801773a:	2308      	movs	r3, #8
 801773c:	68b8      	ldr	r0, [r7, #8]
 801773e:	f000 fff5 	bl	801872c <FillReg>
    	PIC(Bot,x+14*3*Pos+12,y+30,0);
 8017742:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017746:	222a      	movs	r2, #42	; 0x2a
 8017748:	fb02 f303 	mul.w	r3, r2, r3
 801774c:	461a      	mov	r2, r3
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	4413      	add	r3, r2
 8017752:	f103 010c 	add.w	r1, r3, #12
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f103 021e 	add.w	r2, r3, #30
 801775c:	2300      	movs	r3, #0
 801775e:	68f8      	ldr	r0, [r7, #12]
 8017760:	f000 fc32 	bl	8017fc8 <PIC>
    	break;
 8017764:	e0d1      	b.n	801790a <BCO+0x2fe>

    	case 1://H
   		FillReg(x   ,40+y   ,w  ,8 ,0xFC00);
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801776c:	8afa      	ldrh	r2, [r7, #22]
 801776e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8017772:	9300      	str	r3, [sp, #0]
 8017774:	2308      	movs	r3, #8
 8017776:	68b8      	ldr	r0, [r7, #8]
 8017778:	f000 ffd8 	bl	801872c <FillReg>
   		FillReg(x+8 ,40+y+8 ,w-8,8 ,BLACK);
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	f103 0008 	add.w	r0, r3, #8
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017788:	8afb      	ldrh	r3, [r7, #22]
 801778a:	3b08      	subs	r3, #8
 801778c:	461a      	mov	r2, r3
 801778e:	2300      	movs	r3, #0
 8017790:	9300      	str	r3, [sp, #0]
 8017792:	2308      	movs	r3, #8
 8017794:	f000 ffca 	bl	801872c <FillReg>
   		FillReg(x	,40+y	,8	,24,0xFC00);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801779e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	2318      	movs	r3, #24
 80177a6:	2208      	movs	r2, #8
 80177a8:	68b8      	ldr	r0, [r7, #8]
 80177aa:	f000 ffbf 	bl	801872c <FillReg>
   		FillReg(x+w ,40+y	,8	,24,0xFC00);
 80177ae:	8afa      	ldrh	r2, [r7, #22]
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	18d0      	adds	r0, r2, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80177ba:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80177be:	9300      	str	r3, [sp, #0]
 80177c0:	2318      	movs	r3, #24
 80177c2:	2208      	movs	r2, #8
 80177c4:	f000 ffb2 	bl	801872c <FillReg>
   		FillReg(x	,40+y+16,w  ,8 ,0xFC00);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80177ce:	8afa      	ldrh	r2, [r7, #22]
 80177d0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80177d4:	9300      	str	r3, [sp, #0]
 80177d6:	2308      	movs	r3, #8
 80177d8:	68b8      	ldr	r0, [r7, #8]
 80177da:	f000 ffa7 	bl	801872c <FillReg>
   		FillReg(x   ,30+y   ,w  ,10,0x64df);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f103 011e 	add.w	r1, r3, #30
 80177e4:	8afa      	ldrh	r2, [r7, #22]
 80177e6:	f246 43df 	movw	r3, #25823	; 0x64df
 80177ea:	9300      	str	r3, [sp, #0]
 80177ec:	230a      	movs	r3, #10
 80177ee:	68b8      	ldr	r0, [r7, #8]
 80177f0:	f000 ff9c 	bl	801872c <FillReg>
   		FillReg(x   ,64+y   ,w  ,10,0x64df);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80177fa:	8afa      	ldrh	r2, [r7, #22]
 80177fc:	f246 43df 	movw	r3, #25823	; 0x64df
 8017800:	9300      	str	r3, [sp, #0]
 8017802:	230a      	movs	r3, #10
 8017804:	68b8      	ldr	r0, [r7, #8]
 8017806:	f000 ff91 	bl	801872c <FillReg>
   		PIC(Bot,x+14*3*Pos+12,y+30,0);
 801780a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801780e:	222a      	movs	r2, #42	; 0x2a
 8017810:	fb02 f303 	mul.w	r3, r2, r3
 8017814:	461a      	mov	r2, r3
 8017816:	68bb      	ldr	r3, [r7, #8]
 8017818:	4413      	add	r3, r2
 801781a:	f103 010c 	add.w	r1, r3, #12
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	f103 021e 	add.w	r2, r3, #30
 8017824:	2300      	movs	r3, #0
 8017826:	68f8      	ldr	r0, [r7, #12]
 8017828:	f000 fbce 	bl	8017fc8 <PIC>
   		while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 801782c:	bf00      	nop
 801782e:	2102      	movs	r1, #2
 8017830:	4838      	ldr	r0, [pc, #224]	; (8017914 <BCO+0x308>)
 8017832:	f7ef fce1 	bl	80071f8 <HAL_GPIO_ReadPin>
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d0f8      	beq.n	801782e <BCO+0x222>
    	break;
 801783c:	e065      	b.n	801790a <BCO+0x2fe>

    	case 2://V
   		FillReg(x+2,y+2,w-2,35,colorF);
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	1c98      	adds	r0, r3, #2
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	1c99      	adds	r1, r3, #2
 8017846:	8afb      	ldrh	r3, [r7, #22]
 8017848:	3b02      	subs	r3, #2
 801784a:	461a      	mov	r2, r3
 801784c:	8bfb      	ldrh	r3, [r7, #30]
 801784e:	9300      	str	r3, [sp, #0]
 8017850:	2323      	movs	r3, #35	; 0x23
 8017852:	f000 ff6b 	bl	801872c <FillReg>
   		ILI9341_Draw_String(xt+1,yt+1,colorT,colorF,str,4);
 8017856:	8b7b      	ldrh	r3, [r7, #26]
 8017858:	3301      	adds	r3, #1
 801785a:	4618      	mov	r0, r3
 801785c:	8b3b      	ldrh	r3, [r7, #24]
 801785e:	3301      	adds	r3, #1
 8017860:	461c      	mov	r4, r3
 8017862:	8bba      	ldrh	r2, [r7, #28]
 8017864:	8bf9      	ldrh	r1, [r7, #30]
 8017866:	2304      	movs	r3, #4
 8017868:	9301      	str	r3, [sp, #4]
 801786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786c:	9300      	str	r3, [sp, #0]
 801786e:	460b      	mov	r3, r1
 8017870:	4621      	mov	r1, r4
 8017872:	f7f9 ffdf 	bl	8011834 <ILI9341_Draw_String>
   		FillReg(x   ,y   ,8 ,w  ,0xFC00);
 8017876:	8afb      	ldrh	r3, [r7, #22]
 8017878:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 801787c:	9200      	str	r2, [sp, #0]
 801787e:	2208      	movs	r2, #8
 8017880:	6879      	ldr	r1, [r7, #4]
 8017882:	68b8      	ldr	r0, [r7, #8]
 8017884:	f000 ff52 	bl	801872c <FillReg>
  		FillReg(x+8 ,y+8 ,8 ,w-8,BLACK);
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	f103 0008 	add.w	r0, r3, #8
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f103 0108 	add.w	r1, r3, #8
 8017894:	8afb      	ldrh	r3, [r7, #22]
 8017896:	3b08      	subs	r3, #8
 8017898:	461a      	mov	r2, r3
 801789a:	2300      	movs	r3, #0
 801789c:	9300      	str	r3, [sp, #0]
 801789e:	4613      	mov	r3, r2
 80178a0:	2208      	movs	r2, #8
 80178a2:	f000 ff43 	bl	801872c <FillReg>
   		FillReg(x	,y	 ,24,8  ,0xFC00);
 80178a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	2308      	movs	r3, #8
 80178ae:	2218      	movs	r2, #24
 80178b0:	6879      	ldr	r1, [r7, #4]
 80178b2:	68b8      	ldr	r0, [r7, #8]
 80178b4:	f000 ff3a 	bl	801872c <FillReg>
  		FillReg(x   ,y+w ,24,8  ,0xFC00);
 80178b8:	8afa      	ldrh	r2, [r7, #22]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	18d1      	adds	r1, r2, r3
 80178be:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80178c2:	9300      	str	r3, [sp, #0]
 80178c4:	2308      	movs	r3, #8
 80178c6:	2218      	movs	r2, #24
 80178c8:	68b8      	ldr	r0, [r7, #8]
 80178ca:	f000 ff2f 	bl	801872c <FillReg>
   		FillReg(x+16,y   ,8 ,w  ,0xFC00);
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	f103 0010 	add.w	r0, r3, #16
 80178d4:	8afb      	ldrh	r3, [r7, #22]
 80178d6:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 80178da:	9200      	str	r2, [sp, #0]
 80178dc:	2208      	movs	r2, #8
 80178de:	6879      	ldr	r1, [r7, #4]
 80178e0:	f000 ff24 	bl	801872c <FillReg>
    	break;
 80178e4:	e011      	b.n	801790a <BCO+0x2fe>

    	case 3://H
    	PIC(Bot,x+30,y+14*3*Pos+12,0);
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	f103 011e 	add.w	r1, r3, #30
 80178ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80178f0:	222a      	movs	r2, #42	; 0x2a
 80178f2:	fb02 f303 	mul.w	r3, r2, r3
 80178f6:	461a      	mov	r2, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	4413      	add	r3, r2
 80178fc:	f103 020c 	add.w	r2, r3, #12
 8017900:	2300      	movs	r3, #0
 8017902:	68f8      	ldr	r0, [r7, #12]
 8017904:	f000 fb60 	bl	8017fc8 <PIC>
    	break;
 8017908:	bf00      	nop
    }
}
 801790a:	bf00      	nop
 801790c:	3724      	adds	r7, #36	; 0x24
 801790e:	46bd      	mov	sp, r7
 8017910:	bd90      	pop	{r4, r7, pc}
 8017912:	bf00      	nop
 8017914:	48000400 	.word	0x48000400
 8017918:	48000800 	.word	0x48000800

0801791c <BCO_Activo>:
unsigned char BCO_Activo(unsigned int x,unsigned int y,unsigned char Est,unsigned char Largo)
{
 801791c:	b480      	push	{r7}
 801791e:	b087      	sub	sp, #28
 8017920:	af00      	add	r7, sp, #0
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	4611      	mov	r1, r2
 8017928:	461a      	mov	r2, r3
 801792a:	460b      	mov	r3, r1
 801792c:	71fb      	strb	r3, [r7, #7]
 801792e:	4613      	mov	r3, r2
 8017930:	71bb      	strb	r3, [r7, #6]
    uint16_t w=Largo*14*3/Largo;
 8017932:	232a      	movs	r3, #42	; 0x2a
 8017934:	82bb      	strh	r3, [r7, #20]
    uint16_t i;

    x=x+8;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	3308      	adds	r3, #8
 801793a:	60fb      	str	r3, [r7, #12]

    if(Est==0)
 801793c:	79fb      	ldrb	r3, [r7, #7]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d133      	bne.n	80179aa <BCO_Activo+0x8e>
    for(i=0;i<Largo;i++)
 8017942:	2300      	movs	r3, #0
 8017944:	82fb      	strh	r3, [r7, #22]
 8017946:	e02a      	b.n	801799e <BCO_Activo+0x82>
    {
    	if
		(
			(m_XPanel>(x+i*w) && m_XPanel<(x+(i+1)*w) )
 8017948:	8afb      	ldrh	r3, [r7, #22]
 801794a:	8aba      	ldrh	r2, [r7, #20]
 801794c:	fb02 f303 	mul.w	r3, r2, r3
 8017950:	461a      	mov	r2, r3
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	441a      	add	r2, r3
 8017956:	4b32      	ldr	r3, [pc, #200]	; (8017a20 <BCO_Activo+0x104>)
 8017958:	681b      	ldr	r3, [r3, #0]
		(
 801795a:	429a      	cmp	r2, r3
 801795c:	d21c      	bcs.n	8017998 <BCO_Activo+0x7c>
			(m_XPanel>(x+i*w) && m_XPanel<(x+(i+1)*w) )
 801795e:	8afb      	ldrh	r3, [r7, #22]
 8017960:	3301      	adds	r3, #1
 8017962:	8aba      	ldrh	r2, [r7, #20]
 8017964:	fb02 f303 	mul.w	r3, r2, r3
 8017968:	461a      	mov	r2, r3
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	441a      	add	r2, r3
 801796e:	4b2c      	ldr	r3, [pc, #176]	; (8017a20 <BCO_Activo+0x104>)
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	429a      	cmp	r2, r3
 8017974:	d910      	bls.n	8017998 <BCO_Activo+0x7c>
			&&
			(m_YPanel>y && m_YPanel<(y+62) )
 8017976:	4b2b      	ldr	r3, [pc, #172]	; (8017a24 <BCO_Activo+0x108>)
 8017978:	681b      	ldr	r3, [r3, #0]
			&&
 801797a:	68ba      	ldr	r2, [r7, #8]
 801797c:	429a      	cmp	r2, r3
 801797e:	d20b      	bcs.n	8017998 <BCO_Activo+0x7c>
			(m_YPanel>y && m_YPanel<(y+62) )
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 8017986:	4b27      	ldr	r3, [pc, #156]	; (8017a24 <BCO_Activo+0x108>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	429a      	cmp	r2, r3
 801798c:	d904      	bls.n	8017998 <BCO_Activo+0x7c>
		) return i+1;
 801798e:	8afb      	ldrh	r3, [r7, #22]
 8017990:	b2db      	uxtb	r3, r3
 8017992:	3301      	adds	r3, #1
 8017994:	b2db      	uxtb	r3, r3
 8017996:	e03c      	b.n	8017a12 <BCO_Activo+0xf6>
    for(i=0;i<Largo;i++)
 8017998:	8afb      	ldrh	r3, [r7, #22]
 801799a:	3301      	adds	r3, #1
 801799c:	82fb      	strh	r3, [r7, #22]
 801799e:	79bb      	ldrb	r3, [r7, #6]
 80179a0:	b29b      	uxth	r3, r3
 80179a2:	8afa      	ldrh	r2, [r7, #22]
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d3cf      	bcc.n	8017948 <BCO_Activo+0x2c>
 80179a8:	e032      	b.n	8017a10 <BCO_Activo+0xf4>
    }
    else
   	for(i=0;i<Largo;i++)
 80179aa:	2300      	movs	r3, #0
 80179ac:	82fb      	strh	r3, [r7, #22]
 80179ae:	e02a      	b.n	8017a06 <BCO_Activo+0xea>
    {
    	if
		(
			(m_XPanel>x 	  && m_XPanel<(x+62) )
 80179b0:	4b1b      	ldr	r3, [pc, #108]	; (8017a20 <BCO_Activo+0x104>)
 80179b2:	681b      	ldr	r3, [r3, #0]
		(
 80179b4:	68fa      	ldr	r2, [r7, #12]
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d222      	bcs.n	8017a00 <BCO_Activo+0xe4>
			(m_XPanel>x 	  && m_XPanel<(x+62) )
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 80179c0:	4b17      	ldr	r3, [pc, #92]	; (8017a20 <BCO_Activo+0x104>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d91b      	bls.n	8017a00 <BCO_Activo+0xe4>
			&&
			(m_YPanel>(y+i*w) && m_YPanel<(y+(i+1)*w) )
 80179c8:	8afb      	ldrh	r3, [r7, #22]
 80179ca:	8aba      	ldrh	r2, [r7, #20]
 80179cc:	fb02 f303 	mul.w	r3, r2, r3
 80179d0:	461a      	mov	r2, r3
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	441a      	add	r2, r3
 80179d6:	4b13      	ldr	r3, [pc, #76]	; (8017a24 <BCO_Activo+0x108>)
 80179d8:	681b      	ldr	r3, [r3, #0]
			&&
 80179da:	429a      	cmp	r2, r3
 80179dc:	d210      	bcs.n	8017a00 <BCO_Activo+0xe4>
			(m_YPanel>(y+i*w) && m_YPanel<(y+(i+1)*w) )
 80179de:	8afb      	ldrh	r3, [r7, #22]
 80179e0:	3301      	adds	r3, #1
 80179e2:	8aba      	ldrh	r2, [r7, #20]
 80179e4:	fb02 f303 	mul.w	r3, r2, r3
 80179e8:	461a      	mov	r2, r3
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	441a      	add	r2, r3
 80179ee:	4b0d      	ldr	r3, [pc, #52]	; (8017a24 <BCO_Activo+0x108>)
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	429a      	cmp	r2, r3
 80179f4:	d904      	bls.n	8017a00 <BCO_Activo+0xe4>
		) return i+1;
 80179f6:	8afb      	ldrh	r3, [r7, #22]
 80179f8:	b2db      	uxtb	r3, r3
 80179fa:	3301      	adds	r3, #1
 80179fc:	b2db      	uxtb	r3, r3
 80179fe:	e008      	b.n	8017a12 <BCO_Activo+0xf6>
   	for(i=0;i<Largo;i++)
 8017a00:	8afb      	ldrh	r3, [r7, #22]
 8017a02:	3301      	adds	r3, #1
 8017a04:	82fb      	strh	r3, [r7, #22]
 8017a06:	79bb      	ldrb	r3, [r7, #6]
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	8afa      	ldrh	r2, [r7, #22]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d3cf      	bcc.n	80179b0 <BCO_Activo+0x94>
    }

    return 0;
 8017a10:	2300      	movs	r3, #0
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	371c      	adds	r7, #28
 8017a16:	46bd      	mov	sp, r7
 8017a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop
 8017a20:	2000a098 	.word	0x2000a098
 8017a24:	2000a09c 	.word	0x2000a09c

08017a28 <BOT>:
//////////////////////////////////////////////////////////
// BOTON PIC DESDE FLASH INTERNA
//////////////////////////////////////////////////////////
void BOT(unsigned char* ID,unsigned int x,unsigned int y,unsigned char Est)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	60f8      	str	r0, [r7, #12]
 8017a30:	60b9      	str	r1, [r7, #8]
 8017a32:	607a      	str	r2, [r7, #4]
 8017a34:	70fb      	strb	r3, [r7, #3]
    switch(Est)
 8017a36:	78fb      	ldrb	r3, [r7, #3]
 8017a38:	2b02      	cmp	r3, #2
 8017a3a:	d014      	beq.n	8017a66 <BOT+0x3e>
 8017a3c:	2b02      	cmp	r3, #2
 8017a3e:	dc22      	bgt.n	8017a86 <BOT+0x5e>
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d002      	beq.n	8017a4a <BOT+0x22>
 8017a44:	2b01      	cmp	r3, #1
 8017a46:	d007      	beq.n	8017a58 <BOT+0x30>
    	HAL_Delay(255);
    	PIC(ID,x,y,0);
    	//HAL_Delay(200);
    	break;
    }
}
 8017a48:	e01d      	b.n	8017a86 <BOT+0x5e>
   		PIC(ID,x,y,0);
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	687a      	ldr	r2, [r7, #4]
 8017a4e:	68b9      	ldr	r1, [r7, #8]
 8017a50:	68f8      	ldr	r0, [r7, #12]
 8017a52:	f000 fab9 	bl	8017fc8 <PIC>
    	break;
 8017a56:	e016      	b.n	8017a86 <BOT+0x5e>
       	PIC(ID,x,y,4);
 8017a58:	2304      	movs	r3, #4
 8017a5a:	687a      	ldr	r2, [r7, #4]
 8017a5c:	68b9      	ldr	r1, [r7, #8]
 8017a5e:	68f8      	ldr	r0, [r7, #12]
 8017a60:	f000 fab2 	bl	8017fc8 <PIC>
    	break;
 8017a64:	e00f      	b.n	8017a86 <BOT+0x5e>
    	PIC(ID,x,y,4);
 8017a66:	2304      	movs	r3, #4
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	68b9      	ldr	r1, [r7, #8]
 8017a6c:	68f8      	ldr	r0, [r7, #12]
 8017a6e:	f000 faab 	bl	8017fc8 <PIC>
    	HAL_Delay(255);
 8017a72:	20ff      	movs	r0, #255	; 0xff
 8017a74:	f7ed fbe8 	bl	8005248 <HAL_Delay>
    	PIC(ID,x,y,0);
 8017a78:	2300      	movs	r3, #0
 8017a7a:	687a      	ldr	r2, [r7, #4]
 8017a7c:	68b9      	ldr	r1, [r7, #8]
 8017a7e:	68f8      	ldr	r0, [r7, #12]
 8017a80:	f000 faa2 	bl	8017fc8 <PIC>
    	break;
 8017a84:	bf00      	nop
}
 8017a86:	bf00      	nop
 8017a88:	3710      	adds	r7, #16
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}

08017a8e <CHECK_CIRC>:

void CHECK_CIRC(unsigned int x,unsigned int y,char* a,char* b,unsigned char Est)
{
 8017a8e:	b580      	push	{r7, lr}
 8017a90:	b086      	sub	sp, #24
 8017a92:	af02      	add	r7, sp, #8
 8017a94:	60f8      	str	r0, [r7, #12]
 8017a96:	60b9      	str	r1, [r7, #8]
 8017a98:	607a      	str	r2, [r7, #4]
 8017a9a:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_String(x,y   ,WHITE,0x0010,a,2);
 8017a9c:	2302      	movs	r3, #2
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	2310      	movs	r3, #16
 8017aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017aaa:	68b9      	ldr	r1, [r7, #8]
 8017aac:	68f8      	ldr	r0, [r7, #12]
 8017aae:	f7f9 fec1 	bl	8011834 <ILI9341_Draw_String>
	ILI9341_Draw_String(x,y+15,WHITE,0x0010,b,2);
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	f103 010f 	add.w	r1, r3, #15
 8017ab8:	2302      	movs	r3, #2
 8017aba:	9301      	str	r3, [sp, #4]
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	9300      	str	r3, [sp, #0]
 8017ac0:	2310      	movs	r3, #16
 8017ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ac6:	68f8      	ldr	r0, [r7, #12]
 8017ac8:	f7f9 feb4 	bl	8011834 <ILI9341_Draw_String>
	x=x+76;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	334c      	adds	r3, #76	; 0x4c
 8017ad0:	60fb      	str	r3, [r7, #12]
	y=y+16;
 8017ad2:	68bb      	ldr	r3, [r7, #8]
 8017ad4:	3310      	adds	r3, #16
 8017ad6:	60bb      	str	r3, [r7, #8]
	switch(Est)
 8017ad8:	7e3b      	ldrb	r3, [r7, #24]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d002      	beq.n	8017ae4 <CHECK_CIRC+0x56>
 8017ade:	2b01      	cmp	r3, #1
 8017ae0:	d012      	beq.n	8017b08 <CHECK_CIRC+0x7a>
   		ILI9341_Draw_Circle(x,y,16,0x0000,1);
  		ILI9341_Draw_Circle(x,y,12,0xFFFF,1);
  		ILI9341_Draw_Circle(x,y,8 ,0x0000,1);
    	break;
    }
}
 8017ae2:	e02b      	b.n	8017b3c <CHECK_CIRC+0xae>
   		ILI9341_Draw_Circle(x,y,16,0x0000,1);
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	9300      	str	r3, [sp, #0]
 8017ae8:	2300      	movs	r3, #0
 8017aea:	2210      	movs	r2, #16
 8017aec:	68b9      	ldr	r1, [r7, #8]
 8017aee:	68f8      	ldr	r0, [r7, #12]
 8017af0:	f7f9 fca0 	bl	8011434 <ILI9341_Draw_Circle>
   		ILI9341_Draw_Circle(x,y,12,0xFFFF,1);
 8017af4:	2301      	movs	r3, #1
 8017af6:	9300      	str	r3, [sp, #0]
 8017af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017afc:	220c      	movs	r2, #12
 8017afe:	68b9      	ldr	r1, [r7, #8]
 8017b00:	68f8      	ldr	r0, [r7, #12]
 8017b02:	f7f9 fc97 	bl	8011434 <ILI9341_Draw_Circle>
    	break;
 8017b06:	e019      	b.n	8017b3c <CHECK_CIRC+0xae>
   		ILI9341_Draw_Circle(x,y,16,0x0000,1);
 8017b08:	2301      	movs	r3, #1
 8017b0a:	9300      	str	r3, [sp, #0]
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	2210      	movs	r2, #16
 8017b10:	68b9      	ldr	r1, [r7, #8]
 8017b12:	68f8      	ldr	r0, [r7, #12]
 8017b14:	f7f9 fc8e 	bl	8011434 <ILI9341_Draw_Circle>
  		ILI9341_Draw_Circle(x,y,12,0xFFFF,1);
 8017b18:	2301      	movs	r3, #1
 8017b1a:	9300      	str	r3, [sp, #0]
 8017b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b20:	220c      	movs	r2, #12
 8017b22:	68b9      	ldr	r1, [r7, #8]
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	f7f9 fc85 	bl	8011434 <ILI9341_Draw_Circle>
  		ILI9341_Draw_Circle(x,y,8 ,0x0000,1);
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	9300      	str	r3, [sp, #0]
 8017b2e:	2300      	movs	r3, #0
 8017b30:	2208      	movs	r2, #8
 8017b32:	68b9      	ldr	r1, [r7, #8]
 8017b34:	68f8      	ldr	r0, [r7, #12]
 8017b36:	f7f9 fc7d 	bl	8011434 <ILI9341_Draw_Circle>
    	break;
 8017b3a:	bf00      	nop
}
 8017b3c:	bf00      	nop
 8017b3e:	3710      	adds	r7, #16
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <CHECK_CIRC_Activo>:

unsigned char CHECK_CIRC_Activo(unsigned int x,unsigned int y)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b082      	sub	sp, #8
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
 8017b4c:	6039      	str	r1, [r7, #0]
	x=x+60;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	333c      	adds	r3, #60	; 0x3c
 8017b52:	607b      	str	r3, [r7, #4]
	if
    (
      (m_XPanel>x && m_XPanel<(x+32) )
 8017b54:	4b10      	ldr	r3, [pc, #64]	; (8017b98 <CHECK_CIRC_Activo+0x54>)
 8017b56:	681b      	ldr	r3, [r3, #0]
    (
 8017b58:	687a      	ldr	r2, [r7, #4]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d217      	bcs.n	8017b8e <CHECK_CIRC_Activo+0x4a>
      (m_XPanel>x && m_XPanel<(x+32) )
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f103 0220 	add.w	r2, r3, #32
 8017b64:	4b0c      	ldr	r3, [pc, #48]	; (8017b98 <CHECK_CIRC_Activo+0x54>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d910      	bls.n	8017b8e <CHECK_CIRC_Activo+0x4a>
      &&
      (m_YPanel>y && m_YPanel<(y+32) )
 8017b6c:	4b0b      	ldr	r3, [pc, #44]	; (8017b9c <CHECK_CIRC_Activo+0x58>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
      &&
 8017b70:	683a      	ldr	r2, [r7, #0]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d20b      	bcs.n	8017b8e <CHECK_CIRC_Activo+0x4a>
      (m_YPanel>y && m_YPanel<(y+32) )
 8017b76:	683b      	ldr	r3, [r7, #0]
 8017b78:	f103 0220 	add.w	r2, r3, #32
 8017b7c:	4b07      	ldr	r3, [pc, #28]	; (8017b9c <CHECK_CIRC_Activo+0x58>)
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d904      	bls.n	8017b8e <CHECK_CIRC_Activo+0x4a>
    )
	{
	   	HAL_Delay(200);
 8017b84:	20c8      	movs	r0, #200	; 0xc8
 8017b86:	f7ed fb5f 	bl	8005248 <HAL_Delay>
		return 1;
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	e000      	b.n	8017b90 <CHECK_CIRC_Activo+0x4c>
	}

    else return 0;
 8017b8e:	2300      	movs	r3, #0
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	3708      	adds	r7, #8
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}
 8017b98:	2000a098 	.word	0x2000a098
 8017b9c:	2000a09c 	.word	0x2000a09c

08017ba0 <BOW>:
		return 1;
	}
	return 0;
}
void BOW(unsigned int x,unsigned int y,unsigned char Est,unsigned char LargoBoton,char* str)
{
 8017ba0:	b590      	push	{r4, r7, lr}
 8017ba2:	b08b      	sub	sp, #44	; 0x2c
 8017ba4:	af02      	add	r7, sp, #8
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	4611      	mov	r1, r2
 8017bac:	461a      	mov	r2, r3
 8017bae:	460b      	mov	r3, r1
 8017bb0:	71fb      	strb	r3, [r7, #7]
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	71bb      	strb	r3, [r7, #6]
	TP_CS_OFF;
 8017bb6:	2201      	movs	r2, #1
 8017bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017bbc:	4876      	ldr	r0, [pc, #472]	; (8017d98 <BOW+0x1f8>)
 8017bbe:	f7ef fb33 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_OFF;
 8017bc2:	2201      	movs	r2, #1
 8017bc4:	2108      	movs	r1, #8
 8017bc6:	4875      	ldr	r0, [pc, #468]	; (8017d9c <BOW+0x1fc>)
 8017bc8:	f7ef fb2e 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8017bcc:	2200      	movs	r2, #0
 8017bce:	2180      	movs	r1, #128	; 0x80
 8017bd0:	4872      	ldr	r0, [pc, #456]	; (8017d9c <BOW+0x1fc>)
 8017bd2:	f7ef fb29 	bl	8007228 <HAL_GPIO_WritePin>
    uint16_t colorF=LIGHTGREY;
 8017bd6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017bda:	83fb      	strh	r3, [r7, #30]
    uint16_t colorT=0x0000;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	83bb      	strh	r3, [r7, #28]
    uint16_t xt=x+2+((LargoBoton-(unsigned char)strlen(str)))*7;
 8017be0:	79bc      	ldrb	r4, [r7, #6]
 8017be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017be4:	f7e8 fafc 	bl	80001e0 <strlen>
 8017be8:	4603      	mov	r3, r0
 8017bea:	b2db      	uxtb	r3, r3
 8017bec:	1ae3      	subs	r3, r4, r3
 8017bee:	b29b      	uxth	r3, r3
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	00d2      	lsls	r2, r2, #3
 8017bf4:	1ad3      	subs	r3, r2, r3
 8017bf6:	b29a      	uxth	r2, r3
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	b29b      	uxth	r3, r3
 8017bfc:	4413      	add	r3, r2
 8017bfe:	b29b      	uxth	r3, r3
 8017c00:	3302      	adds	r3, #2
 8017c02:	837b      	strh	r3, [r7, #26]
    uint16_t yt=y+3;
 8017c04:	68bb      	ldr	r3, [r7, #8]
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	3303      	adds	r3, #3
 8017c0a:	833b      	strh	r3, [r7, #24]
    uint16_t wx=LargoBoton*14;
 8017c0c:	79bb      	ldrb	r3, [r7, #6]
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	461a      	mov	r2, r3
 8017c12:	00d2      	lsls	r2, r2, #3
 8017c14:	1ad3      	subs	r3, r2, r3
 8017c16:	005b      	lsls	r3, r3, #1
 8017c18:	82fb      	strh	r3, [r7, #22]
    uint16_t wy=35;
 8017c1a:	2323      	movs	r3, #35	; 0x23
 8017c1c:	82bb      	strh	r3, [r7, #20]

    switch(Est)
 8017c1e:	79fb      	ldrb	r3, [r7, #7]
 8017c20:	2b02      	cmp	r3, #2
 8017c22:	f000 80bd 	beq.w	8017da0 <BOW+0x200>
 8017c26:	2b02      	cmp	r3, #2
 8017c28:	f300 8177 	bgt.w	8017f1a <BOW+0x37a>
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d002      	beq.n	8017c36 <BOW+0x96>
 8017c30:	2b01      	cmp	r3, #1
 8017c32:	d054      	beq.n	8017cde <BOW+0x13e>
   		FillReg(x+2 ,y+2 ,wx-4,2  ,WHITE);
   		FillReg(x+2	,y+2 ,2	  ,33 ,WHITE);
   		HAL_Delay(55);
    	break;
    }
}
 8017c34:	e171      	b.n	8017f1a <BOW+0x37a>
   		FillReg(x+2,y+2,wx-2,35,colorF);
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	1c98      	adds	r0, r3, #2
 8017c3a:	68bb      	ldr	r3, [r7, #8]
 8017c3c:	1c99      	adds	r1, r3, #2
 8017c3e:	8afb      	ldrh	r3, [r7, #22]
 8017c40:	3b02      	subs	r3, #2
 8017c42:	461a      	mov	r2, r3
 8017c44:	8bfb      	ldrh	r3, [r7, #30]
 8017c46:	9300      	str	r3, [sp, #0]
 8017c48:	2323      	movs	r3, #35	; 0x23
 8017c4a:	f000 fd6f 	bl	801872c <FillReg>
 		ILI9341_Draw_String(xt,yt,colorT,colorF,str,4);
 8017c4e:	8b78      	ldrh	r0, [r7, #26]
 8017c50:	8b39      	ldrh	r1, [r7, #24]
 8017c52:	8bba      	ldrh	r2, [r7, #28]
 8017c54:	8bfc      	ldrh	r4, [r7, #30]
 8017c56:	2304      	movs	r3, #4
 8017c58:	9301      	str	r3, [sp, #4]
 8017c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c5c:	9300      	str	r3, [sp, #0]
 8017c5e:	4623      	mov	r3, r4
 8017c60:	f7f9 fde8 	bl	8011834 <ILI9341_Draw_String>
   		FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017c64:	8afa      	ldrh	r2, [r7, #22]
 8017c66:	2300      	movs	r3, #0
 8017c68:	9300      	str	r3, [sp, #0]
 8017c6a:	2302      	movs	r3, #2
 8017c6c:	68b9      	ldr	r1, [r7, #8]
 8017c6e:	68f8      	ldr	r0, [r7, #12]
 8017c70:	f000 fd5c 	bl	801872c <FillReg>
   		FillReg(x	,y	 ,2	  ,37 ,BLACK);
 8017c74:	2300      	movs	r3, #0
 8017c76:	9300      	str	r3, [sp, #0]
 8017c78:	2325      	movs	r3, #37	; 0x25
 8017c7a:	2202      	movs	r2, #2
 8017c7c:	68b9      	ldr	r1, [r7, #8]
 8017c7e:	68f8      	ldr	r0, [r7, #12]
 8017c80:	f000 fd54 	bl	801872c <FillReg>
   		FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 8017c84:	8afa      	ldrh	r2, [r7, #22]
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	18d0      	adds	r0, r2, r3
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	2325      	movs	r3, #37	; 0x25
 8017c90:	2202      	movs	r2, #2
 8017c92:	68b9      	ldr	r1, [r7, #8]
 8017c94:	f000 fd4a 	bl	801872c <FillReg>
   		FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8017c9e:	8afa      	ldrh	r2, [r7, #22]
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	9300      	str	r3, [sp, #0]
 8017ca4:	2302      	movs	r3, #2
 8017ca6:	68f8      	ldr	r0, [r7, #12]
 8017ca8:	f000 fd40 	bl	801872c <FillReg>
   		FillReg(x+2 ,y+2 ,wx-4,2  ,WHITE);
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	1c98      	adds	r0, r3, #2
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	1c99      	adds	r1, r3, #2
 8017cb4:	8afb      	ldrh	r3, [r7, #22]
 8017cb6:	3b04      	subs	r3, #4
 8017cb8:	461a      	mov	r2, r3
 8017cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	2302      	movs	r3, #2
 8017cc2:	f000 fd33 	bl	801872c <FillReg>
   		FillReg(x+2	,y+2 ,2	  ,33 ,WHITE);
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	1c98      	adds	r0, r3, #2
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	1c99      	adds	r1, r3, #2
 8017cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cd2:	9300      	str	r3, [sp, #0]
 8017cd4:	2321      	movs	r3, #33	; 0x21
 8017cd6:	2202      	movs	r2, #2
 8017cd8:	f000 fd28 	bl	801872c <FillReg>
    	break;
 8017cdc:	e11d      	b.n	8017f1a <BOW+0x37a>
   		FillReg(x+2,y+2,wx-2,35,colorF);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	1c98      	adds	r0, r3, #2
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	1c99      	adds	r1, r3, #2
 8017ce6:	8afb      	ldrh	r3, [r7, #22]
 8017ce8:	3b02      	subs	r3, #2
 8017cea:	461a      	mov	r2, r3
 8017cec:	8bfb      	ldrh	r3, [r7, #30]
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	2323      	movs	r3, #35	; 0x23
 8017cf2:	f000 fd1b 	bl	801872c <FillReg>
   		ILI9341_Draw_String(xt+1,yt+1,colorT,colorF,str,4);
 8017cf6:	8b7b      	ldrh	r3, [r7, #26]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	8b3b      	ldrh	r3, [r7, #24]
 8017cfe:	3301      	adds	r3, #1
 8017d00:	461c      	mov	r4, r3
 8017d02:	8bba      	ldrh	r2, [r7, #28]
 8017d04:	8bf9      	ldrh	r1, [r7, #30]
 8017d06:	2304      	movs	r3, #4
 8017d08:	9301      	str	r3, [sp, #4]
 8017d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0c:	9300      	str	r3, [sp, #0]
 8017d0e:	460b      	mov	r3, r1
 8017d10:	4621      	mov	r1, r4
 8017d12:	f7f9 fd8f 	bl	8011834 <ILI9341_Draw_String>
     	FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017d16:	8afa      	ldrh	r2, [r7, #22]
 8017d18:	2300      	movs	r3, #0
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	2302      	movs	r3, #2
 8017d1e:	68b9      	ldr	r1, [r7, #8]
 8017d20:	68f8      	ldr	r0, [r7, #12]
 8017d22:	f000 fd03 	bl	801872c <FillReg>
      	FillReg(x	,y	 ,2	  ,37 ,BLACK);
 8017d26:	2300      	movs	r3, #0
 8017d28:	9300      	str	r3, [sp, #0]
 8017d2a:	2325      	movs	r3, #37	; 0x25
 8017d2c:	2202      	movs	r2, #2
 8017d2e:	68b9      	ldr	r1, [r7, #8]
 8017d30:	68f8      	ldr	r0, [r7, #12]
 8017d32:	f000 fcfb 	bl	801872c <FillReg>
      	FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 8017d36:	8afa      	ldrh	r2, [r7, #22]
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	18d0      	adds	r0, r2, r3
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	9300      	str	r3, [sp, #0]
 8017d40:	2325      	movs	r3, #37	; 0x25
 8017d42:	2202      	movs	r2, #2
 8017d44:	68b9      	ldr	r1, [r7, #8]
 8017d46:	f000 fcf1 	bl	801872c <FillReg>
      	FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017d4a:	68bb      	ldr	r3, [r7, #8]
 8017d4c:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8017d50:	8afa      	ldrh	r2, [r7, #22]
 8017d52:	2300      	movs	r3, #0
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	2302      	movs	r3, #2
 8017d58:	68f8      	ldr	r0, [r7, #12]
 8017d5a:	f000 fce7 	bl	801872c <FillReg>
      	FillReg(x+2 ,y+33,wx-4,2  ,WHITE);
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	1c98      	adds	r0, r3, #2
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8017d68:	8afb      	ldrh	r3, [r7, #22]
 8017d6a:	3b04      	subs	r3, #4
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d72:	9300      	str	r3, [sp, #0]
 8017d74:	2302      	movs	r3, #2
 8017d76:	f000 fcd9 	bl	801872c <FillReg>
      	FillReg(x+wx-2,y+2,2  ,33 ,WHITE);
 8017d7a:	8afa      	ldrh	r2, [r7, #22]
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	4413      	add	r3, r2
 8017d80:	1e98      	subs	r0, r3, #2
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	1c99      	adds	r1, r3, #2
 8017d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d8a:	9300      	str	r3, [sp, #0]
 8017d8c:	2321      	movs	r3, #33	; 0x21
 8017d8e:	2202      	movs	r2, #2
 8017d90:	f000 fccc 	bl	801872c <FillReg>
    	break;
 8017d94:	e0c1      	b.n	8017f1a <BOW+0x37a>
 8017d96:	bf00      	nop
 8017d98:	48000400 	.word	0x48000400
 8017d9c:	48000800 	.word	0x48000800
       	FillReg(x+2,y+2,wx-2,35,colorF);
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	1c98      	adds	r0, r3, #2
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	1c99      	adds	r1, r3, #2
 8017da8:	8afb      	ldrh	r3, [r7, #22]
 8017daa:	3b02      	subs	r3, #2
 8017dac:	461a      	mov	r2, r3
 8017dae:	8bfb      	ldrh	r3, [r7, #30]
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	2323      	movs	r3, #35	; 0x23
 8017db4:	f000 fcba 	bl	801872c <FillReg>
       	ILI9341_Draw_String(xt+1,yt+1,colorT,colorF,str,4);
 8017db8:	8b7b      	ldrh	r3, [r7, #26]
 8017dba:	3301      	adds	r3, #1
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	8b3b      	ldrh	r3, [r7, #24]
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	461c      	mov	r4, r3
 8017dc4:	8bba      	ldrh	r2, [r7, #28]
 8017dc6:	8bf9      	ldrh	r1, [r7, #30]
 8017dc8:	2304      	movs	r3, #4
 8017dca:	9301      	str	r3, [sp, #4]
 8017dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dce:	9300      	str	r3, [sp, #0]
 8017dd0:	460b      	mov	r3, r1
 8017dd2:	4621      	mov	r1, r4
 8017dd4:	f7f9 fd2e 	bl	8011834 <ILI9341_Draw_String>
       	FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017dd8:	8afa      	ldrh	r2, [r7, #22]
 8017dda:	2300      	movs	r3, #0
 8017ddc:	9300      	str	r3, [sp, #0]
 8017dde:	2302      	movs	r3, #2
 8017de0:	68b9      	ldr	r1, [r7, #8]
 8017de2:	68f8      	ldr	r0, [r7, #12]
 8017de4:	f000 fca2 	bl	801872c <FillReg>
       	FillReg(x	,y	 ,2	  ,37 ,BLACK);
 8017de8:	2300      	movs	r3, #0
 8017dea:	9300      	str	r3, [sp, #0]
 8017dec:	2325      	movs	r3, #37	; 0x25
 8017dee:	2202      	movs	r2, #2
 8017df0:	68b9      	ldr	r1, [r7, #8]
 8017df2:	68f8      	ldr	r0, [r7, #12]
 8017df4:	f000 fc9a 	bl	801872c <FillReg>
       	FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 8017df8:	8afa      	ldrh	r2, [r7, #22]
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	18d0      	adds	r0, r2, r3
 8017dfe:	2300      	movs	r3, #0
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	2325      	movs	r3, #37	; 0x25
 8017e04:	2202      	movs	r2, #2
 8017e06:	68b9      	ldr	r1, [r7, #8]
 8017e08:	f000 fc90 	bl	801872c <FillReg>
       	FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8017e12:	8afa      	ldrh	r2, [r7, #22]
 8017e14:	2300      	movs	r3, #0
 8017e16:	9300      	str	r3, [sp, #0]
 8017e18:	2302      	movs	r3, #2
 8017e1a:	68f8      	ldr	r0, [r7, #12]
 8017e1c:	f000 fc86 	bl	801872c <FillReg>
       	FillReg(x+2 ,y+33,wx-4,2  ,WHITE);
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	1c98      	adds	r0, r3, #2
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8017e2a:	8afb      	ldrh	r3, [r7, #22]
 8017e2c:	3b04      	subs	r3, #4
 8017e2e:	461a      	mov	r2, r3
 8017e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e34:	9300      	str	r3, [sp, #0]
 8017e36:	2302      	movs	r3, #2
 8017e38:	f000 fc78 	bl	801872c <FillReg>
      	FillReg(x+wx-2,y+2,2  ,33 ,WHITE);
 8017e3c:	8afa      	ldrh	r2, [r7, #22]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	4413      	add	r3, r2
 8017e42:	1e98      	subs	r0, r3, #2
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	1c99      	adds	r1, r3, #2
 8017e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e4c:	9300      	str	r3, [sp, #0]
 8017e4e:	2321      	movs	r3, #33	; 0x21
 8017e50:	2202      	movs	r2, #2
 8017e52:	f000 fc6b 	bl	801872c <FillReg>
       	while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8017e56:	bf00      	nop
 8017e58:	2102      	movs	r1, #2
 8017e5a:	4832      	ldr	r0, [pc, #200]	; (8017f24 <BOW+0x384>)
 8017e5c:	f7ef f9cc 	bl	80071f8 <HAL_GPIO_ReadPin>
 8017e60:	4603      	mov	r3, r0
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d0f8      	beq.n	8017e58 <BOW+0x2b8>
       	HAL_Delay(255);
 8017e66:	20ff      	movs	r0, #255	; 0xff
 8017e68:	f7ed f9ee 	bl	8005248 <HAL_Delay>
    	FillReg(x+2,y+2,wx-2,35,colorF);
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	1c98      	adds	r0, r3, #2
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	1c99      	adds	r1, r3, #2
 8017e74:	8afb      	ldrh	r3, [r7, #22]
 8017e76:	3b02      	subs	r3, #2
 8017e78:	461a      	mov	r2, r3
 8017e7a:	8bfb      	ldrh	r3, [r7, #30]
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	2323      	movs	r3, #35	; 0x23
 8017e80:	f000 fc54 	bl	801872c <FillReg>
    	ILI9341_Draw_String(xt,yt,colorT,colorF,str,4);
 8017e84:	8b78      	ldrh	r0, [r7, #26]
 8017e86:	8b39      	ldrh	r1, [r7, #24]
 8017e88:	8bba      	ldrh	r2, [r7, #28]
 8017e8a:	8bfc      	ldrh	r4, [r7, #30]
 8017e8c:	2304      	movs	r3, #4
 8017e8e:	9301      	str	r3, [sp, #4]
 8017e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e92:	9300      	str	r3, [sp, #0]
 8017e94:	4623      	mov	r3, r4
 8017e96:	f7f9 fccd 	bl	8011834 <ILI9341_Draw_String>
   		FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017e9a:	8afa      	ldrh	r2, [r7, #22]
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	9300      	str	r3, [sp, #0]
 8017ea0:	2302      	movs	r3, #2
 8017ea2:	68b9      	ldr	r1, [r7, #8]
 8017ea4:	68f8      	ldr	r0, [r7, #12]
 8017ea6:	f000 fc41 	bl	801872c <FillReg>
   		FillReg(x	,y	 ,2	  ,37 ,BLACK);
 8017eaa:	2300      	movs	r3, #0
 8017eac:	9300      	str	r3, [sp, #0]
 8017eae:	2325      	movs	r3, #37	; 0x25
 8017eb0:	2202      	movs	r2, #2
 8017eb2:	68b9      	ldr	r1, [r7, #8]
 8017eb4:	68f8      	ldr	r0, [r7, #12]
 8017eb6:	f000 fc39 	bl	801872c <FillReg>
   		FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 8017eba:	8afa      	ldrh	r2, [r7, #22]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	18d0      	adds	r0, r2, r3
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	9300      	str	r3, [sp, #0]
 8017ec4:	2325      	movs	r3, #37	; 0x25
 8017ec6:	2202      	movs	r2, #2
 8017ec8:	68b9      	ldr	r1, [r7, #8]
 8017eca:	f000 fc2f 	bl	801872c <FillReg>
   		FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8017ed4:	8afa      	ldrh	r2, [r7, #22]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	9300      	str	r3, [sp, #0]
 8017eda:	2302      	movs	r3, #2
 8017edc:	68f8      	ldr	r0, [r7, #12]
 8017ede:	f000 fc25 	bl	801872c <FillReg>
   		FillReg(x+2 ,y+2 ,wx-4,2  ,WHITE);
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	1c98      	adds	r0, r3, #2
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	1c99      	adds	r1, r3, #2
 8017eea:	8afb      	ldrh	r3, [r7, #22]
 8017eec:	3b04      	subs	r3, #4
 8017eee:	461a      	mov	r2, r3
 8017ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	2302      	movs	r3, #2
 8017ef8:	f000 fc18 	bl	801872c <FillReg>
   		FillReg(x+2	,y+2 ,2	  ,33 ,WHITE);
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	1c98      	adds	r0, r3, #2
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	1c99      	adds	r1, r3, #2
 8017f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f08:	9300      	str	r3, [sp, #0]
 8017f0a:	2321      	movs	r3, #33	; 0x21
 8017f0c:	2202      	movs	r2, #2
 8017f0e:	f000 fc0d 	bl	801872c <FillReg>
   		HAL_Delay(55);
 8017f12:	2037      	movs	r0, #55	; 0x37
 8017f14:	f7ed f998 	bl	8005248 <HAL_Delay>
    	break;
 8017f18:	bf00      	nop
}
 8017f1a:	bf00      	nop
 8017f1c:	3724      	adds	r7, #36	; 0x24
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd90      	pop	{r4, r7, pc}
 8017f22:	bf00      	nop
 8017f24:	48000400 	.word	0x48000400

08017f28 <SPI_TransmitReceive>:

//////////////////////////////////////////////////////////
// SPI
//////////////////////////////////////////////////////////
uint8_t SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t Data)
{//Transmit Receive 1 byte
 8017f28:	b480      	push	{r7}
 8017f2a:	b083      	sub	sp, #12
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
 8017f30:	460b      	mov	r3, r1
 8017f32:	70fb      	strb	r3, [r7, #3]
  *(__IO uint8_t *)&hspi->Instance->DR=Data;
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	330c      	adds	r3, #12
 8017f3a:	78fa      	ldrb	r2, [r7, #3]
 8017f3c:	701a      	strb	r2, [r3, #0]
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	689b      	ldr	r3, [r3, #8]
 8017f44:	f003 0301 	and.w	r3, r3, #1
 8017f48:	2b01      	cmp	r3, #1
 8017f4a:	d105      	bne.n	8017f58 <SPI_TransmitReceive+0x30>
	  return *(__IO uint8_t *)&hspi->Instance->DR;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	330c      	adds	r3, #12
 8017f52:	781b      	ldrb	r3, [r3, #0]
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	e000      	b.n	8017f5a <SPI_TransmitReceive+0x32>
  return 0;
 8017f58:	2300      	movs	r3, #0
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	370c      	adds	r7, #12
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f64:	4770      	bx	lr
	...

08017f68 <SPI_TxByte>:

void SPI_TxByte(uint8_t data)
{//Transmit 1 byte
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	4603      	mov	r3, r0
 8017f70:	71fb      	strb	r3, [r7, #7]
	SPI_TransmitReceive(&SD_SPI_HANDLE,data);
 8017f72:	79fb      	ldrb	r3, [r7, #7]
 8017f74:	4619      	mov	r1, r3
 8017f76:	4803      	ldr	r0, [pc, #12]	; (8017f84 <SPI_TxByte+0x1c>)
 8017f78:	f7ff ffd6 	bl	8017f28 <SPI_TransmitReceive>
}
 8017f7c:	bf00      	nop
 8017f7e:	3708      	adds	r7, #8
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	20008bc0 	.word	0x20008bc0

08017f88 <SPI_RxByte>:

uint8_t SPI_RxByte(void)
{//Receive 1 byte
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b082      	sub	sp, #8
 8017f8c:	af00      	add	r7, sp, #0
	uint8_t data=0xFF;
 8017f8e:	23ff      	movs	r3, #255	; 0xff
 8017f90:	71fb      	strb	r3, [r7, #7]
	return SPI_TransmitReceive(&SD_SPI_HANDLE,data);
 8017f92:	79fb      	ldrb	r3, [r7, #7]
 8017f94:	4619      	mov	r1, r3
 8017f96:	4804      	ldr	r0, [pc, #16]	; (8017fa8 <SPI_RxByte+0x20>)
 8017f98:	f7ff ffc6 	bl	8017f28 <SPI_TransmitReceive>
 8017f9c:	4603      	mov	r3, r0
}
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	3708      	adds	r7, #8
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bd80      	pop	{r7, pc}
 8017fa6:	bf00      	nop
 8017fa8:	20008bc0 	.word	0x20008bc0

08017fac <SPI_RxBytePtr>:
void SPI_RxBytePtr(uint8_t *buff)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8017fb4:	f7ff ffe8 	bl	8017f88 <SPI_RxByte>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	461a      	mov	r2, r3
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	701a      	strb	r2, [r3, #0]
}
 8017fc0:	bf00      	nop
 8017fc2:	3708      	adds	r7, #8
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	bd80      	pop	{r7, pc}

08017fc8 <PIC>:
void DibujarTeclasFlechas(void);
void FondoTeclas(void);
void CalculoXY(void);

void PIC(unsigned char* ID,unsigned int x,unsigned int y,unsigned char Brillo)
{
 8017fc8:	b590      	push	{r4, r7, lr}
 8017fca:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 8017fce:	af00      	add	r7, sp, #0
 8017fd0:	f507 648a 	add.w	r4, r7, #1104	; 0x450
 8017fd4:	f2a4 4444 	subw	r4, r4, #1092	; 0x444
 8017fd8:	6020      	str	r0, [r4, #0]
 8017fda:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 8017fde:	f5a0 6089 	sub.w	r0, r0, #1096	; 0x448
 8017fe2:	6001      	str	r1, [r0, #0]
 8017fe4:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8017fe8:	f2a1 414c 	subw	r1, r1, #1100	; 0x44c
 8017fec:	600a      	str	r2, [r1, #0]
 8017fee:	461a      	mov	r2, r3
 8017ff0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017ff4:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8017ff8:	701a      	strb	r2, [r3, #0]
	uint32_t	ii;
	uint16_t    cRGB[256],R,G,B,RGB;
	unsigned char data[512];
	unsigned int q,c,d,i;

	m_Memoria=ID;
 8017ffa:	4ab5      	ldr	r2, [pc, #724]	; (80182d0 <PIC+0x308>)
 8017ffc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018000:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	6013      	str	r3, [r2, #0]

	TP_CS_OFF;
 8018008:	2201      	movs	r2, #1
 801800a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801800e:	48b1      	ldr	r0, [pc, #708]	; (80182d4 <PIC+0x30c>)
 8018010:	f7ef f90a 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_OFF;
 8018014:	2201      	movs	r2, #1
 8018016:	2108      	movs	r1, #8
 8018018:	48af      	ldr	r0, [pc, #700]	; (80182d8 <PIC+0x310>)
 801801a:	f7ef f905 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801801e:	2200      	movs	r2, #0
 8018020:	2180      	movs	r1, #128	; 0x80
 8018022:	48ad      	ldr	r0, [pc, #692]	; (80182d8 <PIC+0x310>)
 8018024:	f7ef f900 	bl	8007228 <HAL_GPIO_WritePin>
	ILI9341_Set_Rotation(4);
 8018028:	2004      	movs	r0, #4
 801802a:	f7f9 f8cf 	bl	80111cc <ILI9341_Set_Rotation>

	uint32_t AnchoBMP=LeerFlashAbs(0)<<8;
 801802e:	2000      	movs	r0, #0
 8018030:	f001 f8c2 	bl	80191b8 <LeerFlashAbs>
 8018034:	4603      	mov	r3, r0
 8018036:	021b      	lsls	r3, r3, #8
 8018038:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	AnchoBMP=AnchoBMP | LeerFlashRel();
 801803c:	f001 f8d8 	bl	80191f0 <LeerFlashRel>
 8018040:	4603      	mov	r3, r0
 8018042:	461a      	mov	r2, r3
 8018044:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8018048:	4313      	orrs	r3, r2
 801804a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	uint32_t AltoBMP = LeerFlashRel()<<8;
 801804e:	f001 f8cf 	bl	80191f0 <LeerFlashRel>
 8018052:	4603      	mov	r3, r0
 8018054:	021b      	lsls	r3, r3, #8
 8018056:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
	AltoBMP=AltoBMP | LeerFlashRel();
 801805a:	f001 f8c9 	bl	80191f0 <LeerFlashRel>
 801805e:	4603      	mov	r3, r0
 8018060:	461a      	mov	r2, r3
 8018062:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8018066:	4313      	orrs	r3, r2
 8018068:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
	uint32_t Peso=AnchoBMP*AltoBMP;
 801806c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8018070:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8018074:	fb02 f303 	mul.w	r3, r2, r3
 8018078:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

	//sprintf(data,"Ancho %d Alto %d",AnchoBMP,AltoBMP);
	//ILI9341_Draw_String(0,80,WHITE,0x0010,data,4);

	LeerFlashRel();
 801807c:	f001 f8b8 	bl	80191f0 <LeerFlashRel>
	LeerFlashRel();
 8018080:	f001 f8b6 	bl	80191f0 <LeerFlashRel>
	LeerFlashRel();
 8018084:	f001 f8b4 	bl	80191f0 <LeerFlashRel>

	uint32_t LargoTablaColores= LeerFlashRel();
 8018088:	f001 f8b2 	bl	80191f0 <LeerFlashRel>
 801808c:	4603      	mov	r3, r0
 801808e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
	if(LargoTablaColores==0) 	LargoTablaColores=256;
 8018092:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8018096:	2b00      	cmp	r3, #0
 8018098:	d103      	bne.n	80180a2 <PIC+0xda>
 801809a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801809e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

	for(i=0;i<LargoTablaColores;i++)
 80180a2:	2300      	movs	r3, #0
 80180a4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80180a8:	e0b5      	b.n	8018216 <PIC+0x24e>
	{
		cRGB[i]=(uint16_t)LeerFlashRel()<<8;
 80180aa:	f001 f8a1 	bl	80191f0 <LeerFlashRel>
 80180ae:	4603      	mov	r3, r0
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	021b      	lsls	r3, r3, #8
 80180b4:	b299      	uxth	r1, r3
 80180b6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80180ba:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80180be:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80180c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		cRGB[i]=cRGB[i] | LeerFlashRel();
 80180c6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80180ca:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80180ce:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80180d2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80180d6:	f001 f88b 	bl	80191f0 <LeerFlashRel>
 80180da:	4603      	mov	r3, r0
 80180dc:	b29b      	uxth	r3, r3
 80180de:	4323      	orrs	r3, r4
 80180e0:	b299      	uxth	r1, r3
 80180e2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80180e6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80180ea:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80180ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		if(Brillo !=0 )
 80180f2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80180f6:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	f000 8085 	beq.w	801820c <PIC+0x244>
		{
			R=cRGB[i]>>11;
 8018102:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018106:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801810a:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801810e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018112:	0adb      	lsrs	r3, r3, #11
 8018114:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
			G=cRGB[i]>>5 & 0x3F;
 8018118:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801811c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8018120:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8018124:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018128:	095b      	lsrs	r3, r3, #5
 801812a:	b29b      	uxth	r3, r3
 801812c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018130:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
			B=cRGB[i] & 0x1F;
 8018134:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018138:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801813c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8018140:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018144:	f003 031f 	and.w	r3, r3, #31
 8018148:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446

			if((R+Brillo)<0x1F) R=R+Brillo;
 801814c:	f8b7 244a 	ldrh.w	r2, [r7, #1098]	; 0x44a
 8018150:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018154:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	4413      	add	r3, r2
 801815c:	2b1e      	cmp	r3, #30
 801815e:	dc0b      	bgt.n	8018178 <PIC+0x1b0>
 8018160:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018164:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8018168:	781b      	ldrb	r3, [r3, #0]
 801816a:	b29a      	uxth	r2, r3
 801816c:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8018170:	4413      	add	r3, r2
 8018172:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8018176:	e002      	b.n	801817e <PIC+0x1b6>
			else			  	R=0x1f;
 8018178:	231f      	movs	r3, #31
 801817a:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
			if((G+Brillo)<0x3F) G=G+Brillo;
 801817e:	f8b7 2448 	ldrh.w	r2, [r7, #1096]	; 0x448
 8018182:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018186:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	4413      	add	r3, r2
 801818e:	2b3e      	cmp	r3, #62	; 0x3e
 8018190:	dc0b      	bgt.n	80181aa <PIC+0x1e2>
 8018192:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018196:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 801819a:	781b      	ldrb	r3, [r3, #0]
 801819c:	b29a      	uxth	r2, r3
 801819e:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 80181a2:	4413      	add	r3, r2
 80181a4:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
 80181a8:	e002      	b.n	80181b0 <PIC+0x1e8>
			else			  	G=0x3f;
 80181aa:	233f      	movs	r3, #63	; 0x3f
 80181ac:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
			if((B+Brillo)<0x1F) B=B+Brillo;
 80181b0:	f8b7 2446 	ldrh.w	r2, [r7, #1094]	; 0x446
 80181b4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80181b8:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	4413      	add	r3, r2
 80181c0:	2b1e      	cmp	r3, #30
 80181c2:	dc0b      	bgt.n	80181dc <PIC+0x214>
 80181c4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80181c8:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80181cc:	781b      	ldrb	r3, [r3, #0]
 80181ce:	b29a      	uxth	r2, r3
 80181d0:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 80181d4:	4413      	add	r3, r2
 80181d6:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
 80181da:	e002      	b.n	80181e2 <PIC+0x21a>
			else			  	B=0x1f;
 80181dc:	231f      	movs	r3, #31
 80181de:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
			cRGB[i]=R*2048+G*32+B;
 80181e2:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80181e6:	019a      	lsls	r2, r3, #6
 80181e8:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 80181ec:	4413      	add	r3, r2
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	015b      	lsls	r3, r3, #5
 80181f2:	b29a      	uxth	r2, r3
 80181f4:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 80181f8:	4413      	add	r3, r2
 80181fa:	b299      	uxth	r1, r3
 80181fc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018200:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8018204:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8018208:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0;i<LargoTablaColores;i++)
 801820c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8018210:	3301      	adds	r3, #1
 8018212:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8018216:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801821a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801821e:	429a      	cmp	r2, r3
 8018220:	f4ff af43 	bcc.w	80180aa <PIC+0xe2>
			//sprintf(data,"%X %X %X %X",R,G,B,RGB);
			//ILI9341_Draw_String(0,80,WHITE,0x0010,data,4);
		}
	}

	unsigned int x1=x;
 8018224:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018228:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	unsigned int y1=240-(unsigned int)AltoBMP-y;
 8018232:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018236:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801823a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4413      	add	r3, r2
 8018242:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8018246:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	unsigned int x2=AnchoBMP+x-1;
 801824a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801824e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8018252:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	4413      	add	r3, r2
 801825a:	3b01      	subs	r3, #1
 801825c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	unsigned int y2=239-y;
 8018260:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018264:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 801826e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	ILI9341_Set_Address(x1,y1,x2,y2);
 8018272:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8018276:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 801827a:	f8d7 1428 	ldr.w	r1, [r7, #1064]	; 0x428
 801827e:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8018282:	f7f9 f827 	bl	80112d4 <ILI9341_Set_Address>

	TFT_DC_COMMAND;
 8018286:	2200      	movs	r2, #0
 8018288:	f44f 7100 	mov.w	r1, #512	; 0x200
 801828c:	4812      	ldr	r0, [pc, #72]	; (80182d8 <PIC+0x310>)
 801828e:	f7ee ffcb 	bl	8007228 <HAL_GPIO_WritePin>
	data[0]=0x2C;
 8018292:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018296:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 801829a:	222c      	movs	r2, #44	; 0x2c
 801829c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, data, 1, 1);
 801829e:	f107 0114 	add.w	r1, r7, #20
 80182a2:	2301      	movs	r3, #1
 80182a4:	2201      	movs	r2, #1
 80182a6:	480d      	ldr	r0, [pc, #52]	; (80182dc <PIC+0x314>)
 80182a8:	f7f2 fa07 	bl	800a6ba <HAL_SPI_Transmit>

	ii=0;
 80182ac:	2300      	movs	r3, #0
 80182ae:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	do
	{
		q=LeerFlashRel();
 80182b2:	f000 ff9d 	bl	80191f0 <LeerFlashRel>
 80182b6:	4603      	mov	r3, r0
 80182b8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		c=LeerFlashRel();
 80182bc:	f000 ff98 	bl	80191f0 <LeerFlashRel>
 80182c0:	4603      	mov	r3, r0
 80182c2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		for(i=0;i<q*2;i++)
 80182c6:	2300      	movs	r3, #0
 80182c8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80182cc:	e038      	b.n	8018340 <PIC+0x378>
 80182ce:	bf00      	nop
 80182d0:	20009d5c 	.word	0x20009d5c
 80182d4:	48000400 	.word	0x48000400
 80182d8:	48000800 	.word	0x48000800
 80182dc:	20009978 	.word	0x20009978
		{
			data[i]=(uint8_t)(cRGB[c]>>8);
 80182e0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80182e4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80182e8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80182ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80182f0:	0a1b      	lsrs	r3, r3, #8
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	b2d9      	uxtb	r1, r3
 80182f6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80182fa:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 80182fe:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8018302:	4413      	add	r3, r2
 8018304:	460a      	mov	r2, r1
 8018306:	701a      	strb	r2, [r3, #0]
			i++;
 8018308:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801830c:	3301      	adds	r3, #1
 801830e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			data[i]=(uint8_t)(cRGB[c] & 0x00FF);
 8018312:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018316:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801831a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801831e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018322:	b2d9      	uxtb	r1, r3
 8018324:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8018328:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 801832c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8018330:	4413      	add	r3, r2
 8018332:	460a      	mov	r2, r1
 8018334:	701a      	strb	r2, [r3, #0]
		for(i=0;i<q*2;i++)
 8018336:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801833a:	3301      	adds	r3, #1
 801833c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8018340:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8018344:	005b      	lsls	r3, r3, #1
 8018346:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801834a:	429a      	cmp	r2, r3
 801834c:	d3c8      	bcc.n	80182e0 <PIC+0x318>
		}
		TFT_DC_DATA;
 801834e:	2201      	movs	r2, #1
 8018350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018354:	4812      	ldr	r0, [pc, #72]	; (80183a0 <PIC+0x3d8>)
 8018356:	f7ee ff67 	bl	8007228 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&lcd_spi,data,q*2,100);
 801835a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801835e:	b29b      	uxth	r3, r3
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	b29a      	uxth	r2, r3
 8018364:	f107 0114 	add.w	r1, r7, #20
 8018368:	2364      	movs	r3, #100	; 0x64
 801836a:	480e      	ldr	r0, [pc, #56]	; (80183a4 <PIC+0x3dc>)
 801836c:	f7f2 f9a5 	bl	800a6ba <HAL_SPI_Transmit>
		ii=ii+q;
 8018370:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8018374:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8018378:	4413      	add	r3, r2
 801837a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

	}while(ii<Peso);
 801837e:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8018382:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8018386:	429a      	cmp	r2, r3
 8018388:	d393      	bcc.n	80182b2 <PIC+0x2ea>

//	sprintf(data,"%X %X %X %X",R,G,B,RGB);
//	ILI9341_Draw_String(0,80,WHITE,0x0010,data,4);

	TFT_CS_OFF;
 801838a:	2201      	movs	r2, #1
 801838c:	2180      	movs	r1, #128	; 0x80
 801838e:	4804      	ldr	r0, [pc, #16]	; (80183a0 <PIC+0x3d8>)
 8018390:	f7ee ff4a 	bl	8007228 <HAL_GPIO_WritePin>
}
 8018394:	bf00      	nop
 8018396:	f207 4754 	addw	r7, r7, #1108	; 0x454
 801839a:	46bd      	mov	sp, r7
 801839c:	bd90      	pop	{r4, r7, pc}
 801839e:	bf00      	nop
 80183a0:	48000800 	.word	0x48000800
 80183a4:	20009978 	.word	0x20009978

080183a8 <f_BMP>:

void f_BMP(char* File,unsigned int x,unsigned int y)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	f6ad 1d78 	subw	sp, sp, #2424	; 0x978
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80183b4:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80183b8:	6018      	str	r0, [r3, #0]
 80183ba:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80183be:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 80183c2:	6019      	str	r1, [r3, #0]
 80183c4:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80183c8:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 80183cc:	601a      	str	r2, [r3, #0]
	unsigned char 	dataIn[256],color[4],c;
	unsigned int 	col_16,TablaCol[256];
	UINT 			br,ERROR_SD;
	FIL Fil;

	TP_CS_OFF;
 80183ce:	2201      	movs	r2, #1
 80183d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80183d4:	48d2      	ldr	r0, [pc, #840]	; (8018720 <f_BMP+0x378>)
 80183d6:	f7ee ff27 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_OFF;
 80183da:	2201      	movs	r2, #1
 80183dc:	2180      	movs	r1, #128	; 0x80
 80183de:	48d1      	ldr	r0, [pc, #836]	; (8018724 <f_BMP+0x37c>)
 80183e0:	f7ee ff22 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_ON;
 80183e4:	2200      	movs	r2, #0
 80183e6:	2108      	movs	r1, #8
 80183e8:	48ce      	ldr	r0, [pc, #824]	; (8018724 <f_BMP+0x37c>)
 80183ea:	f7ee ff1d 	bl	8007228 <HAL_GPIO_WritePin>

	f_open(&Fil,File,FA_READ);
 80183ee:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80183f2:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80183f6:	f107 0014 	add.w	r0, r7, #20
 80183fa:	2201      	movs	r2, #1
 80183fc:	6819      	ldr	r1, [r3, #0]
 80183fe:	f7fd fb8d 	bl	8015b1c <f_open>
	f_read(&Fil,dataIn,54,&br);
 8018402:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8018406:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 801840a:	f107 0014 	add.w	r0, r7, #20
 801840e:	2236      	movs	r2, #54	; 0x36
 8018410:	f7fd fe06 	bl	8016020 <f_read>

	uint32_t	AnchoBMP=(unsigned int)dataIn[0x12]+(unsigned int)dataIn[0x13]*256;
 8018414:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018418:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801841c:	7c9b      	ldrb	r3, [r3, #18]
 801841e:	461a      	mov	r2, r3
 8018420:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018424:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018428:	7cdb      	ldrb	r3, [r3, #19]
 801842a:	021b      	lsls	r3, r3, #8
 801842c:	4413      	add	r3, r2
 801842e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
	uint32_t	AltoBMP=(unsigned int)dataIn[0x16]+(unsigned int)dataIn[0x17]*256;
 8018432:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018436:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801843a:	7d9b      	ldrb	r3, [r3, #22]
 801843c:	461a      	mov	r2, r3
 801843e:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018442:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018446:	7ddb      	ldrb	r3, [r3, #23]
 8018448:	021b      	lsls	r3, r3, #8
 801844a:	4413      	add	r3, r2
 801844c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
	uint32_t	OffsetArray=(unsigned int)dataIn[0x0A]+(unsigned int)dataIn[0x0B]*256;
 8018450:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018454:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018458:	7a9b      	ldrb	r3, [r3, #10]
 801845a:	461a      	mov	r2, r3
 801845c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018460:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018464:	7adb      	ldrb	r3, [r3, #11]
 8018466:	021b      	lsls	r3, r3, #8
 8018468:	4413      	add	r3, r2
 801846a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
	uint32_t	LargoTablaColores=(unsigned int)dataIn[0x2E]+(unsigned int)dataIn[0x2F]*256;
 801846e:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018472:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018476:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801847a:	461a      	mov	r2, r3
 801847c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018480:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8018484:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018488:	021b      	lsls	r3, r3, #8
 801848a:	4413      	add	r3, r2
 801848c:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c

	for(i=0;i<LargoTablaColores;i++)
 8018490:	2300      	movs	r3, #0
 8018492:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8018496:	e02f      	b.n	80184f8 <f_BMP+0x150>
	{
		f_read(&Fil,color,4,&br);
 8018498:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801849c:	f207 6144 	addw	r1, r7, #1604	; 0x644
 80184a0:	f107 0014 	add.w	r0, r7, #20
 80184a4:	2204      	movs	r2, #4
 80184a6:	f7fd fdbb 	bl	8016020 <f_read>
		TablaCol[i]=(color[2]/8)*2048+(color[1]/4)*32+(color[0])/8;
 80184aa:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80184ae:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80184b2:	789b      	ldrb	r3, [r3, #2]
 80184b4:	08db      	lsrs	r3, r3, #3
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	019b      	lsls	r3, r3, #6
 80184ba:	f607 1278 	addw	r2, r7, #2424	; 0x978
 80184be:	f5a2 724d 	sub.w	r2, r2, #820	; 0x334
 80184c2:	7852      	ldrb	r2, [r2, #1]
 80184c4:	0892      	lsrs	r2, r2, #2
 80184c6:	b2d2      	uxtb	r2, r2
 80184c8:	4413      	add	r3, r2
 80184ca:	015b      	lsls	r3, r3, #5
 80184cc:	f607 1278 	addw	r2, r7, #2424	; 0x978
 80184d0:	f5a2 724d 	sub.w	r2, r2, #820	; 0x334
 80184d4:	7812      	ldrb	r2, [r2, #0]
 80184d6:	08d2      	lsrs	r2, r2, #3
 80184d8:	b2d2      	uxtb	r2, r2
 80184da:	4413      	add	r3, r2
 80184dc:	4619      	mov	r1, r3
 80184de:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80184e2:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 80184e6:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 80184ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i=0;i<LargoTablaColores;i++)
 80184ee:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80184f2:	3301      	adds	r3, #1
 80184f4:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80184f8:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 80184fc:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8018500:	429a      	cmp	r2, r3
 8018502:	d3c9      	bcc.n	8018498 <f_BMP+0xf0>
	}

	f_lseek(&Fil,OffsetArray);
 8018504:	f107 0314 	add.w	r3, r7, #20
 8018508:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 801850c:	4618      	mov	r0, r3
 801850e:	f7fd ffd4 	bl	80164ba <f_lseek>
	uint32_t Peso=AnchoBMP*AltoBMP;
 8018512:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8018516:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 801851a:	fb02 f303 	mul.w	r3, r2, r3
 801851e:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958

	SD_CS_OFF;
 8018522:	2201      	movs	r2, #1
 8018524:	2108      	movs	r1, #8
 8018526:	487f      	ldr	r0, [pc, #508]	; (8018724 <f_BMP+0x37c>)
 8018528:	f7ee fe7e 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801852c:	2200      	movs	r2, #0
 801852e:	2180      	movs	r1, #128	; 0x80
 8018530:	487c      	ldr	r0, [pc, #496]	; (8018724 <f_BMP+0x37c>)
 8018532:	f7ee fe79 	bl	8007228 <HAL_GPIO_WritePin>
	ILI9341_Set_Rotation(4);
 8018536:	2004      	movs	r0, #4
 8018538:	f7f8 fe48 	bl	80111cc <ILI9341_Set_Rotation>
	unsigned int x1=x;
 801853c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018540:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
	unsigned int y1=240-(unsigned int)AltoBMP-y;
 801854a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 801854e:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8018552:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	4413      	add	r3, r2
 801855a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 801855e:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
	unsigned int x2=AnchoBMP+x-1;
 8018562:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018566:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 801856a:	f8d7 2968 	ldr.w	r2, [r7, #2408]	; 0x968
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4413      	add	r3, r2
 8018572:	3b01      	subs	r3, #1
 8018574:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
	unsigned int y2=239-y;
 8018578:	f607 1378 	addw	r3, r7, #2424	; 0x978
 801857c:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8018586:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
	ILI9341_Set_Address(x1,y1,x2,y2);
 801858a:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 801858e:	f8d7 294c 	ldr.w	r2, [r7, #2380]	; 0x94c
 8018592:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 8018596:	f8d7 0954 	ldr.w	r0, [r7, #2388]	; 0x954
 801859a:	f7f8 fe9b 	bl	80112d4 <ILI9341_Set_Address>
	TFT_DC_COMMAND;
 801859e:	2200      	movs	r2, #0
 80185a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80185a4:	485f      	ldr	r0, [pc, #380]	; (8018724 <f_BMP+0x37c>)
 80185a6:	f7ee fe3f 	bl	8007228 <HAL_GPIO_WritePin>
	dataIn[0]=0x2C;
 80185aa:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80185ae:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80185b2:	222c      	movs	r2, #44	; 0x2c
 80185b4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, dataIn, 1, 1);
 80185b6:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 80185ba:	2301      	movs	r3, #1
 80185bc:	2201      	movs	r2, #1
 80185be:	485a      	ldr	r0, [pc, #360]	; (8018728 <f_BMP+0x380>)
 80185c0:	f7f2 f87b 	bl	800a6ba <HAL_SPI_Transmit>
	TFT_CS_OFF;
 80185c4:	2201      	movs	r2, #1
 80185c6:	2180      	movs	r1, #128	; 0x80
 80185c8:	4856      	ldr	r0, [pc, #344]	; (8018724 <f_BMP+0x37c>)
 80185ca:	f7ee fe2d 	bl	8007228 <HAL_GPIO_WritePin>
	DWORD sect ;

	for(i=0;i<Peso;i=i+256)
 80185ce:	2300      	movs	r3, #0
 80185d0:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80185d4:	e083      	b.n	80186de <f_BMP+0x336>
	{
		TFT_CS_OFF;
 80185d6:	2201      	movs	r2, #1
 80185d8:	2180      	movs	r1, #128	; 0x80
 80185da:	4852      	ldr	r0, [pc, #328]	; (8018724 <f_BMP+0x37c>)
 80185dc:	f7ee fe24 	bl	8007228 <HAL_GPIO_WritePin>
		SD_CS_ON;
 80185e0:	2200      	movs	r2, #0
 80185e2:	2108      	movs	r1, #8
 80185e4:	484f      	ldr	r0, [pc, #316]	; (8018724 <f_BMP+0x37c>)
 80185e6:	f7ee fe1f 	bl	8007228 <HAL_GPIO_WritePin>

		f_read(&Fil,dataIn,256,&br);
 80185ea:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80185ee:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 80185f2:	f107 0014 	add.w	r0, r7, #20
 80185f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80185fa:	f7fd fd11 	bl	8016020 <f_read>
		for(ii=0,iii=0;ii<256;ii++,iii++)
 80185fe:	2300      	movs	r3, #0
 8018600:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8018604:	2300      	movs	r3, #0
 8018606:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 801860a:	e041      	b.n	8018690 <f_BMP+0x2e8>
		{
			dataOut[iii]=TablaCol[dataIn[ii]]>>8;
 801860c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018610:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8018614:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8018618:	4413      	add	r3, r2
 801861a:	781b      	ldrb	r3, [r3, #0]
 801861c:	461a      	mov	r2, r3
 801861e:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018622:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8018626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801862a:	0a1b      	lsrs	r3, r3, #8
 801862c:	b2d9      	uxtb	r1, r3
 801862e:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018632:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8018636:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801863a:	4413      	add	r3, r2
 801863c:	460a      	mov	r2, r1
 801863e:	701a      	strb	r2, [r3, #0]
			iii++;
 8018640:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8018644:	3301      	adds	r3, #1
 8018646:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
			dataOut[iii]=TablaCol[dataIn[ii]];
 801864a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 801864e:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8018652:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8018656:	4413      	add	r3, r2
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	461a      	mov	r2, r3
 801865c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8018660:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8018664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018668:	b2d9      	uxtb	r1, r3
 801866a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 801866e:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8018672:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8018676:	4413      	add	r3, r2
 8018678:	460a      	mov	r2, r1
 801867a:	701a      	strb	r2, [r3, #0]
		for(ii=0,iii=0;ii<256;ii++,iii++)
 801867c:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8018680:	3301      	adds	r3, #1
 8018682:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8018686:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801868a:	3301      	adds	r3, #1
 801868c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8018690:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8018694:	2bff      	cmp	r3, #255	; 0xff
 8018696:	d9b9      	bls.n	801860c <f_BMP+0x264>
		}
		SD_CS_OFF;
 8018698:	2201      	movs	r2, #1
 801869a:	2108      	movs	r1, #8
 801869c:	4821      	ldr	r0, [pc, #132]	; (8018724 <f_BMP+0x37c>)
 801869e:	f7ee fdc3 	bl	8007228 <HAL_GPIO_WritePin>
		TFT_CS_ON;
 80186a2:	2200      	movs	r2, #0
 80186a4:	2180      	movs	r1, #128	; 0x80
 80186a6:	481f      	ldr	r0, [pc, #124]	; (8018724 <f_BMP+0x37c>)
 80186a8:	f7ee fdbe 	bl	8007228 <HAL_GPIO_WritePin>
		TFT_DC_DATA;
 80186ac:	2201      	movs	r2, #1
 80186ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80186b2:	481c      	ldr	r0, [pc, #112]	; (8018724 <f_BMP+0x37c>)
 80186b4:	f7ee fdb8 	bl	8007228 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&lcd_spi,dataOut,512,100);
 80186b8:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 80186bc:	2364      	movs	r3, #100	; 0x64
 80186be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80186c2:	4819      	ldr	r0, [pc, #100]	; (8018728 <f_BMP+0x380>)
 80186c4:	f7f1 fff9 	bl	800a6ba <HAL_SPI_Transmit>
		TFT_CS_OFF;
 80186c8:	2201      	movs	r2, #1
 80186ca:	2180      	movs	r1, #128	; 0x80
 80186cc:	4815      	ldr	r0, [pc, #84]	; (8018724 <f_BMP+0x37c>)
 80186ce:	f7ee fdab 	bl	8007228 <HAL_GPIO_WritePin>
	for(i=0;i<Peso;i=i+256)
 80186d2:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80186d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80186da:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80186de:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 80186e2:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80186e6:	429a      	cmp	r2, r3
 80186e8:	f4ff af75 	bcc.w	80185d6 <f_BMP+0x22e>
	}
	TFT_CS_OFF;
 80186ec:	2201      	movs	r2, #1
 80186ee:	2180      	movs	r1, #128	; 0x80
 80186f0:	480c      	ldr	r0, [pc, #48]	; (8018724 <f_BMP+0x37c>)
 80186f2:	f7ee fd99 	bl	8007228 <HAL_GPIO_WritePin>
	SD_CS_ON;
 80186f6:	2200      	movs	r2, #0
 80186f8:	2108      	movs	r1, #8
 80186fa:	480a      	ldr	r0, [pc, #40]	; (8018724 <f_BMP+0x37c>)
 80186fc:	f7ee fd94 	bl	8007228 <HAL_GPIO_WritePin>
	f_close(&Fil);
 8018700:	f107 0314 	add.w	r3, r7, #20
 8018704:	4618      	mov	r0, r3
 8018706:	f7fd feb0 	bl	801646a <f_close>
	SD_CS_OFF;
 801870a:	2201      	movs	r2, #1
 801870c:	2108      	movs	r1, #8
 801870e:	4805      	ldr	r0, [pc, #20]	; (8018724 <f_BMP+0x37c>)
 8018710:	f7ee fd8a 	bl	8007228 <HAL_GPIO_WritePin>

}
 8018714:	bf00      	nop
 8018716:	f607 1778 	addw	r7, r7, #2424	; 0x978
 801871a:	46bd      	mov	sp, r7
 801871c:	bd80      	pop	{r7, pc}
 801871e:	bf00      	nop
 8018720:	48000400 	.word	0x48000400
 8018724:	48000800 	.word	0x48000800
 8018728:	20009978 	.word	0x20009978

0801872c <FillReg>:


void FillReg(unsigned int x,unsigned int y,
			 unsigned int wx,unsigned int wy,
			 unsigned int color)
{
 801872c:	b590      	push	{r4, r7, lr}
 801872e:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 8018732:	af00      	add	r7, sp, #0
 8018734:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8018738:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 801873c:	6020      	str	r0, [r4, #0]
 801873e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8018742:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8018746:	6001      	str	r1, [r0, #0]
 8018748:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 801874c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8018750:	600a      	str	r2, [r1, #0]
 8018752:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8018756:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 801875a:	6013      	str	r3, [r2, #0]
	SD_CS_OFF;
 801875c:	2201      	movs	r2, #1
 801875e:	2108      	movs	r1, #8
 8018760:	485c      	ldr	r0, [pc, #368]	; (80188d4 <FillReg+0x1a8>)
 8018762:	f7ee fd61 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8018766:	2200      	movs	r2, #0
 8018768:	2180      	movs	r1, #128	; 0x80
 801876a:	485a      	ldr	r0, [pc, #360]	; (80188d4 <FillReg+0x1a8>)
 801876c:	f7ee fd5c 	bl	8007228 <HAL_GPIO_WritePin>

	uint16_t	i;
	uint32_t	Peso=wx*wy;
 8018770:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8018774:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8018778:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 801877c:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	6812      	ldr	r2, [r2, #0]
 8018784:	fb02 f303 	mul.w	r3, r2, r3
 8018788:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

	uint8_t data[640];

	ILI9341_Set_Rotation(4);
 801878c:	2004      	movs	r0, #4
 801878e:	f7f8 fd1d 	bl	80111cc <ILI9341_Set_Rotation>
	unsigned int x1=x;
 8018792:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8018796:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	unsigned int y1=240-wy-y;
 80187a0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80187a4:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 80187a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80187ac:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80187b0:	6812      	ldr	r2, [r2, #0]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	4413      	add	r3, r2
 80187b6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80187ba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	unsigned int x2=wx+x-1;
 80187be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80187c2:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 80187c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80187ca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80187ce:	6812      	ldr	r2, [r2, #0]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	4413      	add	r3, r2
 80187d4:	3b01      	subs	r3, #1
 80187d6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	unsigned int y2=239-y;
 80187da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80187de:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80187e8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	ILI9341_Set_Address(x1,y1,x2,y2);
 80187ec:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80187f0:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80187f4:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80187f8:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 80187fc:	f7f8 fd6a 	bl	80112d4 <ILI9341_Set_Address>

	TFT_DC_COMMAND;
 8018800:	2200      	movs	r2, #0
 8018802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018806:	4833      	ldr	r0, [pc, #204]	; (80188d4 <FillReg+0x1a8>)
 8018808:	f7ee fd0e 	bl	8007228 <HAL_GPIO_WritePin>
	data[0]=0x2C;
 801880c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8018810:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8018814:	222c      	movs	r2, #44	; 0x2c
 8018816:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, data, 1, 1);
 8018818:	f107 0110 	add.w	r1, r7, #16
 801881c:	2301      	movs	r3, #1
 801881e:	2201      	movs	r2, #1
 8018820:	482d      	ldr	r0, [pc, #180]	; (80188d8 <FillReg+0x1ac>)
 8018822:	f7f1 ff4a 	bl	800a6ba <HAL_SPI_Transmit>

	for(i=0;i<wx;i++)
 8018826:	2300      	movs	r3, #0
 8018828:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 801882c:	e01c      	b.n	8018868 <FillReg+0x13c>
	{
			data[i*2]=color>>8;
 801882e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8018832:	0a1a      	lsrs	r2, r3, #8
 8018834:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8018838:	005b      	lsls	r3, r3, #1
 801883a:	b2d1      	uxtb	r1, r2
 801883c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8018840:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8018844:	54d1      	strb	r1, [r2, r3]
			data[i*2+1]=color & 0xff;
 8018846:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 801884a:	005b      	lsls	r3, r3, #1
 801884c:	3301      	adds	r3, #1
 801884e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8018852:	b2d1      	uxtb	r1, r2
 8018854:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8018858:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 801885c:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<wx;i++)
 801885e:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8018862:	3301      	adds	r3, #1
 8018864:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 8018868:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 801886c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8018870:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8018874:	6812      	ldr	r2, [r2, #0]
 8018876:	429a      	cmp	r2, r3
 8018878:	d8d9      	bhi.n	801882e <FillReg+0x102>
	}

	TFT_DC_DATA;
 801887a:	2201      	movs	r2, #1
 801887c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018880:	4814      	ldr	r0, [pc, #80]	; (80188d4 <FillReg+0x1a8>)
 8018882:	f7ee fcd1 	bl	8007228 <HAL_GPIO_WritePin>
	for(i=0;i<wy;i++)
 8018886:	2300      	movs	r3, #0
 8018888:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 801888c:	e012      	b.n	80188b4 <FillReg+0x188>
	{
		HAL_SPI_Transmit(&lcd_spi,data,wx*2,10);
 801888e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8018892:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	b29b      	uxth	r3, r3
 801889a:	005b      	lsls	r3, r3, #1
 801889c:	b29a      	uxth	r2, r3
 801889e:	f107 0110 	add.w	r1, r7, #16
 80188a2:	230a      	movs	r3, #10
 80188a4:	480c      	ldr	r0, [pc, #48]	; (80188d8 <FillReg+0x1ac>)
 80188a6:	f7f1 ff08 	bl	800a6ba <HAL_SPI_Transmit>
	for(i=0;i<wy;i++)
 80188aa:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 80188ae:	3301      	adds	r3, #1
 80188b0:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 80188b4:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 80188b8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80188bc:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80188c0:	6812      	ldr	r2, [r2, #0]
 80188c2:	429a      	cmp	r2, r3
 80188c4:	d8e3      	bhi.n	801888e <FillReg+0x162>
	}

}
 80188c6:	bf00      	nop
 80188c8:	bf00      	nop
 80188ca:	f507 772b 	add.w	r7, r7, #684	; 0x2ac
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd90      	pop	{r4, r7, pc}
 80188d2:	bf00      	nop
 80188d4:	48000800 	.word	0x48000800
 80188d8:	20009978 	.word	0x20009978

080188dc <Encabezamiento3>:
void AtencionTecladoNumerico()
{
    //asmAtencionTecladoNumerico();
}
void Encabezamiento3(char* str)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b086      	sub	sp, #24
 80188e0:	af02      	add	r7, sp, #8
 80188e2:	6078      	str	r0, [r7, #4]
	FillReg(0,0,319,33,0x0010);
 80188e4:	2310      	movs	r3, #16
 80188e6:	9300      	str	r3, [sp, #0]
 80188e8:	2321      	movs	r3, #33	; 0x21
 80188ea:	f240 123f 	movw	r2, #319	; 0x13f
 80188ee:	2100      	movs	r1, #0
 80188f0:	2000      	movs	r0, #0
 80188f2:	f7ff ff1b 	bl	801872c <FillReg>
    uint16_t x=(22-(unsigned char)strlen(str))/2;
 80188f6:	6878      	ldr	r0, [r7, #4]
 80188f8:	f7e7 fc72 	bl	80001e0 <strlen>
 80188fc:	4603      	mov	r3, r0
 80188fe:	b2db      	uxtb	r3, r3
 8018900:	f1c3 0316 	rsb	r3, r3, #22
 8018904:	0fda      	lsrs	r2, r3, #31
 8018906:	4413      	add	r3, r2
 8018908:	105b      	asrs	r3, r3, #1
 801890a:	81fb      	strh	r3, [r7, #14]
    ILI9341_Draw_String(x*14+7, 0, WHITE, 0x0010, str, 4);
 801890c:	89fa      	ldrh	r2, [r7, #14]
 801890e:	4613      	mov	r3, r2
 8018910:	00db      	lsls	r3, r3, #3
 8018912:	1a9b      	subs	r3, r3, r2
 8018914:	005b      	lsls	r3, r3, #1
 8018916:	3307      	adds	r3, #7
 8018918:	4618      	mov	r0, r3
 801891a:	2304      	movs	r3, #4
 801891c:	9301      	str	r3, [sp, #4]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	9300      	str	r3, [sp, #0]
 8018922:	2310      	movs	r3, #16
 8018924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018928:	2100      	movs	r1, #0
 801892a:	f7f8 ff83 	bl	8011834 <ILI9341_Draw_String>
}
 801892e:	bf00      	nop
 8018930:	3710      	adds	r7, #16
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}
	...

08018938 <GraficarOSC>:
void GraficarPWM(void)
{
}

void GraficarOSC(void)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 801893e:	af00      	add	r7, sp, #0
  SD_CS_OFF;
 8018940:	2201      	movs	r2, #1
 8018942:	2108      	movs	r1, #8
 8018944:	48d3      	ldr	r0, [pc, #844]	; (8018c94 <GraficarOSC+0x35c>)
 8018946:	f7ee fc6f 	bl	8007228 <HAL_GPIO_WritePin>
  TFT_CS_ON;
 801894a:	2200      	movs	r2, #0
 801894c:	2180      	movs	r1, #128	; 0x80
 801894e:	48d1      	ldr	r0, [pc, #836]	; (8018c94 <GraficarOSC+0x35c>)
 8018950:	f7ee fc6a 	bl	8007228 <HAL_GPIO_WritePin>

  uint16_t i,x;
  uint8_t data[500];
  uint32_t ya0,yp0,ya1,yp1,ya2,yp2,ya3,yp3;

  ILI9341_Set_Rotation(0);
 8018954:	2000      	movs	r0, #0
 8018956:	f7f8 fc39 	bl	80111cc <ILI9341_Set_Rotation>
  ILI9341_Set_Address(0,0,239,319);
 801895a:	f240 133f 	movw	r3, #319	; 0x13f
 801895e:	22ef      	movs	r2, #239	; 0xef
 8018960:	2100      	movs	r1, #0
 8018962:	2000      	movs	r0, #0
 8018964:	f7f8 fcb6 	bl	80112d4 <ILI9341_Set_Address>

  TFT_DC_COMMAND;
 8018968:	2200      	movs	r2, #0
 801896a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801896e:	48c9      	ldr	r0, [pc, #804]	; (8018c94 <GraficarOSC+0x35c>)
 8018970:	f7ee fc5a 	bl	8007228 <HAL_GPIO_WritePin>
  data[0]=0x2c;
 8018974:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018978:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801897c:	222c      	movs	r2, #44	; 0x2c
 801897e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&lcd_spi,data,1,10);
 8018980:	4639      	mov	r1, r7
 8018982:	230a      	movs	r3, #10
 8018984:	2201      	movs	r2, #1
 8018986:	48c4      	ldr	r0, [pc, #784]	; (8018c98 <GraficarOSC+0x360>)
 8018988:	f7f1 fe97 	bl	800a6ba <HAL_SPI_Transmit>
  TFT_DC_DATA;
 801898c:	2201      	movs	r2, #1
 801898e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018992:	48c0      	ldr	r0, [pc, #768]	; (8018c94 <GraficarOSC+0x35c>)
 8018994:	f7ee fc48 	bl	8007228 <HAL_GPIO_WritePin>
  for(x=0;x<320;x++)
 8018998:	2300      	movs	r3, #0
 801899a:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
 801899e:	e2fa      	b.n	8018f96 <GraficarOSC+0x65e>
  {
	  if(x==0||x==50||x==100||x==150||x==200||x==250||x==300)  for(i=0;i<480;i=i+2) data[i]=0xff,data[i+1]=0xff;
 80189a0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d018      	beq.n	80189da <GraficarOSC+0xa2>
 80189a8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189ac:	2b32      	cmp	r3, #50	; 0x32
 80189ae:	d014      	beq.n	80189da <GraficarOSC+0xa2>
 80189b0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189b4:	2b64      	cmp	r3, #100	; 0x64
 80189b6:	d010      	beq.n	80189da <GraficarOSC+0xa2>
 80189b8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189bc:	2b96      	cmp	r3, #150	; 0x96
 80189be:	d00c      	beq.n	80189da <GraficarOSC+0xa2>
 80189c0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189c4:	2bc8      	cmp	r3, #200	; 0xc8
 80189c6:	d008      	beq.n	80189da <GraficarOSC+0xa2>
 80189c8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189cc:	2bfa      	cmp	r3, #250	; 0xfa
 80189ce:	d004      	beq.n	80189da <GraficarOSC+0xa2>
 80189d0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80189d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80189d8:	d11f      	bne.n	8018a1a <GraficarOSC+0xe2>
 80189da:	2300      	movs	r3, #0
 80189dc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80189e0:	e015      	b.n	8018a0e <GraficarOSC+0xd6>
 80189e2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80189e6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80189ea:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80189ee:	21ff      	movs	r1, #255	; 0xff
 80189f0:	54d1      	strb	r1, [r2, r3]
 80189f2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80189f6:	3301      	adds	r3, #1
 80189f8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80189fc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018a00:	21ff      	movs	r1, #255	; 0xff
 8018a02:	54d1      	strb	r1, [r2, r3]
 8018a04:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018a08:	3302      	adds	r3, #2
 8018a0a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018a0e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018a12:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8018a16:	d3e4      	bcc.n	80189e2 <GraficarOSC+0xaa>
 8018a18:	e01e      	b.n	8018a58 <GraficarOSC+0x120>
	  else for(i=0;i<480;i=i+2) data[i]=0x064,data[i+1]=0xDF;
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018a20:	e015      	b.n	8018a4e <GraficarOSC+0x116>
 8018a22:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018a26:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018a2a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018a2e:	2164      	movs	r1, #100	; 0x64
 8018a30:	54d1      	strb	r1, [r2, r3]
 8018a32:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018a36:	3301      	adds	r3, #1
 8018a38:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018a3c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018a40:	21df      	movs	r1, #223	; 0xdf
 8018a42:	54d1      	strb	r1, [r2, r3]
 8018a44:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018a48:	3302      	adds	r3, #2
 8018a4a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018a4e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018a52:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8018a56:	d3e4      	bcc.n	8018a22 <GraficarOSC+0xea>

	  if(x<=300)
 8018a58:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018a5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018a60:	d85f      	bhi.n	8018b22 <GraficarOSC+0x1ea>
	  {
		  data[0]=0xff;
 8018a62:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018a66:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018a6a:	22ff      	movs	r2, #255	; 0xff
 8018a6c:	701a      	strb	r2, [r3, #0]
		  data[1]=0xff;
 8018a6e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018a72:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018a76:	22ff      	movs	r2, #255	; 0xff
 8018a78:	705a      	strb	r2, [r3, #1]
		  data[80]=0xff;
 8018a7a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018a7e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018a82:	22ff      	movs	r2, #255	; 0xff
 8018a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		  data[81]=0xff;
 8018a88:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018a8c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018a90:	22ff      	movs	r2, #255	; 0xff
 8018a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		  data[160]=0xff;
 8018a96:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018a9a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018a9e:	22ff      	movs	r2, #255	; 0xff
 8018aa0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		  data[161]=0xff;
 8018aa4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018aa8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018aac:	22ff      	movs	r2, #255	; 0xff
 8018aae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		  data[240]=0xff;
 8018ab2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018ab6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018aba:	22ff      	movs	r2, #255	; 0xff
 8018abc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		  data[241]=0xff;
 8018ac0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018ac4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018ac8:	22ff      	movs	r2, #255	; 0xff
 8018aca:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		  data[320]=0xff;
 8018ace:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018ad2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018ad6:	22ff      	movs	r2, #255	; 0xff
 8018ad8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		  data[321]=0xff;
 8018adc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018ae0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018ae4:	22ff      	movs	r2, #255	; 0xff
 8018ae6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		  data[400]=0xff;
 8018aea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018aee:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018af2:	22ff      	movs	r2, #255	; 0xff
 8018af4:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
		  data[401]=0xff;
 8018af8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018afc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018b00:	22ff      	movs	r2, #255	; 0xff
 8018b02:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		  data[479]=0xff;
 8018b06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018b0a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018b0e:	22ff      	movs	r2, #255	; 0xff
 8018b10:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
		  data[480]=0xff;
 8018b14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018b18:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018b1c:	22ff      	movs	r2, #255	; 0xff
 8018b1e:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	  }

	  ya0=(OSCCanal1[x]/120+40)*2;
 8018b22:	4b5e      	ldr	r3, [pc, #376]	; (8018c9c <GraficarOSC+0x364>)
 8018b24:	681a      	ldr	r2, [r3, #0]
 8018b26:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018b2a:	009b      	lsls	r3, r3, #2
 8018b2c:	4413      	add	r3, r2
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	4a5b      	ldr	r2, [pc, #364]	; (8018ca0 <GraficarOSC+0x368>)
 8018b32:	fba2 2303 	umull	r2, r3, r2, r3
 8018b36:	099b      	lsrs	r3, r3, #6
 8018b38:	3328      	adds	r3, #40	; 0x28
 8018b3a:	005b      	lsls	r3, r3, #1
 8018b3c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	  yp0=(OSCCanal1[x+1]/120+40)*2;
 8018b40:	4b56      	ldr	r3, [pc, #344]	; (8018c9c <GraficarOSC+0x364>)
 8018b42:	681a      	ldr	r2, [r3, #0]
 8018b44:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018b48:	3301      	adds	r3, #1
 8018b4a:	009b      	lsls	r3, r3, #2
 8018b4c:	4413      	add	r3, r2
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	4a53      	ldr	r2, [pc, #332]	; (8018ca0 <GraficarOSC+0x368>)
 8018b52:	fba2 2303 	umull	r2, r3, r2, r3
 8018b56:	099b      	lsrs	r3, r3, #6
 8018b58:	3328      	adds	r3, #40	; 0x28
 8018b5a:	005b      	lsls	r3, r3, #1
 8018b5c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	  ya1=(OSCCanal2[x]/120+80)*2;
 8018b60:	4b50      	ldr	r3, [pc, #320]	; (8018ca4 <GraficarOSC+0x36c>)
 8018b62:	681a      	ldr	r2, [r3, #0]
 8018b64:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018b68:	009b      	lsls	r3, r3, #2
 8018b6a:	4413      	add	r3, r2
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	4a4c      	ldr	r2, [pc, #304]	; (8018ca0 <GraficarOSC+0x368>)
 8018b70:	fba2 2303 	umull	r2, r3, r2, r3
 8018b74:	099b      	lsrs	r3, r3, #6
 8018b76:	3350      	adds	r3, #80	; 0x50
 8018b78:	005b      	lsls	r3, r3, #1
 8018b7a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	  yp1=(OSCCanal2[x+1]/120+80)*2;
 8018b7e:	4b49      	ldr	r3, [pc, #292]	; (8018ca4 <GraficarOSC+0x36c>)
 8018b80:	681a      	ldr	r2, [r3, #0]
 8018b82:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018b86:	3301      	adds	r3, #1
 8018b88:	009b      	lsls	r3, r3, #2
 8018b8a:	4413      	add	r3, r2
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	4a44      	ldr	r2, [pc, #272]	; (8018ca0 <GraficarOSC+0x368>)
 8018b90:	fba2 2303 	umull	r2, r3, r2, r3
 8018b94:	099b      	lsrs	r3, r3, #6
 8018b96:	3350      	adds	r3, #80	; 0x50
 8018b98:	005b      	lsls	r3, r3, #1
 8018b9a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	  ya2=(OSCCanal3[x]/120+120)*2;
 8018b9e:	4b42      	ldr	r3, [pc, #264]	; (8018ca8 <GraficarOSC+0x370>)
 8018ba0:	681a      	ldr	r2, [r3, #0]
 8018ba2:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018ba6:	009b      	lsls	r3, r3, #2
 8018ba8:	4413      	add	r3, r2
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	4a3c      	ldr	r2, [pc, #240]	; (8018ca0 <GraficarOSC+0x368>)
 8018bae:	fba2 2303 	umull	r2, r3, r2, r3
 8018bb2:	099b      	lsrs	r3, r3, #6
 8018bb4:	3378      	adds	r3, #120	; 0x78
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	  yp2=(OSCCanal3[x+1]/120+120)*2;
 8018bbc:	4b3a      	ldr	r3, [pc, #232]	; (8018ca8 <GraficarOSC+0x370>)
 8018bbe:	681a      	ldr	r2, [r3, #0]
 8018bc0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018bc4:	3301      	adds	r3, #1
 8018bc6:	009b      	lsls	r3, r3, #2
 8018bc8:	4413      	add	r3, r2
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	4a34      	ldr	r2, [pc, #208]	; (8018ca0 <GraficarOSC+0x368>)
 8018bce:	fba2 2303 	umull	r2, r3, r2, r3
 8018bd2:	099b      	lsrs	r3, r3, #6
 8018bd4:	3378      	adds	r3, #120	; 0x78
 8018bd6:	005b      	lsls	r3, r3, #1
 8018bd8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

	  ya3=(OSCCanal4[x]/120+160)*2;
 8018bdc:	4b33      	ldr	r3, [pc, #204]	; (8018cac <GraficarOSC+0x374>)
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	4413      	add	r3, r2
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	4a2d      	ldr	r2, [pc, #180]	; (8018ca0 <GraficarOSC+0x368>)
 8018bec:	fba2 2303 	umull	r2, r3, r2, r3
 8018bf0:	099b      	lsrs	r3, r3, #6
 8018bf2:	33a0      	adds	r3, #160	; 0xa0
 8018bf4:	005b      	lsls	r3, r3, #1
 8018bf6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	  yp3=(OSCCanal4[x+1]/120+160)*2;
 8018bfa:	4b2c      	ldr	r3, [pc, #176]	; (8018cac <GraficarOSC+0x374>)
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018c02:	3301      	adds	r3, #1
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	4413      	add	r3, r2
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	4a25      	ldr	r2, [pc, #148]	; (8018ca0 <GraficarOSC+0x368>)
 8018c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8018c10:	099b      	lsrs	r3, r3, #6
 8018c12:	33a0      	adds	r3, #160	; 0xa0
 8018c14:	005b      	lsls	r3, r3, #1
 8018c16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

	  if(yp0>ya0) for(i=ya0;i<=yp0 & i<480;i=i+2) data[i]=RED>>8, data[i+1]=RED;
 8018c1a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8018c1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8018c22:	429a      	cmp	r2, r3
 8018c24:	d931      	bls.n	8018c8a <GraficarOSC+0x352>
 8018c26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8018c2a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018c2e:	e015      	b.n	8018c5c <GraficarOSC+0x324>
 8018c30:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018c34:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018c38:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018c3c:	21f8      	movs	r1, #248	; 0xf8
 8018c3e:	54d1      	strb	r1, [r2, r3]
 8018c40:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018c44:	3301      	adds	r3, #1
 8018c46:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018c4a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018c4e:	2100      	movs	r1, #0
 8018c50:	54d1      	strb	r1, [r2, r3]
 8018c52:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018c56:	3302      	adds	r3, #2
 8018c58:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018c5c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018c60:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8018c64:	429a      	cmp	r2, r3
 8018c66:	bf2c      	ite	cs
 8018c68:	2301      	movcs	r3, #1
 8018c6a:	2300      	movcc	r3, #0
 8018c6c:	b2da      	uxtb	r2, r3
 8018c6e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018c72:	f240 11df 	movw	r1, #479	; 0x1df
 8018c76:	428b      	cmp	r3, r1
 8018c78:	bf94      	ite	ls
 8018c7a:	2301      	movls	r3, #1
 8018c7c:	2300      	movhi	r3, #0
 8018c7e:	b2db      	uxtb	r3, r3
 8018c80:	4013      	ands	r3, r2
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d1d3      	bne.n	8018c30 <GraficarOSC+0x2f8>
 8018c88:	e03e      	b.n	8018d08 <GraficarOSC+0x3d0>
	  else for(i=yp0;i<=ya0 & i<480;i=i+2) data[i]=RED>>8, data[i+1]=RED;
 8018c8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8018c8e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018c92:	e023      	b.n	8018cdc <GraficarOSC+0x3a4>
 8018c94:	48000800 	.word	0x48000800
 8018c98:	20009978 	.word	0x20009978
 8018c9c:	200088fc 	.word	0x200088fc
 8018ca0:	88888889 	.word	0x88888889
 8018ca4:	20008900 	.word	0x20008900
 8018ca8:	20008904 	.word	0x20008904
 8018cac:	20008908 	.word	0x20008908
 8018cb0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018cb4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018cb8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018cbc:	21f8      	movs	r1, #248	; 0xf8
 8018cbe:	54d1      	strb	r1, [r2, r3]
 8018cc0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018cca:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018cce:	2100      	movs	r1, #0
 8018cd0:	54d1      	strb	r1, [r2, r3]
 8018cd2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018cd6:	3302      	adds	r3, #2
 8018cd8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018cdc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018ce0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	bf2c      	ite	cs
 8018ce8:	2301      	movcs	r3, #1
 8018cea:	2300      	movcc	r3, #0
 8018cec:	b2da      	uxtb	r2, r3
 8018cee:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018cf2:	f240 11df 	movw	r1, #479	; 0x1df
 8018cf6:	428b      	cmp	r3, r1
 8018cf8:	bf94      	ite	ls
 8018cfa:	2301      	movls	r3, #1
 8018cfc:	2300      	movhi	r3, #0
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	4013      	ands	r3, r2
 8018d02:	b2db      	uxtb	r3, r3
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d1d3      	bne.n	8018cb0 <GraficarOSC+0x378>

	  if(yp1>ya1) for(i=ya1;i<=yp1 & i<480;i=i+2) data[i]=DARKGREEN>>8, data[i+1]=DARKGREEN;
 8018d08:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8018d0c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8018d10:	429a      	cmp	r2, r3
 8018d12:	d931      	bls.n	8018d78 <GraficarOSC+0x440>
 8018d14:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8018d18:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018d1c:	e015      	b.n	8018d4a <GraficarOSC+0x412>
 8018d1e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d22:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018d26:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018d2a:	2103      	movs	r1, #3
 8018d2c:	54d1      	strb	r1, [r2, r3]
 8018d2e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d32:	3301      	adds	r3, #1
 8018d34:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018d38:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018d3c:	21e0      	movs	r1, #224	; 0xe0
 8018d3e:	54d1      	strb	r1, [r2, r3]
 8018d40:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d44:	3302      	adds	r3, #2
 8018d46:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018d4a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d4e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8018d52:	429a      	cmp	r2, r3
 8018d54:	bf2c      	ite	cs
 8018d56:	2301      	movcs	r3, #1
 8018d58:	2300      	movcc	r3, #0
 8018d5a:	b2da      	uxtb	r2, r3
 8018d5c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d60:	f240 11df 	movw	r1, #479	; 0x1df
 8018d64:	428b      	cmp	r3, r1
 8018d66:	bf94      	ite	ls
 8018d68:	2301      	movls	r3, #1
 8018d6a:	2300      	movhi	r3, #0
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	4013      	ands	r3, r2
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d1d3      	bne.n	8018d1e <GraficarOSC+0x3e6>
 8018d76:	e030      	b.n	8018dda <GraficarOSC+0x4a2>
	  else for(i=yp1;i<=ya1 & i<480;i=i+2) data[i]=DARKGREEN>>8, data[i+1]=DARKGREEN;
 8018d78:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8018d7c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018d80:	e015      	b.n	8018dae <GraficarOSC+0x476>
 8018d82:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d86:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018d8a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018d8e:	2103      	movs	r1, #3
 8018d90:	54d1      	strb	r1, [r2, r3]
 8018d92:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018d96:	3301      	adds	r3, #1
 8018d98:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018d9c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018da0:	21e0      	movs	r1, #224	; 0xe0
 8018da2:	54d1      	strb	r1, [r2, r3]
 8018da4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018da8:	3302      	adds	r3, #2
 8018daa:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018dae:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018db2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8018db6:	429a      	cmp	r2, r3
 8018db8:	bf2c      	ite	cs
 8018dba:	2301      	movcs	r3, #1
 8018dbc:	2300      	movcc	r3, #0
 8018dbe:	b2da      	uxtb	r2, r3
 8018dc0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018dc4:	f240 11df 	movw	r1, #479	; 0x1df
 8018dc8:	428b      	cmp	r3, r1
 8018dca:	bf94      	ite	ls
 8018dcc:	2301      	movls	r3, #1
 8018dce:	2300      	movhi	r3, #0
 8018dd0:	b2db      	uxtb	r3, r3
 8018dd2:	4013      	ands	r3, r2
 8018dd4:	b2db      	uxtb	r3, r3
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d1d3      	bne.n	8018d82 <GraficarOSC+0x44a>

	  if(yp2>ya2) for(i=ya2;i<=yp2 & i<480;i=i+2) data[i]=YELLOW>>8, data[i+1]=YELLOW;
 8018dda:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8018dde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d931      	bls.n	8018e4a <GraficarOSC+0x512>
 8018de6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8018dea:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018dee:	e015      	b.n	8018e1c <GraficarOSC+0x4e4>
 8018df0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018df4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018df8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018dfc:	21ff      	movs	r1, #255	; 0xff
 8018dfe:	54d1      	strb	r1, [r2, r3]
 8018e00:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e04:	3301      	adds	r3, #1
 8018e06:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018e0a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018e0e:	21e0      	movs	r1, #224	; 0xe0
 8018e10:	54d1      	strb	r1, [r2, r3]
 8018e12:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e16:	3302      	adds	r3, #2
 8018e18:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018e1c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e20:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8018e24:	429a      	cmp	r2, r3
 8018e26:	bf2c      	ite	cs
 8018e28:	2301      	movcs	r3, #1
 8018e2a:	2300      	movcc	r3, #0
 8018e2c:	b2da      	uxtb	r2, r3
 8018e2e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e32:	f240 11df 	movw	r1, #479	; 0x1df
 8018e36:	428b      	cmp	r3, r1
 8018e38:	bf94      	ite	ls
 8018e3a:	2301      	movls	r3, #1
 8018e3c:	2300      	movhi	r3, #0
 8018e3e:	b2db      	uxtb	r3, r3
 8018e40:	4013      	ands	r3, r2
 8018e42:	b2db      	uxtb	r3, r3
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d1d3      	bne.n	8018df0 <GraficarOSC+0x4b8>
 8018e48:	e030      	b.n	8018eac <GraficarOSC+0x574>
  	  else for(i=yp2;i<=ya2 & i<480;i=i+2) data[i]=YELLOW>>8, data[i+1]=YELLOW;
 8018e4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8018e4e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018e52:	e015      	b.n	8018e80 <GraficarOSC+0x548>
 8018e54:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e58:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018e5c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018e60:	21ff      	movs	r1, #255	; 0xff
 8018e62:	54d1      	strb	r1, [r2, r3]
 8018e64:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e68:	3301      	adds	r3, #1
 8018e6a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018e6e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018e72:	21e0      	movs	r1, #224	; 0xe0
 8018e74:	54d1      	strb	r1, [r2, r3]
 8018e76:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e7a:	3302      	adds	r3, #2
 8018e7c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018e80:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e84:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8018e88:	429a      	cmp	r2, r3
 8018e8a:	bf2c      	ite	cs
 8018e8c:	2301      	movcs	r3, #1
 8018e8e:	2300      	movcc	r3, #0
 8018e90:	b2da      	uxtb	r2, r3
 8018e92:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018e96:	f240 11df 	movw	r1, #479	; 0x1df
 8018e9a:	428b      	cmp	r3, r1
 8018e9c:	bf94      	ite	ls
 8018e9e:	2301      	movls	r3, #1
 8018ea0:	2300      	movhi	r3, #0
 8018ea2:	b2db      	uxtb	r3, r3
 8018ea4:	4013      	ands	r3, r2
 8018ea6:	b2db      	uxtb	r3, r3
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d1d3      	bne.n	8018e54 <GraficarOSC+0x51c>

	  if(yp3>ya3) for(i=ya3;i<=yp3 & i<480;i=i+2) data[i]=PURPLE>>8, data[i+1]=PURPLE;
 8018eac:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8018eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	d931      	bls.n	8018f1c <GraficarOSC+0x5e4>
 8018eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8018ebc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018ec0:	e015      	b.n	8018eee <GraficarOSC+0x5b6>
 8018ec2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018ec6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018eca:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018ece:	2178      	movs	r1, #120	; 0x78
 8018ed0:	54d1      	strb	r1, [r2, r3]
 8018ed2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018ed6:	3301      	adds	r3, #1
 8018ed8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018edc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018ee0:	210f      	movs	r1, #15
 8018ee2:	54d1      	strb	r1, [r2, r3]
 8018ee4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018ee8:	3302      	adds	r3, #2
 8018eea:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018eee:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018ef2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8018ef6:	429a      	cmp	r2, r3
 8018ef8:	bf2c      	ite	cs
 8018efa:	2301      	movcs	r3, #1
 8018efc:	2300      	movcc	r3, #0
 8018efe:	b2da      	uxtb	r2, r3
 8018f00:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018f04:	f240 11df 	movw	r1, #479	; 0x1df
 8018f08:	428b      	cmp	r3, r1
 8018f0a:	bf94      	ite	ls
 8018f0c:	2301      	movls	r3, #1
 8018f0e:	2300      	movhi	r3, #0
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	4013      	ands	r3, r2
 8018f14:	b2db      	uxtb	r3, r3
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d1d3      	bne.n	8018ec2 <GraficarOSC+0x58a>
 8018f1a:	e030      	b.n	8018f7e <GraficarOSC+0x646>
  	  else for(i=yp3;i<=ya3 & i<480;i=i+2) data[i]=PURPLE>>8, data[i+1]=PURPLE;
 8018f1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8018f20:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018f24:	e015      	b.n	8018f52 <GraficarOSC+0x61a>
 8018f26:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018f2a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018f2e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018f32:	2178      	movs	r1, #120	; 0x78
 8018f34:	54d1      	strb	r1, [r2, r3]
 8018f36:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018f40:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018f44:	210f      	movs	r1, #15
 8018f46:	54d1      	strb	r1, [r2, r3]
 8018f48:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018f4c:	3302      	adds	r3, #2
 8018f4e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018f52:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018f56:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	bf2c      	ite	cs
 8018f5e:	2301      	movcs	r3, #1
 8018f60:	2300      	movcc	r3, #0
 8018f62:	b2da      	uxtb	r2, r3
 8018f64:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018f68:	f240 11df 	movw	r1, #479	; 0x1df
 8018f6c:	428b      	cmp	r3, r1
 8018f6e:	bf94      	ite	ls
 8018f70:	2301      	movls	r3, #1
 8018f72:	2300      	movhi	r3, #0
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	4013      	ands	r3, r2
 8018f78:	b2db      	uxtb	r3, r3
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d1d3      	bne.n	8018f26 <GraficarOSC+0x5ee>

	  HAL_SPI_Transmit(&lcd_spi,data,480,10);
 8018f7e:	4639      	mov	r1, r7
 8018f80:	230a      	movs	r3, #10
 8018f82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018f86:	480a      	ldr	r0, [pc, #40]	; (8018fb0 <GraficarOSC+0x678>)
 8018f88:	f7f1 fb97 	bl	800a6ba <HAL_SPI_Transmit>
  for(x=0;x<320;x++)
 8018f8c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018f90:	3301      	adds	r3, #1
 8018f92:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
 8018f96:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018f9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8018f9e:	f4ff acff 	bcc.w	80189a0 <GraficarOSC+0x68>
  }
}
 8018fa2:	bf00      	nop
 8018fa4:	bf00      	nop
 8018fa6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	20009978 	.word	0x20009978

08018fb4 <FondoTeclas>:
void FondoBlanco()
{
	FillReg(0,0,319,200,WHITE);
}
void FondoTeclas()
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af02      	add	r7, sp, #8
	FillReg(0,200,319,39,0x64DF);//azul
 8018fba:	f246 43df 	movw	r3, #25823	; 0x64df
 8018fbe:	9300      	str	r3, [sp, #0]
 8018fc0:	2327      	movs	r3, #39	; 0x27
 8018fc2:	f240 123f 	movw	r2, #319	; 0x13f
 8018fc6:	21c8      	movs	r1, #200	; 0xc8
 8018fc8:	2000      	movs	r0, #0
 8018fca:	f7ff fbaf 	bl	801872c <FillReg>
}
 8018fce:	bf00      	nop
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}

08018fd4 <FondoCompletoAzul>:
void FondoCompletoAzul()
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b082      	sub	sp, #8
 8018fd8:	af02      	add	r7, sp, #8
	FillReg(0,0,320,240,0x64DF);//azul
 8018fda:	f246 43df 	movw	r3, #25823	; 0x64df
 8018fde:	9300      	str	r3, [sp, #0]
 8018fe0:	23f0      	movs	r3, #240	; 0xf0
 8018fe2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8018fe6:	2100      	movs	r1, #0
 8018fe8:	2000      	movs	r0, #0
 8018fea:	f7ff fb9f 	bl	801872c <FillReg>
}
 8018fee:	bf00      	nop
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <DPMChico>:
	TFT_CS_ON;
	ILI9341_Set_Rotation(4);
	ILI9341_Draw_Pixel(orix+x,oriy-y,color);
}
void DPMChico(unsigned int x,unsigned int y,unsigned char LargoBoton,unsigned int ColorFont,unsigned int ColorFondo,char* str)
{
 8018ff4:	b590      	push	{r4, r7, lr}
 8018ff6:	b089      	sub	sp, #36	; 0x24
 8018ff8:	af02      	add	r7, sp, #8
 8018ffa:	60f8      	str	r0, [r7, #12]
 8018ffc:	60b9      	str	r1, [r7, #8]
 8018ffe:	603b      	str	r3, [r7, #0]
 8019000:	4613      	mov	r3, r2
 8019002:	71fb      	strb	r3, [r7, #7]

	SD_CS_OFF;
 8019004:	2201      	movs	r2, #1
 8019006:	2108      	movs	r1, #8
 8019008:	4833      	ldr	r0, [pc, #204]	; (80190d8 <DPMChico+0xe4>)
 801900a:	f7ee f90d 	bl	8007228 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801900e:	2200      	movs	r2, #0
 8019010:	2180      	movs	r1, #128	; 0x80
 8019012:	4831      	ldr	r0, [pc, #196]	; (80190d8 <DPMChico+0xe4>)
 8019014:	f7ee f908 	bl	8007228 <HAL_GPIO_WritePin>

	ILI9341_Set_Rotation(4);
 8019018:	2004      	movs	r0, #4
 801901a:	f7f8 f8d7 	bl	80111cc <ILI9341_Set_Rotation>

    uint16_t xt=x+2+(LargoBoton-(unsigned char)strlen(str))*7;
 801901e:	79fc      	ldrb	r4, [r7, #7]
 8019020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019022:	f7e7 f8dd 	bl	80001e0 <strlen>
 8019026:	4603      	mov	r3, r0
 8019028:	b2db      	uxtb	r3, r3
 801902a:	1ae3      	subs	r3, r4, r3
 801902c:	b29b      	uxth	r3, r3
 801902e:	461a      	mov	r2, r3
 8019030:	00d2      	lsls	r2, r2, #3
 8019032:	1ad3      	subs	r3, r2, r3
 8019034:	b29a      	uxth	r2, r3
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	b29b      	uxth	r3, r3
 801903a:	4413      	add	r3, r2
 801903c:	b29b      	uxth	r3, r3
 801903e:	3302      	adds	r3, #2
 8019040:	82fb      	strh	r3, [r7, #22]
    uint16_t yt=y+3;
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	b29b      	uxth	r3, r3
 8019046:	3303      	adds	r3, #3
 8019048:	82bb      	strh	r3, [r7, #20]
    uint16_t wx=LargoBoton*14;
 801904a:	79fb      	ldrb	r3, [r7, #7]
 801904c:	b29b      	uxth	r3, r3
 801904e:	461a      	mov	r2, r3
 8019050:	00d2      	lsls	r2, r2, #3
 8019052:	1ad3      	subs	r3, r2, r3
 8019054:	005b      	lsls	r3, r3, #1
 8019056:	827b      	strh	r3, [r7, #18]
    uint16_t wy=35;
 8019058:	2323      	movs	r3, #35	; 0x23
 801905a:	823b      	strh	r3, [r7, #16]

    FillReg(x+2,y+2,wx-2,35,ColorFondo);
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	1c98      	adds	r0, r3, #2
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	1c99      	adds	r1, r3, #2
 8019064:	8a7b      	ldrh	r3, [r7, #18]
 8019066:	3b02      	subs	r3, #2
 8019068:	461a      	mov	r2, r3
 801906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801906c:	9300      	str	r3, [sp, #0]
 801906e:	2323      	movs	r3, #35	; 0x23
 8019070:	f7ff fb5c 	bl	801872c <FillReg>
   	ILI9341_Draw_String(xt,yt,ColorFont,ColorFondo,str,4);
 8019074:	8af8      	ldrh	r0, [r7, #22]
 8019076:	8ab9      	ldrh	r1, [r7, #20]
 8019078:	2304      	movs	r3, #4
 801907a:	9301      	str	r3, [sp, #4]
 801907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801907e:	9300      	str	r3, [sp, #0]
 8019080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019082:	683a      	ldr	r2, [r7, #0]
 8019084:	f7f8 fbd6 	bl	8011834 <ILI9341_Draw_String>
   	FillReg(x   ,y	 ,wx  ,2  ,0);
 8019088:	8a7a      	ldrh	r2, [r7, #18]
 801908a:	2300      	movs	r3, #0
 801908c:	9300      	str	r3, [sp, #0]
 801908e:	2302      	movs	r3, #2
 8019090:	68b9      	ldr	r1, [r7, #8]
 8019092:	68f8      	ldr	r0, [r7, #12]
 8019094:	f7ff fb4a 	bl	801872c <FillReg>
   	FillReg(x	,y	 ,2	  ,37 ,0);
 8019098:	2300      	movs	r3, #0
 801909a:	9300      	str	r3, [sp, #0]
 801909c:	2325      	movs	r3, #37	; 0x25
 801909e:	2202      	movs	r2, #2
 80190a0:	68b9      	ldr	r1, [r7, #8]
 80190a2:	68f8      	ldr	r0, [r7, #12]
 80190a4:	f7ff fb42 	bl	801872c <FillReg>
   	FillReg(x+wx,y	 ,2	  ,37 ,0);
 80190a8:	8a7a      	ldrh	r2, [r7, #18]
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	18d0      	adds	r0, r2, r3
 80190ae:	2300      	movs	r3, #0
 80190b0:	9300      	str	r3, [sp, #0]
 80190b2:	2325      	movs	r3, #37	; 0x25
 80190b4:	2202      	movs	r2, #2
 80190b6:	68b9      	ldr	r1, [r7, #8]
 80190b8:	f7ff fb38 	bl	801872c <FillReg>
   	FillReg(x	,y+35,wx  ,2  ,0);
 80190bc:	68bb      	ldr	r3, [r7, #8]
 80190be:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80190c2:	8a7a      	ldrh	r2, [r7, #18]
 80190c4:	2300      	movs	r3, #0
 80190c6:	9300      	str	r3, [sp, #0]
 80190c8:	2302      	movs	r3, #2
 80190ca:	68f8      	ldr	r0, [r7, #12]
 80190cc:	f7ff fb2e 	bl	801872c <FillReg>
}
 80190d0:	bf00      	nop
 80190d2:	371c      	adds	r7, #28
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd90      	pop	{r4, r7, pc}
 80190d8:	48000800 	.word	0x48000800

080190dc <BOW_Activo>:
    ) return 1;
    return 0;
}

unsigned char  BOW_Activo(unsigned int x,unsigned int y,unsigned char LargoBoton)
{
 80190dc:	b480      	push	{r7}
 80190de:	b085      	sub	sp, #20
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	60f8      	str	r0, [r7, #12]
 80190e4:	60b9      	str	r1, [r7, #8]
 80190e6:	4613      	mov	r3, r2
 80190e8:	71fb      	strb	r3, [r7, #7]
    if
    (
      (m_XPanel>x && m_XPanel<(x+7+14*LargoBoton ) )
 80190ea:	4b13      	ldr	r3, [pc, #76]	; (8019138 <BOW_Activo+0x5c>)
 80190ec:	681b      	ldr	r3, [r3, #0]
    (
 80190ee:	68fa      	ldr	r2, [r7, #12]
 80190f0:	429a      	cmp	r2, r3
 80190f2:	d21a      	bcs.n	801912a <BOW_Activo+0x4e>
      (m_XPanel>x && m_XPanel<(x+7+14*LargoBoton ) )
 80190f4:	79fa      	ldrb	r2, [r7, #7]
 80190f6:	4613      	mov	r3, r2
 80190f8:	00db      	lsls	r3, r3, #3
 80190fa:	1a9b      	subs	r3, r3, r2
 80190fc:	005b      	lsls	r3, r3, #1
 80190fe:	461a      	mov	r2, r3
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	4413      	add	r3, r2
 8019104:	1dda      	adds	r2, r3, #7
 8019106:	4b0c      	ldr	r3, [pc, #48]	; (8019138 <BOW_Activo+0x5c>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	429a      	cmp	r2, r3
 801910c:	d90d      	bls.n	801912a <BOW_Activo+0x4e>
      &&
      (m_YPanel>y && m_YPanel<(y+30 ) )
 801910e:	4b0b      	ldr	r3, [pc, #44]	; (801913c <BOW_Activo+0x60>)
 8019110:	681b      	ldr	r3, [r3, #0]
      &&
 8019112:	68ba      	ldr	r2, [r7, #8]
 8019114:	429a      	cmp	r2, r3
 8019116:	d208      	bcs.n	801912a <BOW_Activo+0x4e>
      (m_YPanel>y && m_YPanel<(y+30 ) )
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	f103 021e 	add.w	r2, r3, #30
 801911e:	4b07      	ldr	r3, [pc, #28]	; (801913c <BOW_Activo+0x60>)
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	429a      	cmp	r2, r3
 8019124:	d901      	bls.n	801912a <BOW_Activo+0x4e>
    ) return 1;
 8019126:	2301      	movs	r3, #1
 8019128:	e000      	b.n	801912c <BOW_Activo+0x50>
    else return 0;
 801912a:	2300      	movs	r3, #0
}
 801912c:	4618      	mov	r0, r3
 801912e:	3714      	adds	r7, #20
 8019130:	46bd      	mov	sp, r7
 8019132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019136:	4770      	bx	lr
 8019138:	2000a098 	.word	0x2000a098
 801913c:	2000a09c 	.word	0x2000a09c

08019140 <BOT_Activo>:
{
	return BOW_Activo(col*14,38*fil,LargoBoton*14);
}

unsigned char  BOT_Activo(unsigned char* ID,unsigned int x,unsigned int y)
{
 8019140:	b480      	push	{r7}
 8019142:	b087      	sub	sp, #28
 8019144:	af00      	add	r7, sp, #0
 8019146:	60f8      	str	r0, [r7, #12]
 8019148:	60b9      	str	r1, [r7, #8]
 801914a:	607a      	str	r2, [r7, #4]
	int	AnchoBMP=(unsigned int)ID[0]*256+(unsigned int)ID[1];
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	021b      	lsls	r3, r3, #8
 8019152:	68fa      	ldr	r2, [r7, #12]
 8019154:	3201      	adds	r2, #1
 8019156:	7812      	ldrb	r2, [r2, #0]
 8019158:	4413      	add	r3, r2
 801915a:	617b      	str	r3, [r7, #20]
	int AltoBMP=(unsigned int)ID[2]*256+(unsigned int)ID[3];
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	3302      	adds	r3, #2
 8019160:	781b      	ldrb	r3, [r3, #0]
 8019162:	021b      	lsls	r3, r3, #8
 8019164:	68fa      	ldr	r2, [r7, #12]
 8019166:	3203      	adds	r2, #3
 8019168:	7812      	ldrb	r2, [r2, #0]
 801916a:	4413      	add	r3, r2
 801916c:	613b      	str	r3, [r7, #16]
    if
    (
      (m_XPanel>x && m_XPanel<(x+AnchoBMP) )
 801916e:	4b10      	ldr	r3, [pc, #64]	; (80191b0 <BOT_Activo+0x70>)
 8019170:	681b      	ldr	r3, [r3, #0]
    (
 8019172:	68ba      	ldr	r2, [r7, #8]
 8019174:	429a      	cmp	r2, r3
 8019176:	d214      	bcs.n	80191a2 <BOT_Activo+0x62>
      (m_XPanel>x && m_XPanel<(x+AnchoBMP) )
 8019178:	697a      	ldr	r2, [r7, #20]
 801917a:	68bb      	ldr	r3, [r7, #8]
 801917c:	441a      	add	r2, r3
 801917e:	4b0c      	ldr	r3, [pc, #48]	; (80191b0 <BOT_Activo+0x70>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	429a      	cmp	r2, r3
 8019184:	d90d      	bls.n	80191a2 <BOT_Activo+0x62>
      &&
      (m_YPanel>y && m_YPanel<(y+AltoBMP) )
 8019186:	4b0b      	ldr	r3, [pc, #44]	; (80191b4 <BOT_Activo+0x74>)
 8019188:	681b      	ldr	r3, [r3, #0]
      &&
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	429a      	cmp	r2, r3
 801918e:	d208      	bcs.n	80191a2 <BOT_Activo+0x62>
      (m_YPanel>y && m_YPanel<(y+AltoBMP) )
 8019190:	693a      	ldr	r2, [r7, #16]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	441a      	add	r2, r3
 8019196:	4b07      	ldr	r3, [pc, #28]	; (80191b4 <BOT_Activo+0x74>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	429a      	cmp	r2, r3
 801919c:	d901      	bls.n	80191a2 <BOT_Activo+0x62>
    ) return 1;
 801919e:	2301      	movs	r3, #1
 80191a0:	e000      	b.n	80191a4 <BOT_Activo+0x64>
    else return 0;
 80191a2:	2300      	movs	r3, #0
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	371c      	adds	r7, #28
 80191a8:	46bd      	mov	sp, r7
 80191aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ae:	4770      	bx	lr
 80191b0:	2000a098 	.word	0x2000a098
 80191b4:	2000a09c 	.word	0x2000a09c

080191b8 <LeerFlashAbs>:

unsigned char LeerFlashAbs(unsigned long Pos);
unsigned char LeerFlashRel();

unsigned char LeerFlashAbs(unsigned long Pos)
{
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
	m_PosFlashST=Pos;
 80191c0:	4a09      	ldr	r2, [pc, #36]	; (80191e8 <LeerFlashAbs+0x30>)
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	6013      	str	r3, [r2, #0]
	m_PosFlashST++;
 80191c6:	4b08      	ldr	r3, [pc, #32]	; (80191e8 <LeerFlashAbs+0x30>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	3301      	adds	r3, #1
 80191cc:	4a06      	ldr	r2, [pc, #24]	; (80191e8 <LeerFlashAbs+0x30>)
 80191ce:	6013      	str	r3, [r2, #0]
	return m_Memoria[Pos];
 80191d0:	4b06      	ldr	r3, [pc, #24]	; (80191ec <LeerFlashAbs+0x34>)
 80191d2:	681a      	ldr	r2, [r3, #0]
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	4413      	add	r3, r2
 80191d8:	781b      	ldrb	r3, [r3, #0]
}
 80191da:	4618      	mov	r0, r3
 80191dc:	370c      	adds	r7, #12
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr
 80191e6:	bf00      	nop
 80191e8:	2000a094 	.word	0x2000a094
 80191ec:	20009d5c 	.word	0x20009d5c

080191f0 <LeerFlashRel>:

unsigned char LeerFlashRel()
{
 80191f0:	b480      	push	{r7}
 80191f2:	b083      	sub	sp, #12
 80191f4:	af00      	add	r7, sp, #0
	unsigned char a=m_Memoria[m_PosFlashST];
 80191f6:	4b09      	ldr	r3, [pc, #36]	; (801921c <LeerFlashRel+0x2c>)
 80191f8:	681a      	ldr	r2, [r3, #0]
 80191fa:	4b09      	ldr	r3, [pc, #36]	; (8019220 <LeerFlashRel+0x30>)
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	4413      	add	r3, r2
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	71fb      	strb	r3, [r7, #7]
	m_PosFlashST++;
 8019204:	4b06      	ldr	r3, [pc, #24]	; (8019220 <LeerFlashRel+0x30>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	3301      	adds	r3, #1
 801920a:	4a05      	ldr	r2, [pc, #20]	; (8019220 <LeerFlashRel+0x30>)
 801920c:	6013      	str	r3, [r2, #0]
	return a;
 801920e:	79fb      	ldrb	r3, [r7, #7]
}
 8019210:	4618      	mov	r0, r3
 8019212:	370c      	adds	r7, #12
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr
 801921c:	20009d5c 	.word	0x20009d5c
 8019220:	2000a094 	.word	0x2000a094

08019224 <MenuSet>:
{

}

void MenuSet(unsigned char MenuNro,char* Buffer,unsigned int PantallaProx)
{
 8019224:	b480      	push	{r7}
 8019226:	b087      	sub	sp, #28
 8019228:	af00      	add	r7, sp, #0
 801922a:	4603      	mov	r3, r0
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	607a      	str	r2, [r7, #4]
 8019230:	73fb      	strb	r3, [r7, #15]
	int i;

	if(MenuNro==0) m_MenuMax=0,m_PantallaExt=0;
 8019232:	7bfb      	ldrb	r3, [r7, #15]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d105      	bne.n	8019244 <MenuSet+0x20>
 8019238:	4b25      	ldr	r3, [pc, #148]	; (80192d0 <MenuSet+0xac>)
 801923a:	2200      	movs	r2, #0
 801923c:	601a      	str	r2, [r3, #0]
 801923e:	4b25      	ldr	r3, [pc, #148]	; (80192d4 <MenuSet+0xb0>)
 8019240:	2200      	movs	r2, #0
 8019242:	601a      	str	r2, [r3, #0]
	for(i=0;Buffer[i]!=0 && i<20;i++) m_MenuStr[MenuNro][i]=Buffer[i];
 8019244:	2300      	movs	r3, #0
 8019246:	617b      	str	r3, [r7, #20]
 8019248:	e012      	b.n	8019270 <MenuSet+0x4c>
 801924a:	697b      	ldr	r3, [r7, #20]
 801924c:	68ba      	ldr	r2, [r7, #8]
 801924e:	4413      	add	r3, r2
 8019250:	7bfa      	ldrb	r2, [r7, #15]
 8019252:	7818      	ldrb	r0, [r3, #0]
 8019254:	4920      	ldr	r1, [pc, #128]	; (80192d8 <MenuSet+0xb4>)
 8019256:	4613      	mov	r3, r2
 8019258:	009b      	lsls	r3, r3, #2
 801925a:	4413      	add	r3, r2
 801925c:	009a      	lsls	r2, r3, #2
 801925e:	4413      	add	r3, r2
 8019260:	18ca      	adds	r2, r1, r3
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	4413      	add	r3, r2
 8019266:	4602      	mov	r2, r0
 8019268:	701a      	strb	r2, [r3, #0]
 801926a:	697b      	ldr	r3, [r7, #20]
 801926c:	3301      	adds	r3, #1
 801926e:	617b      	str	r3, [r7, #20]
 8019270:	697b      	ldr	r3, [r7, #20]
 8019272:	68ba      	ldr	r2, [r7, #8]
 8019274:	4413      	add	r3, r2
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d012      	beq.n	80192a2 <MenuSet+0x7e>
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	2b13      	cmp	r3, #19
 8019280:	dde3      	ble.n	801924a <MenuSet+0x26>
	for(;i<20;i++) m_MenuStr[MenuNro][i]=' ';
 8019282:	e00e      	b.n	80192a2 <MenuSet+0x7e>
 8019284:	7bfa      	ldrb	r2, [r7, #15]
 8019286:	4914      	ldr	r1, [pc, #80]	; (80192d8 <MenuSet+0xb4>)
 8019288:	4613      	mov	r3, r2
 801928a:	009b      	lsls	r3, r3, #2
 801928c:	4413      	add	r3, r2
 801928e:	009a      	lsls	r2, r3, #2
 8019290:	4413      	add	r3, r2
 8019292:	18ca      	adds	r2, r1, r3
 8019294:	697b      	ldr	r3, [r7, #20]
 8019296:	4413      	add	r3, r2
 8019298:	2220      	movs	r2, #32
 801929a:	701a      	strb	r2, [r3, #0]
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	3301      	adds	r3, #1
 80192a0:	617b      	str	r3, [r7, #20]
 80192a2:	697b      	ldr	r3, [r7, #20]
 80192a4:	2b13      	cmp	r3, #19
 80192a6:	dded      	ble.n	8019284 <MenuSet+0x60>
	if(MenuNro>m_MenuMax) m_MenuMax=MenuNro;
 80192a8:	7bfa      	ldrb	r2, [r7, #15]
 80192aa:	4b09      	ldr	r3, [pc, #36]	; (80192d0 <MenuSet+0xac>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d902      	bls.n	80192b8 <MenuSet+0x94>
 80192b2:	7bfb      	ldrb	r3, [r7, #15]
 80192b4:	4a06      	ldr	r2, [pc, #24]	; (80192d0 <MenuSet+0xac>)
 80192b6:	6013      	str	r3, [r2, #0]
	m_PantallaProx[MenuNro]=PantallaProx;
 80192b8:	7bfb      	ldrb	r3, [r7, #15]
 80192ba:	4908      	ldr	r1, [pc, #32]	; (80192dc <MenuSet+0xb8>)
 80192bc:	687a      	ldr	r2, [r7, #4]
 80192be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80192c2:	bf00      	nop
 80192c4:	371c      	adds	r7, #28
 80192c6:	46bd      	mov	sp, r7
 80192c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192cc:	4770      	bx	lr
 80192ce:	bf00      	nop
 80192d0:	20009da0 	.word	0x20009da0
 80192d4:	200047a8 	.word	0x200047a8
 80192d8:	20009da4 	.word	0x20009da4
 80192dc:	200047ac 	.word	0x200047ac

080192e0 <MenuPrint>:

void MenuPrint()
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b084      	sub	sp, #16
 80192e4:	af02      	add	r7, sp, #8

	int i;

	for(i=0;(i+m_PantallaExt*6)<=m_MenuMax && i<6;i++)
 80192e6:	2300      	movs	r3, #0
 80192e8:	607b      	str	r3, [r7, #4]
 80192ea:	e01e      	b.n	801932a <MenuPrint+0x4a>
		BOW(5,35+33*i,0,22,m_MenuStr[i+m_PantallaExt*6]);
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	4613      	mov	r3, r2
 80192f0:	015b      	lsls	r3, r3, #5
 80192f2:	4413      	add	r3, r2
 80192f4:	3323      	adds	r3, #35	; 0x23
 80192f6:	4619      	mov	r1, r3
 80192f8:	4b1a      	ldr	r3, [pc, #104]	; (8019364 <MenuPrint+0x84>)
 80192fa:	681a      	ldr	r2, [r3, #0]
 80192fc:	4613      	mov	r3, r2
 80192fe:	005b      	lsls	r3, r3, #1
 8019300:	4413      	add	r3, r2
 8019302:	005b      	lsls	r3, r3, #1
 8019304:	461a      	mov	r2, r3
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	441a      	add	r2, r3
 801930a:	4613      	mov	r3, r2
 801930c:	009b      	lsls	r3, r3, #2
 801930e:	4413      	add	r3, r2
 8019310:	009a      	lsls	r2, r3, #2
 8019312:	4413      	add	r3, r2
 8019314:	4a14      	ldr	r2, [pc, #80]	; (8019368 <MenuPrint+0x88>)
 8019316:	4413      	add	r3, r2
 8019318:	9300      	str	r3, [sp, #0]
 801931a:	2316      	movs	r3, #22
 801931c:	2200      	movs	r2, #0
 801931e:	2005      	movs	r0, #5
 8019320:	f7fe fc3e 	bl	8017ba0 <BOW>
	for(i=0;(i+m_PantallaExt*6)<=m_MenuMax && i<6;i++)
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	3301      	adds	r3, #1
 8019328:	607b      	str	r3, [r7, #4]
 801932a:	4b0e      	ldr	r3, [pc, #56]	; (8019364 <MenuPrint+0x84>)
 801932c:	681a      	ldr	r2, [r3, #0]
 801932e:	4613      	mov	r3, r2
 8019330:	005b      	lsls	r3, r3, #1
 8019332:	4413      	add	r3, r2
 8019334:	005b      	lsls	r3, r3, #1
 8019336:	461a      	mov	r2, r3
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	441a      	add	r2, r3
 801933c:	4b0b      	ldr	r3, [pc, #44]	; (801936c <MenuPrint+0x8c>)
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	429a      	cmp	r2, r3
 8019342:	d802      	bhi.n	801934a <MenuPrint+0x6a>
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2b05      	cmp	r3, #5
 8019348:	ddd0      	ble.n	80192ec <MenuPrint+0xc>

	//BOW(5,202,0,7,"SUBIR");
   	BOW(5,202,0,22,"VOLVER");
 801934a:	4b09      	ldr	r3, [pc, #36]	; (8019370 <MenuPrint+0x90>)
 801934c:	9300      	str	r3, [sp, #0]
 801934e:	2316      	movs	r3, #22
 8019350:	2200      	movs	r2, #0
 8019352:	21ca      	movs	r1, #202	; 0xca
 8019354:	2005      	movs	r0, #5
 8019356:	f7fe fc23 	bl	8017ba0 <BOW>
   	//BOW(215,202,0,7,"BAJAR");
}
 801935a:	bf00      	nop
 801935c:	3708      	adds	r7, #8
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
 8019362:	bf00      	nop
 8019364:	200047a8 	.word	0x200047a8
 8019368:	20009da4 	.word	0x20009da4
 801936c:	20009da0 	.word	0x20009da0
 8019370:	0801c1d4 	.word	0x0801c1d4

08019374 <MenuAtencion>:

void MenuAtencion(void)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af02      	add	r7, sp, #8
	for(int i=0;i<6 && (i+m_PantallaExt*6)<=m_MenuMax;i++)
 801937a:	2300      	movs	r3, #0
 801937c:	607b      	str	r3, [r7, #4]
 801937e:	e039      	b.n	80193f4 <MenuAtencion+0x80>
	{
		if(BOW_Activo(6,35+33*i,22) )
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	4613      	mov	r3, r2
 8019384:	015b      	lsls	r3, r3, #5
 8019386:	4413      	add	r3, r2
 8019388:	3323      	adds	r3, #35	; 0x23
 801938a:	2216      	movs	r2, #22
 801938c:	4619      	mov	r1, r3
 801938e:	2006      	movs	r0, #6
 8019390:	f7ff fea4 	bl	80190dc <BOW_Activo>
 8019394:	4603      	mov	r3, r0
 8019396:	2b00      	cmp	r3, #0
 8019398:	d029      	beq.n	80193ee <MenuAtencion+0x7a>
		{
			BOW(5,35+33*i,2,22,m_MenuStr[6*m_PantallaExt+i]);
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	4613      	mov	r3, r2
 801939e:	015b      	lsls	r3, r3, #5
 80193a0:	4413      	add	r3, r2
 80193a2:	3323      	adds	r3, #35	; 0x23
 80193a4:	4619      	mov	r1, r3
 80193a6:	4b27      	ldr	r3, [pc, #156]	; (8019444 <MenuAtencion+0xd0>)
 80193a8:	681a      	ldr	r2, [r3, #0]
 80193aa:	4613      	mov	r3, r2
 80193ac:	005b      	lsls	r3, r3, #1
 80193ae:	4413      	add	r3, r2
 80193b0:	005b      	lsls	r3, r3, #1
 80193b2:	461a      	mov	r2, r3
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	441a      	add	r2, r3
 80193b8:	4613      	mov	r3, r2
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	4413      	add	r3, r2
 80193be:	009a      	lsls	r2, r3, #2
 80193c0:	4413      	add	r3, r2
 80193c2:	4a21      	ldr	r2, [pc, #132]	; (8019448 <MenuAtencion+0xd4>)
 80193c4:	4413      	add	r3, r2
 80193c6:	9300      	str	r3, [sp, #0]
 80193c8:	2316      	movs	r3, #22
 80193ca:	2202      	movs	r2, #2
 80193cc:	2005      	movs	r0, #5
 80193ce:	f7fe fbe7 	bl	8017ba0 <BOW>
			m_Pantalla=m_PantallaProx[6*m_PantallaExt+i];
 80193d2:	4b1c      	ldr	r3, [pc, #112]	; (8019444 <MenuAtencion+0xd0>)
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	4613      	mov	r3, r2
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	4413      	add	r3, r2
 80193dc:	005b      	lsls	r3, r3, #1
 80193de:	461a      	mov	r2, r3
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	4413      	add	r3, r2
 80193e4:	4a19      	ldr	r2, [pc, #100]	; (801944c <MenuAtencion+0xd8>)
 80193e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80193ea:	4a19      	ldr	r2, [pc, #100]	; (8019450 <MenuAtencion+0xdc>)
 80193ec:	6013      	str	r3, [r2, #0]
	for(int i=0;i<6 && (i+m_PantallaExt*6)<=m_MenuMax;i++)
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	3301      	adds	r3, #1
 80193f2:	607b      	str	r3, [r7, #4]
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2b05      	cmp	r3, #5
 80193f8:	dc0c      	bgt.n	8019414 <MenuAtencion+0xa0>
 80193fa:	4b12      	ldr	r3, [pc, #72]	; (8019444 <MenuAtencion+0xd0>)
 80193fc:	681a      	ldr	r2, [r3, #0]
 80193fe:	4613      	mov	r3, r2
 8019400:	005b      	lsls	r3, r3, #1
 8019402:	4413      	add	r3, r2
 8019404:	005b      	lsls	r3, r3, #1
 8019406:	461a      	mov	r2, r3
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	441a      	add	r2, r3
 801940c:	4b11      	ldr	r3, [pc, #68]	; (8019454 <MenuAtencion+0xe0>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	429a      	cmp	r2, r3
 8019412:	d9b5      	bls.n	8019380 <MenuAtencion+0xc>
	{
		if(m_PantallaExt>0) m_PantallaExt--;
		MenuPrint();
		BOW(5,202,2,7,"SUBIR");
	}*/
	if(BOW_Activo(5,202,22) )
 8019414:	2216      	movs	r2, #22
 8019416:	21ca      	movs	r1, #202	; 0xca
 8019418:	2005      	movs	r0, #5
 801941a:	f7ff fe5f 	bl	80190dc <BOW_Activo>
 801941e:	4603      	mov	r3, r0
 8019420:	2b00      	cmp	r3, #0
 8019422:	d00a      	beq.n	801943a <MenuAtencion+0xc6>
	{
		BOW(5,202,2,22,"VOLVER");
 8019424:	4b0c      	ldr	r3, [pc, #48]	; (8019458 <MenuAtencion+0xe4>)
 8019426:	9300      	str	r3, [sp, #0]
 8019428:	2316      	movs	r3, #22
 801942a:	2202      	movs	r2, #2
 801942c:	21ca      	movs	r1, #202	; 0xca
 801942e:	2005      	movs	r0, #5
 8019430:	f7fe fbb6 	bl	8017ba0 <BOW>
		m_Pantalla=MENU_PRINCIPAL;
 8019434:	4b06      	ldr	r3, [pc, #24]	; (8019450 <MenuAtencion+0xdc>)
 8019436:	2204      	movs	r2, #4
 8019438:	601a      	str	r2, [r3, #0]
		if(m_PantallaExt < m_MenuMax/6) m_PantallaExt++;
		MenuPrint();
		BOW(215,202,2,7,"BAJAR");
	}
	*/
}
 801943a:	bf00      	nop
 801943c:	3708      	adds	r7, #8
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
 8019442:	bf00      	nop
 8019444:	200047a8 	.word	0x200047a8
 8019448:	20009da4 	.word	0x20009da4
 801944c:	200047ac 	.word	0x200047ac
 8019450:	200047a4 	.word	0x200047a4
 8019454:	20009da0 	.word	0x20009da0
 8019458:	0801c1d4 	.word	0x0801c1d4

0801945c <XPT2046_TouchGetCoordinates>:
#define TP_READ_Y 0xD0

void XPT2046_TouchGetCoordinates();

void XPT2046_TouchGetCoordinates()
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b092      	sub	sp, #72	; 0x48
 8019460:	af02      	add	r7, sp, #8
	uint8_t calibrar=0;
 8019462:	2300      	movs	r3, #0
 8019464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    static const uint8_t cmd_read_x[] = { TP_READ_X };
    static const uint8_t cmd_read_y[] = { TP_READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    MODIFY_REG(hspi3.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_256);
 8019468:	4b97      	ldr	r3, [pc, #604]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	681a      	ldr	r2, [r3, #0]
 801946e:	4b96      	ldr	r3, [pc, #600]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8019476:	601a      	str	r2, [r3, #0]

    char str[30];

    SD_CS_OFF;
 8019478:	2201      	movs	r2, #1
 801947a:	2108      	movs	r1, #8
 801947c:	4893      	ldr	r0, [pc, #588]	; (80196cc <XPT2046_TouchGetCoordinates+0x270>)
 801947e:	f7ed fed3 	bl	8007228 <HAL_GPIO_WritePin>
   	TFT_CS_OFF;
 8019482:	2201      	movs	r2, #1
 8019484:	2180      	movs	r1, #128	; 0x80
 8019486:	4891      	ldr	r0, [pc, #580]	; (80196cc <XPT2046_TouchGetCoordinates+0x270>)
 8019488:	f7ed fece 	bl	8007228 <HAL_GPIO_WritePin>
   	TP_CS_ON;
 801948c:	2200      	movs	r2, #0
 801948e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8019492:	488f      	ldr	r0, [pc, #572]	; (80196d0 <XPT2046_TouchGetCoordinates+0x274>)
 8019494:	f7ed fec8 	bl	8007228 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8019498:	2300      	movs	r3, #0
 801949a:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t avg_y = 0;
 801949c:	2300      	movs	r3, #0
 801949e:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t nsamples = 0;
 80194a0:	2300      	movs	r3, #0
 80194a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for(uint8_t i = 0; i < 16; i++)
 80194a6:	2300      	movs	r3, #0
 80194a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80194ac:	e041      	b.n	8019532 <XPT2046_TouchGetCoordinates+0xd6>
    {
        if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin)!=0  )
 80194ae:	2102      	movs	r1, #2
 80194b0:	4887      	ldr	r0, [pc, #540]	; (80196d0 <XPT2046_TouchGetCoordinates+0x274>)
 80194b2:	f7ed fea1 	bl	80071f8 <HAL_GPIO_ReadPin>
 80194b6:	4603      	mov	r3, r0
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d13f      	bne.n	801953c <XPT2046_TouchGetCoordinates+0xe0>
            break;

        nsamples++;
 80194bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80194c0:	3301      	adds	r3, #1
 80194c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80194c6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ca:	2201      	movs	r2, #1
 80194cc:	4981      	ldr	r1, [pc, #516]	; (80196d4 <XPT2046_TouchGetCoordinates+0x278>)
 80194ce:	487e      	ldr	r0, [pc, #504]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 80194d0:	f7f1 f8f3 	bl	800a6ba <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80194d4:	f107 0208 	add.w	r2, r7, #8
 80194d8:	f04f 33ff 	mov.w	r3, #4294967295
 80194dc:	9300      	str	r3, [sp, #0]
 80194de:	2302      	movs	r3, #2
 80194e0:	497d      	ldr	r1, [pc, #500]	; (80196d8 <XPT2046_TouchGetCoordinates+0x27c>)
 80194e2:	4879      	ldr	r0, [pc, #484]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 80194e4:	f7f1 fa5e 	bl	800a9a4 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80194e8:	f04f 33ff 	mov.w	r3, #4294967295
 80194ec:	2201      	movs	r2, #1
 80194ee:	497b      	ldr	r1, [pc, #492]	; (80196dc <XPT2046_TouchGetCoordinates+0x280>)
 80194f0:	4875      	ldr	r0, [pc, #468]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 80194f2:	f7f1 f8e2 	bl	800a6ba <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80194f6:	1d3a      	adds	r2, r7, #4
 80194f8:	f04f 33ff 	mov.w	r3, #4294967295
 80194fc:	9300      	str	r3, [sp, #0]
 80194fe:	2302      	movs	r3, #2
 8019500:	4975      	ldr	r1, [pc, #468]	; (80196d8 <XPT2046_TouchGetCoordinates+0x27c>)
 8019502:	4871      	ldr	r0, [pc, #452]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 8019504:	f7f1 fa4e 	bl	800a9a4 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8019508:	793b      	ldrb	r3, [r7, #4]
 801950a:	021b      	lsls	r3, r3, #8
 801950c:	797a      	ldrb	r2, [r7, #5]
 801950e:	4313      	orrs	r3, r2
 8019510:	461a      	mov	r2, r3
 8019512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019514:	4413      	add	r3, r2
 8019516:	63fb      	str	r3, [r7, #60]	; 0x3c
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8019518:	7a3b      	ldrb	r3, [r7, #8]
 801951a:	021b      	lsls	r3, r3, #8
 801951c:	7a7a      	ldrb	r2, [r7, #9]
 801951e:	4313      	orrs	r3, r2
 8019520:	461a      	mov	r2, r3
 8019522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019524:	4413      	add	r3, r2
 8019526:	63bb      	str	r3, [r7, #56]	; 0x38
    for(uint8_t i = 0; i < 16; i++)
 8019528:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801952c:	3301      	adds	r3, #1
 801952e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8019532:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8019536:	2b0f      	cmp	r3, #15
 8019538:	d9b9      	bls.n	80194ae <XPT2046_TouchGetCoordinates+0x52>
 801953a:	e000      	b.n	801953e <XPT2046_TouchGetCoordinates+0xe2>
            break;
 801953c:	bf00      	nop
    }

   	TP_CS_OFF;
 801953e:	2201      	movs	r2, #1
 8019540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8019544:	4862      	ldr	r0, [pc, #392]	; (80196d0 <XPT2046_TouchGetCoordinates+0x274>)
 8019546:	f7ed fe6f 	bl	8007228 <HAL_GPIO_WritePin>
   	MODIFY_REG(hspi3.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_2);
 801954a:	4b5f      	ldr	r3, [pc, #380]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	681a      	ldr	r2, [r3, #0]
 8019550:	4b5d      	ldr	r3, [pc, #372]	; (80196c8 <XPT2046_TouchGetCoordinates+0x26c>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8019558:	601a      	str	r2, [r3, #0]

    if(nsamples==16)
 801955a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801955e:	2b10      	cmp	r3, #16
 8019560:	f040 80a7 	bne.w	80196b2 <XPT2046_TouchGetCoordinates+0x256>
    {
    	uint32_t raw_x = (avg_x / 16);
 8019564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019566:	091b      	lsrs	r3, r3, #4
 8019568:	633b      	str	r3, [r7, #48]	; 0x30
    	uint32_t raw_y = (avg_y / 16);
 801956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956c:	091b      	lsrs	r3, r3, #4
 801956e:	62fb      	str	r3, [r7, #44]	; 0x2c

    	if(calibrar==1)
 8019570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019574:	2b01      	cmp	r3, #1
 8019576:	d133      	bne.n	80195e0 <XPT2046_TouchGetCoordinates+0x184>
    	{
    		TFT_CS_ON;
 8019578:	2200      	movs	r2, #0
 801957a:	2180      	movs	r1, #128	; 0x80
 801957c:	4853      	ldr	r0, [pc, #332]	; (80196cc <XPT2046_TouchGetCoordinates+0x270>)
 801957e:	f7ed fe53 	bl	8007228 <HAL_GPIO_WritePin>
    		FillReg(0,0,320,240,0xFC00);
 8019582:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8019586:	9300      	str	r3, [sp, #0]
 8019588:	23f0      	movs	r3, #240	; 0xf0
 801958a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801958e:	2100      	movs	r1, #0
 8019590:	2000      	movs	r0, #0
 8019592:	f7ff f8cb 	bl	801872c <FillReg>
    		sprintf(str,"CRUDO");
 8019596:	f107 030c 	add.w	r3, r7, #12
 801959a:	4951      	ldr	r1, [pc, #324]	; (80196e0 <XPT2046_TouchGetCoordinates+0x284>)
 801959c:	4618      	mov	r0, r3
 801959e:	f000 fd4d 	bl	801a03c <siprintf>
    		ILI9341_Draw_String(10,10, 0, 0xFC00,str,4);
 80195a2:	2304      	movs	r3, #4
 80195a4:	9301      	str	r3, [sp, #4]
 80195a6:	f107 030c 	add.w	r3, r7, #12
 80195aa:	9300      	str	r3, [sp, #0]
 80195ac:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80195b0:	2200      	movs	r2, #0
 80195b2:	210a      	movs	r1, #10
 80195b4:	200a      	movs	r0, #10
 80195b6:	f7f8 f93d 	bl	8011834 <ILI9341_Draw_String>
    		sprintf(str,"x=%d y=%d",(int)raw_x,(int)raw_y);
 80195ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195be:	f107 000c 	add.w	r0, r7, #12
 80195c2:	4948      	ldr	r1, [pc, #288]	; (80196e4 <XPT2046_TouchGetCoordinates+0x288>)
 80195c4:	f000 fd3a 	bl	801a03c <siprintf>
    		ILI9341_Draw_String(10,40, 0, 0xFC00,str,4);
 80195c8:	2304      	movs	r3, #4
 80195ca:	9301      	str	r3, [sp, #4]
 80195cc:	f107 030c 	add.w	r3, r7, #12
 80195d0:	9300      	str	r3, [sp, #0]
 80195d2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80195d6:	2200      	movs	r2, #0
 80195d8:	2128      	movs	r1, #40	; 0x28
 80195da:	200a      	movs	r0, #10
 80195dc:	f7f8 f92a 	bl	8011834 <ILI9341_Draw_String>
    	}
    	if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 80195e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80195e6:	4293      	cmp	r3, r2
 80195e8:	d802      	bhi.n	80195f0 <XPT2046_TouchGetCoordinates+0x194>
 80195ea:	f640 33b9 	movw	r3, #3001	; 0xbb9
 80195ee:	633b      	str	r3, [r7, #48]	; 0x30
    	if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80195f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195f2:	f647 02df 	movw	r2, #30943	; 0x78df
 80195f6:	4293      	cmp	r3, r2
 80195f8:	d902      	bls.n	8019600 <XPT2046_TouchGetCoordinates+0x1a4>
 80195fa:	f647 03df 	movw	r3, #30943	; 0x78df
 80195fe:	633b      	str	r3, [r7, #48]	; 0x30

    	if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8019600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019602:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019606:	d802      	bhi.n	801960e <XPT2046_TouchGetCoordinates+0x1b2>
 8019608:	f240 63e9 	movw	r3, #1769	; 0x6e9
 801960c:	62fb      	str	r3, [r7, #44]	; 0x2c
    	if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 801960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019610:	f247 62a3 	movw	r2, #30371	; 0x76a3
 8019614:	4293      	cmp	r3, r2
 8019616:	d902      	bls.n	801961e <XPT2046_TouchGetCoordinates+0x1c2>
 8019618:	f247 63a3 	movw	r3, #30371	; 0x76a3
 801961c:	62fb      	str	r3, [r7, #44]	; 0x2c

    	m_XPanel = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 801961e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019620:	4613      	mov	r3, r2
 8019622:	009b      	lsls	r3, r3, #2
 8019624:	4413      	add	r3, r2
 8019626:	019b      	lsls	r3, r3, #6
 8019628:	f5a3 236a 	sub.w	r3, r3, #958464	; 0xea000
 801962c:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8019630:	4a2d      	ldr	r2, [pc, #180]	; (80196e8 <XPT2046_TouchGetCoordinates+0x28c>)
 8019632:	fba2 2303 	umull	r2, r3, r2, r3
 8019636:	0b1b      	lsrs	r3, r3, #12
 8019638:	4a2c      	ldr	r2, [pc, #176]	; (80196ec <XPT2046_TouchGetCoordinates+0x290>)
 801963a:	6013      	str	r3, [r2, #0]
    	m_YPanel = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 801963c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801963e:	4613      	mov	r3, r2
 8019640:	011b      	lsls	r3, r3, #4
 8019642:	1a9b      	subs	r3, r3, r2
 8019644:	011b      	lsls	r3, r3, #4
 8019646:	f5a3 23cf 	sub.w	r3, r3, #423936	; 0x67800
 801964a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801964e:	4a28      	ldr	r2, [pc, #160]	; (80196f0 <XPT2046_TouchGetCoordinates+0x294>)
 8019650:	fba2 2303 	umull	r2, r3, r2, r3
 8019654:	0b5b      	lsrs	r3, r3, #13
 8019656:	4a27      	ldr	r2, [pc, #156]	; (80196f4 <XPT2046_TouchGetCoordinates+0x298>)
 8019658:	6013      	str	r3, [r2, #0]

    	if(calibrar==1)
 801965a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801965e:	2b01      	cmp	r3, #1
 8019660:	d12d      	bne.n	80196be <XPT2046_TouchGetCoordinates+0x262>
    	{
    		sprintf(str,"COCIDO");
 8019662:	f107 030c 	add.w	r3, r7, #12
 8019666:	4924      	ldr	r1, [pc, #144]	; (80196f8 <XPT2046_TouchGetCoordinates+0x29c>)
 8019668:	4618      	mov	r0, r3
 801966a:	f000 fce7 	bl	801a03c <siprintf>
    		ILI9341_Draw_String(10,100, 0,0xFC00,str,4);
 801966e:	2304      	movs	r3, #4
 8019670:	9301      	str	r3, [sp, #4]
 8019672:	f107 030c 	add.w	r3, r7, #12
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 801967c:	2200      	movs	r2, #0
 801967e:	2164      	movs	r1, #100	; 0x64
 8019680:	200a      	movs	r0, #10
 8019682:	f7f8 f8d7 	bl	8011834 <ILI9341_Draw_String>
    		sprintf(str,"x=%d y=%d",m_XPanel,m_YPanel);
 8019686:	4b19      	ldr	r3, [pc, #100]	; (80196ec <XPT2046_TouchGetCoordinates+0x290>)
 8019688:	681a      	ldr	r2, [r3, #0]
 801968a:	4b1a      	ldr	r3, [pc, #104]	; (80196f4 <XPT2046_TouchGetCoordinates+0x298>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	f107 000c 	add.w	r0, r7, #12
 8019692:	4914      	ldr	r1, [pc, #80]	; (80196e4 <XPT2046_TouchGetCoordinates+0x288>)
 8019694:	f000 fcd2 	bl	801a03c <siprintf>
    		ILI9341_Draw_String(10,140, 0,0xFC00,str,4);
 8019698:	2304      	movs	r3, #4
 801969a:	9301      	str	r3, [sp, #4]
 801969c:	f107 030c 	add.w	r3, r7, #12
 80196a0:	9300      	str	r3, [sp, #0]
 80196a2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80196a6:	2200      	movs	r2, #0
 80196a8:	218c      	movs	r1, #140	; 0x8c
 80196aa:	200a      	movs	r0, #10
 80196ac:	f7f8 f8c2 	bl	8011834 <ILI9341_Draw_String>
    	}
    }
    else m_XPanel=0,m_YPanel=0;
}
 80196b0:	e005      	b.n	80196be <XPT2046_TouchGetCoordinates+0x262>
    else m_XPanel=0,m_YPanel=0;
 80196b2:	4b0e      	ldr	r3, [pc, #56]	; (80196ec <XPT2046_TouchGetCoordinates+0x290>)
 80196b4:	2200      	movs	r2, #0
 80196b6:	601a      	str	r2, [r3, #0]
 80196b8:	4b0e      	ldr	r3, [pc, #56]	; (80196f4 <XPT2046_TouchGetCoordinates+0x298>)
 80196ba:	2200      	movs	r2, #0
 80196bc:	601a      	str	r2, [r3, #0]
}
 80196be:	bf00      	nop
 80196c0:	3740      	adds	r7, #64	; 0x40
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	20008bc0 	.word	0x20008bc0
 80196cc:	48000800 	.word	0x48000800
 80196d0:	48000400 	.word	0x48000400
 80196d4:	0801dda4 	.word	0x0801dda4
 80196d8:	0801dda8 	.word	0x0801dda8
 80196dc:	0801ddac 	.word	0x0801ddac
 80196e0:	0801c1dc 	.word	0x0801c1dc
 80196e4:	0801c1e4 	.word	0x0801c1e4
 80196e8:	2586e16b 	.word	0x2586e16b
 80196ec:	2000a098 	.word	0x2000a098
 80196f0:	495265c9 	.word	0x495265c9
 80196f4:	2000a09c 	.word	0x2000a09c
 80196f8:	0801c1f0 	.word	0x0801c1f0

080196fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019700:	2200      	movs	r2, #0
 8019702:	4912      	ldr	r1, [pc, #72]	; (801974c <MX_USB_DEVICE_Init+0x50>)
 8019704:	4812      	ldr	r0, [pc, #72]	; (8019750 <MX_USB_DEVICE_Init+0x54>)
 8019706:	f7f8 feb8 	bl	801247a <USBD_Init>
 801970a:	4603      	mov	r3, r0
 801970c:	2b00      	cmp	r3, #0
 801970e:	d001      	beq.n	8019714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019710:	f7ea ff40 	bl	8004594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019714:	490f      	ldr	r1, [pc, #60]	; (8019754 <MX_USB_DEVICE_Init+0x58>)
 8019716:	480e      	ldr	r0, [pc, #56]	; (8019750 <MX_USB_DEVICE_Init+0x54>)
 8019718:	f7f8 feda 	bl	80124d0 <USBD_RegisterClass>
 801971c:	4603      	mov	r3, r0
 801971e:	2b00      	cmp	r3, #0
 8019720:	d001      	beq.n	8019726 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019722:	f7ea ff37 	bl	8004594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019726:	490c      	ldr	r1, [pc, #48]	; (8019758 <MX_USB_DEVICE_Init+0x5c>)
 8019728:	4809      	ldr	r0, [pc, #36]	; (8019750 <MX_USB_DEVICE_Init+0x54>)
 801972a:	f7f8 fe37 	bl	801239c <USBD_CDC_RegisterInterface>
 801972e:	4603      	mov	r3, r0
 8019730:	2b00      	cmp	r3, #0
 8019732:	d001      	beq.n	8019738 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019734:	f7ea ff2e 	bl	8004594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019738:	4805      	ldr	r0, [pc, #20]	; (8019750 <MX_USB_DEVICE_Init+0x54>)
 801973a:	f7f8 fee3 	bl	8012504 <USBD_Start>
 801973e:	4603      	mov	r3, r0
 8019740:	2b00      	cmp	r3, #0
 8019742:	d001      	beq.n	8019748 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019744:	f7ea ff26 	bl	8004594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019748:	bf00      	nop
 801974a:	bd80      	pop	{r7, pc}
 801974c:	20000150 	.word	0x20000150
 8019750:	2000a0a0 	.word	0x2000a0a0
 8019754:	2000003c 	.word	0x2000003c
 8019758:	20000140 	.word	0x20000140

0801975c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019760:	2200      	movs	r2, #0
 8019762:	4905      	ldr	r1, [pc, #20]	; (8019778 <CDC_Init_FS+0x1c>)
 8019764:	4805      	ldr	r0, [pc, #20]	; (801977c <CDC_Init_FS+0x20>)
 8019766:	f7f8 fe30 	bl	80123ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801976a:	4905      	ldr	r1, [pc, #20]	; (8019780 <CDC_Init_FS+0x24>)
 801976c:	4803      	ldr	r0, [pc, #12]	; (801977c <CDC_Init_FS+0x20>)
 801976e:	f7f8 fe46 	bl	80123fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019772:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019774:	4618      	mov	r0, r3
 8019776:	bd80      	pop	{r7, pc}
 8019778:	2000a3c8 	.word	0x2000a3c8
 801977c:	2000a0a0 	.word	0x2000a0a0
 8019780:	2000a364 	.word	0x2000a364

08019784 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019784:	b480      	push	{r7}
 8019786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019788:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801978a:	4618      	mov	r0, r3
 801978c:	46bd      	mov	sp, r7
 801978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019792:	4770      	bx	lr

08019794 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019794:	b480      	push	{r7}
 8019796:	b083      	sub	sp, #12
 8019798:	af00      	add	r7, sp, #0
 801979a:	4603      	mov	r3, r0
 801979c:	6039      	str	r1, [r7, #0]
 801979e:	71fb      	strb	r3, [r7, #7]
 80197a0:	4613      	mov	r3, r2
 80197a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80197a4:	79fb      	ldrb	r3, [r7, #7]
 80197a6:	2b23      	cmp	r3, #35	; 0x23
 80197a8:	d84a      	bhi.n	8019840 <CDC_Control_FS+0xac>
 80197aa:	a201      	add	r2, pc, #4	; (adr r2, 80197b0 <CDC_Control_FS+0x1c>)
 80197ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197b0:	08019841 	.word	0x08019841
 80197b4:	08019841 	.word	0x08019841
 80197b8:	08019841 	.word	0x08019841
 80197bc:	08019841 	.word	0x08019841
 80197c0:	08019841 	.word	0x08019841
 80197c4:	08019841 	.word	0x08019841
 80197c8:	08019841 	.word	0x08019841
 80197cc:	08019841 	.word	0x08019841
 80197d0:	08019841 	.word	0x08019841
 80197d4:	08019841 	.word	0x08019841
 80197d8:	08019841 	.word	0x08019841
 80197dc:	08019841 	.word	0x08019841
 80197e0:	08019841 	.word	0x08019841
 80197e4:	08019841 	.word	0x08019841
 80197e8:	08019841 	.word	0x08019841
 80197ec:	08019841 	.word	0x08019841
 80197f0:	08019841 	.word	0x08019841
 80197f4:	08019841 	.word	0x08019841
 80197f8:	08019841 	.word	0x08019841
 80197fc:	08019841 	.word	0x08019841
 8019800:	08019841 	.word	0x08019841
 8019804:	08019841 	.word	0x08019841
 8019808:	08019841 	.word	0x08019841
 801980c:	08019841 	.word	0x08019841
 8019810:	08019841 	.word	0x08019841
 8019814:	08019841 	.word	0x08019841
 8019818:	08019841 	.word	0x08019841
 801981c:	08019841 	.word	0x08019841
 8019820:	08019841 	.word	0x08019841
 8019824:	08019841 	.word	0x08019841
 8019828:	08019841 	.word	0x08019841
 801982c:	08019841 	.word	0x08019841
 8019830:	08019841 	.word	0x08019841
 8019834:	08019841 	.word	0x08019841
 8019838:	08019841 	.word	0x08019841
 801983c:	08019841 	.word	0x08019841
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019840:	bf00      	nop
  }

  return (USBD_OK);
 8019842:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019844:	4618      	mov	r0, r3
 8019846:	370c      	adds	r7, #12
 8019848:	46bd      	mov	sp, r7
 801984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984e:	4770      	bx	lr

08019850 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b084      	sub	sp, #16
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	int i;
		for(i=0;i<10;i++)
 801985a:	2300      	movs	r3, #0
 801985c:	60fb      	str	r3, [r7, #12]
 801985e:	e00b      	b.n	8019878 <CDC_Receive_FS+0x28>
		{
			BufferRX[i]=Buf[i]	;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	4413      	add	r3, r2
 8019866:	7819      	ldrb	r1, [r3, #0]
 8019868:	4a0c      	ldr	r2, [pc, #48]	; (801989c <CDC_Receive_FS+0x4c>)
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	4413      	add	r3, r2
 801986e:	460a      	mov	r2, r1
 8019870:	701a      	strb	r2, [r3, #0]
		for(i=0;i<10;i++)
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	3301      	adds	r3, #1
 8019876:	60fb      	str	r3, [r7, #12]
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2b09      	cmp	r3, #9
 801987c:	ddf0      	ble.n	8019860 <CDC_Receive_FS+0x10>
		}
		USBRX=1;
 801987e:	4b08      	ldr	r3, [pc, #32]	; (80198a0 <CDC_Receive_FS+0x50>)
 8019880:	2201      	movs	r2, #1
 8019882:	601a      	str	r2, [r3, #0]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019884:	6879      	ldr	r1, [r7, #4]
 8019886:	4807      	ldr	r0, [pc, #28]	; (80198a4 <CDC_Receive_FS+0x54>)
 8019888:	f7f8 fdb9 	bl	80123fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801988c:	4805      	ldr	r0, [pc, #20]	; (80198a4 <CDC_Receive_FS+0x54>)
 801988e:	f7f8 fdca 	bl	8012426 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019892:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019894:	4618      	mov	r0, r3
 8019896:	3710      	adds	r7, #16
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}
 801989c:	20004888 	.word	0x20004888
 80198a0:	2000919c 	.word	0x2000919c
 80198a4:	2000a0a0 	.word	0x2000a0a0

080198a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198a8:	b480      	push	{r7}
 80198aa:	b083      	sub	sp, #12
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	4603      	mov	r3, r0
 80198b0:	6039      	str	r1, [r7, #0]
 80198b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80198b4:	683b      	ldr	r3, [r7, #0]
 80198b6:	2212      	movs	r2, #18
 80198b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80198ba:	4b03      	ldr	r3, [pc, #12]	; (80198c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80198bc:	4618      	mov	r0, r3
 80198be:	370c      	adds	r7, #12
 80198c0:	46bd      	mov	sp, r7
 80198c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c6:	4770      	bx	lr
 80198c8:	2000016c 	.word	0x2000016c

080198cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198cc:	b480      	push	{r7}
 80198ce:	b083      	sub	sp, #12
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	4603      	mov	r3, r0
 80198d4:	6039      	str	r1, [r7, #0]
 80198d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	2204      	movs	r2, #4
 80198dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80198de:	4b03      	ldr	r3, [pc, #12]	; (80198ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	370c      	adds	r7, #12
 80198e4:	46bd      	mov	sp, r7
 80198e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ea:	4770      	bx	lr
 80198ec:	20000180 	.word	0x20000180

080198f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b082      	sub	sp, #8
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	4603      	mov	r3, r0
 80198f8:	6039      	str	r1, [r7, #0]
 80198fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80198fc:	79fb      	ldrb	r3, [r7, #7]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d105      	bne.n	801990e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019902:	683a      	ldr	r2, [r7, #0]
 8019904:	4907      	ldr	r1, [pc, #28]	; (8019924 <USBD_FS_ProductStrDescriptor+0x34>)
 8019906:	4808      	ldr	r0, [pc, #32]	; (8019928 <USBD_FS_ProductStrDescriptor+0x38>)
 8019908:	f7f9 fd79 	bl	80133fe <USBD_GetString>
 801990c:	e004      	b.n	8019918 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801990e:	683a      	ldr	r2, [r7, #0]
 8019910:	4904      	ldr	r1, [pc, #16]	; (8019924 <USBD_FS_ProductStrDescriptor+0x34>)
 8019912:	4805      	ldr	r0, [pc, #20]	; (8019928 <USBD_FS_ProductStrDescriptor+0x38>)
 8019914:	f7f9 fd73 	bl	80133fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8019918:	4b02      	ldr	r3, [pc, #8]	; (8019924 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801991a:	4618      	mov	r0, r3
 801991c:	3708      	adds	r7, #8
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
 8019922:	bf00      	nop
 8019924:	2000c3d0 	.word	0x2000c3d0
 8019928:	0801c1f8 	.word	0x0801c1f8

0801992c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
 8019932:	4603      	mov	r3, r0
 8019934:	6039      	str	r1, [r7, #0]
 8019936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019938:	683a      	ldr	r2, [r7, #0]
 801993a:	4904      	ldr	r1, [pc, #16]	; (801994c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801993c:	4804      	ldr	r0, [pc, #16]	; (8019950 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801993e:	f7f9 fd5e 	bl	80133fe <USBD_GetString>
  return USBD_StrDesc;
 8019942:	4b02      	ldr	r3, [pc, #8]	; (801994c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019944:	4618      	mov	r0, r3
 8019946:	3708      	adds	r7, #8
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	2000c3d0 	.word	0x2000c3d0
 8019950:	0801c210 	.word	0x0801c210

08019954 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b082      	sub	sp, #8
 8019958:	af00      	add	r7, sp, #0
 801995a:	4603      	mov	r3, r0
 801995c:	6039      	str	r1, [r7, #0]
 801995e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019960:	683b      	ldr	r3, [r7, #0]
 8019962:	221a      	movs	r2, #26
 8019964:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019966:	f000 f843 	bl	80199f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801996a:	4b02      	ldr	r3, [pc, #8]	; (8019974 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801996c:	4618      	mov	r0, r3
 801996e:	3708      	adds	r7, #8
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}
 8019974:	20000184 	.word	0x20000184

08019978 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	4603      	mov	r3, r0
 8019980:	6039      	str	r1, [r7, #0]
 8019982:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019984:	79fb      	ldrb	r3, [r7, #7]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d105      	bne.n	8019996 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801998a:	683a      	ldr	r2, [r7, #0]
 801998c:	4907      	ldr	r1, [pc, #28]	; (80199ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801998e:	4808      	ldr	r0, [pc, #32]	; (80199b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019990:	f7f9 fd35 	bl	80133fe <USBD_GetString>
 8019994:	e004      	b.n	80199a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019996:	683a      	ldr	r2, [r7, #0]
 8019998:	4904      	ldr	r1, [pc, #16]	; (80199ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801999a:	4805      	ldr	r0, [pc, #20]	; (80199b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801999c:	f7f9 fd2f 	bl	80133fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80199a0:	4b02      	ldr	r3, [pc, #8]	; (80199ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80199a2:	4618      	mov	r0, r3
 80199a4:	3708      	adds	r7, #8
 80199a6:	46bd      	mov	sp, r7
 80199a8:	bd80      	pop	{r7, pc}
 80199aa:	bf00      	nop
 80199ac:	2000c3d0 	.word	0x2000c3d0
 80199b0:	0801c224 	.word	0x0801c224

080199b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b082      	sub	sp, #8
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	4603      	mov	r3, r0
 80199bc:	6039      	str	r1, [r7, #0]
 80199be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80199c0:	79fb      	ldrb	r3, [r7, #7]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d105      	bne.n	80199d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80199c6:	683a      	ldr	r2, [r7, #0]
 80199c8:	4907      	ldr	r1, [pc, #28]	; (80199e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80199ca:	4808      	ldr	r0, [pc, #32]	; (80199ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80199cc:	f7f9 fd17 	bl	80133fe <USBD_GetString>
 80199d0:	e004      	b.n	80199dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80199d2:	683a      	ldr	r2, [r7, #0]
 80199d4:	4904      	ldr	r1, [pc, #16]	; (80199e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80199d6:	4805      	ldr	r0, [pc, #20]	; (80199ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80199d8:	f7f9 fd11 	bl	80133fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80199dc:	4b02      	ldr	r3, [pc, #8]	; (80199e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3708      	adds	r7, #8
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	bf00      	nop
 80199e8:	2000c3d0 	.word	0x2000c3d0
 80199ec:	0801c230 	.word	0x0801c230

080199f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b084      	sub	sp, #16
 80199f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80199f6:	4b0f      	ldr	r3, [pc, #60]	; (8019a34 <Get_SerialNum+0x44>)
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80199fc:	4b0e      	ldr	r3, [pc, #56]	; (8019a38 <Get_SerialNum+0x48>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019a02:	4b0e      	ldr	r3, [pc, #56]	; (8019a3c <Get_SerialNum+0x4c>)
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019a08:	68fa      	ldr	r2, [r7, #12]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	4413      	add	r3, r2
 8019a0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d009      	beq.n	8019a2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019a16:	2208      	movs	r2, #8
 8019a18:	4909      	ldr	r1, [pc, #36]	; (8019a40 <Get_SerialNum+0x50>)
 8019a1a:	68f8      	ldr	r0, [r7, #12]
 8019a1c:	f000 f814 	bl	8019a48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019a20:	2204      	movs	r2, #4
 8019a22:	4908      	ldr	r1, [pc, #32]	; (8019a44 <Get_SerialNum+0x54>)
 8019a24:	68b8      	ldr	r0, [r7, #8]
 8019a26:	f000 f80f 	bl	8019a48 <IntToUnicode>
  }
}
 8019a2a:	bf00      	nop
 8019a2c:	3710      	adds	r7, #16
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	bd80      	pop	{r7, pc}
 8019a32:	bf00      	nop
 8019a34:	1ffff7ac 	.word	0x1ffff7ac
 8019a38:	1ffff7b0 	.word	0x1ffff7b0
 8019a3c:	1ffff7b4 	.word	0x1ffff7b4
 8019a40:	20000186 	.word	0x20000186
 8019a44:	20000196 	.word	0x20000196

08019a48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b087      	sub	sp, #28
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	4613      	mov	r3, r2
 8019a54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019a56:	2300      	movs	r3, #0
 8019a58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	75fb      	strb	r3, [r7, #23]
 8019a5e:	e027      	b.n	8019ab0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	0f1b      	lsrs	r3, r3, #28
 8019a64:	2b09      	cmp	r3, #9
 8019a66:	d80b      	bhi.n	8019a80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	0f1b      	lsrs	r3, r3, #28
 8019a6c:	b2da      	uxtb	r2, r3
 8019a6e:	7dfb      	ldrb	r3, [r7, #23]
 8019a70:	005b      	lsls	r3, r3, #1
 8019a72:	4619      	mov	r1, r3
 8019a74:	68bb      	ldr	r3, [r7, #8]
 8019a76:	440b      	add	r3, r1
 8019a78:	3230      	adds	r2, #48	; 0x30
 8019a7a:	b2d2      	uxtb	r2, r2
 8019a7c:	701a      	strb	r2, [r3, #0]
 8019a7e:	e00a      	b.n	8019a96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	0f1b      	lsrs	r3, r3, #28
 8019a84:	b2da      	uxtb	r2, r3
 8019a86:	7dfb      	ldrb	r3, [r7, #23]
 8019a88:	005b      	lsls	r3, r3, #1
 8019a8a:	4619      	mov	r1, r3
 8019a8c:	68bb      	ldr	r3, [r7, #8]
 8019a8e:	440b      	add	r3, r1
 8019a90:	3237      	adds	r2, #55	; 0x37
 8019a92:	b2d2      	uxtb	r2, r2
 8019a94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	011b      	lsls	r3, r3, #4
 8019a9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019a9c:	7dfb      	ldrb	r3, [r7, #23]
 8019a9e:	005b      	lsls	r3, r3, #1
 8019aa0:	3301      	adds	r3, #1
 8019aa2:	68ba      	ldr	r2, [r7, #8]
 8019aa4:	4413      	add	r3, r2
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019aaa:	7dfb      	ldrb	r3, [r7, #23]
 8019aac:	3301      	adds	r3, #1
 8019aae:	75fb      	strb	r3, [r7, #23]
 8019ab0:	7dfa      	ldrb	r2, [r7, #23]
 8019ab2:	79fb      	ldrb	r3, [r7, #7]
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d3d3      	bcc.n	8019a60 <IntToUnicode+0x18>
  }
}
 8019ab8:	bf00      	nop
 8019aba:	bf00      	nop
 8019abc:	371c      	adds	r7, #28
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac4:	4770      	bx	lr
	...

08019ac8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019ac8:	b580      	push	{r7, lr}
 8019aca:	b084      	sub	sp, #16
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	4a10      	ldr	r2, [pc, #64]	; (8019b18 <HAL_PCD_MspInit+0x50>)
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d119      	bne.n	8019b0e <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019ada:	4b10      	ldr	r3, [pc, #64]	; (8019b1c <HAL_PCD_MspInit+0x54>)
 8019adc:	69db      	ldr	r3, [r3, #28]
 8019ade:	4a0f      	ldr	r2, [pc, #60]	; (8019b1c <HAL_PCD_MspInit+0x54>)
 8019ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019ae4:	61d3      	str	r3, [r2, #28]
 8019ae6:	4b0d      	ldr	r3, [pc, #52]	; (8019b1c <HAL_PCD_MspInit+0x54>)
 8019ae8:	69db      	ldr	r3, [r3, #28]
 8019aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019aee:	60fb      	str	r3, [r7, #12]
 8019af0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8019af2:	4b0b      	ldr	r3, [pc, #44]	; (8019b20 <HAL_PCD_MspInit+0x58>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	4a0a      	ldr	r2, [pc, #40]	; (8019b20 <HAL_PCD_MspInit+0x58>)
 8019af8:	f043 0320 	orr.w	r3, r3, #32
 8019afc:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8019afe:	2200      	movs	r2, #0
 8019b00:	2100      	movs	r1, #0
 8019b02:	204b      	movs	r0, #75	; 0x4b
 8019b04:	f7ec fdf7 	bl	80066f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019b08:	204b      	movs	r0, #75	; 0x4b
 8019b0a:	f7ec fe10 	bl	800672e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019b0e:	bf00      	nop
 8019b10:	3710      	adds	r7, #16
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	40005c00 	.word	0x40005c00
 8019b1c:	40021000 	.word	0x40021000
 8019b20:	40010000 	.word	0x40010000

08019b24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b082      	sub	sp, #8
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8019b38:	4619      	mov	r1, r3
 8019b3a:	4610      	mov	r0, r2
 8019b3c:	f7f8 fd2b 	bl	8012596 <USBD_LL_SetupStage>
}
 8019b40:	bf00      	nop
 8019b42:	3708      	adds	r7, #8
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}

08019b48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b082      	sub	sp, #8
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	460b      	mov	r3, r1
 8019b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8019b5a:	78fa      	ldrb	r2, [r7, #3]
 8019b5c:	6879      	ldr	r1, [r7, #4]
 8019b5e:	4613      	mov	r3, r2
 8019b60:	009b      	lsls	r3, r3, #2
 8019b62:	4413      	add	r3, r2
 8019b64:	00db      	lsls	r3, r3, #3
 8019b66:	440b      	add	r3, r1
 8019b68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8019b6c:	681a      	ldr	r2, [r3, #0]
 8019b6e:	78fb      	ldrb	r3, [r7, #3]
 8019b70:	4619      	mov	r1, r3
 8019b72:	f7f8 fd5d 	bl	8012630 <USBD_LL_DataOutStage>
}
 8019b76:	bf00      	nop
 8019b78:	3708      	adds	r7, #8
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd80      	pop	{r7, pc}

08019b7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b7e:	b580      	push	{r7, lr}
 8019b80:	b082      	sub	sp, #8
 8019b82:	af00      	add	r7, sp, #0
 8019b84:	6078      	str	r0, [r7, #4]
 8019b86:	460b      	mov	r3, r1
 8019b88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8019b90:	78fa      	ldrb	r2, [r7, #3]
 8019b92:	6879      	ldr	r1, [r7, #4]
 8019b94:	4613      	mov	r3, r2
 8019b96:	009b      	lsls	r3, r3, #2
 8019b98:	4413      	add	r3, r2
 8019b9a:	00db      	lsls	r3, r3, #3
 8019b9c:	440b      	add	r3, r1
 8019b9e:	333c      	adds	r3, #60	; 0x3c
 8019ba0:	681a      	ldr	r2, [r3, #0]
 8019ba2:	78fb      	ldrb	r3, [r7, #3]
 8019ba4:	4619      	mov	r1, r3
 8019ba6:	f7f8 fdb4 	bl	8012712 <USBD_LL_DataInStage>
}
 8019baa:	bf00      	nop
 8019bac:	3708      	adds	r7, #8
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}

08019bb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bb2:	b580      	push	{r7, lr}
 8019bb4:	b082      	sub	sp, #8
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f7f8 fec7 	bl	8012954 <USBD_LL_SOF>
}
 8019bc6:	bf00      	nop
 8019bc8:	3708      	adds	r7, #8
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}

08019bce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bce:	b580      	push	{r7, lr}
 8019bd0:	b084      	sub	sp, #16
 8019bd2:	af00      	add	r7, sp, #0
 8019bd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	689b      	ldr	r3, [r3, #8]
 8019bde:	2b02      	cmp	r3, #2
 8019be0:	d001      	beq.n	8019be6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019be2:	f7ea fcd7 	bl	8004594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8019bec:	7bfa      	ldrb	r2, [r7, #15]
 8019bee:	4611      	mov	r1, r2
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f7f8 fe74 	bl	80128de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	f7f8 fe2d 	bl	801285c <USBD_LL_Reset>
}
 8019c02:	bf00      	nop
 8019c04:	3710      	adds	r7, #16
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
	...

08019c0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b082      	sub	sp, #8
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f7f8 fe6f 	bl	80128fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	699b      	ldr	r3, [r3, #24]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d005      	beq.n	8019c34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019c28:	4b04      	ldr	r3, [pc, #16]	; (8019c3c <HAL_PCD_SuspendCallback+0x30>)
 8019c2a:	691b      	ldr	r3, [r3, #16]
 8019c2c:	4a03      	ldr	r2, [pc, #12]	; (8019c3c <HAL_PCD_SuspendCallback+0x30>)
 8019c2e:	f043 0306 	orr.w	r3, r3, #6
 8019c32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019c34:	bf00      	nop
 8019c36:	3708      	adds	r7, #8
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}
 8019c3c:	e000ed00 	.word	0xe000ed00

08019c40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b082      	sub	sp, #8
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f7f8 fe6a 	bl	8012928 <USBD_LL_Resume>
}
 8019c54:	bf00      	nop
 8019c56:	3708      	adds	r7, #8
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}

08019c5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b082      	sub	sp, #8
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8019c64:	4a29      	ldr	r2, [pc, #164]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	4a27      	ldr	r2, [pc, #156]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8019c74:	4b25      	ldr	r3, [pc, #148]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c76:	4a26      	ldr	r2, [pc, #152]	; (8019d10 <USBD_LL_Init+0xb4>)
 8019c78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019c7a:	4b24      	ldr	r3, [pc, #144]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c7c:	2208      	movs	r2, #8
 8019c7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019c80:	4b22      	ldr	r3, [pc, #136]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c82:	2202      	movs	r2, #2
 8019c84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019c86:	4b21      	ldr	r3, [pc, #132]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c88:	2202      	movs	r2, #2
 8019c8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019c8c:	4b1f      	ldr	r3, [pc, #124]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019c92:	4b1e      	ldr	r3, [pc, #120]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c94:	2200      	movs	r2, #0
 8019c96:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019c98:	4b1c      	ldr	r3, [pc, #112]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019c9e:	481b      	ldr	r0, [pc, #108]	; (8019d0c <USBD_LL_Init+0xb0>)
 8019ca0:	f7ed faf4 	bl	800728c <HAL_PCD_Init>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d001      	beq.n	8019cae <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8019caa:	f7ea fc73 	bl	8004594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019cb4:	2318      	movs	r3, #24
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	2100      	movs	r1, #0
 8019cba:	f7ee ff67 	bl	8008b8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019cc4:	2358      	movs	r3, #88	; 0x58
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	2180      	movs	r1, #128	; 0x80
 8019cca:	f7ee ff5f 	bl	8008b8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019cd4:	23c0      	movs	r3, #192	; 0xc0
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	2181      	movs	r1, #129	; 0x81
 8019cda:	f7ee ff57 	bl	8008b8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019ce4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019ce8:	2200      	movs	r2, #0
 8019cea:	2101      	movs	r1, #1
 8019cec:	f7ee ff4e 	bl	8008b8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	2182      	movs	r1, #130	; 0x82
 8019cfe:	f7ee ff45 	bl	8008b8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019d02:	2300      	movs	r3, #0
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	3708      	adds	r7, #8
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}
 8019d0c:	2000c5d0 	.word	0x2000c5d0
 8019d10:	40005c00 	.word	0x40005c00

08019d14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b084      	sub	sp, #16
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d20:	2300      	movs	r3, #0
 8019d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f7ed fb80 	bl	8007430 <HAL_PCD_Start>
 8019d30:	4603      	mov	r3, r0
 8019d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d34:	7bfb      	ldrb	r3, [r7, #15]
 8019d36:	4618      	mov	r0, r3
 8019d38:	f000 f954 	bl	8019fe4 <USBD_Get_USB_Status>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d42:	4618      	mov	r0, r3
 8019d44:	3710      	adds	r7, #16
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}

08019d4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019d4a:	b580      	push	{r7, lr}
 8019d4c:	b084      	sub	sp, #16
 8019d4e:	af00      	add	r7, sp, #0
 8019d50:	6078      	str	r0, [r7, #4]
 8019d52:	4608      	mov	r0, r1
 8019d54:	4611      	mov	r1, r2
 8019d56:	461a      	mov	r2, r3
 8019d58:	4603      	mov	r3, r0
 8019d5a:	70fb      	strb	r3, [r7, #3]
 8019d5c:	460b      	mov	r3, r1
 8019d5e:	70bb      	strb	r3, [r7, #2]
 8019d60:	4613      	mov	r3, r2
 8019d62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d64:	2300      	movs	r3, #0
 8019d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019d72:	78bb      	ldrb	r3, [r7, #2]
 8019d74:	883a      	ldrh	r2, [r7, #0]
 8019d76:	78f9      	ldrb	r1, [r7, #3]
 8019d78:	f7ed fc79 	bl	800766e <HAL_PCD_EP_Open>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d80:	7bfb      	ldrb	r3, [r7, #15]
 8019d82:	4618      	mov	r0, r3
 8019d84:	f000 f92e 	bl	8019fe4 <USBD_Get_USB_Status>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d8e:	4618      	mov	r0, r3
 8019d90:	3710      	adds	r7, #16
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}

08019d96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d96:	b580      	push	{r7, lr}
 8019d98:	b084      	sub	sp, #16
 8019d9a:	af00      	add	r7, sp, #0
 8019d9c:	6078      	str	r0, [r7, #4]
 8019d9e:	460b      	mov	r3, r1
 8019da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019da2:	2300      	movs	r3, #0
 8019da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019da6:	2300      	movs	r3, #0
 8019da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019db0:	78fa      	ldrb	r2, [r7, #3]
 8019db2:	4611      	mov	r1, r2
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7ed fcb7 	bl	8007728 <HAL_PCD_EP_Close>
 8019dba:	4603      	mov	r3, r0
 8019dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019dbe:	7bfb      	ldrb	r3, [r7, #15]
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	f000 f90f 	bl	8019fe4 <USBD_Get_USB_Status>
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3710      	adds	r7, #16
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}

08019dd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019dd4:	b580      	push	{r7, lr}
 8019dd6:	b084      	sub	sp, #16
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	460b      	mov	r3, r1
 8019dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019de0:	2300      	movs	r3, #0
 8019de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019de4:	2300      	movs	r3, #0
 8019de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019dee:	78fa      	ldrb	r2, [r7, #3]
 8019df0:	4611      	mov	r1, r2
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7ed fd60 	bl	80078b8 <HAL_PCD_EP_SetStall>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019dfc:	7bfb      	ldrb	r3, [r7, #15]
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f000 f8f0 	bl	8019fe4 <USBD_Get_USB_Status>
 8019e04:	4603      	mov	r3, r0
 8019e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	3710      	adds	r7, #16
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}

08019e12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e12:	b580      	push	{r7, lr}
 8019e14:	b084      	sub	sp, #16
 8019e16:	af00      	add	r7, sp, #0
 8019e18:	6078      	str	r0, [r7, #4]
 8019e1a:	460b      	mov	r3, r1
 8019e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e1e:	2300      	movs	r3, #0
 8019e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e22:	2300      	movs	r3, #0
 8019e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019e2c:	78fa      	ldrb	r2, [r7, #3]
 8019e2e:	4611      	mov	r1, r2
 8019e30:	4618      	mov	r0, r3
 8019e32:	f7ed fd93 	bl	800795c <HAL_PCD_EP_ClrStall>
 8019e36:	4603      	mov	r3, r0
 8019e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e3a:	7bfb      	ldrb	r3, [r7, #15]
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f000 f8d1 	bl	8019fe4 <USBD_Get_USB_Status>
 8019e42:	4603      	mov	r3, r0
 8019e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	3710      	adds	r7, #16
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}

08019e50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e50:	b480      	push	{r7}
 8019e52:	b085      	sub	sp, #20
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
 8019e58:	460b      	mov	r3, r1
 8019e5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019e62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	da0c      	bge.n	8019e86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019e6c:	78fb      	ldrb	r3, [r7, #3]
 8019e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e72:	68f9      	ldr	r1, [r7, #12]
 8019e74:	1c5a      	adds	r2, r3, #1
 8019e76:	4613      	mov	r3, r2
 8019e78:	009b      	lsls	r3, r3, #2
 8019e7a:	4413      	add	r3, r2
 8019e7c:	00db      	lsls	r3, r3, #3
 8019e7e:	440b      	add	r3, r1
 8019e80:	3302      	adds	r3, #2
 8019e82:	781b      	ldrb	r3, [r3, #0]
 8019e84:	e00b      	b.n	8019e9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019e86:	78fb      	ldrb	r3, [r7, #3]
 8019e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019e8c:	68f9      	ldr	r1, [r7, #12]
 8019e8e:	4613      	mov	r3, r2
 8019e90:	009b      	lsls	r3, r3, #2
 8019e92:	4413      	add	r3, r2
 8019e94:	00db      	lsls	r3, r3, #3
 8019e96:	440b      	add	r3, r1
 8019e98:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8019e9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	3714      	adds	r7, #20
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea8:	4770      	bx	lr

08019eaa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019eaa:	b580      	push	{r7, lr}
 8019eac:	b084      	sub	sp, #16
 8019eae:	af00      	add	r7, sp, #0
 8019eb0:	6078      	str	r0, [r7, #4]
 8019eb2:	460b      	mov	r3, r1
 8019eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019eba:	2300      	movs	r3, #0
 8019ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ec4:	78fa      	ldrb	r2, [r7, #3]
 8019ec6:	4611      	mov	r1, r2
 8019ec8:	4618      	mov	r0, r3
 8019eca:	f7ed fbab 	bl	8007624 <HAL_PCD_SetAddress>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ed2:	7bfb      	ldrb	r3, [r7, #15]
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f000 f885 	bl	8019fe4 <USBD_Get_USB_Status>
 8019eda:	4603      	mov	r3, r0
 8019edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	3710      	adds	r7, #16
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd80      	pop	{r7, pc}

08019ee8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b086      	sub	sp, #24
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	60f8      	str	r0, [r7, #12]
 8019ef0:	607a      	str	r2, [r7, #4]
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	72fb      	strb	r3, [r7, #11]
 8019ef8:	4613      	mov	r3, r2
 8019efa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019efc:	2300      	movs	r3, #0
 8019efe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f00:	2300      	movs	r3, #0
 8019f02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019f0a:	893b      	ldrh	r3, [r7, #8]
 8019f0c:	7af9      	ldrb	r1, [r7, #11]
 8019f0e:	687a      	ldr	r2, [r7, #4]
 8019f10:	f7ed fc9b 	bl	800784a <HAL_PCD_EP_Transmit>
 8019f14:	4603      	mov	r3, r0
 8019f16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f18:	7dfb      	ldrb	r3, [r7, #23]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f000 f862 	bl	8019fe4 <USBD_Get_USB_Status>
 8019f20:	4603      	mov	r3, r0
 8019f22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019f24:	7dbb      	ldrb	r3, [r7, #22]
}
 8019f26:	4618      	mov	r0, r3
 8019f28:	3718      	adds	r7, #24
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}

08019f2e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019f2e:	b580      	push	{r7, lr}
 8019f30:	b086      	sub	sp, #24
 8019f32:	af00      	add	r7, sp, #0
 8019f34:	60f8      	str	r0, [r7, #12]
 8019f36:	607a      	str	r2, [r7, #4]
 8019f38:	461a      	mov	r2, r3
 8019f3a:	460b      	mov	r3, r1
 8019f3c:	72fb      	strb	r3, [r7, #11]
 8019f3e:	4613      	mov	r3, r2
 8019f40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f42:	2300      	movs	r3, #0
 8019f44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f46:	2300      	movs	r3, #0
 8019f48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019f50:	893b      	ldrh	r3, [r7, #8]
 8019f52:	7af9      	ldrb	r1, [r7, #11]
 8019f54:	687a      	ldr	r2, [r7, #4]
 8019f56:	f7ed fc2f 	bl	80077b8 <HAL_PCD_EP_Receive>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f5e:	7dfb      	ldrb	r3, [r7, #23]
 8019f60:	4618      	mov	r0, r3
 8019f62:	f000 f83f 	bl	8019fe4 <USBD_Get_USB_Status>
 8019f66:	4603      	mov	r3, r0
 8019f68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019f6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3718      	adds	r7, #24
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}

08019f74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
 8019f7c:	460b      	mov	r3, r1
 8019f7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019f86:	78fa      	ldrb	r2, [r7, #3]
 8019f88:	4611      	mov	r1, r2
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	f7ed fc45 	bl	800781a <HAL_PCD_EP_GetRxCount>
 8019f90:	4603      	mov	r3, r0
}
 8019f92:	4618      	mov	r0, r3
 8019f94:	3708      	adds	r7, #8
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}
	...

08019f9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b083      	sub	sp, #12
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019fa4:	4b03      	ldr	r3, [pc, #12]	; (8019fb4 <USBD_static_malloc+0x18>)
}
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	370c      	adds	r7, #12
 8019faa:	46bd      	mov	sp, r7
 8019fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb0:	4770      	bx	lr
 8019fb2:	bf00      	nop
 8019fb4:	2000c8bc 	.word	0x2000c8bc

08019fb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019fb8:	b480      	push	{r7}
 8019fba:	b083      	sub	sp, #12
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]

}
 8019fc0:	bf00      	nop
 8019fc2:	370c      	adds	r7, #12
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fca:	4770      	bx	lr

08019fcc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019fcc:	b480      	push	{r7}
 8019fce:	b083      	sub	sp, #12
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	460b      	mov	r3, r1
 8019fd6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8019fd8:	bf00      	nop
 8019fda:	370c      	adds	r7, #12
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe2:	4770      	bx	lr

08019fe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019fe4:	b480      	push	{r7}
 8019fe6:	b085      	sub	sp, #20
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	4603      	mov	r3, r0
 8019fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fee:	2300      	movs	r3, #0
 8019ff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019ff2:	79fb      	ldrb	r3, [r7, #7]
 8019ff4:	2b03      	cmp	r3, #3
 8019ff6:	d817      	bhi.n	801a028 <USBD_Get_USB_Status+0x44>
 8019ff8:	a201      	add	r2, pc, #4	; (adr r2, 801a000 <USBD_Get_USB_Status+0x1c>)
 8019ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ffe:	bf00      	nop
 801a000:	0801a011 	.word	0x0801a011
 801a004:	0801a017 	.word	0x0801a017
 801a008:	0801a01d 	.word	0x0801a01d
 801a00c:	0801a023 	.word	0x0801a023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a010:	2300      	movs	r3, #0
 801a012:	73fb      	strb	r3, [r7, #15]
    break;
 801a014:	e00b      	b.n	801a02e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a016:	2302      	movs	r3, #2
 801a018:	73fb      	strb	r3, [r7, #15]
    break;
 801a01a:	e008      	b.n	801a02e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a01c:	2301      	movs	r3, #1
 801a01e:	73fb      	strb	r3, [r7, #15]
    break;
 801a020:	e005      	b.n	801a02e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a022:	2302      	movs	r3, #2
 801a024:	73fb      	strb	r3, [r7, #15]
    break;
 801a026:	e002      	b.n	801a02e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a028:	2302      	movs	r3, #2
 801a02a:	73fb      	strb	r3, [r7, #15]
    break;
 801a02c:	bf00      	nop
  }
  return usb_status;
 801a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a030:	4618      	mov	r0, r3
 801a032:	3714      	adds	r7, #20
 801a034:	46bd      	mov	sp, r7
 801a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03a:	4770      	bx	lr

0801a03c <siprintf>:
 801a03c:	b40e      	push	{r1, r2, r3}
 801a03e:	b500      	push	{lr}
 801a040:	b09c      	sub	sp, #112	; 0x70
 801a042:	ab1d      	add	r3, sp, #116	; 0x74
 801a044:	9002      	str	r0, [sp, #8]
 801a046:	9006      	str	r0, [sp, #24]
 801a048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a04c:	4809      	ldr	r0, [pc, #36]	; (801a074 <siprintf+0x38>)
 801a04e:	9107      	str	r1, [sp, #28]
 801a050:	9104      	str	r1, [sp, #16]
 801a052:	4909      	ldr	r1, [pc, #36]	; (801a078 <siprintf+0x3c>)
 801a054:	f853 2b04 	ldr.w	r2, [r3], #4
 801a058:	9105      	str	r1, [sp, #20]
 801a05a:	6800      	ldr	r0, [r0, #0]
 801a05c:	9301      	str	r3, [sp, #4]
 801a05e:	a902      	add	r1, sp, #8
 801a060:	f000 f992 	bl	801a388 <_svfiprintf_r>
 801a064:	9b02      	ldr	r3, [sp, #8]
 801a066:	2200      	movs	r2, #0
 801a068:	701a      	strb	r2, [r3, #0]
 801a06a:	b01c      	add	sp, #112	; 0x70
 801a06c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a070:	b003      	add	sp, #12
 801a072:	4770      	bx	lr
 801a074:	200001ec 	.word	0x200001ec
 801a078:	ffff0208 	.word	0xffff0208

0801a07c <memset>:
 801a07c:	4402      	add	r2, r0
 801a07e:	4603      	mov	r3, r0
 801a080:	4293      	cmp	r3, r2
 801a082:	d100      	bne.n	801a086 <memset+0xa>
 801a084:	4770      	bx	lr
 801a086:	f803 1b01 	strb.w	r1, [r3], #1
 801a08a:	e7f9      	b.n	801a080 <memset+0x4>

0801a08c <__errno>:
 801a08c:	4b01      	ldr	r3, [pc, #4]	; (801a094 <__errno+0x8>)
 801a08e:	6818      	ldr	r0, [r3, #0]
 801a090:	4770      	bx	lr
 801a092:	bf00      	nop
 801a094:	200001ec 	.word	0x200001ec

0801a098 <__libc_init_array>:
 801a098:	b570      	push	{r4, r5, r6, lr}
 801a09a:	4d0d      	ldr	r5, [pc, #52]	; (801a0d0 <__libc_init_array+0x38>)
 801a09c:	4c0d      	ldr	r4, [pc, #52]	; (801a0d4 <__libc_init_array+0x3c>)
 801a09e:	1b64      	subs	r4, r4, r5
 801a0a0:	10a4      	asrs	r4, r4, #2
 801a0a2:	2600      	movs	r6, #0
 801a0a4:	42a6      	cmp	r6, r4
 801a0a6:	d109      	bne.n	801a0bc <__libc_init_array+0x24>
 801a0a8:	4d0b      	ldr	r5, [pc, #44]	; (801a0d8 <__libc_init_array+0x40>)
 801a0aa:	4c0c      	ldr	r4, [pc, #48]	; (801a0dc <__libc_init_array+0x44>)
 801a0ac:	f001 fcac 	bl	801ba08 <_init>
 801a0b0:	1b64      	subs	r4, r4, r5
 801a0b2:	10a4      	asrs	r4, r4, #2
 801a0b4:	2600      	movs	r6, #0
 801a0b6:	42a6      	cmp	r6, r4
 801a0b8:	d105      	bne.n	801a0c6 <__libc_init_array+0x2e>
 801a0ba:	bd70      	pop	{r4, r5, r6, pc}
 801a0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0c0:	4798      	blx	r3
 801a0c2:	3601      	adds	r6, #1
 801a0c4:	e7ee      	b.n	801a0a4 <__libc_init_array+0xc>
 801a0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0ca:	4798      	blx	r3
 801a0cc:	3601      	adds	r6, #1
 801a0ce:	e7f2      	b.n	801a0b6 <__libc_init_array+0x1e>
 801a0d0:	0801dfb8 	.word	0x0801dfb8
 801a0d4:	0801dfb8 	.word	0x0801dfb8
 801a0d8:	0801dfb8 	.word	0x0801dfb8
 801a0dc:	0801dfbc 	.word	0x0801dfbc

0801a0e0 <__retarget_lock_acquire_recursive>:
 801a0e0:	4770      	bx	lr

0801a0e2 <__retarget_lock_release_recursive>:
 801a0e2:	4770      	bx	lr

0801a0e4 <_free_r>:
 801a0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a0e6:	2900      	cmp	r1, #0
 801a0e8:	d044      	beq.n	801a174 <_free_r+0x90>
 801a0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a0ee:	9001      	str	r0, [sp, #4]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	f1a1 0404 	sub.w	r4, r1, #4
 801a0f6:	bfb8      	it	lt
 801a0f8:	18e4      	addlt	r4, r4, r3
 801a0fa:	f000 f8df 	bl	801a2bc <__malloc_lock>
 801a0fe:	4a1e      	ldr	r2, [pc, #120]	; (801a178 <_free_r+0x94>)
 801a100:	9801      	ldr	r0, [sp, #4]
 801a102:	6813      	ldr	r3, [r2, #0]
 801a104:	b933      	cbnz	r3, 801a114 <_free_r+0x30>
 801a106:	6063      	str	r3, [r4, #4]
 801a108:	6014      	str	r4, [r2, #0]
 801a10a:	b003      	add	sp, #12
 801a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a110:	f000 b8da 	b.w	801a2c8 <__malloc_unlock>
 801a114:	42a3      	cmp	r3, r4
 801a116:	d908      	bls.n	801a12a <_free_r+0x46>
 801a118:	6825      	ldr	r5, [r4, #0]
 801a11a:	1961      	adds	r1, r4, r5
 801a11c:	428b      	cmp	r3, r1
 801a11e:	bf01      	itttt	eq
 801a120:	6819      	ldreq	r1, [r3, #0]
 801a122:	685b      	ldreq	r3, [r3, #4]
 801a124:	1949      	addeq	r1, r1, r5
 801a126:	6021      	streq	r1, [r4, #0]
 801a128:	e7ed      	b.n	801a106 <_free_r+0x22>
 801a12a:	461a      	mov	r2, r3
 801a12c:	685b      	ldr	r3, [r3, #4]
 801a12e:	b10b      	cbz	r3, 801a134 <_free_r+0x50>
 801a130:	42a3      	cmp	r3, r4
 801a132:	d9fa      	bls.n	801a12a <_free_r+0x46>
 801a134:	6811      	ldr	r1, [r2, #0]
 801a136:	1855      	adds	r5, r2, r1
 801a138:	42a5      	cmp	r5, r4
 801a13a:	d10b      	bne.n	801a154 <_free_r+0x70>
 801a13c:	6824      	ldr	r4, [r4, #0]
 801a13e:	4421      	add	r1, r4
 801a140:	1854      	adds	r4, r2, r1
 801a142:	42a3      	cmp	r3, r4
 801a144:	6011      	str	r1, [r2, #0]
 801a146:	d1e0      	bne.n	801a10a <_free_r+0x26>
 801a148:	681c      	ldr	r4, [r3, #0]
 801a14a:	685b      	ldr	r3, [r3, #4]
 801a14c:	6053      	str	r3, [r2, #4]
 801a14e:	440c      	add	r4, r1
 801a150:	6014      	str	r4, [r2, #0]
 801a152:	e7da      	b.n	801a10a <_free_r+0x26>
 801a154:	d902      	bls.n	801a15c <_free_r+0x78>
 801a156:	230c      	movs	r3, #12
 801a158:	6003      	str	r3, [r0, #0]
 801a15a:	e7d6      	b.n	801a10a <_free_r+0x26>
 801a15c:	6825      	ldr	r5, [r4, #0]
 801a15e:	1961      	adds	r1, r4, r5
 801a160:	428b      	cmp	r3, r1
 801a162:	bf04      	itt	eq
 801a164:	6819      	ldreq	r1, [r3, #0]
 801a166:	685b      	ldreq	r3, [r3, #4]
 801a168:	6063      	str	r3, [r4, #4]
 801a16a:	bf04      	itt	eq
 801a16c:	1949      	addeq	r1, r1, r5
 801a16e:	6021      	streq	r1, [r4, #0]
 801a170:	6054      	str	r4, [r2, #4]
 801a172:	e7ca      	b.n	801a10a <_free_r+0x26>
 801a174:	b003      	add	sp, #12
 801a176:	bd30      	pop	{r4, r5, pc}
 801a178:	2000cc1c 	.word	0x2000cc1c

0801a17c <sbrk_aligned>:
 801a17c:	b570      	push	{r4, r5, r6, lr}
 801a17e:	4e0e      	ldr	r6, [pc, #56]	; (801a1b8 <sbrk_aligned+0x3c>)
 801a180:	460c      	mov	r4, r1
 801a182:	6831      	ldr	r1, [r6, #0]
 801a184:	4605      	mov	r5, r0
 801a186:	b911      	cbnz	r1, 801a18e <sbrk_aligned+0x12>
 801a188:	f000 fba6 	bl	801a8d8 <_sbrk_r>
 801a18c:	6030      	str	r0, [r6, #0]
 801a18e:	4621      	mov	r1, r4
 801a190:	4628      	mov	r0, r5
 801a192:	f000 fba1 	bl	801a8d8 <_sbrk_r>
 801a196:	1c43      	adds	r3, r0, #1
 801a198:	d00a      	beq.n	801a1b0 <sbrk_aligned+0x34>
 801a19a:	1cc4      	adds	r4, r0, #3
 801a19c:	f024 0403 	bic.w	r4, r4, #3
 801a1a0:	42a0      	cmp	r0, r4
 801a1a2:	d007      	beq.n	801a1b4 <sbrk_aligned+0x38>
 801a1a4:	1a21      	subs	r1, r4, r0
 801a1a6:	4628      	mov	r0, r5
 801a1a8:	f000 fb96 	bl	801a8d8 <_sbrk_r>
 801a1ac:	3001      	adds	r0, #1
 801a1ae:	d101      	bne.n	801a1b4 <sbrk_aligned+0x38>
 801a1b0:	f04f 34ff 	mov.w	r4, #4294967295
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	bd70      	pop	{r4, r5, r6, pc}
 801a1b8:	2000cc20 	.word	0x2000cc20

0801a1bc <_malloc_r>:
 801a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1c0:	1ccd      	adds	r5, r1, #3
 801a1c2:	f025 0503 	bic.w	r5, r5, #3
 801a1c6:	3508      	adds	r5, #8
 801a1c8:	2d0c      	cmp	r5, #12
 801a1ca:	bf38      	it	cc
 801a1cc:	250c      	movcc	r5, #12
 801a1ce:	2d00      	cmp	r5, #0
 801a1d0:	4607      	mov	r7, r0
 801a1d2:	db01      	blt.n	801a1d8 <_malloc_r+0x1c>
 801a1d4:	42a9      	cmp	r1, r5
 801a1d6:	d905      	bls.n	801a1e4 <_malloc_r+0x28>
 801a1d8:	230c      	movs	r3, #12
 801a1da:	603b      	str	r3, [r7, #0]
 801a1dc:	2600      	movs	r6, #0
 801a1de:	4630      	mov	r0, r6
 801a1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a2b8 <_malloc_r+0xfc>
 801a1e8:	f000 f868 	bl	801a2bc <__malloc_lock>
 801a1ec:	f8d8 3000 	ldr.w	r3, [r8]
 801a1f0:	461c      	mov	r4, r3
 801a1f2:	bb5c      	cbnz	r4, 801a24c <_malloc_r+0x90>
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	4638      	mov	r0, r7
 801a1f8:	f7ff ffc0 	bl	801a17c <sbrk_aligned>
 801a1fc:	1c43      	adds	r3, r0, #1
 801a1fe:	4604      	mov	r4, r0
 801a200:	d155      	bne.n	801a2ae <_malloc_r+0xf2>
 801a202:	f8d8 4000 	ldr.w	r4, [r8]
 801a206:	4626      	mov	r6, r4
 801a208:	2e00      	cmp	r6, #0
 801a20a:	d145      	bne.n	801a298 <_malloc_r+0xdc>
 801a20c:	2c00      	cmp	r4, #0
 801a20e:	d048      	beq.n	801a2a2 <_malloc_r+0xe6>
 801a210:	6823      	ldr	r3, [r4, #0]
 801a212:	4631      	mov	r1, r6
 801a214:	4638      	mov	r0, r7
 801a216:	eb04 0903 	add.w	r9, r4, r3
 801a21a:	f000 fb5d 	bl	801a8d8 <_sbrk_r>
 801a21e:	4581      	cmp	r9, r0
 801a220:	d13f      	bne.n	801a2a2 <_malloc_r+0xe6>
 801a222:	6821      	ldr	r1, [r4, #0]
 801a224:	1a6d      	subs	r5, r5, r1
 801a226:	4629      	mov	r1, r5
 801a228:	4638      	mov	r0, r7
 801a22a:	f7ff ffa7 	bl	801a17c <sbrk_aligned>
 801a22e:	3001      	adds	r0, #1
 801a230:	d037      	beq.n	801a2a2 <_malloc_r+0xe6>
 801a232:	6823      	ldr	r3, [r4, #0]
 801a234:	442b      	add	r3, r5
 801a236:	6023      	str	r3, [r4, #0]
 801a238:	f8d8 3000 	ldr.w	r3, [r8]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d038      	beq.n	801a2b2 <_malloc_r+0xf6>
 801a240:	685a      	ldr	r2, [r3, #4]
 801a242:	42a2      	cmp	r2, r4
 801a244:	d12b      	bne.n	801a29e <_malloc_r+0xe2>
 801a246:	2200      	movs	r2, #0
 801a248:	605a      	str	r2, [r3, #4]
 801a24a:	e00f      	b.n	801a26c <_malloc_r+0xb0>
 801a24c:	6822      	ldr	r2, [r4, #0]
 801a24e:	1b52      	subs	r2, r2, r5
 801a250:	d41f      	bmi.n	801a292 <_malloc_r+0xd6>
 801a252:	2a0b      	cmp	r2, #11
 801a254:	d917      	bls.n	801a286 <_malloc_r+0xca>
 801a256:	1961      	adds	r1, r4, r5
 801a258:	42a3      	cmp	r3, r4
 801a25a:	6025      	str	r5, [r4, #0]
 801a25c:	bf18      	it	ne
 801a25e:	6059      	strne	r1, [r3, #4]
 801a260:	6863      	ldr	r3, [r4, #4]
 801a262:	bf08      	it	eq
 801a264:	f8c8 1000 	streq.w	r1, [r8]
 801a268:	5162      	str	r2, [r4, r5]
 801a26a:	604b      	str	r3, [r1, #4]
 801a26c:	4638      	mov	r0, r7
 801a26e:	f104 060b 	add.w	r6, r4, #11
 801a272:	f000 f829 	bl	801a2c8 <__malloc_unlock>
 801a276:	f026 0607 	bic.w	r6, r6, #7
 801a27a:	1d23      	adds	r3, r4, #4
 801a27c:	1af2      	subs	r2, r6, r3
 801a27e:	d0ae      	beq.n	801a1de <_malloc_r+0x22>
 801a280:	1b9b      	subs	r3, r3, r6
 801a282:	50a3      	str	r3, [r4, r2]
 801a284:	e7ab      	b.n	801a1de <_malloc_r+0x22>
 801a286:	42a3      	cmp	r3, r4
 801a288:	6862      	ldr	r2, [r4, #4]
 801a28a:	d1dd      	bne.n	801a248 <_malloc_r+0x8c>
 801a28c:	f8c8 2000 	str.w	r2, [r8]
 801a290:	e7ec      	b.n	801a26c <_malloc_r+0xb0>
 801a292:	4623      	mov	r3, r4
 801a294:	6864      	ldr	r4, [r4, #4]
 801a296:	e7ac      	b.n	801a1f2 <_malloc_r+0x36>
 801a298:	4634      	mov	r4, r6
 801a29a:	6876      	ldr	r6, [r6, #4]
 801a29c:	e7b4      	b.n	801a208 <_malloc_r+0x4c>
 801a29e:	4613      	mov	r3, r2
 801a2a0:	e7cc      	b.n	801a23c <_malloc_r+0x80>
 801a2a2:	230c      	movs	r3, #12
 801a2a4:	603b      	str	r3, [r7, #0]
 801a2a6:	4638      	mov	r0, r7
 801a2a8:	f000 f80e 	bl	801a2c8 <__malloc_unlock>
 801a2ac:	e797      	b.n	801a1de <_malloc_r+0x22>
 801a2ae:	6025      	str	r5, [r4, #0]
 801a2b0:	e7dc      	b.n	801a26c <_malloc_r+0xb0>
 801a2b2:	605b      	str	r3, [r3, #4]
 801a2b4:	deff      	udf	#255	; 0xff
 801a2b6:	bf00      	nop
 801a2b8:	2000cc1c 	.word	0x2000cc1c

0801a2bc <__malloc_lock>:
 801a2bc:	4801      	ldr	r0, [pc, #4]	; (801a2c4 <__malloc_lock+0x8>)
 801a2be:	f7ff bf0f 	b.w	801a0e0 <__retarget_lock_acquire_recursive>
 801a2c2:	bf00      	nop
 801a2c4:	2000cc18 	.word	0x2000cc18

0801a2c8 <__malloc_unlock>:
 801a2c8:	4801      	ldr	r0, [pc, #4]	; (801a2d0 <__malloc_unlock+0x8>)
 801a2ca:	f7ff bf0a 	b.w	801a0e2 <__retarget_lock_release_recursive>
 801a2ce:	bf00      	nop
 801a2d0:	2000cc18 	.word	0x2000cc18

0801a2d4 <__ssputs_r>:
 801a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2d8:	688e      	ldr	r6, [r1, #8]
 801a2da:	461f      	mov	r7, r3
 801a2dc:	42be      	cmp	r6, r7
 801a2de:	680b      	ldr	r3, [r1, #0]
 801a2e0:	4682      	mov	sl, r0
 801a2e2:	460c      	mov	r4, r1
 801a2e4:	4690      	mov	r8, r2
 801a2e6:	d82c      	bhi.n	801a342 <__ssputs_r+0x6e>
 801a2e8:	898a      	ldrh	r2, [r1, #12]
 801a2ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a2ee:	d026      	beq.n	801a33e <__ssputs_r+0x6a>
 801a2f0:	6965      	ldr	r5, [r4, #20]
 801a2f2:	6909      	ldr	r1, [r1, #16]
 801a2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a2f8:	eba3 0901 	sub.w	r9, r3, r1
 801a2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a300:	1c7b      	adds	r3, r7, #1
 801a302:	444b      	add	r3, r9
 801a304:	106d      	asrs	r5, r5, #1
 801a306:	429d      	cmp	r5, r3
 801a308:	bf38      	it	cc
 801a30a:	461d      	movcc	r5, r3
 801a30c:	0553      	lsls	r3, r2, #21
 801a30e:	d527      	bpl.n	801a360 <__ssputs_r+0x8c>
 801a310:	4629      	mov	r1, r5
 801a312:	f7ff ff53 	bl	801a1bc <_malloc_r>
 801a316:	4606      	mov	r6, r0
 801a318:	b360      	cbz	r0, 801a374 <__ssputs_r+0xa0>
 801a31a:	6921      	ldr	r1, [r4, #16]
 801a31c:	464a      	mov	r2, r9
 801a31e:	f000 faeb 	bl	801a8f8 <memcpy>
 801a322:	89a3      	ldrh	r3, [r4, #12]
 801a324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a32c:	81a3      	strh	r3, [r4, #12]
 801a32e:	6126      	str	r6, [r4, #16]
 801a330:	6165      	str	r5, [r4, #20]
 801a332:	444e      	add	r6, r9
 801a334:	eba5 0509 	sub.w	r5, r5, r9
 801a338:	6026      	str	r6, [r4, #0]
 801a33a:	60a5      	str	r5, [r4, #8]
 801a33c:	463e      	mov	r6, r7
 801a33e:	42be      	cmp	r6, r7
 801a340:	d900      	bls.n	801a344 <__ssputs_r+0x70>
 801a342:	463e      	mov	r6, r7
 801a344:	6820      	ldr	r0, [r4, #0]
 801a346:	4632      	mov	r2, r6
 801a348:	4641      	mov	r1, r8
 801a34a:	f000 faab 	bl	801a8a4 <memmove>
 801a34e:	68a3      	ldr	r3, [r4, #8]
 801a350:	1b9b      	subs	r3, r3, r6
 801a352:	60a3      	str	r3, [r4, #8]
 801a354:	6823      	ldr	r3, [r4, #0]
 801a356:	4433      	add	r3, r6
 801a358:	6023      	str	r3, [r4, #0]
 801a35a:	2000      	movs	r0, #0
 801a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a360:	462a      	mov	r2, r5
 801a362:	f000 fad7 	bl	801a914 <_realloc_r>
 801a366:	4606      	mov	r6, r0
 801a368:	2800      	cmp	r0, #0
 801a36a:	d1e0      	bne.n	801a32e <__ssputs_r+0x5a>
 801a36c:	6921      	ldr	r1, [r4, #16]
 801a36e:	4650      	mov	r0, sl
 801a370:	f7ff feb8 	bl	801a0e4 <_free_r>
 801a374:	230c      	movs	r3, #12
 801a376:	f8ca 3000 	str.w	r3, [sl]
 801a37a:	89a3      	ldrh	r3, [r4, #12]
 801a37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a380:	81a3      	strh	r3, [r4, #12]
 801a382:	f04f 30ff 	mov.w	r0, #4294967295
 801a386:	e7e9      	b.n	801a35c <__ssputs_r+0x88>

0801a388 <_svfiprintf_r>:
 801a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a38c:	4698      	mov	r8, r3
 801a38e:	898b      	ldrh	r3, [r1, #12]
 801a390:	061b      	lsls	r3, r3, #24
 801a392:	b09d      	sub	sp, #116	; 0x74
 801a394:	4607      	mov	r7, r0
 801a396:	460d      	mov	r5, r1
 801a398:	4614      	mov	r4, r2
 801a39a:	d50e      	bpl.n	801a3ba <_svfiprintf_r+0x32>
 801a39c:	690b      	ldr	r3, [r1, #16]
 801a39e:	b963      	cbnz	r3, 801a3ba <_svfiprintf_r+0x32>
 801a3a0:	2140      	movs	r1, #64	; 0x40
 801a3a2:	f7ff ff0b 	bl	801a1bc <_malloc_r>
 801a3a6:	6028      	str	r0, [r5, #0]
 801a3a8:	6128      	str	r0, [r5, #16]
 801a3aa:	b920      	cbnz	r0, 801a3b6 <_svfiprintf_r+0x2e>
 801a3ac:	230c      	movs	r3, #12
 801a3ae:	603b      	str	r3, [r7, #0]
 801a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a3b4:	e0d0      	b.n	801a558 <_svfiprintf_r+0x1d0>
 801a3b6:	2340      	movs	r3, #64	; 0x40
 801a3b8:	616b      	str	r3, [r5, #20]
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	9309      	str	r3, [sp, #36]	; 0x24
 801a3be:	2320      	movs	r3, #32
 801a3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 801a3c8:	2330      	movs	r3, #48	; 0x30
 801a3ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a570 <_svfiprintf_r+0x1e8>
 801a3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a3d2:	f04f 0901 	mov.w	r9, #1
 801a3d6:	4623      	mov	r3, r4
 801a3d8:	469a      	mov	sl, r3
 801a3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3de:	b10a      	cbz	r2, 801a3e4 <_svfiprintf_r+0x5c>
 801a3e0:	2a25      	cmp	r2, #37	; 0x25
 801a3e2:	d1f9      	bne.n	801a3d8 <_svfiprintf_r+0x50>
 801a3e4:	ebba 0b04 	subs.w	fp, sl, r4
 801a3e8:	d00b      	beq.n	801a402 <_svfiprintf_r+0x7a>
 801a3ea:	465b      	mov	r3, fp
 801a3ec:	4622      	mov	r2, r4
 801a3ee:	4629      	mov	r1, r5
 801a3f0:	4638      	mov	r0, r7
 801a3f2:	f7ff ff6f 	bl	801a2d4 <__ssputs_r>
 801a3f6:	3001      	adds	r0, #1
 801a3f8:	f000 80a9 	beq.w	801a54e <_svfiprintf_r+0x1c6>
 801a3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3fe:	445a      	add	r2, fp
 801a400:	9209      	str	r2, [sp, #36]	; 0x24
 801a402:	f89a 3000 	ldrb.w	r3, [sl]
 801a406:	2b00      	cmp	r3, #0
 801a408:	f000 80a1 	beq.w	801a54e <_svfiprintf_r+0x1c6>
 801a40c:	2300      	movs	r3, #0
 801a40e:	f04f 32ff 	mov.w	r2, #4294967295
 801a412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a416:	f10a 0a01 	add.w	sl, sl, #1
 801a41a:	9304      	str	r3, [sp, #16]
 801a41c:	9307      	str	r3, [sp, #28]
 801a41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a422:	931a      	str	r3, [sp, #104]	; 0x68
 801a424:	4654      	mov	r4, sl
 801a426:	2205      	movs	r2, #5
 801a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a42c:	4850      	ldr	r0, [pc, #320]	; (801a570 <_svfiprintf_r+0x1e8>)
 801a42e:	f7e5 fedf 	bl	80001f0 <memchr>
 801a432:	9a04      	ldr	r2, [sp, #16]
 801a434:	b9d8      	cbnz	r0, 801a46e <_svfiprintf_r+0xe6>
 801a436:	06d0      	lsls	r0, r2, #27
 801a438:	bf44      	itt	mi
 801a43a:	2320      	movmi	r3, #32
 801a43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a440:	0711      	lsls	r1, r2, #28
 801a442:	bf44      	itt	mi
 801a444:	232b      	movmi	r3, #43	; 0x2b
 801a446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a44a:	f89a 3000 	ldrb.w	r3, [sl]
 801a44e:	2b2a      	cmp	r3, #42	; 0x2a
 801a450:	d015      	beq.n	801a47e <_svfiprintf_r+0xf6>
 801a452:	9a07      	ldr	r2, [sp, #28]
 801a454:	4654      	mov	r4, sl
 801a456:	2000      	movs	r0, #0
 801a458:	f04f 0c0a 	mov.w	ip, #10
 801a45c:	4621      	mov	r1, r4
 801a45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a462:	3b30      	subs	r3, #48	; 0x30
 801a464:	2b09      	cmp	r3, #9
 801a466:	d94d      	bls.n	801a504 <_svfiprintf_r+0x17c>
 801a468:	b1b0      	cbz	r0, 801a498 <_svfiprintf_r+0x110>
 801a46a:	9207      	str	r2, [sp, #28]
 801a46c:	e014      	b.n	801a498 <_svfiprintf_r+0x110>
 801a46e:	eba0 0308 	sub.w	r3, r0, r8
 801a472:	fa09 f303 	lsl.w	r3, r9, r3
 801a476:	4313      	orrs	r3, r2
 801a478:	9304      	str	r3, [sp, #16]
 801a47a:	46a2      	mov	sl, r4
 801a47c:	e7d2      	b.n	801a424 <_svfiprintf_r+0x9c>
 801a47e:	9b03      	ldr	r3, [sp, #12]
 801a480:	1d19      	adds	r1, r3, #4
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	9103      	str	r1, [sp, #12]
 801a486:	2b00      	cmp	r3, #0
 801a488:	bfbb      	ittet	lt
 801a48a:	425b      	neglt	r3, r3
 801a48c:	f042 0202 	orrlt.w	r2, r2, #2
 801a490:	9307      	strge	r3, [sp, #28]
 801a492:	9307      	strlt	r3, [sp, #28]
 801a494:	bfb8      	it	lt
 801a496:	9204      	strlt	r2, [sp, #16]
 801a498:	7823      	ldrb	r3, [r4, #0]
 801a49a:	2b2e      	cmp	r3, #46	; 0x2e
 801a49c:	d10c      	bne.n	801a4b8 <_svfiprintf_r+0x130>
 801a49e:	7863      	ldrb	r3, [r4, #1]
 801a4a0:	2b2a      	cmp	r3, #42	; 0x2a
 801a4a2:	d134      	bne.n	801a50e <_svfiprintf_r+0x186>
 801a4a4:	9b03      	ldr	r3, [sp, #12]
 801a4a6:	1d1a      	adds	r2, r3, #4
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	9203      	str	r2, [sp, #12]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	bfb8      	it	lt
 801a4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 801a4b4:	3402      	adds	r4, #2
 801a4b6:	9305      	str	r3, [sp, #20]
 801a4b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a580 <_svfiprintf_r+0x1f8>
 801a4bc:	7821      	ldrb	r1, [r4, #0]
 801a4be:	2203      	movs	r2, #3
 801a4c0:	4650      	mov	r0, sl
 801a4c2:	f7e5 fe95 	bl	80001f0 <memchr>
 801a4c6:	b138      	cbz	r0, 801a4d8 <_svfiprintf_r+0x150>
 801a4c8:	9b04      	ldr	r3, [sp, #16]
 801a4ca:	eba0 000a 	sub.w	r0, r0, sl
 801a4ce:	2240      	movs	r2, #64	; 0x40
 801a4d0:	4082      	lsls	r2, r0
 801a4d2:	4313      	orrs	r3, r2
 801a4d4:	3401      	adds	r4, #1
 801a4d6:	9304      	str	r3, [sp, #16]
 801a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4dc:	4825      	ldr	r0, [pc, #148]	; (801a574 <_svfiprintf_r+0x1ec>)
 801a4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4e2:	2206      	movs	r2, #6
 801a4e4:	f7e5 fe84 	bl	80001f0 <memchr>
 801a4e8:	2800      	cmp	r0, #0
 801a4ea:	d038      	beq.n	801a55e <_svfiprintf_r+0x1d6>
 801a4ec:	4b22      	ldr	r3, [pc, #136]	; (801a578 <_svfiprintf_r+0x1f0>)
 801a4ee:	bb1b      	cbnz	r3, 801a538 <_svfiprintf_r+0x1b0>
 801a4f0:	9b03      	ldr	r3, [sp, #12]
 801a4f2:	3307      	adds	r3, #7
 801a4f4:	f023 0307 	bic.w	r3, r3, #7
 801a4f8:	3308      	adds	r3, #8
 801a4fa:	9303      	str	r3, [sp, #12]
 801a4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4fe:	4433      	add	r3, r6
 801a500:	9309      	str	r3, [sp, #36]	; 0x24
 801a502:	e768      	b.n	801a3d6 <_svfiprintf_r+0x4e>
 801a504:	fb0c 3202 	mla	r2, ip, r2, r3
 801a508:	460c      	mov	r4, r1
 801a50a:	2001      	movs	r0, #1
 801a50c:	e7a6      	b.n	801a45c <_svfiprintf_r+0xd4>
 801a50e:	2300      	movs	r3, #0
 801a510:	3401      	adds	r4, #1
 801a512:	9305      	str	r3, [sp, #20]
 801a514:	4619      	mov	r1, r3
 801a516:	f04f 0c0a 	mov.w	ip, #10
 801a51a:	4620      	mov	r0, r4
 801a51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a520:	3a30      	subs	r2, #48	; 0x30
 801a522:	2a09      	cmp	r2, #9
 801a524:	d903      	bls.n	801a52e <_svfiprintf_r+0x1a6>
 801a526:	2b00      	cmp	r3, #0
 801a528:	d0c6      	beq.n	801a4b8 <_svfiprintf_r+0x130>
 801a52a:	9105      	str	r1, [sp, #20]
 801a52c:	e7c4      	b.n	801a4b8 <_svfiprintf_r+0x130>
 801a52e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a532:	4604      	mov	r4, r0
 801a534:	2301      	movs	r3, #1
 801a536:	e7f0      	b.n	801a51a <_svfiprintf_r+0x192>
 801a538:	ab03      	add	r3, sp, #12
 801a53a:	9300      	str	r3, [sp, #0]
 801a53c:	462a      	mov	r2, r5
 801a53e:	4b0f      	ldr	r3, [pc, #60]	; (801a57c <_svfiprintf_r+0x1f4>)
 801a540:	a904      	add	r1, sp, #16
 801a542:	4638      	mov	r0, r7
 801a544:	f3af 8000 	nop.w
 801a548:	1c42      	adds	r2, r0, #1
 801a54a:	4606      	mov	r6, r0
 801a54c:	d1d6      	bne.n	801a4fc <_svfiprintf_r+0x174>
 801a54e:	89ab      	ldrh	r3, [r5, #12]
 801a550:	065b      	lsls	r3, r3, #25
 801a552:	f53f af2d 	bmi.w	801a3b0 <_svfiprintf_r+0x28>
 801a556:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a558:	b01d      	add	sp, #116	; 0x74
 801a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a55e:	ab03      	add	r3, sp, #12
 801a560:	9300      	str	r3, [sp, #0]
 801a562:	462a      	mov	r2, r5
 801a564:	4b05      	ldr	r3, [pc, #20]	; (801a57c <_svfiprintf_r+0x1f4>)
 801a566:	a904      	add	r1, sp, #16
 801a568:	4638      	mov	r0, r7
 801a56a:	f000 f879 	bl	801a660 <_printf_i>
 801a56e:	e7eb      	b.n	801a548 <_svfiprintf_r+0x1c0>
 801a570:	0801ddad 	.word	0x0801ddad
 801a574:	0801ddb7 	.word	0x0801ddb7
 801a578:	00000000 	.word	0x00000000
 801a57c:	0801a2d5 	.word	0x0801a2d5
 801a580:	0801ddb3 	.word	0x0801ddb3

0801a584 <_printf_common>:
 801a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a588:	4616      	mov	r6, r2
 801a58a:	4699      	mov	r9, r3
 801a58c:	688a      	ldr	r2, [r1, #8]
 801a58e:	690b      	ldr	r3, [r1, #16]
 801a590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a594:	4293      	cmp	r3, r2
 801a596:	bfb8      	it	lt
 801a598:	4613      	movlt	r3, r2
 801a59a:	6033      	str	r3, [r6, #0]
 801a59c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a5a0:	4607      	mov	r7, r0
 801a5a2:	460c      	mov	r4, r1
 801a5a4:	b10a      	cbz	r2, 801a5aa <_printf_common+0x26>
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	6033      	str	r3, [r6, #0]
 801a5aa:	6823      	ldr	r3, [r4, #0]
 801a5ac:	0699      	lsls	r1, r3, #26
 801a5ae:	bf42      	ittt	mi
 801a5b0:	6833      	ldrmi	r3, [r6, #0]
 801a5b2:	3302      	addmi	r3, #2
 801a5b4:	6033      	strmi	r3, [r6, #0]
 801a5b6:	6825      	ldr	r5, [r4, #0]
 801a5b8:	f015 0506 	ands.w	r5, r5, #6
 801a5bc:	d106      	bne.n	801a5cc <_printf_common+0x48>
 801a5be:	f104 0a19 	add.w	sl, r4, #25
 801a5c2:	68e3      	ldr	r3, [r4, #12]
 801a5c4:	6832      	ldr	r2, [r6, #0]
 801a5c6:	1a9b      	subs	r3, r3, r2
 801a5c8:	42ab      	cmp	r3, r5
 801a5ca:	dc26      	bgt.n	801a61a <_printf_common+0x96>
 801a5cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a5d0:	1e13      	subs	r3, r2, #0
 801a5d2:	6822      	ldr	r2, [r4, #0]
 801a5d4:	bf18      	it	ne
 801a5d6:	2301      	movne	r3, #1
 801a5d8:	0692      	lsls	r2, r2, #26
 801a5da:	d42b      	bmi.n	801a634 <_printf_common+0xb0>
 801a5dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a5e0:	4649      	mov	r1, r9
 801a5e2:	4638      	mov	r0, r7
 801a5e4:	47c0      	blx	r8
 801a5e6:	3001      	adds	r0, #1
 801a5e8:	d01e      	beq.n	801a628 <_printf_common+0xa4>
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	6922      	ldr	r2, [r4, #16]
 801a5ee:	f003 0306 	and.w	r3, r3, #6
 801a5f2:	2b04      	cmp	r3, #4
 801a5f4:	bf02      	ittt	eq
 801a5f6:	68e5      	ldreq	r5, [r4, #12]
 801a5f8:	6833      	ldreq	r3, [r6, #0]
 801a5fa:	1aed      	subeq	r5, r5, r3
 801a5fc:	68a3      	ldr	r3, [r4, #8]
 801a5fe:	bf0c      	ite	eq
 801a600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a604:	2500      	movne	r5, #0
 801a606:	4293      	cmp	r3, r2
 801a608:	bfc4      	itt	gt
 801a60a:	1a9b      	subgt	r3, r3, r2
 801a60c:	18ed      	addgt	r5, r5, r3
 801a60e:	2600      	movs	r6, #0
 801a610:	341a      	adds	r4, #26
 801a612:	42b5      	cmp	r5, r6
 801a614:	d11a      	bne.n	801a64c <_printf_common+0xc8>
 801a616:	2000      	movs	r0, #0
 801a618:	e008      	b.n	801a62c <_printf_common+0xa8>
 801a61a:	2301      	movs	r3, #1
 801a61c:	4652      	mov	r2, sl
 801a61e:	4649      	mov	r1, r9
 801a620:	4638      	mov	r0, r7
 801a622:	47c0      	blx	r8
 801a624:	3001      	adds	r0, #1
 801a626:	d103      	bne.n	801a630 <_printf_common+0xac>
 801a628:	f04f 30ff 	mov.w	r0, #4294967295
 801a62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a630:	3501      	adds	r5, #1
 801a632:	e7c6      	b.n	801a5c2 <_printf_common+0x3e>
 801a634:	18e1      	adds	r1, r4, r3
 801a636:	1c5a      	adds	r2, r3, #1
 801a638:	2030      	movs	r0, #48	; 0x30
 801a63a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a63e:	4422      	add	r2, r4
 801a640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a648:	3302      	adds	r3, #2
 801a64a:	e7c7      	b.n	801a5dc <_printf_common+0x58>
 801a64c:	2301      	movs	r3, #1
 801a64e:	4622      	mov	r2, r4
 801a650:	4649      	mov	r1, r9
 801a652:	4638      	mov	r0, r7
 801a654:	47c0      	blx	r8
 801a656:	3001      	adds	r0, #1
 801a658:	d0e6      	beq.n	801a628 <_printf_common+0xa4>
 801a65a:	3601      	adds	r6, #1
 801a65c:	e7d9      	b.n	801a612 <_printf_common+0x8e>
	...

0801a660 <_printf_i>:
 801a660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a664:	7e0f      	ldrb	r7, [r1, #24]
 801a666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a668:	2f78      	cmp	r7, #120	; 0x78
 801a66a:	4691      	mov	r9, r2
 801a66c:	4680      	mov	r8, r0
 801a66e:	460c      	mov	r4, r1
 801a670:	469a      	mov	sl, r3
 801a672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a676:	d807      	bhi.n	801a688 <_printf_i+0x28>
 801a678:	2f62      	cmp	r7, #98	; 0x62
 801a67a:	d80a      	bhi.n	801a692 <_printf_i+0x32>
 801a67c:	2f00      	cmp	r7, #0
 801a67e:	f000 80d4 	beq.w	801a82a <_printf_i+0x1ca>
 801a682:	2f58      	cmp	r7, #88	; 0x58
 801a684:	f000 80c0 	beq.w	801a808 <_printf_i+0x1a8>
 801a688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a68c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a690:	e03a      	b.n	801a708 <_printf_i+0xa8>
 801a692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a696:	2b15      	cmp	r3, #21
 801a698:	d8f6      	bhi.n	801a688 <_printf_i+0x28>
 801a69a:	a101      	add	r1, pc, #4	; (adr r1, 801a6a0 <_printf_i+0x40>)
 801a69c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a6a0:	0801a6f9 	.word	0x0801a6f9
 801a6a4:	0801a70d 	.word	0x0801a70d
 801a6a8:	0801a689 	.word	0x0801a689
 801a6ac:	0801a689 	.word	0x0801a689
 801a6b0:	0801a689 	.word	0x0801a689
 801a6b4:	0801a689 	.word	0x0801a689
 801a6b8:	0801a70d 	.word	0x0801a70d
 801a6bc:	0801a689 	.word	0x0801a689
 801a6c0:	0801a689 	.word	0x0801a689
 801a6c4:	0801a689 	.word	0x0801a689
 801a6c8:	0801a689 	.word	0x0801a689
 801a6cc:	0801a811 	.word	0x0801a811
 801a6d0:	0801a739 	.word	0x0801a739
 801a6d4:	0801a7cb 	.word	0x0801a7cb
 801a6d8:	0801a689 	.word	0x0801a689
 801a6dc:	0801a689 	.word	0x0801a689
 801a6e0:	0801a833 	.word	0x0801a833
 801a6e4:	0801a689 	.word	0x0801a689
 801a6e8:	0801a739 	.word	0x0801a739
 801a6ec:	0801a689 	.word	0x0801a689
 801a6f0:	0801a689 	.word	0x0801a689
 801a6f4:	0801a7d3 	.word	0x0801a7d3
 801a6f8:	682b      	ldr	r3, [r5, #0]
 801a6fa:	1d1a      	adds	r2, r3, #4
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	602a      	str	r2, [r5, #0]
 801a700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a708:	2301      	movs	r3, #1
 801a70a:	e09f      	b.n	801a84c <_printf_i+0x1ec>
 801a70c:	6820      	ldr	r0, [r4, #0]
 801a70e:	682b      	ldr	r3, [r5, #0]
 801a710:	0607      	lsls	r7, r0, #24
 801a712:	f103 0104 	add.w	r1, r3, #4
 801a716:	6029      	str	r1, [r5, #0]
 801a718:	d501      	bpl.n	801a71e <_printf_i+0xbe>
 801a71a:	681e      	ldr	r6, [r3, #0]
 801a71c:	e003      	b.n	801a726 <_printf_i+0xc6>
 801a71e:	0646      	lsls	r6, r0, #25
 801a720:	d5fb      	bpl.n	801a71a <_printf_i+0xba>
 801a722:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a726:	2e00      	cmp	r6, #0
 801a728:	da03      	bge.n	801a732 <_printf_i+0xd2>
 801a72a:	232d      	movs	r3, #45	; 0x2d
 801a72c:	4276      	negs	r6, r6
 801a72e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a732:	485a      	ldr	r0, [pc, #360]	; (801a89c <_printf_i+0x23c>)
 801a734:	230a      	movs	r3, #10
 801a736:	e012      	b.n	801a75e <_printf_i+0xfe>
 801a738:	682b      	ldr	r3, [r5, #0]
 801a73a:	6820      	ldr	r0, [r4, #0]
 801a73c:	1d19      	adds	r1, r3, #4
 801a73e:	6029      	str	r1, [r5, #0]
 801a740:	0605      	lsls	r5, r0, #24
 801a742:	d501      	bpl.n	801a748 <_printf_i+0xe8>
 801a744:	681e      	ldr	r6, [r3, #0]
 801a746:	e002      	b.n	801a74e <_printf_i+0xee>
 801a748:	0641      	lsls	r1, r0, #25
 801a74a:	d5fb      	bpl.n	801a744 <_printf_i+0xe4>
 801a74c:	881e      	ldrh	r6, [r3, #0]
 801a74e:	4853      	ldr	r0, [pc, #332]	; (801a89c <_printf_i+0x23c>)
 801a750:	2f6f      	cmp	r7, #111	; 0x6f
 801a752:	bf0c      	ite	eq
 801a754:	2308      	moveq	r3, #8
 801a756:	230a      	movne	r3, #10
 801a758:	2100      	movs	r1, #0
 801a75a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a75e:	6865      	ldr	r5, [r4, #4]
 801a760:	60a5      	str	r5, [r4, #8]
 801a762:	2d00      	cmp	r5, #0
 801a764:	bfa2      	ittt	ge
 801a766:	6821      	ldrge	r1, [r4, #0]
 801a768:	f021 0104 	bicge.w	r1, r1, #4
 801a76c:	6021      	strge	r1, [r4, #0]
 801a76e:	b90e      	cbnz	r6, 801a774 <_printf_i+0x114>
 801a770:	2d00      	cmp	r5, #0
 801a772:	d04b      	beq.n	801a80c <_printf_i+0x1ac>
 801a774:	4615      	mov	r5, r2
 801a776:	fbb6 f1f3 	udiv	r1, r6, r3
 801a77a:	fb03 6711 	mls	r7, r3, r1, r6
 801a77e:	5dc7      	ldrb	r7, [r0, r7]
 801a780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a784:	4637      	mov	r7, r6
 801a786:	42bb      	cmp	r3, r7
 801a788:	460e      	mov	r6, r1
 801a78a:	d9f4      	bls.n	801a776 <_printf_i+0x116>
 801a78c:	2b08      	cmp	r3, #8
 801a78e:	d10b      	bne.n	801a7a8 <_printf_i+0x148>
 801a790:	6823      	ldr	r3, [r4, #0]
 801a792:	07de      	lsls	r6, r3, #31
 801a794:	d508      	bpl.n	801a7a8 <_printf_i+0x148>
 801a796:	6923      	ldr	r3, [r4, #16]
 801a798:	6861      	ldr	r1, [r4, #4]
 801a79a:	4299      	cmp	r1, r3
 801a79c:	bfde      	ittt	le
 801a79e:	2330      	movle	r3, #48	; 0x30
 801a7a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a7a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a7a8:	1b52      	subs	r2, r2, r5
 801a7aa:	6122      	str	r2, [r4, #16]
 801a7ac:	f8cd a000 	str.w	sl, [sp]
 801a7b0:	464b      	mov	r3, r9
 801a7b2:	aa03      	add	r2, sp, #12
 801a7b4:	4621      	mov	r1, r4
 801a7b6:	4640      	mov	r0, r8
 801a7b8:	f7ff fee4 	bl	801a584 <_printf_common>
 801a7bc:	3001      	adds	r0, #1
 801a7be:	d14a      	bne.n	801a856 <_printf_i+0x1f6>
 801a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a7c4:	b004      	add	sp, #16
 801a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7ca:	6823      	ldr	r3, [r4, #0]
 801a7cc:	f043 0320 	orr.w	r3, r3, #32
 801a7d0:	6023      	str	r3, [r4, #0]
 801a7d2:	4833      	ldr	r0, [pc, #204]	; (801a8a0 <_printf_i+0x240>)
 801a7d4:	2778      	movs	r7, #120	; 0x78
 801a7d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a7da:	6823      	ldr	r3, [r4, #0]
 801a7dc:	6829      	ldr	r1, [r5, #0]
 801a7de:	061f      	lsls	r7, r3, #24
 801a7e0:	f851 6b04 	ldr.w	r6, [r1], #4
 801a7e4:	d402      	bmi.n	801a7ec <_printf_i+0x18c>
 801a7e6:	065f      	lsls	r7, r3, #25
 801a7e8:	bf48      	it	mi
 801a7ea:	b2b6      	uxthmi	r6, r6
 801a7ec:	07df      	lsls	r7, r3, #31
 801a7ee:	bf48      	it	mi
 801a7f0:	f043 0320 	orrmi.w	r3, r3, #32
 801a7f4:	6029      	str	r1, [r5, #0]
 801a7f6:	bf48      	it	mi
 801a7f8:	6023      	strmi	r3, [r4, #0]
 801a7fa:	b91e      	cbnz	r6, 801a804 <_printf_i+0x1a4>
 801a7fc:	6823      	ldr	r3, [r4, #0]
 801a7fe:	f023 0320 	bic.w	r3, r3, #32
 801a802:	6023      	str	r3, [r4, #0]
 801a804:	2310      	movs	r3, #16
 801a806:	e7a7      	b.n	801a758 <_printf_i+0xf8>
 801a808:	4824      	ldr	r0, [pc, #144]	; (801a89c <_printf_i+0x23c>)
 801a80a:	e7e4      	b.n	801a7d6 <_printf_i+0x176>
 801a80c:	4615      	mov	r5, r2
 801a80e:	e7bd      	b.n	801a78c <_printf_i+0x12c>
 801a810:	682b      	ldr	r3, [r5, #0]
 801a812:	6826      	ldr	r6, [r4, #0]
 801a814:	6961      	ldr	r1, [r4, #20]
 801a816:	1d18      	adds	r0, r3, #4
 801a818:	6028      	str	r0, [r5, #0]
 801a81a:	0635      	lsls	r5, r6, #24
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	d501      	bpl.n	801a824 <_printf_i+0x1c4>
 801a820:	6019      	str	r1, [r3, #0]
 801a822:	e002      	b.n	801a82a <_printf_i+0x1ca>
 801a824:	0670      	lsls	r0, r6, #25
 801a826:	d5fb      	bpl.n	801a820 <_printf_i+0x1c0>
 801a828:	8019      	strh	r1, [r3, #0]
 801a82a:	2300      	movs	r3, #0
 801a82c:	6123      	str	r3, [r4, #16]
 801a82e:	4615      	mov	r5, r2
 801a830:	e7bc      	b.n	801a7ac <_printf_i+0x14c>
 801a832:	682b      	ldr	r3, [r5, #0]
 801a834:	1d1a      	adds	r2, r3, #4
 801a836:	602a      	str	r2, [r5, #0]
 801a838:	681d      	ldr	r5, [r3, #0]
 801a83a:	6862      	ldr	r2, [r4, #4]
 801a83c:	2100      	movs	r1, #0
 801a83e:	4628      	mov	r0, r5
 801a840:	f7e5 fcd6 	bl	80001f0 <memchr>
 801a844:	b108      	cbz	r0, 801a84a <_printf_i+0x1ea>
 801a846:	1b40      	subs	r0, r0, r5
 801a848:	6060      	str	r0, [r4, #4]
 801a84a:	6863      	ldr	r3, [r4, #4]
 801a84c:	6123      	str	r3, [r4, #16]
 801a84e:	2300      	movs	r3, #0
 801a850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a854:	e7aa      	b.n	801a7ac <_printf_i+0x14c>
 801a856:	6923      	ldr	r3, [r4, #16]
 801a858:	462a      	mov	r2, r5
 801a85a:	4649      	mov	r1, r9
 801a85c:	4640      	mov	r0, r8
 801a85e:	47d0      	blx	sl
 801a860:	3001      	adds	r0, #1
 801a862:	d0ad      	beq.n	801a7c0 <_printf_i+0x160>
 801a864:	6823      	ldr	r3, [r4, #0]
 801a866:	079b      	lsls	r3, r3, #30
 801a868:	d413      	bmi.n	801a892 <_printf_i+0x232>
 801a86a:	68e0      	ldr	r0, [r4, #12]
 801a86c:	9b03      	ldr	r3, [sp, #12]
 801a86e:	4298      	cmp	r0, r3
 801a870:	bfb8      	it	lt
 801a872:	4618      	movlt	r0, r3
 801a874:	e7a6      	b.n	801a7c4 <_printf_i+0x164>
 801a876:	2301      	movs	r3, #1
 801a878:	4632      	mov	r2, r6
 801a87a:	4649      	mov	r1, r9
 801a87c:	4640      	mov	r0, r8
 801a87e:	47d0      	blx	sl
 801a880:	3001      	adds	r0, #1
 801a882:	d09d      	beq.n	801a7c0 <_printf_i+0x160>
 801a884:	3501      	adds	r5, #1
 801a886:	68e3      	ldr	r3, [r4, #12]
 801a888:	9903      	ldr	r1, [sp, #12]
 801a88a:	1a5b      	subs	r3, r3, r1
 801a88c:	42ab      	cmp	r3, r5
 801a88e:	dcf2      	bgt.n	801a876 <_printf_i+0x216>
 801a890:	e7eb      	b.n	801a86a <_printf_i+0x20a>
 801a892:	2500      	movs	r5, #0
 801a894:	f104 0619 	add.w	r6, r4, #25
 801a898:	e7f5      	b.n	801a886 <_printf_i+0x226>
 801a89a:	bf00      	nop
 801a89c:	0801ddbe 	.word	0x0801ddbe
 801a8a0:	0801ddcf 	.word	0x0801ddcf

0801a8a4 <memmove>:
 801a8a4:	4288      	cmp	r0, r1
 801a8a6:	b510      	push	{r4, lr}
 801a8a8:	eb01 0402 	add.w	r4, r1, r2
 801a8ac:	d902      	bls.n	801a8b4 <memmove+0x10>
 801a8ae:	4284      	cmp	r4, r0
 801a8b0:	4623      	mov	r3, r4
 801a8b2:	d807      	bhi.n	801a8c4 <memmove+0x20>
 801a8b4:	1e43      	subs	r3, r0, #1
 801a8b6:	42a1      	cmp	r1, r4
 801a8b8:	d008      	beq.n	801a8cc <memmove+0x28>
 801a8ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a8be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a8c2:	e7f8      	b.n	801a8b6 <memmove+0x12>
 801a8c4:	4402      	add	r2, r0
 801a8c6:	4601      	mov	r1, r0
 801a8c8:	428a      	cmp	r2, r1
 801a8ca:	d100      	bne.n	801a8ce <memmove+0x2a>
 801a8cc:	bd10      	pop	{r4, pc}
 801a8ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a8d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a8d6:	e7f7      	b.n	801a8c8 <memmove+0x24>

0801a8d8 <_sbrk_r>:
 801a8d8:	b538      	push	{r3, r4, r5, lr}
 801a8da:	4d06      	ldr	r5, [pc, #24]	; (801a8f4 <_sbrk_r+0x1c>)
 801a8dc:	2300      	movs	r3, #0
 801a8de:	4604      	mov	r4, r0
 801a8e0:	4608      	mov	r0, r1
 801a8e2:	602b      	str	r3, [r5, #0]
 801a8e4:	f7ea fbaa 	bl	800503c <_sbrk>
 801a8e8:	1c43      	adds	r3, r0, #1
 801a8ea:	d102      	bne.n	801a8f2 <_sbrk_r+0x1a>
 801a8ec:	682b      	ldr	r3, [r5, #0]
 801a8ee:	b103      	cbz	r3, 801a8f2 <_sbrk_r+0x1a>
 801a8f0:	6023      	str	r3, [r4, #0]
 801a8f2:	bd38      	pop	{r3, r4, r5, pc}
 801a8f4:	2000cc14 	.word	0x2000cc14

0801a8f8 <memcpy>:
 801a8f8:	440a      	add	r2, r1
 801a8fa:	4291      	cmp	r1, r2
 801a8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 801a900:	d100      	bne.n	801a904 <memcpy+0xc>
 801a902:	4770      	bx	lr
 801a904:	b510      	push	{r4, lr}
 801a906:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a90e:	4291      	cmp	r1, r2
 801a910:	d1f9      	bne.n	801a906 <memcpy+0xe>
 801a912:	bd10      	pop	{r4, pc}

0801a914 <_realloc_r>:
 801a914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a918:	4680      	mov	r8, r0
 801a91a:	4614      	mov	r4, r2
 801a91c:	460e      	mov	r6, r1
 801a91e:	b921      	cbnz	r1, 801a92a <_realloc_r+0x16>
 801a920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a924:	4611      	mov	r1, r2
 801a926:	f7ff bc49 	b.w	801a1bc <_malloc_r>
 801a92a:	b92a      	cbnz	r2, 801a938 <_realloc_r+0x24>
 801a92c:	f7ff fbda 	bl	801a0e4 <_free_r>
 801a930:	4625      	mov	r5, r4
 801a932:	4628      	mov	r0, r5
 801a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a938:	f000 f81b 	bl	801a972 <_malloc_usable_size_r>
 801a93c:	4284      	cmp	r4, r0
 801a93e:	4607      	mov	r7, r0
 801a940:	d802      	bhi.n	801a948 <_realloc_r+0x34>
 801a942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a946:	d812      	bhi.n	801a96e <_realloc_r+0x5a>
 801a948:	4621      	mov	r1, r4
 801a94a:	4640      	mov	r0, r8
 801a94c:	f7ff fc36 	bl	801a1bc <_malloc_r>
 801a950:	4605      	mov	r5, r0
 801a952:	2800      	cmp	r0, #0
 801a954:	d0ed      	beq.n	801a932 <_realloc_r+0x1e>
 801a956:	42bc      	cmp	r4, r7
 801a958:	4622      	mov	r2, r4
 801a95a:	4631      	mov	r1, r6
 801a95c:	bf28      	it	cs
 801a95e:	463a      	movcs	r2, r7
 801a960:	f7ff ffca 	bl	801a8f8 <memcpy>
 801a964:	4631      	mov	r1, r6
 801a966:	4640      	mov	r0, r8
 801a968:	f7ff fbbc 	bl	801a0e4 <_free_r>
 801a96c:	e7e1      	b.n	801a932 <_realloc_r+0x1e>
 801a96e:	4635      	mov	r5, r6
 801a970:	e7df      	b.n	801a932 <_realloc_r+0x1e>

0801a972 <_malloc_usable_size_r>:
 801a972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a976:	1f18      	subs	r0, r3, #4
 801a978:	2b00      	cmp	r3, #0
 801a97a:	bfbc      	itt	lt
 801a97c:	580b      	ldrlt	r3, [r1, r0]
 801a97e:	18c0      	addlt	r0, r0, r3
 801a980:	4770      	bx	lr
 801a982:	0000      	movs	r0, r0
 801a984:	0000      	movs	r0, r0
	...

0801a988 <sin>:
 801a988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a98a:	ec53 2b10 	vmov	r2, r3, d0
 801a98e:	4828      	ldr	r0, [pc, #160]	; (801aa30 <sin+0xa8>)
 801a990:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a994:	4281      	cmp	r1, r0
 801a996:	dc07      	bgt.n	801a9a8 <sin+0x20>
 801a998:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801aa28 <sin+0xa0>
 801a99c:	2000      	movs	r0, #0
 801a99e:	b005      	add	sp, #20
 801a9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9a4:	f000 b910 	b.w	801abc8 <__kernel_sin>
 801a9a8:	4822      	ldr	r0, [pc, #136]	; (801aa34 <sin+0xac>)
 801a9aa:	4281      	cmp	r1, r0
 801a9ac:	dd09      	ble.n	801a9c2 <sin+0x3a>
 801a9ae:	ee10 0a10 	vmov	r0, s0
 801a9b2:	4619      	mov	r1, r3
 801a9b4:	f7e5 fc70 	bl	8000298 <__aeabi_dsub>
 801a9b8:	ec41 0b10 	vmov	d0, r0, r1
 801a9bc:	b005      	add	sp, #20
 801a9be:	f85d fb04 	ldr.w	pc, [sp], #4
 801a9c2:	4668      	mov	r0, sp
 801a9c4:	f000 f9c0 	bl	801ad48 <__ieee754_rem_pio2>
 801a9c8:	f000 0003 	and.w	r0, r0, #3
 801a9cc:	2801      	cmp	r0, #1
 801a9ce:	d00c      	beq.n	801a9ea <sin+0x62>
 801a9d0:	2802      	cmp	r0, #2
 801a9d2:	d011      	beq.n	801a9f8 <sin+0x70>
 801a9d4:	b9f0      	cbnz	r0, 801aa14 <sin+0x8c>
 801a9d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9da:	ed9d 0b00 	vldr	d0, [sp]
 801a9de:	2001      	movs	r0, #1
 801a9e0:	f000 f8f2 	bl	801abc8 <__kernel_sin>
 801a9e4:	ec51 0b10 	vmov	r0, r1, d0
 801a9e8:	e7e6      	b.n	801a9b8 <sin+0x30>
 801a9ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9ee:	ed9d 0b00 	vldr	d0, [sp]
 801a9f2:	f000 f821 	bl	801aa38 <__kernel_cos>
 801a9f6:	e7f5      	b.n	801a9e4 <sin+0x5c>
 801a9f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a9fc:	ed9d 0b00 	vldr	d0, [sp]
 801aa00:	2001      	movs	r0, #1
 801aa02:	f000 f8e1 	bl	801abc8 <__kernel_sin>
 801aa06:	ec53 2b10 	vmov	r2, r3, d0
 801aa0a:	ee10 0a10 	vmov	r0, s0
 801aa0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aa12:	e7d1      	b.n	801a9b8 <sin+0x30>
 801aa14:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aa18:	ed9d 0b00 	vldr	d0, [sp]
 801aa1c:	f000 f80c 	bl	801aa38 <__kernel_cos>
 801aa20:	e7f1      	b.n	801aa06 <sin+0x7e>
 801aa22:	bf00      	nop
 801aa24:	f3af 8000 	nop.w
	...
 801aa30:	3fe921fb 	.word	0x3fe921fb
 801aa34:	7fefffff 	.word	0x7fefffff

0801aa38 <__kernel_cos>:
 801aa38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa3c:	ec57 6b10 	vmov	r6, r7, d0
 801aa40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801aa44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801aa48:	ed8d 1b00 	vstr	d1, [sp]
 801aa4c:	da07      	bge.n	801aa5e <__kernel_cos+0x26>
 801aa4e:	ee10 0a10 	vmov	r0, s0
 801aa52:	4639      	mov	r1, r7
 801aa54:	f7e6 f872 	bl	8000b3c <__aeabi_d2iz>
 801aa58:	2800      	cmp	r0, #0
 801aa5a:	f000 8088 	beq.w	801ab6e <__kernel_cos+0x136>
 801aa5e:	4632      	mov	r2, r6
 801aa60:	463b      	mov	r3, r7
 801aa62:	4630      	mov	r0, r6
 801aa64:	4639      	mov	r1, r7
 801aa66:	f7e5 fdcf 	bl	8000608 <__aeabi_dmul>
 801aa6a:	4b51      	ldr	r3, [pc, #324]	; (801abb0 <__kernel_cos+0x178>)
 801aa6c:	2200      	movs	r2, #0
 801aa6e:	4604      	mov	r4, r0
 801aa70:	460d      	mov	r5, r1
 801aa72:	f7e5 fdc9 	bl	8000608 <__aeabi_dmul>
 801aa76:	a340      	add	r3, pc, #256	; (adr r3, 801ab78 <__kernel_cos+0x140>)
 801aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa7c:	4682      	mov	sl, r0
 801aa7e:	468b      	mov	fp, r1
 801aa80:	4620      	mov	r0, r4
 801aa82:	4629      	mov	r1, r5
 801aa84:	f7e5 fdc0 	bl	8000608 <__aeabi_dmul>
 801aa88:	a33d      	add	r3, pc, #244	; (adr r3, 801ab80 <__kernel_cos+0x148>)
 801aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa8e:	f7e5 fc05 	bl	800029c <__adddf3>
 801aa92:	4622      	mov	r2, r4
 801aa94:	462b      	mov	r3, r5
 801aa96:	f7e5 fdb7 	bl	8000608 <__aeabi_dmul>
 801aa9a:	a33b      	add	r3, pc, #236	; (adr r3, 801ab88 <__kernel_cos+0x150>)
 801aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa0:	f7e5 fbfa 	bl	8000298 <__aeabi_dsub>
 801aaa4:	4622      	mov	r2, r4
 801aaa6:	462b      	mov	r3, r5
 801aaa8:	f7e5 fdae 	bl	8000608 <__aeabi_dmul>
 801aaac:	a338      	add	r3, pc, #224	; (adr r3, 801ab90 <__kernel_cos+0x158>)
 801aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab2:	f7e5 fbf3 	bl	800029c <__adddf3>
 801aab6:	4622      	mov	r2, r4
 801aab8:	462b      	mov	r3, r5
 801aaba:	f7e5 fda5 	bl	8000608 <__aeabi_dmul>
 801aabe:	a336      	add	r3, pc, #216	; (adr r3, 801ab98 <__kernel_cos+0x160>)
 801aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac4:	f7e5 fbe8 	bl	8000298 <__aeabi_dsub>
 801aac8:	4622      	mov	r2, r4
 801aaca:	462b      	mov	r3, r5
 801aacc:	f7e5 fd9c 	bl	8000608 <__aeabi_dmul>
 801aad0:	a333      	add	r3, pc, #204	; (adr r3, 801aba0 <__kernel_cos+0x168>)
 801aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad6:	f7e5 fbe1 	bl	800029c <__adddf3>
 801aada:	4622      	mov	r2, r4
 801aadc:	462b      	mov	r3, r5
 801aade:	f7e5 fd93 	bl	8000608 <__aeabi_dmul>
 801aae2:	4622      	mov	r2, r4
 801aae4:	462b      	mov	r3, r5
 801aae6:	f7e5 fd8f 	bl	8000608 <__aeabi_dmul>
 801aaea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aaee:	4604      	mov	r4, r0
 801aaf0:	460d      	mov	r5, r1
 801aaf2:	4630      	mov	r0, r6
 801aaf4:	4639      	mov	r1, r7
 801aaf6:	f7e5 fd87 	bl	8000608 <__aeabi_dmul>
 801aafa:	460b      	mov	r3, r1
 801aafc:	4602      	mov	r2, r0
 801aafe:	4629      	mov	r1, r5
 801ab00:	4620      	mov	r0, r4
 801ab02:	f7e5 fbc9 	bl	8000298 <__aeabi_dsub>
 801ab06:	4b2b      	ldr	r3, [pc, #172]	; (801abb4 <__kernel_cos+0x17c>)
 801ab08:	4598      	cmp	r8, r3
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	460f      	mov	r7, r1
 801ab0e:	dc10      	bgt.n	801ab32 <__kernel_cos+0xfa>
 801ab10:	4602      	mov	r2, r0
 801ab12:	460b      	mov	r3, r1
 801ab14:	4650      	mov	r0, sl
 801ab16:	4659      	mov	r1, fp
 801ab18:	f7e5 fbbe 	bl	8000298 <__aeabi_dsub>
 801ab1c:	460b      	mov	r3, r1
 801ab1e:	4926      	ldr	r1, [pc, #152]	; (801abb8 <__kernel_cos+0x180>)
 801ab20:	4602      	mov	r2, r0
 801ab22:	2000      	movs	r0, #0
 801ab24:	f7e5 fbb8 	bl	8000298 <__aeabi_dsub>
 801ab28:	ec41 0b10 	vmov	d0, r0, r1
 801ab2c:	b003      	add	sp, #12
 801ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab32:	4b22      	ldr	r3, [pc, #136]	; (801abbc <__kernel_cos+0x184>)
 801ab34:	4920      	ldr	r1, [pc, #128]	; (801abb8 <__kernel_cos+0x180>)
 801ab36:	4598      	cmp	r8, r3
 801ab38:	bfcc      	ite	gt
 801ab3a:	4d21      	ldrgt	r5, [pc, #132]	; (801abc0 <__kernel_cos+0x188>)
 801ab3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801ab40:	2400      	movs	r4, #0
 801ab42:	4622      	mov	r2, r4
 801ab44:	462b      	mov	r3, r5
 801ab46:	2000      	movs	r0, #0
 801ab48:	f7e5 fba6 	bl	8000298 <__aeabi_dsub>
 801ab4c:	4622      	mov	r2, r4
 801ab4e:	4680      	mov	r8, r0
 801ab50:	4689      	mov	r9, r1
 801ab52:	462b      	mov	r3, r5
 801ab54:	4650      	mov	r0, sl
 801ab56:	4659      	mov	r1, fp
 801ab58:	f7e5 fb9e 	bl	8000298 <__aeabi_dsub>
 801ab5c:	4632      	mov	r2, r6
 801ab5e:	463b      	mov	r3, r7
 801ab60:	f7e5 fb9a 	bl	8000298 <__aeabi_dsub>
 801ab64:	4602      	mov	r2, r0
 801ab66:	460b      	mov	r3, r1
 801ab68:	4640      	mov	r0, r8
 801ab6a:	4649      	mov	r1, r9
 801ab6c:	e7da      	b.n	801ab24 <__kernel_cos+0xec>
 801ab6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801aba8 <__kernel_cos+0x170>
 801ab72:	e7db      	b.n	801ab2c <__kernel_cos+0xf4>
 801ab74:	f3af 8000 	nop.w
 801ab78:	be8838d4 	.word	0xbe8838d4
 801ab7c:	bda8fae9 	.word	0xbda8fae9
 801ab80:	bdb4b1c4 	.word	0xbdb4b1c4
 801ab84:	3e21ee9e 	.word	0x3e21ee9e
 801ab88:	809c52ad 	.word	0x809c52ad
 801ab8c:	3e927e4f 	.word	0x3e927e4f
 801ab90:	19cb1590 	.word	0x19cb1590
 801ab94:	3efa01a0 	.word	0x3efa01a0
 801ab98:	16c15177 	.word	0x16c15177
 801ab9c:	3f56c16c 	.word	0x3f56c16c
 801aba0:	5555554c 	.word	0x5555554c
 801aba4:	3fa55555 	.word	0x3fa55555
 801aba8:	00000000 	.word	0x00000000
 801abac:	3ff00000 	.word	0x3ff00000
 801abb0:	3fe00000 	.word	0x3fe00000
 801abb4:	3fd33332 	.word	0x3fd33332
 801abb8:	3ff00000 	.word	0x3ff00000
 801abbc:	3fe90000 	.word	0x3fe90000
 801abc0:	3fd20000 	.word	0x3fd20000
 801abc4:	00000000 	.word	0x00000000

0801abc8 <__kernel_sin>:
 801abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	ed2d 8b04 	vpush	{d8-d9}
 801abd0:	eeb0 8a41 	vmov.f32	s16, s2
 801abd4:	eef0 8a61 	vmov.f32	s17, s3
 801abd8:	ec55 4b10 	vmov	r4, r5, d0
 801abdc:	b083      	sub	sp, #12
 801abde:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801abe2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801abe6:	9001      	str	r0, [sp, #4]
 801abe8:	da06      	bge.n	801abf8 <__kernel_sin+0x30>
 801abea:	ee10 0a10 	vmov	r0, s0
 801abee:	4629      	mov	r1, r5
 801abf0:	f7e5 ffa4 	bl	8000b3c <__aeabi_d2iz>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	d051      	beq.n	801ac9c <__kernel_sin+0xd4>
 801abf8:	4622      	mov	r2, r4
 801abfa:	462b      	mov	r3, r5
 801abfc:	4620      	mov	r0, r4
 801abfe:	4629      	mov	r1, r5
 801ac00:	f7e5 fd02 	bl	8000608 <__aeabi_dmul>
 801ac04:	4682      	mov	sl, r0
 801ac06:	468b      	mov	fp, r1
 801ac08:	4602      	mov	r2, r0
 801ac0a:	460b      	mov	r3, r1
 801ac0c:	4620      	mov	r0, r4
 801ac0e:	4629      	mov	r1, r5
 801ac10:	f7e5 fcfa 	bl	8000608 <__aeabi_dmul>
 801ac14:	a341      	add	r3, pc, #260	; (adr r3, 801ad1c <__kernel_sin+0x154>)
 801ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1a:	4680      	mov	r8, r0
 801ac1c:	4689      	mov	r9, r1
 801ac1e:	4650      	mov	r0, sl
 801ac20:	4659      	mov	r1, fp
 801ac22:	f7e5 fcf1 	bl	8000608 <__aeabi_dmul>
 801ac26:	a33f      	add	r3, pc, #252	; (adr r3, 801ad24 <__kernel_sin+0x15c>)
 801ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2c:	f7e5 fb34 	bl	8000298 <__aeabi_dsub>
 801ac30:	4652      	mov	r2, sl
 801ac32:	465b      	mov	r3, fp
 801ac34:	f7e5 fce8 	bl	8000608 <__aeabi_dmul>
 801ac38:	a33c      	add	r3, pc, #240	; (adr r3, 801ad2c <__kernel_sin+0x164>)
 801ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac3e:	f7e5 fb2d 	bl	800029c <__adddf3>
 801ac42:	4652      	mov	r2, sl
 801ac44:	465b      	mov	r3, fp
 801ac46:	f7e5 fcdf 	bl	8000608 <__aeabi_dmul>
 801ac4a:	a33a      	add	r3, pc, #232	; (adr r3, 801ad34 <__kernel_sin+0x16c>)
 801ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac50:	f7e5 fb22 	bl	8000298 <__aeabi_dsub>
 801ac54:	4652      	mov	r2, sl
 801ac56:	465b      	mov	r3, fp
 801ac58:	f7e5 fcd6 	bl	8000608 <__aeabi_dmul>
 801ac5c:	a337      	add	r3, pc, #220	; (adr r3, 801ad3c <__kernel_sin+0x174>)
 801ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac62:	f7e5 fb1b 	bl	800029c <__adddf3>
 801ac66:	9b01      	ldr	r3, [sp, #4]
 801ac68:	4606      	mov	r6, r0
 801ac6a:	460f      	mov	r7, r1
 801ac6c:	b9eb      	cbnz	r3, 801acaa <__kernel_sin+0xe2>
 801ac6e:	4602      	mov	r2, r0
 801ac70:	460b      	mov	r3, r1
 801ac72:	4650      	mov	r0, sl
 801ac74:	4659      	mov	r1, fp
 801ac76:	f7e5 fcc7 	bl	8000608 <__aeabi_dmul>
 801ac7a:	a325      	add	r3, pc, #148	; (adr r3, 801ad10 <__kernel_sin+0x148>)
 801ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac80:	f7e5 fb0a 	bl	8000298 <__aeabi_dsub>
 801ac84:	4642      	mov	r2, r8
 801ac86:	464b      	mov	r3, r9
 801ac88:	f7e5 fcbe 	bl	8000608 <__aeabi_dmul>
 801ac8c:	4602      	mov	r2, r0
 801ac8e:	460b      	mov	r3, r1
 801ac90:	4620      	mov	r0, r4
 801ac92:	4629      	mov	r1, r5
 801ac94:	f7e5 fb02 	bl	800029c <__adddf3>
 801ac98:	4604      	mov	r4, r0
 801ac9a:	460d      	mov	r5, r1
 801ac9c:	ec45 4b10 	vmov	d0, r4, r5
 801aca0:	b003      	add	sp, #12
 801aca2:	ecbd 8b04 	vpop	{d8-d9}
 801aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acaa:	4b1b      	ldr	r3, [pc, #108]	; (801ad18 <__kernel_sin+0x150>)
 801acac:	ec51 0b18 	vmov	r0, r1, d8
 801acb0:	2200      	movs	r2, #0
 801acb2:	f7e5 fca9 	bl	8000608 <__aeabi_dmul>
 801acb6:	4632      	mov	r2, r6
 801acb8:	ec41 0b19 	vmov	d9, r0, r1
 801acbc:	463b      	mov	r3, r7
 801acbe:	4640      	mov	r0, r8
 801acc0:	4649      	mov	r1, r9
 801acc2:	f7e5 fca1 	bl	8000608 <__aeabi_dmul>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	ec51 0b19 	vmov	r0, r1, d9
 801acce:	f7e5 fae3 	bl	8000298 <__aeabi_dsub>
 801acd2:	4652      	mov	r2, sl
 801acd4:	465b      	mov	r3, fp
 801acd6:	f7e5 fc97 	bl	8000608 <__aeabi_dmul>
 801acda:	ec53 2b18 	vmov	r2, r3, d8
 801acde:	f7e5 fadb 	bl	8000298 <__aeabi_dsub>
 801ace2:	a30b      	add	r3, pc, #44	; (adr r3, 801ad10 <__kernel_sin+0x148>)
 801ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace8:	4606      	mov	r6, r0
 801acea:	460f      	mov	r7, r1
 801acec:	4640      	mov	r0, r8
 801acee:	4649      	mov	r1, r9
 801acf0:	f7e5 fc8a 	bl	8000608 <__aeabi_dmul>
 801acf4:	4602      	mov	r2, r0
 801acf6:	460b      	mov	r3, r1
 801acf8:	4630      	mov	r0, r6
 801acfa:	4639      	mov	r1, r7
 801acfc:	f7e5 face 	bl	800029c <__adddf3>
 801ad00:	4602      	mov	r2, r0
 801ad02:	460b      	mov	r3, r1
 801ad04:	4620      	mov	r0, r4
 801ad06:	4629      	mov	r1, r5
 801ad08:	f7e5 fac6 	bl	8000298 <__aeabi_dsub>
 801ad0c:	e7c4      	b.n	801ac98 <__kernel_sin+0xd0>
 801ad0e:	bf00      	nop
 801ad10:	55555549 	.word	0x55555549
 801ad14:	3fc55555 	.word	0x3fc55555
 801ad18:	3fe00000 	.word	0x3fe00000
 801ad1c:	5acfd57c 	.word	0x5acfd57c
 801ad20:	3de5d93a 	.word	0x3de5d93a
 801ad24:	8a2b9ceb 	.word	0x8a2b9ceb
 801ad28:	3e5ae5e6 	.word	0x3e5ae5e6
 801ad2c:	57b1fe7d 	.word	0x57b1fe7d
 801ad30:	3ec71de3 	.word	0x3ec71de3
 801ad34:	19c161d5 	.word	0x19c161d5
 801ad38:	3f2a01a0 	.word	0x3f2a01a0
 801ad3c:	1110f8a6 	.word	0x1110f8a6
 801ad40:	3f811111 	.word	0x3f811111
 801ad44:	00000000 	.word	0x00000000

0801ad48 <__ieee754_rem_pio2>:
 801ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad4c:	ed2d 8b02 	vpush	{d8}
 801ad50:	ec55 4b10 	vmov	r4, r5, d0
 801ad54:	4bca      	ldr	r3, [pc, #808]	; (801b080 <__ieee754_rem_pio2+0x338>)
 801ad56:	b08b      	sub	sp, #44	; 0x2c
 801ad58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ad5c:	4598      	cmp	r8, r3
 801ad5e:	4682      	mov	sl, r0
 801ad60:	9502      	str	r5, [sp, #8]
 801ad62:	dc08      	bgt.n	801ad76 <__ieee754_rem_pio2+0x2e>
 801ad64:	2200      	movs	r2, #0
 801ad66:	2300      	movs	r3, #0
 801ad68:	ed80 0b00 	vstr	d0, [r0]
 801ad6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ad70:	f04f 0b00 	mov.w	fp, #0
 801ad74:	e028      	b.n	801adc8 <__ieee754_rem_pio2+0x80>
 801ad76:	4bc3      	ldr	r3, [pc, #780]	; (801b084 <__ieee754_rem_pio2+0x33c>)
 801ad78:	4598      	cmp	r8, r3
 801ad7a:	dc78      	bgt.n	801ae6e <__ieee754_rem_pio2+0x126>
 801ad7c:	9b02      	ldr	r3, [sp, #8]
 801ad7e:	4ec2      	ldr	r6, [pc, #776]	; (801b088 <__ieee754_rem_pio2+0x340>)
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	ee10 0a10 	vmov	r0, s0
 801ad86:	a3b0      	add	r3, pc, #704	; (adr r3, 801b048 <__ieee754_rem_pio2+0x300>)
 801ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad8c:	4629      	mov	r1, r5
 801ad8e:	dd39      	ble.n	801ae04 <__ieee754_rem_pio2+0xbc>
 801ad90:	f7e5 fa82 	bl	8000298 <__aeabi_dsub>
 801ad94:	45b0      	cmp	r8, r6
 801ad96:	4604      	mov	r4, r0
 801ad98:	460d      	mov	r5, r1
 801ad9a:	d01b      	beq.n	801add4 <__ieee754_rem_pio2+0x8c>
 801ad9c:	a3ac      	add	r3, pc, #688	; (adr r3, 801b050 <__ieee754_rem_pio2+0x308>)
 801ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada2:	f7e5 fa79 	bl	8000298 <__aeabi_dsub>
 801ada6:	4602      	mov	r2, r0
 801ada8:	460b      	mov	r3, r1
 801adaa:	e9ca 2300 	strd	r2, r3, [sl]
 801adae:	4620      	mov	r0, r4
 801adb0:	4629      	mov	r1, r5
 801adb2:	f7e5 fa71 	bl	8000298 <__aeabi_dsub>
 801adb6:	a3a6      	add	r3, pc, #664	; (adr r3, 801b050 <__ieee754_rem_pio2+0x308>)
 801adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adbc:	f7e5 fa6c 	bl	8000298 <__aeabi_dsub>
 801adc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801adc4:	f04f 0b01 	mov.w	fp, #1
 801adc8:	4658      	mov	r0, fp
 801adca:	b00b      	add	sp, #44	; 0x2c
 801adcc:	ecbd 8b02 	vpop	{d8}
 801add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801add4:	a3a0      	add	r3, pc, #640	; (adr r3, 801b058 <__ieee754_rem_pio2+0x310>)
 801add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adda:	f7e5 fa5d 	bl	8000298 <__aeabi_dsub>
 801adde:	a3a0      	add	r3, pc, #640	; (adr r3, 801b060 <__ieee754_rem_pio2+0x318>)
 801ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade4:	4604      	mov	r4, r0
 801ade6:	460d      	mov	r5, r1
 801ade8:	f7e5 fa56 	bl	8000298 <__aeabi_dsub>
 801adec:	4602      	mov	r2, r0
 801adee:	460b      	mov	r3, r1
 801adf0:	e9ca 2300 	strd	r2, r3, [sl]
 801adf4:	4620      	mov	r0, r4
 801adf6:	4629      	mov	r1, r5
 801adf8:	f7e5 fa4e 	bl	8000298 <__aeabi_dsub>
 801adfc:	a398      	add	r3, pc, #608	; (adr r3, 801b060 <__ieee754_rem_pio2+0x318>)
 801adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae02:	e7db      	b.n	801adbc <__ieee754_rem_pio2+0x74>
 801ae04:	f7e5 fa4a 	bl	800029c <__adddf3>
 801ae08:	45b0      	cmp	r8, r6
 801ae0a:	4604      	mov	r4, r0
 801ae0c:	460d      	mov	r5, r1
 801ae0e:	d016      	beq.n	801ae3e <__ieee754_rem_pio2+0xf6>
 801ae10:	a38f      	add	r3, pc, #572	; (adr r3, 801b050 <__ieee754_rem_pio2+0x308>)
 801ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae16:	f7e5 fa41 	bl	800029c <__adddf3>
 801ae1a:	4602      	mov	r2, r0
 801ae1c:	460b      	mov	r3, r1
 801ae1e:	e9ca 2300 	strd	r2, r3, [sl]
 801ae22:	4620      	mov	r0, r4
 801ae24:	4629      	mov	r1, r5
 801ae26:	f7e5 fa37 	bl	8000298 <__aeabi_dsub>
 801ae2a:	a389      	add	r3, pc, #548	; (adr r3, 801b050 <__ieee754_rem_pio2+0x308>)
 801ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae30:	f7e5 fa34 	bl	800029c <__adddf3>
 801ae34:	f04f 3bff 	mov.w	fp, #4294967295
 801ae38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ae3c:	e7c4      	b.n	801adc8 <__ieee754_rem_pio2+0x80>
 801ae3e:	a386      	add	r3, pc, #536	; (adr r3, 801b058 <__ieee754_rem_pio2+0x310>)
 801ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae44:	f7e5 fa2a 	bl	800029c <__adddf3>
 801ae48:	a385      	add	r3, pc, #532	; (adr r3, 801b060 <__ieee754_rem_pio2+0x318>)
 801ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae4e:	4604      	mov	r4, r0
 801ae50:	460d      	mov	r5, r1
 801ae52:	f7e5 fa23 	bl	800029c <__adddf3>
 801ae56:	4602      	mov	r2, r0
 801ae58:	460b      	mov	r3, r1
 801ae5a:	e9ca 2300 	strd	r2, r3, [sl]
 801ae5e:	4620      	mov	r0, r4
 801ae60:	4629      	mov	r1, r5
 801ae62:	f7e5 fa19 	bl	8000298 <__aeabi_dsub>
 801ae66:	a37e      	add	r3, pc, #504	; (adr r3, 801b060 <__ieee754_rem_pio2+0x318>)
 801ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae6c:	e7e0      	b.n	801ae30 <__ieee754_rem_pio2+0xe8>
 801ae6e:	4b87      	ldr	r3, [pc, #540]	; (801b08c <__ieee754_rem_pio2+0x344>)
 801ae70:	4598      	cmp	r8, r3
 801ae72:	f300 80d8 	bgt.w	801b026 <__ieee754_rem_pio2+0x2de>
 801ae76:	f000 f96d 	bl	801b154 <fabs>
 801ae7a:	ec55 4b10 	vmov	r4, r5, d0
 801ae7e:	ee10 0a10 	vmov	r0, s0
 801ae82:	a379      	add	r3, pc, #484	; (adr r3, 801b068 <__ieee754_rem_pio2+0x320>)
 801ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae88:	4629      	mov	r1, r5
 801ae8a:	f7e5 fbbd 	bl	8000608 <__aeabi_dmul>
 801ae8e:	4b80      	ldr	r3, [pc, #512]	; (801b090 <__ieee754_rem_pio2+0x348>)
 801ae90:	2200      	movs	r2, #0
 801ae92:	f7e5 fa03 	bl	800029c <__adddf3>
 801ae96:	f7e5 fe51 	bl	8000b3c <__aeabi_d2iz>
 801ae9a:	4683      	mov	fp, r0
 801ae9c:	f7e5 fb4a 	bl	8000534 <__aeabi_i2d>
 801aea0:	4602      	mov	r2, r0
 801aea2:	460b      	mov	r3, r1
 801aea4:	ec43 2b18 	vmov	d8, r2, r3
 801aea8:	a367      	add	r3, pc, #412	; (adr r3, 801b048 <__ieee754_rem_pio2+0x300>)
 801aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeae:	f7e5 fbab 	bl	8000608 <__aeabi_dmul>
 801aeb2:	4602      	mov	r2, r0
 801aeb4:	460b      	mov	r3, r1
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	4629      	mov	r1, r5
 801aeba:	f7e5 f9ed 	bl	8000298 <__aeabi_dsub>
 801aebe:	a364      	add	r3, pc, #400	; (adr r3, 801b050 <__ieee754_rem_pio2+0x308>)
 801aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec4:	4606      	mov	r6, r0
 801aec6:	460f      	mov	r7, r1
 801aec8:	ec51 0b18 	vmov	r0, r1, d8
 801aecc:	f7e5 fb9c 	bl	8000608 <__aeabi_dmul>
 801aed0:	f1bb 0f1f 	cmp.w	fp, #31
 801aed4:	4604      	mov	r4, r0
 801aed6:	460d      	mov	r5, r1
 801aed8:	dc0d      	bgt.n	801aef6 <__ieee754_rem_pio2+0x1ae>
 801aeda:	4b6e      	ldr	r3, [pc, #440]	; (801b094 <__ieee754_rem_pio2+0x34c>)
 801aedc:	f10b 32ff 	add.w	r2, fp, #4294967295
 801aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aee4:	4543      	cmp	r3, r8
 801aee6:	d006      	beq.n	801aef6 <__ieee754_rem_pio2+0x1ae>
 801aee8:	4622      	mov	r2, r4
 801aeea:	462b      	mov	r3, r5
 801aeec:	4630      	mov	r0, r6
 801aeee:	4639      	mov	r1, r7
 801aef0:	f7e5 f9d2 	bl	8000298 <__aeabi_dsub>
 801aef4:	e00e      	b.n	801af14 <__ieee754_rem_pio2+0x1cc>
 801aef6:	462b      	mov	r3, r5
 801aef8:	4622      	mov	r2, r4
 801aefa:	4630      	mov	r0, r6
 801aefc:	4639      	mov	r1, r7
 801aefe:	f7e5 f9cb 	bl	8000298 <__aeabi_dsub>
 801af02:	ea4f 5328 	mov.w	r3, r8, asr #20
 801af06:	9303      	str	r3, [sp, #12]
 801af08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af0c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801af10:	2b10      	cmp	r3, #16
 801af12:	dc02      	bgt.n	801af1a <__ieee754_rem_pio2+0x1d2>
 801af14:	e9ca 0100 	strd	r0, r1, [sl]
 801af18:	e039      	b.n	801af8e <__ieee754_rem_pio2+0x246>
 801af1a:	a34f      	add	r3, pc, #316	; (adr r3, 801b058 <__ieee754_rem_pio2+0x310>)
 801af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af20:	ec51 0b18 	vmov	r0, r1, d8
 801af24:	f7e5 fb70 	bl	8000608 <__aeabi_dmul>
 801af28:	4604      	mov	r4, r0
 801af2a:	460d      	mov	r5, r1
 801af2c:	4602      	mov	r2, r0
 801af2e:	460b      	mov	r3, r1
 801af30:	4630      	mov	r0, r6
 801af32:	4639      	mov	r1, r7
 801af34:	f7e5 f9b0 	bl	8000298 <__aeabi_dsub>
 801af38:	4602      	mov	r2, r0
 801af3a:	460b      	mov	r3, r1
 801af3c:	4680      	mov	r8, r0
 801af3e:	4689      	mov	r9, r1
 801af40:	4630      	mov	r0, r6
 801af42:	4639      	mov	r1, r7
 801af44:	f7e5 f9a8 	bl	8000298 <__aeabi_dsub>
 801af48:	4622      	mov	r2, r4
 801af4a:	462b      	mov	r3, r5
 801af4c:	f7e5 f9a4 	bl	8000298 <__aeabi_dsub>
 801af50:	a343      	add	r3, pc, #268	; (adr r3, 801b060 <__ieee754_rem_pio2+0x318>)
 801af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af56:	4604      	mov	r4, r0
 801af58:	460d      	mov	r5, r1
 801af5a:	ec51 0b18 	vmov	r0, r1, d8
 801af5e:	f7e5 fb53 	bl	8000608 <__aeabi_dmul>
 801af62:	4622      	mov	r2, r4
 801af64:	462b      	mov	r3, r5
 801af66:	f7e5 f997 	bl	8000298 <__aeabi_dsub>
 801af6a:	4602      	mov	r2, r0
 801af6c:	460b      	mov	r3, r1
 801af6e:	4604      	mov	r4, r0
 801af70:	460d      	mov	r5, r1
 801af72:	4640      	mov	r0, r8
 801af74:	4649      	mov	r1, r9
 801af76:	f7e5 f98f 	bl	8000298 <__aeabi_dsub>
 801af7a:	9a03      	ldr	r2, [sp, #12]
 801af7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801af80:	1ad3      	subs	r3, r2, r3
 801af82:	2b31      	cmp	r3, #49	; 0x31
 801af84:	dc24      	bgt.n	801afd0 <__ieee754_rem_pio2+0x288>
 801af86:	e9ca 0100 	strd	r0, r1, [sl]
 801af8a:	4646      	mov	r6, r8
 801af8c:	464f      	mov	r7, r9
 801af8e:	e9da 8900 	ldrd	r8, r9, [sl]
 801af92:	4630      	mov	r0, r6
 801af94:	4642      	mov	r2, r8
 801af96:	464b      	mov	r3, r9
 801af98:	4639      	mov	r1, r7
 801af9a:	f7e5 f97d 	bl	8000298 <__aeabi_dsub>
 801af9e:	462b      	mov	r3, r5
 801afa0:	4622      	mov	r2, r4
 801afa2:	f7e5 f979 	bl	8000298 <__aeabi_dsub>
 801afa6:	9b02      	ldr	r3, [sp, #8]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801afae:	f6bf af0b 	bge.w	801adc8 <__ieee754_rem_pio2+0x80>
 801afb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801afb6:	f8ca 3004 	str.w	r3, [sl, #4]
 801afba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afbe:	f8ca 8000 	str.w	r8, [sl]
 801afc2:	f8ca 0008 	str.w	r0, [sl, #8]
 801afc6:	f8ca 300c 	str.w	r3, [sl, #12]
 801afca:	f1cb 0b00 	rsb	fp, fp, #0
 801afce:	e6fb      	b.n	801adc8 <__ieee754_rem_pio2+0x80>
 801afd0:	a327      	add	r3, pc, #156	; (adr r3, 801b070 <__ieee754_rem_pio2+0x328>)
 801afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd6:	ec51 0b18 	vmov	r0, r1, d8
 801afda:	f7e5 fb15 	bl	8000608 <__aeabi_dmul>
 801afde:	4604      	mov	r4, r0
 801afe0:	460d      	mov	r5, r1
 801afe2:	4602      	mov	r2, r0
 801afe4:	460b      	mov	r3, r1
 801afe6:	4640      	mov	r0, r8
 801afe8:	4649      	mov	r1, r9
 801afea:	f7e5 f955 	bl	8000298 <__aeabi_dsub>
 801afee:	4602      	mov	r2, r0
 801aff0:	460b      	mov	r3, r1
 801aff2:	4606      	mov	r6, r0
 801aff4:	460f      	mov	r7, r1
 801aff6:	4640      	mov	r0, r8
 801aff8:	4649      	mov	r1, r9
 801affa:	f7e5 f94d 	bl	8000298 <__aeabi_dsub>
 801affe:	4622      	mov	r2, r4
 801b000:	462b      	mov	r3, r5
 801b002:	f7e5 f949 	bl	8000298 <__aeabi_dsub>
 801b006:	a31c      	add	r3, pc, #112	; (adr r3, 801b078 <__ieee754_rem_pio2+0x330>)
 801b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00c:	4604      	mov	r4, r0
 801b00e:	460d      	mov	r5, r1
 801b010:	ec51 0b18 	vmov	r0, r1, d8
 801b014:	f7e5 faf8 	bl	8000608 <__aeabi_dmul>
 801b018:	4622      	mov	r2, r4
 801b01a:	462b      	mov	r3, r5
 801b01c:	f7e5 f93c 	bl	8000298 <__aeabi_dsub>
 801b020:	4604      	mov	r4, r0
 801b022:	460d      	mov	r5, r1
 801b024:	e760      	b.n	801aee8 <__ieee754_rem_pio2+0x1a0>
 801b026:	4b1c      	ldr	r3, [pc, #112]	; (801b098 <__ieee754_rem_pio2+0x350>)
 801b028:	4598      	cmp	r8, r3
 801b02a:	dd37      	ble.n	801b09c <__ieee754_rem_pio2+0x354>
 801b02c:	ee10 2a10 	vmov	r2, s0
 801b030:	462b      	mov	r3, r5
 801b032:	4620      	mov	r0, r4
 801b034:	4629      	mov	r1, r5
 801b036:	f7e5 f92f 	bl	8000298 <__aeabi_dsub>
 801b03a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b03e:	e9ca 0100 	strd	r0, r1, [sl]
 801b042:	e695      	b.n	801ad70 <__ieee754_rem_pio2+0x28>
 801b044:	f3af 8000 	nop.w
 801b048:	54400000 	.word	0x54400000
 801b04c:	3ff921fb 	.word	0x3ff921fb
 801b050:	1a626331 	.word	0x1a626331
 801b054:	3dd0b461 	.word	0x3dd0b461
 801b058:	1a600000 	.word	0x1a600000
 801b05c:	3dd0b461 	.word	0x3dd0b461
 801b060:	2e037073 	.word	0x2e037073
 801b064:	3ba3198a 	.word	0x3ba3198a
 801b068:	6dc9c883 	.word	0x6dc9c883
 801b06c:	3fe45f30 	.word	0x3fe45f30
 801b070:	2e000000 	.word	0x2e000000
 801b074:	3ba3198a 	.word	0x3ba3198a
 801b078:	252049c1 	.word	0x252049c1
 801b07c:	397b839a 	.word	0x397b839a
 801b080:	3fe921fb 	.word	0x3fe921fb
 801b084:	4002d97b 	.word	0x4002d97b
 801b088:	3ff921fb 	.word	0x3ff921fb
 801b08c:	413921fb 	.word	0x413921fb
 801b090:	3fe00000 	.word	0x3fe00000
 801b094:	0801dde0 	.word	0x0801dde0
 801b098:	7fefffff 	.word	0x7fefffff
 801b09c:	ea4f 5628 	mov.w	r6, r8, asr #20
 801b0a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801b0a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	460d      	mov	r5, r1
 801b0ac:	f7e5 fd46 	bl	8000b3c <__aeabi_d2iz>
 801b0b0:	f7e5 fa40 	bl	8000534 <__aeabi_i2d>
 801b0b4:	4602      	mov	r2, r0
 801b0b6:	460b      	mov	r3, r1
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	4629      	mov	r1, r5
 801b0bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b0c0:	f7e5 f8ea 	bl	8000298 <__aeabi_dsub>
 801b0c4:	4b21      	ldr	r3, [pc, #132]	; (801b14c <__ieee754_rem_pio2+0x404>)
 801b0c6:	2200      	movs	r2, #0
 801b0c8:	f7e5 fa9e 	bl	8000608 <__aeabi_dmul>
 801b0cc:	460d      	mov	r5, r1
 801b0ce:	4604      	mov	r4, r0
 801b0d0:	f7e5 fd34 	bl	8000b3c <__aeabi_d2iz>
 801b0d4:	f7e5 fa2e 	bl	8000534 <__aeabi_i2d>
 801b0d8:	4602      	mov	r2, r0
 801b0da:	460b      	mov	r3, r1
 801b0dc:	4620      	mov	r0, r4
 801b0de:	4629      	mov	r1, r5
 801b0e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b0e4:	f7e5 f8d8 	bl	8000298 <__aeabi_dsub>
 801b0e8:	4b18      	ldr	r3, [pc, #96]	; (801b14c <__ieee754_rem_pio2+0x404>)
 801b0ea:	2200      	movs	r2, #0
 801b0ec:	f7e5 fa8c 	bl	8000608 <__aeabi_dmul>
 801b0f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b0f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801b0f8:	2703      	movs	r7, #3
 801b0fa:	2400      	movs	r4, #0
 801b0fc:	2500      	movs	r5, #0
 801b0fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801b102:	4622      	mov	r2, r4
 801b104:	462b      	mov	r3, r5
 801b106:	46b9      	mov	r9, r7
 801b108:	3f01      	subs	r7, #1
 801b10a:	f7e5 fce5 	bl	8000ad8 <__aeabi_dcmpeq>
 801b10e:	2800      	cmp	r0, #0
 801b110:	d1f5      	bne.n	801b0fe <__ieee754_rem_pio2+0x3b6>
 801b112:	4b0f      	ldr	r3, [pc, #60]	; (801b150 <__ieee754_rem_pio2+0x408>)
 801b114:	9301      	str	r3, [sp, #4]
 801b116:	2302      	movs	r3, #2
 801b118:	9300      	str	r3, [sp, #0]
 801b11a:	4632      	mov	r2, r6
 801b11c:	464b      	mov	r3, r9
 801b11e:	4651      	mov	r1, sl
 801b120:	a804      	add	r0, sp, #16
 801b122:	f000 f821 	bl	801b168 <__kernel_rem_pio2>
 801b126:	9b02      	ldr	r3, [sp, #8]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	4683      	mov	fp, r0
 801b12c:	f6bf ae4c 	bge.w	801adc8 <__ieee754_rem_pio2+0x80>
 801b130:	e9da 2100 	ldrd	r2, r1, [sl]
 801b134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b138:	e9ca 2300 	strd	r2, r3, [sl]
 801b13c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b140:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b144:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b148:	e73f      	b.n	801afca <__ieee754_rem_pio2+0x282>
 801b14a:	bf00      	nop
 801b14c:	41700000 	.word	0x41700000
 801b150:	0801de60 	.word	0x0801de60

0801b154 <fabs>:
 801b154:	ec51 0b10 	vmov	r0, r1, d0
 801b158:	ee10 2a10 	vmov	r2, s0
 801b15c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b160:	ec43 2b10 	vmov	d0, r2, r3
 801b164:	4770      	bx	lr
	...

0801b168 <__kernel_rem_pio2>:
 801b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b16c:	ed2d 8b02 	vpush	{d8}
 801b170:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b174:	f112 0f14 	cmn.w	r2, #20
 801b178:	9306      	str	r3, [sp, #24]
 801b17a:	9104      	str	r1, [sp, #16]
 801b17c:	4bc2      	ldr	r3, [pc, #776]	; (801b488 <__kernel_rem_pio2+0x320>)
 801b17e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b180:	9009      	str	r0, [sp, #36]	; 0x24
 801b182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b186:	9300      	str	r3, [sp, #0]
 801b188:	9b06      	ldr	r3, [sp, #24]
 801b18a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b18e:	bfa8      	it	ge
 801b190:	1ed4      	subge	r4, r2, #3
 801b192:	9305      	str	r3, [sp, #20]
 801b194:	bfb2      	itee	lt
 801b196:	2400      	movlt	r4, #0
 801b198:	2318      	movge	r3, #24
 801b19a:	fb94 f4f3 	sdivge	r4, r4, r3
 801b19e:	f06f 0317 	mvn.w	r3, #23
 801b1a2:	fb04 3303 	mla	r3, r4, r3, r3
 801b1a6:	eb03 0a02 	add.w	sl, r3, r2
 801b1aa:	9b00      	ldr	r3, [sp, #0]
 801b1ac:	9a05      	ldr	r2, [sp, #20]
 801b1ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801b478 <__kernel_rem_pio2+0x310>
 801b1b2:	eb03 0802 	add.w	r8, r3, r2
 801b1b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b1b8:	1aa7      	subs	r7, r4, r2
 801b1ba:	ae20      	add	r6, sp, #128	; 0x80
 801b1bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b1c0:	2500      	movs	r5, #0
 801b1c2:	4545      	cmp	r5, r8
 801b1c4:	dd13      	ble.n	801b1ee <__kernel_rem_pio2+0x86>
 801b1c6:	9b06      	ldr	r3, [sp, #24]
 801b1c8:	aa20      	add	r2, sp, #128	; 0x80
 801b1ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b1ce:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b1d2:	f04f 0800 	mov.w	r8, #0
 801b1d6:	9b00      	ldr	r3, [sp, #0]
 801b1d8:	4598      	cmp	r8, r3
 801b1da:	dc31      	bgt.n	801b240 <__kernel_rem_pio2+0xd8>
 801b1dc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801b478 <__kernel_rem_pio2+0x310>
 801b1e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b1e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b1e8:	462f      	mov	r7, r5
 801b1ea:	2600      	movs	r6, #0
 801b1ec:	e01b      	b.n	801b226 <__kernel_rem_pio2+0xbe>
 801b1ee:	42ef      	cmn	r7, r5
 801b1f0:	d407      	bmi.n	801b202 <__kernel_rem_pio2+0x9a>
 801b1f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b1f6:	f7e5 f99d 	bl	8000534 <__aeabi_i2d>
 801b1fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b1fe:	3501      	adds	r5, #1
 801b200:	e7df      	b.n	801b1c2 <__kernel_rem_pio2+0x5a>
 801b202:	ec51 0b18 	vmov	r0, r1, d8
 801b206:	e7f8      	b.n	801b1fa <__kernel_rem_pio2+0x92>
 801b208:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b20c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b210:	f7e5 f9fa 	bl	8000608 <__aeabi_dmul>
 801b214:	4602      	mov	r2, r0
 801b216:	460b      	mov	r3, r1
 801b218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b21c:	f7e5 f83e 	bl	800029c <__adddf3>
 801b220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b224:	3601      	adds	r6, #1
 801b226:	9b05      	ldr	r3, [sp, #20]
 801b228:	429e      	cmp	r6, r3
 801b22a:	f1a7 0708 	sub.w	r7, r7, #8
 801b22e:	ddeb      	ble.n	801b208 <__kernel_rem_pio2+0xa0>
 801b230:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b234:	f108 0801 	add.w	r8, r8, #1
 801b238:	ecab 7b02 	vstmia	fp!, {d7}
 801b23c:	3508      	adds	r5, #8
 801b23e:	e7ca      	b.n	801b1d6 <__kernel_rem_pio2+0x6e>
 801b240:	9b00      	ldr	r3, [sp, #0]
 801b242:	aa0c      	add	r2, sp, #48	; 0x30
 801b244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b248:	930b      	str	r3, [sp, #44]	; 0x2c
 801b24a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b24c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b250:	9c00      	ldr	r4, [sp, #0]
 801b252:	930a      	str	r3, [sp, #40]	; 0x28
 801b254:	00e3      	lsls	r3, r4, #3
 801b256:	9308      	str	r3, [sp, #32]
 801b258:	ab98      	add	r3, sp, #608	; 0x260
 801b25a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b25e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b262:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801b266:	ab70      	add	r3, sp, #448	; 0x1c0
 801b268:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801b26c:	46c3      	mov	fp, r8
 801b26e:	46a1      	mov	r9, r4
 801b270:	f1b9 0f00 	cmp.w	r9, #0
 801b274:	f1a5 0508 	sub.w	r5, r5, #8
 801b278:	dc77      	bgt.n	801b36a <__kernel_rem_pio2+0x202>
 801b27a:	ec47 6b10 	vmov	d0, r6, r7
 801b27e:	4650      	mov	r0, sl
 801b280:	f000 fac2 	bl	801b808 <scalbn>
 801b284:	ec57 6b10 	vmov	r6, r7, d0
 801b288:	2200      	movs	r2, #0
 801b28a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b28e:	ee10 0a10 	vmov	r0, s0
 801b292:	4639      	mov	r1, r7
 801b294:	f7e5 f9b8 	bl	8000608 <__aeabi_dmul>
 801b298:	ec41 0b10 	vmov	d0, r0, r1
 801b29c:	f000 fb34 	bl	801b908 <floor>
 801b2a0:	4b7a      	ldr	r3, [pc, #488]	; (801b48c <__kernel_rem_pio2+0x324>)
 801b2a2:	ec51 0b10 	vmov	r0, r1, d0
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	f7e5 f9ae 	bl	8000608 <__aeabi_dmul>
 801b2ac:	4602      	mov	r2, r0
 801b2ae:	460b      	mov	r3, r1
 801b2b0:	4630      	mov	r0, r6
 801b2b2:	4639      	mov	r1, r7
 801b2b4:	f7e4 fff0 	bl	8000298 <__aeabi_dsub>
 801b2b8:	460f      	mov	r7, r1
 801b2ba:	4606      	mov	r6, r0
 801b2bc:	f7e5 fc3e 	bl	8000b3c <__aeabi_d2iz>
 801b2c0:	9002      	str	r0, [sp, #8]
 801b2c2:	f7e5 f937 	bl	8000534 <__aeabi_i2d>
 801b2c6:	4602      	mov	r2, r0
 801b2c8:	460b      	mov	r3, r1
 801b2ca:	4630      	mov	r0, r6
 801b2cc:	4639      	mov	r1, r7
 801b2ce:	f7e4 ffe3 	bl	8000298 <__aeabi_dsub>
 801b2d2:	f1ba 0f00 	cmp.w	sl, #0
 801b2d6:	4606      	mov	r6, r0
 801b2d8:	460f      	mov	r7, r1
 801b2da:	dd6d      	ble.n	801b3b8 <__kernel_rem_pio2+0x250>
 801b2dc:	1e61      	subs	r1, r4, #1
 801b2de:	ab0c      	add	r3, sp, #48	; 0x30
 801b2e0:	9d02      	ldr	r5, [sp, #8]
 801b2e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b2e6:	f1ca 0018 	rsb	r0, sl, #24
 801b2ea:	fa43 f200 	asr.w	r2, r3, r0
 801b2ee:	4415      	add	r5, r2
 801b2f0:	4082      	lsls	r2, r0
 801b2f2:	1a9b      	subs	r3, r3, r2
 801b2f4:	aa0c      	add	r2, sp, #48	; 0x30
 801b2f6:	9502      	str	r5, [sp, #8]
 801b2f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b2fc:	f1ca 0217 	rsb	r2, sl, #23
 801b300:	fa43 fb02 	asr.w	fp, r3, r2
 801b304:	f1bb 0f00 	cmp.w	fp, #0
 801b308:	dd65      	ble.n	801b3d6 <__kernel_rem_pio2+0x26e>
 801b30a:	9b02      	ldr	r3, [sp, #8]
 801b30c:	2200      	movs	r2, #0
 801b30e:	3301      	adds	r3, #1
 801b310:	9302      	str	r3, [sp, #8]
 801b312:	4615      	mov	r5, r2
 801b314:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b318:	4294      	cmp	r4, r2
 801b31a:	f300 809f 	bgt.w	801b45c <__kernel_rem_pio2+0x2f4>
 801b31e:	f1ba 0f00 	cmp.w	sl, #0
 801b322:	dd07      	ble.n	801b334 <__kernel_rem_pio2+0x1cc>
 801b324:	f1ba 0f01 	cmp.w	sl, #1
 801b328:	f000 80c1 	beq.w	801b4ae <__kernel_rem_pio2+0x346>
 801b32c:	f1ba 0f02 	cmp.w	sl, #2
 801b330:	f000 80c7 	beq.w	801b4c2 <__kernel_rem_pio2+0x35a>
 801b334:	f1bb 0f02 	cmp.w	fp, #2
 801b338:	d14d      	bne.n	801b3d6 <__kernel_rem_pio2+0x26e>
 801b33a:	4632      	mov	r2, r6
 801b33c:	463b      	mov	r3, r7
 801b33e:	4954      	ldr	r1, [pc, #336]	; (801b490 <__kernel_rem_pio2+0x328>)
 801b340:	2000      	movs	r0, #0
 801b342:	f7e4 ffa9 	bl	8000298 <__aeabi_dsub>
 801b346:	4606      	mov	r6, r0
 801b348:	460f      	mov	r7, r1
 801b34a:	2d00      	cmp	r5, #0
 801b34c:	d043      	beq.n	801b3d6 <__kernel_rem_pio2+0x26e>
 801b34e:	4650      	mov	r0, sl
 801b350:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801b480 <__kernel_rem_pio2+0x318>
 801b354:	f000 fa58 	bl	801b808 <scalbn>
 801b358:	4630      	mov	r0, r6
 801b35a:	4639      	mov	r1, r7
 801b35c:	ec53 2b10 	vmov	r2, r3, d0
 801b360:	f7e4 ff9a 	bl	8000298 <__aeabi_dsub>
 801b364:	4606      	mov	r6, r0
 801b366:	460f      	mov	r7, r1
 801b368:	e035      	b.n	801b3d6 <__kernel_rem_pio2+0x26e>
 801b36a:	4b4a      	ldr	r3, [pc, #296]	; (801b494 <__kernel_rem_pio2+0x32c>)
 801b36c:	2200      	movs	r2, #0
 801b36e:	4630      	mov	r0, r6
 801b370:	4639      	mov	r1, r7
 801b372:	f7e5 f949 	bl	8000608 <__aeabi_dmul>
 801b376:	f7e5 fbe1 	bl	8000b3c <__aeabi_d2iz>
 801b37a:	f7e5 f8db 	bl	8000534 <__aeabi_i2d>
 801b37e:	4602      	mov	r2, r0
 801b380:	460b      	mov	r3, r1
 801b382:	ec43 2b18 	vmov	d8, r2, r3
 801b386:	4b44      	ldr	r3, [pc, #272]	; (801b498 <__kernel_rem_pio2+0x330>)
 801b388:	2200      	movs	r2, #0
 801b38a:	f7e5 f93d 	bl	8000608 <__aeabi_dmul>
 801b38e:	4602      	mov	r2, r0
 801b390:	460b      	mov	r3, r1
 801b392:	4630      	mov	r0, r6
 801b394:	4639      	mov	r1, r7
 801b396:	f7e4 ff7f 	bl	8000298 <__aeabi_dsub>
 801b39a:	f7e5 fbcf 	bl	8000b3c <__aeabi_d2iz>
 801b39e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b3a2:	f84b 0b04 	str.w	r0, [fp], #4
 801b3a6:	ec51 0b18 	vmov	r0, r1, d8
 801b3aa:	f7e4 ff77 	bl	800029c <__adddf3>
 801b3ae:	f109 39ff 	add.w	r9, r9, #4294967295
 801b3b2:	4606      	mov	r6, r0
 801b3b4:	460f      	mov	r7, r1
 801b3b6:	e75b      	b.n	801b270 <__kernel_rem_pio2+0x108>
 801b3b8:	d106      	bne.n	801b3c8 <__kernel_rem_pio2+0x260>
 801b3ba:	1e63      	subs	r3, r4, #1
 801b3bc:	aa0c      	add	r2, sp, #48	; 0x30
 801b3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b3c2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801b3c6:	e79d      	b.n	801b304 <__kernel_rem_pio2+0x19c>
 801b3c8:	4b34      	ldr	r3, [pc, #208]	; (801b49c <__kernel_rem_pio2+0x334>)
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	f7e5 fba2 	bl	8000b14 <__aeabi_dcmpge>
 801b3d0:	2800      	cmp	r0, #0
 801b3d2:	d140      	bne.n	801b456 <__kernel_rem_pio2+0x2ee>
 801b3d4:	4683      	mov	fp, r0
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	2300      	movs	r3, #0
 801b3da:	4630      	mov	r0, r6
 801b3dc:	4639      	mov	r1, r7
 801b3de:	f7e5 fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 801b3e2:	2800      	cmp	r0, #0
 801b3e4:	f000 80c1 	beq.w	801b56a <__kernel_rem_pio2+0x402>
 801b3e8:	1e65      	subs	r5, r4, #1
 801b3ea:	462b      	mov	r3, r5
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	9900      	ldr	r1, [sp, #0]
 801b3f0:	428b      	cmp	r3, r1
 801b3f2:	da6d      	bge.n	801b4d0 <__kernel_rem_pio2+0x368>
 801b3f4:	2a00      	cmp	r2, #0
 801b3f6:	f000 808a 	beq.w	801b50e <__kernel_rem_pio2+0x3a6>
 801b3fa:	ab0c      	add	r3, sp, #48	; 0x30
 801b3fc:	f1aa 0a18 	sub.w	sl, sl, #24
 801b400:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b404:	2b00      	cmp	r3, #0
 801b406:	f000 80ae 	beq.w	801b566 <__kernel_rem_pio2+0x3fe>
 801b40a:	4650      	mov	r0, sl
 801b40c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801b480 <__kernel_rem_pio2+0x318>
 801b410:	f000 f9fa 	bl	801b808 <scalbn>
 801b414:	1c6b      	adds	r3, r5, #1
 801b416:	00da      	lsls	r2, r3, #3
 801b418:	9205      	str	r2, [sp, #20]
 801b41a:	ec57 6b10 	vmov	r6, r7, d0
 801b41e:	aa70      	add	r2, sp, #448	; 0x1c0
 801b420:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801b494 <__kernel_rem_pio2+0x32c>
 801b424:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801b428:	462c      	mov	r4, r5
 801b42a:	f04f 0800 	mov.w	r8, #0
 801b42e:	2c00      	cmp	r4, #0
 801b430:	f280 80d4 	bge.w	801b5dc <__kernel_rem_pio2+0x474>
 801b434:	462c      	mov	r4, r5
 801b436:	2c00      	cmp	r4, #0
 801b438:	f2c0 8102 	blt.w	801b640 <__kernel_rem_pio2+0x4d8>
 801b43c:	4b18      	ldr	r3, [pc, #96]	; (801b4a0 <__kernel_rem_pio2+0x338>)
 801b43e:	461e      	mov	r6, r3
 801b440:	ab70      	add	r3, sp, #448	; 0x1c0
 801b442:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801b446:	1b2b      	subs	r3, r5, r4
 801b448:	f04f 0900 	mov.w	r9, #0
 801b44c:	f04f 0a00 	mov.w	sl, #0
 801b450:	2700      	movs	r7, #0
 801b452:	9306      	str	r3, [sp, #24]
 801b454:	e0e6      	b.n	801b624 <__kernel_rem_pio2+0x4bc>
 801b456:	f04f 0b02 	mov.w	fp, #2
 801b45a:	e756      	b.n	801b30a <__kernel_rem_pio2+0x1a2>
 801b45c:	f8d8 3000 	ldr.w	r3, [r8]
 801b460:	bb05      	cbnz	r5, 801b4a4 <__kernel_rem_pio2+0x33c>
 801b462:	b123      	cbz	r3, 801b46e <__kernel_rem_pio2+0x306>
 801b464:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b468:	f8c8 3000 	str.w	r3, [r8]
 801b46c:	2301      	movs	r3, #1
 801b46e:	3201      	adds	r2, #1
 801b470:	f108 0804 	add.w	r8, r8, #4
 801b474:	461d      	mov	r5, r3
 801b476:	e74f      	b.n	801b318 <__kernel_rem_pio2+0x1b0>
	...
 801b484:	3ff00000 	.word	0x3ff00000
 801b488:	0801dfa8 	.word	0x0801dfa8
 801b48c:	40200000 	.word	0x40200000
 801b490:	3ff00000 	.word	0x3ff00000
 801b494:	3e700000 	.word	0x3e700000
 801b498:	41700000 	.word	0x41700000
 801b49c:	3fe00000 	.word	0x3fe00000
 801b4a0:	0801df68 	.word	0x0801df68
 801b4a4:	1acb      	subs	r3, r1, r3
 801b4a6:	f8c8 3000 	str.w	r3, [r8]
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	e7df      	b.n	801b46e <__kernel_rem_pio2+0x306>
 801b4ae:	1e62      	subs	r2, r4, #1
 801b4b0:	ab0c      	add	r3, sp, #48	; 0x30
 801b4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b4ba:	a90c      	add	r1, sp, #48	; 0x30
 801b4bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b4c0:	e738      	b.n	801b334 <__kernel_rem_pio2+0x1cc>
 801b4c2:	1e62      	subs	r2, r4, #1
 801b4c4:	ab0c      	add	r3, sp, #48	; 0x30
 801b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4ca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b4ce:	e7f4      	b.n	801b4ba <__kernel_rem_pio2+0x352>
 801b4d0:	a90c      	add	r1, sp, #48	; 0x30
 801b4d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b4d6:	3b01      	subs	r3, #1
 801b4d8:	430a      	orrs	r2, r1
 801b4da:	e788      	b.n	801b3ee <__kernel_rem_pio2+0x286>
 801b4dc:	3301      	adds	r3, #1
 801b4de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b4e2:	2900      	cmp	r1, #0
 801b4e4:	d0fa      	beq.n	801b4dc <__kernel_rem_pio2+0x374>
 801b4e6:	9a08      	ldr	r2, [sp, #32]
 801b4e8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801b4ec:	446a      	add	r2, sp
 801b4ee:	3a98      	subs	r2, #152	; 0x98
 801b4f0:	9208      	str	r2, [sp, #32]
 801b4f2:	9a06      	ldr	r2, [sp, #24]
 801b4f4:	a920      	add	r1, sp, #128	; 0x80
 801b4f6:	18a2      	adds	r2, r4, r2
 801b4f8:	18e3      	adds	r3, r4, r3
 801b4fa:	f104 0801 	add.w	r8, r4, #1
 801b4fe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801b502:	9302      	str	r3, [sp, #8]
 801b504:	9b02      	ldr	r3, [sp, #8]
 801b506:	4543      	cmp	r3, r8
 801b508:	da04      	bge.n	801b514 <__kernel_rem_pio2+0x3ac>
 801b50a:	461c      	mov	r4, r3
 801b50c:	e6a2      	b.n	801b254 <__kernel_rem_pio2+0xec>
 801b50e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b510:	2301      	movs	r3, #1
 801b512:	e7e4      	b.n	801b4de <__kernel_rem_pio2+0x376>
 801b514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b516:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b51a:	f7e5 f80b 	bl	8000534 <__aeabi_i2d>
 801b51e:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b524:	46ab      	mov	fp, r5
 801b526:	461c      	mov	r4, r3
 801b528:	f04f 0900 	mov.w	r9, #0
 801b52c:	2600      	movs	r6, #0
 801b52e:	2700      	movs	r7, #0
 801b530:	9b05      	ldr	r3, [sp, #20]
 801b532:	4599      	cmp	r9, r3
 801b534:	dd06      	ble.n	801b544 <__kernel_rem_pio2+0x3dc>
 801b536:	9b08      	ldr	r3, [sp, #32]
 801b538:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b53c:	f108 0801 	add.w	r8, r8, #1
 801b540:	9308      	str	r3, [sp, #32]
 801b542:	e7df      	b.n	801b504 <__kernel_rem_pio2+0x39c>
 801b544:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b548:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b54c:	f7e5 f85c 	bl	8000608 <__aeabi_dmul>
 801b550:	4602      	mov	r2, r0
 801b552:	460b      	mov	r3, r1
 801b554:	4630      	mov	r0, r6
 801b556:	4639      	mov	r1, r7
 801b558:	f7e4 fea0 	bl	800029c <__adddf3>
 801b55c:	f109 0901 	add.w	r9, r9, #1
 801b560:	4606      	mov	r6, r0
 801b562:	460f      	mov	r7, r1
 801b564:	e7e4      	b.n	801b530 <__kernel_rem_pio2+0x3c8>
 801b566:	3d01      	subs	r5, #1
 801b568:	e747      	b.n	801b3fa <__kernel_rem_pio2+0x292>
 801b56a:	ec47 6b10 	vmov	d0, r6, r7
 801b56e:	f1ca 0000 	rsb	r0, sl, #0
 801b572:	f000 f949 	bl	801b808 <scalbn>
 801b576:	ec57 6b10 	vmov	r6, r7, d0
 801b57a:	4ba0      	ldr	r3, [pc, #640]	; (801b7fc <__kernel_rem_pio2+0x694>)
 801b57c:	ee10 0a10 	vmov	r0, s0
 801b580:	2200      	movs	r2, #0
 801b582:	4639      	mov	r1, r7
 801b584:	f7e5 fac6 	bl	8000b14 <__aeabi_dcmpge>
 801b588:	b1f8      	cbz	r0, 801b5ca <__kernel_rem_pio2+0x462>
 801b58a:	4b9d      	ldr	r3, [pc, #628]	; (801b800 <__kernel_rem_pio2+0x698>)
 801b58c:	2200      	movs	r2, #0
 801b58e:	4630      	mov	r0, r6
 801b590:	4639      	mov	r1, r7
 801b592:	f7e5 f839 	bl	8000608 <__aeabi_dmul>
 801b596:	f7e5 fad1 	bl	8000b3c <__aeabi_d2iz>
 801b59a:	4680      	mov	r8, r0
 801b59c:	f7e4 ffca 	bl	8000534 <__aeabi_i2d>
 801b5a0:	4b96      	ldr	r3, [pc, #600]	; (801b7fc <__kernel_rem_pio2+0x694>)
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	f7e5 f830 	bl	8000608 <__aeabi_dmul>
 801b5a8:	460b      	mov	r3, r1
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	4639      	mov	r1, r7
 801b5ae:	4630      	mov	r0, r6
 801b5b0:	f7e4 fe72 	bl	8000298 <__aeabi_dsub>
 801b5b4:	f7e5 fac2 	bl	8000b3c <__aeabi_d2iz>
 801b5b8:	1c65      	adds	r5, r4, #1
 801b5ba:	ab0c      	add	r3, sp, #48	; 0x30
 801b5bc:	f10a 0a18 	add.w	sl, sl, #24
 801b5c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b5c4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b5c8:	e71f      	b.n	801b40a <__kernel_rem_pio2+0x2a2>
 801b5ca:	4630      	mov	r0, r6
 801b5cc:	4639      	mov	r1, r7
 801b5ce:	f7e5 fab5 	bl	8000b3c <__aeabi_d2iz>
 801b5d2:	ab0c      	add	r3, sp, #48	; 0x30
 801b5d4:	4625      	mov	r5, r4
 801b5d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b5da:	e716      	b.n	801b40a <__kernel_rem_pio2+0x2a2>
 801b5dc:	ab0c      	add	r3, sp, #48	; 0x30
 801b5de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b5e2:	f7e4 ffa7 	bl	8000534 <__aeabi_i2d>
 801b5e6:	4632      	mov	r2, r6
 801b5e8:	463b      	mov	r3, r7
 801b5ea:	f7e5 f80d 	bl	8000608 <__aeabi_dmul>
 801b5ee:	4642      	mov	r2, r8
 801b5f0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801b5f4:	464b      	mov	r3, r9
 801b5f6:	4630      	mov	r0, r6
 801b5f8:	4639      	mov	r1, r7
 801b5fa:	f7e5 f805 	bl	8000608 <__aeabi_dmul>
 801b5fe:	3c01      	subs	r4, #1
 801b600:	4606      	mov	r6, r0
 801b602:	460f      	mov	r7, r1
 801b604:	e713      	b.n	801b42e <__kernel_rem_pio2+0x2c6>
 801b606:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801b60a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801b60e:	f7e4 fffb 	bl	8000608 <__aeabi_dmul>
 801b612:	4602      	mov	r2, r0
 801b614:	460b      	mov	r3, r1
 801b616:	4648      	mov	r0, r9
 801b618:	4651      	mov	r1, sl
 801b61a:	f7e4 fe3f 	bl	800029c <__adddf3>
 801b61e:	3701      	adds	r7, #1
 801b620:	4681      	mov	r9, r0
 801b622:	468a      	mov	sl, r1
 801b624:	9b00      	ldr	r3, [sp, #0]
 801b626:	429f      	cmp	r7, r3
 801b628:	dc02      	bgt.n	801b630 <__kernel_rem_pio2+0x4c8>
 801b62a:	9b06      	ldr	r3, [sp, #24]
 801b62c:	429f      	cmp	r7, r3
 801b62e:	ddea      	ble.n	801b606 <__kernel_rem_pio2+0x49e>
 801b630:	9a06      	ldr	r2, [sp, #24]
 801b632:	ab48      	add	r3, sp, #288	; 0x120
 801b634:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801b638:	e9c6 9a00 	strd	r9, sl, [r6]
 801b63c:	3c01      	subs	r4, #1
 801b63e:	e6fa      	b.n	801b436 <__kernel_rem_pio2+0x2ce>
 801b640:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b642:	2b02      	cmp	r3, #2
 801b644:	dc0b      	bgt.n	801b65e <__kernel_rem_pio2+0x4f6>
 801b646:	2b00      	cmp	r3, #0
 801b648:	dc39      	bgt.n	801b6be <__kernel_rem_pio2+0x556>
 801b64a:	d05d      	beq.n	801b708 <__kernel_rem_pio2+0x5a0>
 801b64c:	9b02      	ldr	r3, [sp, #8]
 801b64e:	f003 0007 	and.w	r0, r3, #7
 801b652:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801b656:	ecbd 8b02 	vpop	{d8}
 801b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b65e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801b660:	2b03      	cmp	r3, #3
 801b662:	d1f3      	bne.n	801b64c <__kernel_rem_pio2+0x4e4>
 801b664:	9b05      	ldr	r3, [sp, #20]
 801b666:	9500      	str	r5, [sp, #0]
 801b668:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801b66c:	eb0d 0403 	add.w	r4, sp, r3
 801b670:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801b674:	46a2      	mov	sl, r4
 801b676:	9b00      	ldr	r3, [sp, #0]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f1aa 0a08 	sub.w	sl, sl, #8
 801b67e:	dc69      	bgt.n	801b754 <__kernel_rem_pio2+0x5ec>
 801b680:	46aa      	mov	sl, r5
 801b682:	f1ba 0f01 	cmp.w	sl, #1
 801b686:	f1a4 0408 	sub.w	r4, r4, #8
 801b68a:	f300 8083 	bgt.w	801b794 <__kernel_rem_pio2+0x62c>
 801b68e:	9c05      	ldr	r4, [sp, #20]
 801b690:	ab48      	add	r3, sp, #288	; 0x120
 801b692:	441c      	add	r4, r3
 801b694:	2000      	movs	r0, #0
 801b696:	2100      	movs	r1, #0
 801b698:	2d01      	cmp	r5, #1
 801b69a:	f300 809a 	bgt.w	801b7d2 <__kernel_rem_pio2+0x66a>
 801b69e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801b6a2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801b6a6:	f1bb 0f00 	cmp.w	fp, #0
 801b6aa:	f040 8098 	bne.w	801b7de <__kernel_rem_pio2+0x676>
 801b6ae:	9b04      	ldr	r3, [sp, #16]
 801b6b0:	e9c3 7800 	strd	r7, r8, [r3]
 801b6b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b6b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b6bc:	e7c6      	b.n	801b64c <__kernel_rem_pio2+0x4e4>
 801b6be:	9e05      	ldr	r6, [sp, #20]
 801b6c0:	ab48      	add	r3, sp, #288	; 0x120
 801b6c2:	441e      	add	r6, r3
 801b6c4:	462c      	mov	r4, r5
 801b6c6:	2000      	movs	r0, #0
 801b6c8:	2100      	movs	r1, #0
 801b6ca:	2c00      	cmp	r4, #0
 801b6cc:	da33      	bge.n	801b736 <__kernel_rem_pio2+0x5ce>
 801b6ce:	f1bb 0f00 	cmp.w	fp, #0
 801b6d2:	d036      	beq.n	801b742 <__kernel_rem_pio2+0x5da>
 801b6d4:	4602      	mov	r2, r0
 801b6d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6da:	9c04      	ldr	r4, [sp, #16]
 801b6dc:	e9c4 2300 	strd	r2, r3, [r4]
 801b6e0:	4602      	mov	r2, r0
 801b6e2:	460b      	mov	r3, r1
 801b6e4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801b6e8:	f7e4 fdd6 	bl	8000298 <__aeabi_dsub>
 801b6ec:	ae4a      	add	r6, sp, #296	; 0x128
 801b6ee:	2401      	movs	r4, #1
 801b6f0:	42a5      	cmp	r5, r4
 801b6f2:	da29      	bge.n	801b748 <__kernel_rem_pio2+0x5e0>
 801b6f4:	f1bb 0f00 	cmp.w	fp, #0
 801b6f8:	d002      	beq.n	801b700 <__kernel_rem_pio2+0x598>
 801b6fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6fe:	4619      	mov	r1, r3
 801b700:	9b04      	ldr	r3, [sp, #16]
 801b702:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b706:	e7a1      	b.n	801b64c <__kernel_rem_pio2+0x4e4>
 801b708:	9c05      	ldr	r4, [sp, #20]
 801b70a:	ab48      	add	r3, sp, #288	; 0x120
 801b70c:	441c      	add	r4, r3
 801b70e:	2000      	movs	r0, #0
 801b710:	2100      	movs	r1, #0
 801b712:	2d00      	cmp	r5, #0
 801b714:	da09      	bge.n	801b72a <__kernel_rem_pio2+0x5c2>
 801b716:	f1bb 0f00 	cmp.w	fp, #0
 801b71a:	d002      	beq.n	801b722 <__kernel_rem_pio2+0x5ba>
 801b71c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b720:	4619      	mov	r1, r3
 801b722:	9b04      	ldr	r3, [sp, #16]
 801b724:	e9c3 0100 	strd	r0, r1, [r3]
 801b728:	e790      	b.n	801b64c <__kernel_rem_pio2+0x4e4>
 801b72a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b72e:	f7e4 fdb5 	bl	800029c <__adddf3>
 801b732:	3d01      	subs	r5, #1
 801b734:	e7ed      	b.n	801b712 <__kernel_rem_pio2+0x5aa>
 801b736:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801b73a:	f7e4 fdaf 	bl	800029c <__adddf3>
 801b73e:	3c01      	subs	r4, #1
 801b740:	e7c3      	b.n	801b6ca <__kernel_rem_pio2+0x562>
 801b742:	4602      	mov	r2, r0
 801b744:	460b      	mov	r3, r1
 801b746:	e7c8      	b.n	801b6da <__kernel_rem_pio2+0x572>
 801b748:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b74c:	f7e4 fda6 	bl	800029c <__adddf3>
 801b750:	3401      	adds	r4, #1
 801b752:	e7cd      	b.n	801b6f0 <__kernel_rem_pio2+0x588>
 801b754:	e9da 8900 	ldrd	r8, r9, [sl]
 801b758:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b75c:	9b00      	ldr	r3, [sp, #0]
 801b75e:	3b01      	subs	r3, #1
 801b760:	9300      	str	r3, [sp, #0]
 801b762:	4632      	mov	r2, r6
 801b764:	463b      	mov	r3, r7
 801b766:	4640      	mov	r0, r8
 801b768:	4649      	mov	r1, r9
 801b76a:	f7e4 fd97 	bl	800029c <__adddf3>
 801b76e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b772:	4602      	mov	r2, r0
 801b774:	460b      	mov	r3, r1
 801b776:	4640      	mov	r0, r8
 801b778:	4649      	mov	r1, r9
 801b77a:	f7e4 fd8d 	bl	8000298 <__aeabi_dsub>
 801b77e:	4632      	mov	r2, r6
 801b780:	463b      	mov	r3, r7
 801b782:	f7e4 fd8b 	bl	800029c <__adddf3>
 801b786:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b78a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b78e:	ed8a 7b00 	vstr	d7, [sl]
 801b792:	e770      	b.n	801b676 <__kernel_rem_pio2+0x50e>
 801b794:	e9d4 8900 	ldrd	r8, r9, [r4]
 801b798:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801b79c:	4640      	mov	r0, r8
 801b79e:	4632      	mov	r2, r6
 801b7a0:	463b      	mov	r3, r7
 801b7a2:	4649      	mov	r1, r9
 801b7a4:	f7e4 fd7a 	bl	800029c <__adddf3>
 801b7a8:	e9cd 0100 	strd	r0, r1, [sp]
 801b7ac:	4602      	mov	r2, r0
 801b7ae:	460b      	mov	r3, r1
 801b7b0:	4640      	mov	r0, r8
 801b7b2:	4649      	mov	r1, r9
 801b7b4:	f7e4 fd70 	bl	8000298 <__aeabi_dsub>
 801b7b8:	4632      	mov	r2, r6
 801b7ba:	463b      	mov	r3, r7
 801b7bc:	f7e4 fd6e 	bl	800029c <__adddf3>
 801b7c0:	ed9d 7b00 	vldr	d7, [sp]
 801b7c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b7c8:	ed84 7b00 	vstr	d7, [r4]
 801b7cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b7d0:	e757      	b.n	801b682 <__kernel_rem_pio2+0x51a>
 801b7d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b7d6:	f7e4 fd61 	bl	800029c <__adddf3>
 801b7da:	3d01      	subs	r5, #1
 801b7dc:	e75c      	b.n	801b698 <__kernel_rem_pio2+0x530>
 801b7de:	9b04      	ldr	r3, [sp, #16]
 801b7e0:	9a04      	ldr	r2, [sp, #16]
 801b7e2:	601f      	str	r7, [r3, #0]
 801b7e4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801b7e8:	605c      	str	r4, [r3, #4]
 801b7ea:	609d      	str	r5, [r3, #8]
 801b7ec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b7f0:	60d3      	str	r3, [r2, #12]
 801b7f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7f6:	6110      	str	r0, [r2, #16]
 801b7f8:	6153      	str	r3, [r2, #20]
 801b7fa:	e727      	b.n	801b64c <__kernel_rem_pio2+0x4e4>
 801b7fc:	41700000 	.word	0x41700000
 801b800:	3e700000 	.word	0x3e700000
 801b804:	00000000 	.word	0x00000000

0801b808 <scalbn>:
 801b808:	b570      	push	{r4, r5, r6, lr}
 801b80a:	ec55 4b10 	vmov	r4, r5, d0
 801b80e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b812:	4606      	mov	r6, r0
 801b814:	462b      	mov	r3, r5
 801b816:	b999      	cbnz	r1, 801b840 <scalbn+0x38>
 801b818:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b81c:	4323      	orrs	r3, r4
 801b81e:	d03f      	beq.n	801b8a0 <scalbn+0x98>
 801b820:	4b35      	ldr	r3, [pc, #212]	; (801b8f8 <scalbn+0xf0>)
 801b822:	4629      	mov	r1, r5
 801b824:	ee10 0a10 	vmov	r0, s0
 801b828:	2200      	movs	r2, #0
 801b82a:	f7e4 feed 	bl	8000608 <__aeabi_dmul>
 801b82e:	4b33      	ldr	r3, [pc, #204]	; (801b8fc <scalbn+0xf4>)
 801b830:	429e      	cmp	r6, r3
 801b832:	4604      	mov	r4, r0
 801b834:	460d      	mov	r5, r1
 801b836:	da10      	bge.n	801b85a <scalbn+0x52>
 801b838:	a327      	add	r3, pc, #156	; (adr r3, 801b8d8 <scalbn+0xd0>)
 801b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83e:	e01f      	b.n	801b880 <scalbn+0x78>
 801b840:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b844:	4291      	cmp	r1, r2
 801b846:	d10c      	bne.n	801b862 <scalbn+0x5a>
 801b848:	ee10 2a10 	vmov	r2, s0
 801b84c:	4620      	mov	r0, r4
 801b84e:	4629      	mov	r1, r5
 801b850:	f7e4 fd24 	bl	800029c <__adddf3>
 801b854:	4604      	mov	r4, r0
 801b856:	460d      	mov	r5, r1
 801b858:	e022      	b.n	801b8a0 <scalbn+0x98>
 801b85a:	460b      	mov	r3, r1
 801b85c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b860:	3936      	subs	r1, #54	; 0x36
 801b862:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b866:	4296      	cmp	r6, r2
 801b868:	dd0d      	ble.n	801b886 <scalbn+0x7e>
 801b86a:	2d00      	cmp	r5, #0
 801b86c:	a11c      	add	r1, pc, #112	; (adr r1, 801b8e0 <scalbn+0xd8>)
 801b86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b872:	da02      	bge.n	801b87a <scalbn+0x72>
 801b874:	a11c      	add	r1, pc, #112	; (adr r1, 801b8e8 <scalbn+0xe0>)
 801b876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b87a:	a319      	add	r3, pc, #100	; (adr r3, 801b8e0 <scalbn+0xd8>)
 801b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b880:	f7e4 fec2 	bl	8000608 <__aeabi_dmul>
 801b884:	e7e6      	b.n	801b854 <scalbn+0x4c>
 801b886:	1872      	adds	r2, r6, r1
 801b888:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b88c:	428a      	cmp	r2, r1
 801b88e:	dcec      	bgt.n	801b86a <scalbn+0x62>
 801b890:	2a00      	cmp	r2, #0
 801b892:	dd08      	ble.n	801b8a6 <scalbn+0x9e>
 801b894:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b898:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b89c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b8a0:	ec45 4b10 	vmov	d0, r4, r5
 801b8a4:	bd70      	pop	{r4, r5, r6, pc}
 801b8a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b8aa:	da08      	bge.n	801b8be <scalbn+0xb6>
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	a10a      	add	r1, pc, #40	; (adr r1, 801b8d8 <scalbn+0xd0>)
 801b8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8b4:	dac0      	bge.n	801b838 <scalbn+0x30>
 801b8b6:	a10e      	add	r1, pc, #56	; (adr r1, 801b8f0 <scalbn+0xe8>)
 801b8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8bc:	e7bc      	b.n	801b838 <scalbn+0x30>
 801b8be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b8c2:	3236      	adds	r2, #54	; 0x36
 801b8c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b8c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	4b0c      	ldr	r3, [pc, #48]	; (801b900 <scalbn+0xf8>)
 801b8d0:	2200      	movs	r2, #0
 801b8d2:	e7d5      	b.n	801b880 <scalbn+0x78>
 801b8d4:	f3af 8000 	nop.w
 801b8d8:	c2f8f359 	.word	0xc2f8f359
 801b8dc:	01a56e1f 	.word	0x01a56e1f
 801b8e0:	8800759c 	.word	0x8800759c
 801b8e4:	7e37e43c 	.word	0x7e37e43c
 801b8e8:	8800759c 	.word	0x8800759c
 801b8ec:	fe37e43c 	.word	0xfe37e43c
 801b8f0:	c2f8f359 	.word	0xc2f8f359
 801b8f4:	81a56e1f 	.word	0x81a56e1f
 801b8f8:	43500000 	.word	0x43500000
 801b8fc:	ffff3cb0 	.word	0xffff3cb0
 801b900:	3c900000 	.word	0x3c900000
 801b904:	00000000 	.word	0x00000000

0801b908 <floor>:
 801b908:	ec51 0b10 	vmov	r0, r1, d0
 801b90c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b914:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801b918:	2e13      	cmp	r6, #19
 801b91a:	ee10 5a10 	vmov	r5, s0
 801b91e:	ee10 8a10 	vmov	r8, s0
 801b922:	460c      	mov	r4, r1
 801b924:	dc31      	bgt.n	801b98a <floor+0x82>
 801b926:	2e00      	cmp	r6, #0
 801b928:	da14      	bge.n	801b954 <floor+0x4c>
 801b92a:	a333      	add	r3, pc, #204	; (adr r3, 801b9f8 <floor+0xf0>)
 801b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b930:	f7e4 fcb4 	bl	800029c <__adddf3>
 801b934:	2200      	movs	r2, #0
 801b936:	2300      	movs	r3, #0
 801b938:	f7e5 f8f6 	bl	8000b28 <__aeabi_dcmpgt>
 801b93c:	b138      	cbz	r0, 801b94e <floor+0x46>
 801b93e:	2c00      	cmp	r4, #0
 801b940:	da53      	bge.n	801b9ea <floor+0xe2>
 801b942:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801b946:	4325      	orrs	r5, r4
 801b948:	d052      	beq.n	801b9f0 <floor+0xe8>
 801b94a:	4c2d      	ldr	r4, [pc, #180]	; (801ba00 <floor+0xf8>)
 801b94c:	2500      	movs	r5, #0
 801b94e:	4621      	mov	r1, r4
 801b950:	4628      	mov	r0, r5
 801b952:	e024      	b.n	801b99e <floor+0x96>
 801b954:	4f2b      	ldr	r7, [pc, #172]	; (801ba04 <floor+0xfc>)
 801b956:	4137      	asrs	r7, r6
 801b958:	ea01 0307 	and.w	r3, r1, r7
 801b95c:	4303      	orrs	r3, r0
 801b95e:	d01e      	beq.n	801b99e <floor+0x96>
 801b960:	a325      	add	r3, pc, #148	; (adr r3, 801b9f8 <floor+0xf0>)
 801b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b966:	f7e4 fc99 	bl	800029c <__adddf3>
 801b96a:	2200      	movs	r2, #0
 801b96c:	2300      	movs	r3, #0
 801b96e:	f7e5 f8db 	bl	8000b28 <__aeabi_dcmpgt>
 801b972:	2800      	cmp	r0, #0
 801b974:	d0eb      	beq.n	801b94e <floor+0x46>
 801b976:	2c00      	cmp	r4, #0
 801b978:	bfbe      	ittt	lt
 801b97a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b97e:	4133      	asrlt	r3, r6
 801b980:	18e4      	addlt	r4, r4, r3
 801b982:	ea24 0407 	bic.w	r4, r4, r7
 801b986:	2500      	movs	r5, #0
 801b988:	e7e1      	b.n	801b94e <floor+0x46>
 801b98a:	2e33      	cmp	r6, #51	; 0x33
 801b98c:	dd0b      	ble.n	801b9a6 <floor+0x9e>
 801b98e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b992:	d104      	bne.n	801b99e <floor+0x96>
 801b994:	ee10 2a10 	vmov	r2, s0
 801b998:	460b      	mov	r3, r1
 801b99a:	f7e4 fc7f 	bl	800029c <__adddf3>
 801b99e:	ec41 0b10 	vmov	d0, r0, r1
 801b9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9a6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801b9aa:	f04f 37ff 	mov.w	r7, #4294967295
 801b9ae:	40df      	lsrs	r7, r3
 801b9b0:	4238      	tst	r0, r7
 801b9b2:	d0f4      	beq.n	801b99e <floor+0x96>
 801b9b4:	a310      	add	r3, pc, #64	; (adr r3, 801b9f8 <floor+0xf0>)
 801b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ba:	f7e4 fc6f 	bl	800029c <__adddf3>
 801b9be:	2200      	movs	r2, #0
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	f7e5 f8b1 	bl	8000b28 <__aeabi_dcmpgt>
 801b9c6:	2800      	cmp	r0, #0
 801b9c8:	d0c1      	beq.n	801b94e <floor+0x46>
 801b9ca:	2c00      	cmp	r4, #0
 801b9cc:	da0a      	bge.n	801b9e4 <floor+0xdc>
 801b9ce:	2e14      	cmp	r6, #20
 801b9d0:	d101      	bne.n	801b9d6 <floor+0xce>
 801b9d2:	3401      	adds	r4, #1
 801b9d4:	e006      	b.n	801b9e4 <floor+0xdc>
 801b9d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b9da:	2301      	movs	r3, #1
 801b9dc:	40b3      	lsls	r3, r6
 801b9de:	441d      	add	r5, r3
 801b9e0:	45a8      	cmp	r8, r5
 801b9e2:	d8f6      	bhi.n	801b9d2 <floor+0xca>
 801b9e4:	ea25 0507 	bic.w	r5, r5, r7
 801b9e8:	e7b1      	b.n	801b94e <floor+0x46>
 801b9ea:	2500      	movs	r5, #0
 801b9ec:	462c      	mov	r4, r5
 801b9ee:	e7ae      	b.n	801b94e <floor+0x46>
 801b9f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b9f4:	e7ab      	b.n	801b94e <floor+0x46>
 801b9f6:	bf00      	nop
 801b9f8:	8800759c 	.word	0x8800759c
 801b9fc:	7e37e43c 	.word	0x7e37e43c
 801ba00:	bff00000 	.word	0xbff00000
 801ba04:	000fffff 	.word	0x000fffff

0801ba08 <_init>:
 801ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba0a:	bf00      	nop
 801ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba0e:	bc08      	pop	{r3}
 801ba10:	469e      	mov	lr, r3
 801ba12:	4770      	bx	lr

0801ba14 <_fini>:
 801ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba16:	bf00      	nop
 801ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba1a:	bc08      	pop	{r3}
 801ba1c:	469e      	mov	lr, r3
 801ba1e:	4770      	bx	lr
